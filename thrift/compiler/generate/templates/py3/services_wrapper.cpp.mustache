{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This is a top level C++ file that generates an implementation of the C++
Services interface. That implementation keeps a pointer to a Pyobject, which
is supposed to be the Python handler for that service, as written by the end
user. The life cycle of the handler is managed by the thrift server.
It has lightweight wrappers of each service method (which accept futures)
that pass the python object and a promise return code into the functions
defined in ServicesCallbacks, along with appropriate arguments.

}}
{{> common/AutoGeneratedC}}

#include <{{program:includePrefix}}gen-py3/{{program:name}}/services_wrapper.h>
{{#program:hasServiceFunctions?}}
{{! This one is generated by cython rather than thrift:  If there are no
    functions (empty service), then it will not exist
}}
#include <{{program:includePrefix}}gen-py3/{{program:name}}/services_api.h>
{{/program:hasServiceFunctions?}}
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

{{#program:cppNamespaces}}namespace {{value}} {
{{/program:cppNamespaces}}
{{#program:services}}

{{^service:extends?}}
{{service:name}}Wrapper::{{service:name}}Wrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    {{#program:hasServiceFunctions?}}
    import_{{#program:py3Namespaces}}{{value}}__{{/program:py3Namespaces}}{{program:name}}__services();
    {{/program:hasServiceFunctions?}}
  }

{{/service:extends?}}
{{#service:extends?}}
{{service:name}}Wrapper::{{service:name}}Wrapper(PyObject *obj, folly::Executor* exc)
  : {{#service:extends}}::{{#service:cppNamespaces}}{{value}}::{{/service:cppNamespaces}}{{service:name}}Wrapper(obj, exc){{/service:extends}}
  {
    {{#program:hasServiceFunctions?}}
    import_{{#program:py3Namespaces}}{{value}}__{{/program:py3Namespaces}}{{program:name}}__services();
    {{/program:hasServiceFunctions?}}
  }
{{/service:extends?}}

{{#service:supportedFunctions}}
void {{service:name}}Wrapper::async_{{#function:eb}}eb{{/function:eb}}{{^function:eb}}tm{{/function:eb}}_{{function:cppName}}(
  {{> services/CppHandlerCallbackType}} callback{{#function:args}}
    , {{#field:type}}{{!
            }}{{^function:stack_arguments?}}{{> types/CppArgType}}{{/function:stack_arguments?}}{{!
            }}{{#function:stack_arguments?}}{{> types/CppStackArgType}}{{/function:stack_arguments?}}{{!
        }}{{/field:type}} {{field:py_name}}{{#last?}}
{{/last?}}{{/function:args}}) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback){{#function:args}},
     {{#field:type}}{{> CppFieldCapture}}{{/field:type}}{{/function:args}}
    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<{{!
            }}{{#function:return_type}}{{> services/CppReturnType}}{{/function:return_type}}>();
        call_cy_{{service:name}}_{{function:name}}(
            this->if_object,
            ctx,
            std::move(promise){{#function:args}}{{#field:type}},
            {{> CppPassField}}
{{/field:type}}{{/function:args}}
        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<{{!
            }}{{#function:return_type}}{{> services/CppReturnType}}{{/function:return_type}}>&& t) {
          (void)t;
          {{^function:oneway?}}callback->complete(std::move(t));{{/function:oneway?}}
        });
    });
}
{{/service:supportedFunctions}}
{{#service:interactions}}
std::unique_ptr<{{service:parent_service_name}}SvIf::{{service:name}}If> {{service:parent_service_name}}Wrapper::create{{service:name}}() {
  throw std::runtime_error("Py3 server doesn't support interactions.");
}
{{/service:interactions}}
std::shared_ptr<apache::thrift::ServerInterface> {{service:name}}Interface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<{{service:name}}Wrapper>(if_object, exc);
}
{{^last?}}

{{/last?}}
{{/program:services}}{{!
}}{{#program:cppNamespaces}}
} // namespace {{value}}
{{/program:cppNamespaces}}
