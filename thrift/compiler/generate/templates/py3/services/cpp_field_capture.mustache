{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

defines how a variable in a field should be passed into another c++ function
from the current function. ie, when calling some_func(a, b, c), the variables
a, b, and c would be written using this file. Most variables can be passed
as themselves by value, but the complex types are unique_ptr values and
need to be moved to the called function.

}}{{#type:bool?}}{{field:py_name}}{{/type:bool?}}{{!
}}{{#type:byte?}}{{field:py_name}}{{/type:byte?}}{{!
}}{{#type:i16?}}{{field:py_name}}{{/type:i16?}}{{!
}}{{#type:i32?}}{{field:py_name}}{{/type:i32?}}{{!
}}{{#type:i64?}}{{field:py_name}}{{/type:i64?}}{{!
}}{{#type:double?}}{{field:py_name}}{{/type:double?}}{{!
}}{{#type:float?}}{{field:py_name}}{{/type:float?}}{{!
}}{{#type:string?}}{{field:py_name}} = std::move({{field:py_name}}){{/type:string?}}{{!
}}{{#type:binary?}}{{field:py_name}} = {{!
    }}{{^type:iobufRef?}}std::move({{field:py_name}}){{/type:iobufRef?}}{{!
    }}{{#type:iobufRef?}}{{!
        }}{{#function:stack_arguments?}}{{field:py_name}}->clone(){{/function:stack_arguments?}}{{!
        }}{{^function:stack_arguments?}}std::move({{field:py_name}}){{/function:stack_arguments?}}{{!
    }}{{/type:iobufRef?}}{{!
}}{{/type:binary?}}{{!
}}{{#type:struct?}}{{field:py_name}} = std::move({{field:py_name}}){{/type:struct?}}{{!
}}{{#type:list?}}{{field:py_name}} = std::move({{field:py_name}}){{/type:list?}}{{!
}}{{#type:set?}}{{field:py_name}} = std::move({{field:py_name}}){{/type:set?}}{{!
}}{{#type:map?}}{{field:py_name}} = std::move({{field:py_name}}){{/type:map?}}{{!
}}{{#type:enum?}}{{field:py_name}}{{/type:enum?}}
