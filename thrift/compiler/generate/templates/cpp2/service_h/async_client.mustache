<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%^service:interaction?%>class <%service:name%>AsyncClient : public <%#service:extends%><% > common/namespace_cpp2%><%service:name%>AsyncClient<%/service:extends%><%^service:extends%>apache::thrift::GeneratedAsyncClient<%/service:extends%> {<%/service:interaction?%><%!
%><%#service:interaction?%>class <%service:name%> final : public apache::thrift::InteractionHandle {
  using apache::thrift::InteractionHandle::InteractionHandle;
  friend class <%service:parent_service_name%>AsyncClient;<%/service:interaction?%>
 public:
<%^service:interaction?%>  using <%#service:extends%><% > common/namespace_cpp2%><%service:name%>AsyncClient::<%service:name%>AsyncClient<%/service:extends%><%^service:extends%>apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient<%/service:extends%>;<%/service:interaction?%>

  char const* getServiceName() const noexcept override {
    return "<%service:parent_service_name%>";
  }

<%#service:interactions%>
<% > service_h/async_client%>
<%/service:interactions%>

<%#service:functions%><%#function:return_type%>
<%#function:starts_interaction?%>
  <%type:name%> <%function:cpp_name%>();
<%/function:starts_interaction?%><%^function:starts_interaction?%>
<%^function:returns_sink?%>
<%^service:reduced_client?%>
  virtual void <%function:cpp_name%>(std::unique_ptr<apache::thrift::RequestCallback> callback<%function:comma%><% > service_common/function_param_list_const%>);
  virtual<%/service:reduced_client?%> void <%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback<%function:comma%><% > service_common/function_param_list_const%>);
<%/function:returns_sink?%>
 protected:
  void <%function:cpp_name%>Impl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, <% > types/callback_type%> callback<%function:comma%><% > service_common/function_param_list_const%>);
 public:
<%^function:returns_sink?%>

<%^type:resolves_to_complex_return?%>
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%><% > types/semi_type%> sync_<%function:cpp_name%>(<% > service_common/function_param_list_const%>);
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%><% > types/semi_type%> sync_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
<%/type:resolves_to_complex_return?%>
<%#type:resolves_to_complex_return?%>
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%>void sync_<%function:cpp_name%>(<%type:cpp_type%>& _return<%function:comma%><% > service_common/function_param_list_const%>);
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%>void sync_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions, <%type:cpp_type%>& _return<%function:comma%><% > service_common/function_param_list_const%>);
<%/type:resolves_to_complex_return?%>

<%^service:reduced_client?%><%^type:streamresponse?%>
  virtual folly::Future<<% > types/service_type_semi%>> future_<%function:cpp_name%>(<% > service_common/function_param_list_const%>);
<%/type:streamresponse?%><%/service:reduced_client?%>
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%>folly::SemiFuture<<% > types/service_type_semi%>> semifuture_<%function:cpp_name%>(<% > service_common/function_param_list_const%>);
<%^service:reduced_client?%><%^type:streamresponse?%>
  virtual folly::Future<<% > types/service_type_semi%>> future_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
<%/type:streamresponse?%><%/service:reduced_client?%>
  <%^service:reduced_client?%>virtual <%/service:reduced_client?%>folly::SemiFuture<<% > types/service_type_semi%>> semifuture_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
<%^function:oneway?%>
<%^service:reduced_client?%>
<%^type:streamresponse?%>
  virtual folly::Future<std::pair<<% > types/service_type_semi%>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
<%/type:streamresponse?%>
  virtual folly::SemiFuture<std::pair<<% > types/service_type_semi%>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
<%#type:sync_methods_return_try?%>
  FOLLY_NODISCARD [[deprecated("To be replaced by new API soon")]] virtual folly::Try<apache::thrift::RpcResponseComplete<<% > types/semi_type%>>> sync_complete_<%function:cpp_name%>(
      apache::thrift::RpcOptions& rpcOptions<%function:comma%> <% > service_common/function_param_list_const%>);
<%/type:sync_methods_return_try?%>
<%/service:reduced_client?%>
<%/function:oneway?%>

#if FOLLY_HAS_COROUTINES
  template <int = 0><%!
  Coroutine functions are inline templates to prevent compile time and binary size regression
  %>
  folly::coro::Task<<% > types/semi_type%>> co_<%function:cpp_name%>(<% > service_common/function_param_list_const%>) {
    return co_<%function:cpp_name%><false>(nullptr<%function:comma%><% > service_common/param_list%>);
  }
  template <int = 0>
  folly::coro::Task<<% > types/semi_type%>> co_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
    return co_<%function:cpp_name%><true>(&rpcOptions<%function:comma%><% > service_common/param_list%>);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<<% > types/semi_type%>> co_<%function:cpp_name%>(apache::thrift::RpcOptions* rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<<%#function:oneway?%>true<%/function:oneway?%><%^function:oneway?%>false<%/function:oneway?%>> callback(&returnState);
    <%^function:oneway?%>
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    <%/function:oneway?%>
    auto [ctx, header] = <%function:cpp_name%>Ctx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<<%#function:oneway?%>true<%/function:oneway?%><%^function:oneway?%>false<%/function:oneway?%>>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
  <%^function:returns_stream?%>
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
  <%/function:returns_stream?%><%#function:returns_stream?%>
    auto wrappedCallback = apache::thrift::createStreamClientCallback(
        apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback),
      hasRpcOptions ? rpcOptions->getBufferOptions() : defaultRpcOptions.getBufferOptions());
  <%/function:returns_stream?%>
    if constexpr (hasRpcOptions) {
      <%function:cpp_name%>Impl(*rpcOptions, std::move(header), ctx.get(), std::move(wrappedCallback)<%function:comma%><% > service_common/param_list%>);
    } else {
      <%function:cpp_name%>Impl(defaultRpcOptions, std::move(header), ctx.get(), std::move(wrappedCallback)<%function:comma%><% > service_common/param_list%>);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
  <%^function:oneway?%>
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::move(ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
    <%#type:void?%>
    if (auto ew = recv_wrapped_<%function:cpp_name%>(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    <%/type:void?%>
    <%^type:void?%>
    <% > types/semi_type%> _return;
    if (auto ew = recv_wrapped_<%function:cpp_name%>(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
    <%/type:void?%>
  <%/function:oneway?%>
  }
 public:
#endif // FOLLY_HAS_COROUTINES

<%^service:reduced_client?%>
<%^type:streamresponse?%>
  virtual void <%function:cpp_name%>(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback<%function:comma%><% > service_common/function_param_list_const%>);
<%/type:streamresponse?%>

<%/service:reduced_client?%>
<%/function:returns_sink?%><%#function:returns_sink?%>
#if FOLLY_HAS_COROUTINES
  folly::coro::Task<<% > types/semi_type%>> co_<%function:cpp_name%>(<% > service_common/function_param_list_const%>);
  folly::coro::Task<<% > types/semi_type%>> co_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>);
#endif // FOLLY_HAS_COROUTINES
<%/function:returns_sink?%>

<%#type:void?%>
<%^function:oneway?%>
  static folly::exception_wrapper recv_wrapped_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
  static void recv_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
<%^service:reduced_client?%>
  // Mock friendly virtual instance method
  virtual void recv_instance_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
<%/service:reduced_client?%>
<%/function:oneway?%>
<%/type:void?%>
<%^type:void?%>
  static folly::exception_wrapper recv_wrapped_<%function:cpp_name%>(<% > types/semi_type%>& _return, ::apache::thrift::ClientReceiveState& state);
<%^type:resolves_to_complex_return?%>
  static <% > types/semi_type%> recv_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
<%^service:reduced_client?%>
  // Mock friendly virtual instance method
  virtual <% > types/semi_type%> recv_instance_<%function:cpp_name%>(::apache::thrift::ClientReceiveState& state);
<%/service:reduced_client?%>
<%/type:resolves_to_complex_return?%><%#type:resolves_to_complex_return?%>
  static void recv_<%function:cpp_name%>(<%type:cpp_type%>& _return, ::apache::thrift::ClientReceiveState& state);
<%^service:reduced_client?%>
  // Mock friendly virtual instance method
  virtual void recv_instance_<%function:cpp_name%>(<%type:cpp_type%>& _return, ::apache::thrift::ClientReceiveState& state);
<%/service:reduced_client?%>
<%/type:resolves_to_complex_return?%>
<%^service:reduced_client?%>
  virtual folly::exception_wrapper recv_instance_wrapped_<%function:cpp_name%>(<% > types/semi_type%>& _return, ::apache::thrift::ClientReceiveState& state);
<%/service:reduced_client?%>
<%/type:void?%>
 private:
  template <typename Protocol_>
  void <%function:cpp_name%>T(Protocol_* prot, const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::transport::THeader> header, apache::thrift::ContextStack* contextStack, <% > types/callback_type%> callback<%function:comma%><% > service_common/function_param_list_const%>);
  std::pair<std::unique_ptr<::apache::thrift::ContextStack>, std::shared_ptr<::apache::thrift::transport::THeader>> <%function:cpp_name%>Ctx(apache::thrift::RpcOptions* rpcOptions);
 public:
<%/function:starts_interaction?%><%/function:return_type%><%/service:functions%>
};
