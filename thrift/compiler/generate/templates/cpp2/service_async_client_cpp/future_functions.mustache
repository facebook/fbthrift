<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%>
<%^service:reduced_client?%>
<%^type:streamresponse?%>
folly::Future<<% > types/service_type_semi%>> <% > service_common/client_class_name%>::future_<%function:cpp_name%>(<% > service_common/function_param_list_const%>) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_<%function:cpp_name%>(rpcOptions<%function:comma%><% > service_common/param_list%>);
}
<%/type:streamresponse?%>

<%/service:reduced_client?%>
folly::SemiFuture<<% > types/service_type_semi%>> <% > service_common/client_class_name%>::semifuture_<%function:cpp_name%>(<% > service_common/function_param_list_const%>) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_<%function:cpp_name%>(rpcOptions<%function:comma%><% > service_common/param_list%>);
}
<%^service:reduced_client?%>

<%^type:streamresponse?%>
folly::Future<<% > types/service_type_semi%>> <% > service_common/client_class_name%>::future_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
  folly::Promise<<% > types/service_type_semi%>> promise;
  auto future = promise.getFuture();
<%#function:oneway?%>
  auto callback = std::make_unique<apache::thrift::OneWayFutureCallback>(std::move(promise), channel_);
<%/function:oneway?%>
<%^function:oneway?%>
  auto callback = std::make_unique<apache::thrift::FutureCallback<<% > types/service_type_semi%>>>(std::move(promise), recv_wrapped_<%function:cpp_name%>, channel_);
<%/function:oneway?%>
  <%function:cpp_name%>(rpcOptions, std::move(callback)<%function:comma%><% > service_common/param_list%>);
  return future;
}
<%/type:streamresponse?%>
<%/service:reduced_client?%>

folly::SemiFuture<<% > types/service_type_semi%>> <% > service_common/client_class_name%>::semifuture_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
<%#function:oneway?%>
  auto callbackAndFuture = makeOneWaySemiFutureCallback(channel_);
<%/function:oneway?%>
<%^function:oneway?%>
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_<%function:cpp_name%>, channel_);
<%/function:oneway?%>
  auto callback = std::move(callbackAndFuture.first);
  <%function:cpp_name%>(rpcOptions, std::move(callback)<%function:comma%><% > service_common/param_list%>);
  return std::move(callbackAndFuture.second);
}

<%^function:oneway?%><%^service:reduced_client?%>
<%^type:streamresponse?%>
folly::Future<std::pair<<% > types/service_type_semi%>, std::unique_ptr<apache::thrift::transport::THeader>>> <% > service_common/client_class_name%>::header_future_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
  folly::Promise<std::pair<<% > types/service_type_semi%>, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<<% > types/service_type_semi%>>>(std::move(promise), recv_wrapped_<%function:cpp_name%>, channel_);
  <%function:cpp_name%>(rpcOptions, std::move(callback)<%function:comma%><% > service_common/param_list%>);
  return future;
}
<%/type:streamresponse?%>

folly::SemiFuture<std::pair<<% > types/service_type_semi%>, std::unique_ptr<apache::thrift::transport::THeader>>> <% > service_common/client_class_name%>::header_semifuture_<%function:cpp_name%>(apache::thrift::RpcOptions& rpcOptions<%function:comma%><% > service_common/function_param_list_const%>) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_<%function:cpp_name%>, channel_);
  auto callback = std::move(callbackAndFuture.first);
  <%function:cpp_name%>(rpcOptions, std::move(callback)<%function:comma%><% > service_common/param_list%>);
  return std::move(callbackAndFuture.second);
}
<%/service:reduced_client?%><%/function:oneway?%>
