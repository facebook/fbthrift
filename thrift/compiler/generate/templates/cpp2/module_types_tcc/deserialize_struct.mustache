<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%><%^program:tablebased?%>
template <class Protocol_>
void <%struct:name%>::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<%#struct:indexing?%>WithIndex<%/struct:indexing?%><Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;

<%#program:enforce_required?%><%#struct:fields%><%#field:required?%>
  bool isset_<%field:cpp_name%> = false;
<%/field:required?%><%/struct:fields%><%/program:enforce_required?%>
<%#struct:fields%><%#field:lazy?%>
  bool __fbthrift_has_lazy_field_<%field:cpp_name%> = false;
<%/field:lazy?%><%/struct:fields%>

<%#struct:fields?%>
<%#struct:fields%>
<%#field:type%>
<%#first?%>
  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          <%field:key%>,
          apache::thrift::protocol::<% > module_types_tcc/struct_type%>))) {
    goto _loop;
  }
<%/first?%>
_readField_<%field:cpp_name%>:
<%#field:lazy?%>
  __fbthrift_has_lazy_field_<%field:cpp_name%> = true;
  __fbthrift_read_field_<%field:cpp_name%>();
  if (auto iobuf = _readState.tryFastSkip(
          iprot,
          <%field:key%>,
          apache::thrift::protocol::<% > module_types_tcc/struct_type%>,
          apache::thrift::fixed_cost_skip_v<Protocol_,
                                            <% > common/type_class%>,
                                            <% > types/type%>>)) {
    __fbthrift_serializedData_.<%field:cpp_name%> = *iobuf;
    __fbthrift_isDeserialized_.<%field:cpp_name%> = false;
  } else {
    __fbthrift_serializedData_.<%field:cpp_name%>.clear();
    __fbthrift_isDeserialized_.<%field:cpp_name%> = true;
<%/field:lazy?%>
<%^field:lazy?%>
  {
<%/field:lazy?%>
    <% > module_types_tcc/deserialize_field%>

  }
<%#program:enforce_required?%><%#field:required?%>
  isset_<%field:cpp_name%> = true;
<%/field:required?%><%/program:enforce_required?%>
<%^field:required?%><%^field:cpp_ref?%>
  THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  this->__isset.<%field:cpp_name%> = true;
  THRIFT_IGNORE_ISSET_USE_WARNING_END
<%/field:cpp_ref?%><%/field:required?%>

<%^last?%>
<%#field:next_field_type%>
  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          <%field:key%>,
          <%field:next_field_key%>,
          apache::thrift::protocol::<% > module_types_tcc/struct_type%>))) {
    goto _loop;
  }
<%/field:next_field_type%>
<%/last?%>
<%#last?%>
  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          <%field:key%>,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }
<%/last?%>
<%/field:type%>
<%/struct:fields%>
<%/struct:fields?%>
<%^struct:fields?%>
  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }
<%/struct:fields?%>

_end:
  _readState.readStructEnd(iprot);

  <%#program:enforce_required?%><%#struct:fields%><%#field:required?%>
  if (!isset_<%field:cpp_name%>) {
    TProtocolException::throwMissingRequiredField("<%field:name%>", "<%struct:name%>");
  }
  <%/field:required?%><%/struct:fields%><%/program:enforce_required?%>
  <%#struct:fields%><%#field:lazy?%>
  if (__fbthrift_protocol_ != iprot->protocolType()
      && !__fbthrift_has_lazy_field_<%field:cpp_name%>
      && !__fbthrift_isDeserialized_.<%field:cpp_name%>) {
    <%! deserialize lazy field if it is not presented in serialized data %>
    __fbthrift_read_field_<%field:cpp_name%>();
  }
  <%/field:lazy?%><%/struct:fields%>
<%#struct:lazy_fields?%>
  __fbthrift_protocol_ = iprot->protocolType();
<%/struct:lazy_fields?%>
  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<<%struct:name%>>>();
  }

  switch (_readState.fieldId) {
<%#struct:fields%><%#field:type%>
    case <%field:key%>:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::<% > module_types_tcc/struct_type%>))) {
        goto _readField_<%field:cpp_name%>;
      } else {
        goto _skip;
      }
    }
<%/field:type%><%/struct:fields%>
    default:
    {
<%#struct:fields?%>
_skip:
<%/struct:fields?%>
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}
<%#struct:fields%>
<%#field:type%>
<%#field:lazy?%>
template<class ProtocolReader>
void <%struct:name%>::__fbthrift_read_field_<%field:cpp_name%>_impl() const {
  ProtocolReader reader;
  reader.setInput(&__fbthrift_serializedData_.<%field:cpp_name%>);
  ProtocolReader *iprot = &reader;
  apache::thrift::detail::ProtocolReaderStructReadState<ProtocolReader> _readState;
  <% > module_types_tcc/deserialize_field%>
}
<%/field:lazy?%>
<%/field:type%>
<%/struct:fields%>
<%/program:tablebased?%>
<%#program:tablebased?%>
template <class Protocol_>
void <%struct:name%>::readNoXfer(Protocol_* iprot) {
  ::apache::thrift::detail::read(
    iprot,
    ::apache::thrift::detail::toStructInfo(
      <% > common/namespace_cpp2%>__fbthrift_struct_info_<%struct:name%>
    ),
    this);
}
<%/program:tablebased?%>
<%!
%>
