{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}
{{> AutoGenerated}}

package {{service:javaPackage}};

import com.facebook.nifty.client.RequestChannel;
import com.facebook.swift.codec.*;
import com.facebook.swift.service.*;
import com.facebook.swift.service.metadata.*;
import com.facebook.thrift.client.*;
import com.facebook.thrift.util.FutureUtil;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.lang.reflect.Method;
import java.util.*;
import org.apache.thrift.ProtocolId;
import reactor.core.publisher.Mono;

@SwiftGenerated
public class {{service:javaCapitalName}}AsyncClientImpl extends {{^service:extends}}AbstractThriftClient{{/service:extends}}{{#service:extends}}{{service:javaPackage}}.{{service:javaCapitalName}}AsyncClientImpl{{/service:extends}} implements {{service:javaCapitalName}}.Async {

    // Method Handlers
    {{#service:supportedFunctions}}
    private ThriftMethodHandler {{function:javaName}}MethodHandler;
    {{/service:supportedFunctions}}
    {{#service:interactions}}
    // Interaction Handlers
    {{#service:supportedFunctions}}
    private ThriftMethodHandler {{function:javaName}}IMethodHandler;
    {{/service:supportedFunctions}}
    {{/service:interactions}}

    // Method Exceptions
    {{#service:supportedFunctions}}
    private static final Class[] {{function:javaName}}Exceptions = new Class[] {
        {{#function:exceptions}}{{#field:type}}{{> BoxedType}}.class{{/field:type}}, {{/function:exceptions}}org.apache.thrift.TException.class};
    {{/service:supportedFunctions}}
    {{#service:interactions}}
    // Interaction Exceptions
    {{#service:supportedFunctions}}
    private static final Class[] {{function:javaName}}IExceptions = new Class[] {
        {{#function:exceptions}}{{#field:type}}{{> BoxedType}}.class{{/field:type}}, {{/function:exceptions}}org.apache.thrift.TException.class};
    {{/service:supportedFunctions}}
    {{/service:interactions}}

    public {{service:javaCapitalName}}AsyncClientImpl(
        RequestChannel channel,
        Map<Method, ThriftMethodHandler> methods,
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        List<? extends ThriftClientEventHandler> eventHandlers) {
      {{^service:extends}}super(channel, headers, persistentHeaders, eventHandlers);{{/service:extends}}{{#service:extends}}super(channel, methods, headers, persistentHeaders, eventHandlers);{{/service:extends}}

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      {{#service:supportedFunctions}}
      {{function:javaName}}MethodHandler = methodHandlerMap.get("{{function:javaName}}");
      {{/service:supportedFunctions}}
      {{#service:interactions}}
      // Set interaction handlers
      {{#service:supportedFunctions}}
      {{function:javaName}}IMethodHandler = methodHandlerMap.get("{{function:javaName}}");
      {{/service:supportedFunctions}}
      {{/service:interactions}}
    }

    public {{service:javaCapitalName}}AsyncClientImpl(
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        Mono<? extends RpcClient> rpcClient,
        ThriftServiceMetadata serviceMetadata,
        ThriftCodecManager codecManager,
        ProtocolId protocolId,
        Map<Method, ThriftMethodHandler> methods) {
      {{^service:extends}}super(headers, persistentHeaders, rpcClient, serviceMetadata, codecManager, protocolId);{{/service:extends}}{{#service:extends}}super(headers, persistentHeaders, rpcClient, serviceMetadata, codecManager, protocolId, methods);{{/service:extends}}

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      {{#service:supportedFunctions}}
      {{function:javaName}}MethodHandler = methodHandlerMap.get("{{function:javaName}}");
      {{/service:supportedFunctions}}
      {{#service:interactions}}
      // Set interaction handlers
      {{#service:supportedFunctions}}
      {{function:javaName}}IMethodHandler = methodHandlerMap.get("{{function:javaName}}");
      {{/service:supportedFunctions}}
      {{/service:interactions}}
    }

    @java.lang.Override
    public void close() {
        super.close();
    }

    {{#service:supportedFunctions}}

    @java.lang.Override
    public ListenableFuture<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}> {{function:javaName}}({{#function:args}}
        {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}}{{^last?}},{{/last?}}{{/function:args}}) {
        return {{function:javaName}}({{#function:args}}{{field:javaName}}, {{/function:args}}RpcOptions.EMPTY);
    }

    @java.lang.Override
    public ListenableFuture<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}> {{function:javaName}}({{#function:args}}
        {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}},{{/function:args}}
        RpcOptions rpcOptions) {
        return FutureUtil.transform({{function:javaName}}Wrapper({{#function:args}}{{field:javaName}}, {{/function:args}}rpcOptions));
    }

    @java.lang.Override
    public ListenableFuture<ResponseWrapper<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}>> {{function:javaName}}Wrapper({{#function:args}}
        {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}},{{/function:args}}
        RpcOptions rpcOptions) {
        try {
          return executeWrapperWithOptions({{function:javaName}}MethodHandler, {{function:javaName}}Exceptions, rpcOptions{{#function:args}}, {{field:javaName}}{{/function:args}});
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }
    {{/service:supportedFunctions}}
    {{#service:interactions}}

    public class {{service:name}}Impl implements {{service:name}} {
      private final long interactionId;

      {{service:name}}Impl(long interactionId) {
        this.interactionId = interactionId;
      }

      {{#service:supportedFunctions}}
      @java.lang.Override
      public ListenableFuture<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}> {{function:javaName}}({{#function:args}}
          {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}},{{/function:args}}
          RpcOptions rpcOptions) {
          return FutureUtil.transform({{function:javaName}}Wrapper({{#function:args}}{{field:javaName}}, {{/function:args}}rpcOptions));
      }

      @java.lang.Override
      public ListenableFuture<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}> {{function:javaName}}({{#function:args}}
        final {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}}{{^last?}},{{/last?}}{{/function:args}}) {
        return FutureUtil.transform({{function:javaName}}Wrapper({{#function:args}}{{field:javaName}}, {{/function:args}}RpcOptions.EMPTY));
      }

      @java.lang.Override
      public ListenableFuture<ResponseWrapper<{{#function:return_type}}{{> BoxedType}}{{/function:return_type}}>> {{function:javaName}}Wrapper({{#function:args}}
        final {{#field:type}}{{> Type}}{{/field:type}} {{field:javaName}},{{/function:args}}
        RpcOptions _rpcOptions) {
        try {
          RpcOptions rpcOptions = updateRpcOptions(_rpcOptions);
          return executeWrapperWithOptions({{function:javaName}}IMethodHandler, {{function:javaName}}IExceptions, rpcOptions{{#function:args}}, {{field:javaName}}{{/function:args}});
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
      }

      {{/service:supportedFunctions}}
      @java.lang.Override
      public void close() {
        activeInteractions.remove(interactionId);
      }

      private RpcOptions updateRpcOptions(RpcOptions _rpcOptions) {
        RpcOptions.Builder builder = new RpcOptions.Builder(_rpcOptions);
        if (activeInteractions.contains(interactionId)) {
          builder.setInteractionId(interactionId);
        } else {
          builder.setCreateInteractionId(interactionId).setInteractionId(0L);
          activeInteractions.add(interactionId);
        }
        return builder.build();
      }
    }

    public {{service:name}} create{{service:name}}() {
        return new {{service:name}}Impl(interactionCounter.incrementAndGet());
    }
    {{^last?}}

    {{/last?}}
    {{/service:interactions}}
}
