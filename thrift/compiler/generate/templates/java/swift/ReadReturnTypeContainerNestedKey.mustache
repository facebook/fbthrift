{{!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{#type:typedef?}}{{!
    }}{{#type:isMapKey?}}{{#type:typedef_type}}{{type:setIsMapKey}}{{> ReadReturnTypeContainerNestedValue}}{{/type:typedef_type}}{{/type:isMapKey?}}{{!
    }}{{#type:isMapValue?}}{{#type:typedef_type}}{{type:setIsMapValue}}{{> ReadReturnTypeContainerNestedValue}}{{/type:typedef_type}}{{/type:isMapValue?}}{{!
    }}{{^type:isMapKey?}}{{^type:isMapValue?}}{{#type:typedef_type}}{{> ReadReturnTypeContainerNestedValue}}{{/type:typedef_type}}{{/type:isMapValue?}}{{/type:isMapKey?}}{{!
}}{{/type:typedef?}}{{!
}}{{^type:typedef?}}{{!

}}{{#type:set?}}{{!
            }}{{> BoxedType}} _key{{function:nestedDepth}};
            {
            TSet _set{{function:nestedDepth}} = oprot.readSetBegin();
            {{^type:javaType}}_key{{function:nestedDepth}} = new Hash{{> BoxedType}}(Math.max(0, _set{{function:nestedDepth}}.size));{{/type:javaType}}{{!
            }}{{#type:javaType}}_key{{function:nestedDepth}} = new {{type:javaType}}();{{/type:javaType}}{{!
            }}
            for (int _i{{function:nestedDepth}} = 0; (_set{{function:nestedDepth}}.size < 0) ? oprot.peekSet() : (_i{{function:nestedDepth}} < _set{{function:nestedDepth}}.size); _i{{function:nestedDepth}}++) {
                {{function:setIsNested}}
                {{#type:set_elem_type}}
                {{#type:isContainer?}}
                {{function:nestedDepth++}}{{> ReadReturnTypeContainerNestedValue }}{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{^type:isContainer?}}
                {{function:nestedDepth++}}{{> Type}} _value{{function:nestedDepth}} = {{> ReadReturnType}};{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{function:nestedDepth++}}_key{{function:prevNestedDepth}}.add(_value{{function:nestedDepth}});{{function:nestedDepth--}}
                {{/type:set_elem_type}}
            }
            oprot.readSetEnd();
            }
{{/type:set?}}{{!

}}{{#type:list?}}{{!
            }}{{> BoxedType}} _key{{function:nestedDepth}};
            {
            TList _list{{function:nestedDepth}} = oprot.readListBegin();
            {{^type:javaType}}_key{{function:nestedDepth}} = new Array{{> BoxedType}}(Math.max(0, _list{{function:nestedDepth}}.size));{{/type:javaType}}{{!
            }}{{#type:javaType}}_key{{function:nestedDepth}} = new {{type:javaType}}();{{/type:javaType}}{{!
            }}
            for (int _i{{function:nestedDepth}} = 0; (_list{{function:nestedDepth}}.size < 0) ? oprot.peekList() : (_i{{function:nestedDepth}} < _list{{function:nestedDepth}}.size); _i{{function:nestedDepth}}++) {
                {{function:setIsNested}}
                {{#type:list_elem_type}}
                {{#type:isContainer?}}
                {{function:nestedDepth++}}{{> ReadReturnTypeContainerNestedValue }}{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{^type:isContainer?}}
                {{function:nestedDepth++}}{{> Type}} _value{{function:nestedDepth}} = {{> ReadReturnType}};{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{function:nestedDepth++}}_key{{function:prevNestedDepth}}.add(_value{{function:nestedDepth}});{{function:nestedDepth--}}
                {{/type:list_elem_type}}
            }
            oprot.readListEnd();
            }
{{/type:list?}}{{!

}}{{#type:map?}}{{!
            }}{{> BoxedType}} _key{{function:nestedDepth}};
            {
            TMap _map{{function:nestedDepth}} = oprot.readMapBegin();
            {{^type:javaType}}_key{{function:nestedDepth}} = new Hash{{> BoxedType}}(Math.max(0, _map{{function:nestedDepth}}.size));{{/type:javaType}}{{!
            }}{{#type:javaType}}_key{{function:nestedDepth}} = new {{type:javaType}}();{{/type:javaType}}{{!
            }}
            for (int _i{{function:nestedDepth}} = 0; (_map{{function:nestedDepth}}.size < 0) ? oprot.peekMap() : (_i{{function:nestedDepth}} < _map{{function:nestedDepth}}.size); _i{{function:nestedDepth}}++) {
                {{function:setIsNested}}
                {{#type:key_type}}
                {{#type:isContainer?}}
                {{function:nestedDepth++}}{{> ReadReturnTypeContainerNestedKey }}{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{^type:isContainer?}}
                {{function:nestedDepth++}}{{> Type}} _key{{function:nestedDepth}} = {{> ReadReturnType}};{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{/type:key_type}}

                {{#type:value_type}}
                {{#type:isContainer?}}
                {{function:nestedDepth++}}{{> ReadReturnTypeContainerNestedValue }}{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{^type:isContainer?}}
                {{function:nestedDepth++}}{{> Type}} _value{{function:nestedDepth}} = {{> ReadReturnType}};{{function:nestedDepth--}}
                {{/type:isContainer?}}
                {{/type:value_type}}
                {{function:nestedDepth++}}_key{{function:prevNestedDepth}}.put(_key{{function:nestedDepth}}, _value{{function:nestedDepth}});{{function:nestedDepth--}}
            }
            oprot.readMapEnd();
            }
{{/type:map?}}{{!

}}{{/type:typedef?}}{{!
}}
