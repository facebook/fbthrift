/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct weeks;
struct title;
struct employer;
struct compensation;
struct min;
struct max;
struct a;
struct b;
struct a;
struct b;
struct c;
struct d;
struct a;
struct b;
struct c;
struct a;
struct b;
struct c;
struct i;
struct d;
struct i;
struct d;
struct s;
struct u;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_weeks
#define APACHE_THRIFT_ACCESSOR_weeks
APACHE_THRIFT_DEFINE_ACCESSOR(weeks);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_title
#define APACHE_THRIFT_ACCESSOR_title
APACHE_THRIFT_DEFINE_ACCESSOR(title);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_employer
#define APACHE_THRIFT_ACCESSOR_employer
APACHE_THRIFT_DEFINE_ACCESSOR(employer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_compensation
#define APACHE_THRIFT_ACCESSOR_compensation
APACHE_THRIFT_DEFINE_ACCESSOR(compensation);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_min
#define APACHE_THRIFT_ACCESSOR_min
APACHE_THRIFT_DEFINE_ACCESSOR(min);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_max
#define APACHE_THRIFT_ACCESSOR_max
APACHE_THRIFT_DEFINE_ACCESSOR(max);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_c
#define APACHE_THRIFT_ACCESSOR_c
APACHE_THRIFT_DEFINE_ACCESSOR(c);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i
#define APACHE_THRIFT_ACCESSOR_i
APACHE_THRIFT_DEFINE_ACCESSOR(i);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_d
#define APACHE_THRIFT_ACCESSOR_d
APACHE_THRIFT_DEFINE_ACCESSOR(d);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_u
#define APACHE_THRIFT_ACCESSOR_u
APACHE_THRIFT_DEFINE_ACCESSOR(u);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class EmptyEnum {
};




enum class City {
  NYC = 0,
  MPK = 1,
  SEA = 2,
  LON = 3,
};




enum class Company {
  FACEBOOK = 0,
  WHATSAPP = 1,
  OCULUS = 2,
  INSTAGRAM = 3,
};




} // cpp2

namespace std {
template<> struct hash<::cpp2::EmptyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::EmptyEnum> {};
template<> struct hash<::cpp2::City> :
  ::apache::thrift::detail::enum_hash<::cpp2::City> {};
template<> struct hash<::cpp2::Company> :
  ::apache::thrift::detail::enum_hash<::cpp2::Company> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::EmptyEnum>;

template <> struct TEnumTraits<::cpp2::EmptyEnum> {
  using type = ::cpp2::EmptyEnum;

  static constexpr std::size_t const size = 0;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};


template <> struct TEnumDataStorage<::cpp2::City>;

template <> struct TEnumTraits<::cpp2::City> {
  using type = ::cpp2::City;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::NYC; }
  static constexpr type max() { return type::LON; }
};


template <> struct TEnumDataStorage<::cpp2::Company>;

template <> struct TEnumTraits<::cpp2::Company> {
  using type = ::cpp2::Company;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::FACEBOOK; }
  static constexpr type max() { return type::INSTAGRAM; }
};


}} // apache::thrift

namespace cpp2 {

using _EmptyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<EmptyEnum>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _EmptyEnum_EnumMapFactory::ValuesToNamesMapType _EmptyEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _EmptyEnum_EnumMapFactory::NamesToValuesMapType _EmptyEnum_NAMES_TO_VALUES;

using _City_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<City>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _City_EnumMapFactory::ValuesToNamesMapType _City_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _City_EnumMapFactory::NamesToValuesMapType _City_NAMES_TO_VALUES;

using _Company_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<Company>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _Company_EnumMapFactory::ValuesToNamesMapType _Company_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _Company_EnumMapFactory::NamesToValuesMapType _Company_NAMES_TO_VALUES;

} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Internship;
class Range;
class struct1;
class struct2;
class struct3;
class struct4;
class union1;
class union2;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef ::cpp2::Company MyCompany;
typedef ::std::string MyStringIdentifier;
typedef ::std::int32_t MyIntIdentifier;
typedef ::std::map<::std::string, ::std::string> MyMapIdentifier;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class Internship final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Internship;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Internship() :
      weeks(0),
      employer( ::cpp2::Company::FACEBOOK),
      compensation(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Internship(apache::thrift::FragileConstructor, ::std::int32_t weeks__arg, ::std::string title__arg, ::cpp2::Company employer__arg, double compensation__arg);

  Internship(Internship&&) noexcept;

  Internship(const Internship& src);


  Internship& operator=(Internship&&) noexcept;
  Internship& operator=(const Internship& src);
  void __clear();
 public:
  ::std::int32_t weeks;
 private:
  ::std::string title;
 private:
  ::cpp2::Company employer;
 private:
  double compensation;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool title;
    bool employer;
    bool compensation;
  } __isset = {};

 public:

  bool operator==(const Internship&) const;
  bool operator<(const Internship&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> weeks_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->weeks};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> weeks_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->weeks)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> weeks_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->weeks};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> weeks_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->weeks)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> title_ref() const& {
    return {this->title, __isset.title};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> title_ref() const&& {
    return {std::move(this->title), __isset.title};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> title_ref() & {
    return {this->title, __isset.title};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> title_ref() && {
    return {std::move(this->title), __isset.title};
  }

  template <typename..., typename T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> employer_ref() const& {
    return {this->employer, __isset.employer};
  }

  template <typename..., typename T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> employer_ref() const&& {
    return {std::move(this->employer), __isset.employer};
  }

  template <typename..., typename T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> employer_ref() & {
    return {this->employer, __isset.employer};
  }

  template <typename..., typename T = ::cpp2::Company>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> employer_ref() && {
    return {std::move(this->employer), __isset.employer};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> compensation_ref() const& {
    return {this->compensation, __isset.compensation};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> compensation_ref() const&& {
    return {std::move(this->compensation), __isset.compensation};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> compensation_ref() & {
    return {this->compensation, __isset.compensation};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> compensation_ref() && {
    return {std::move(this->compensation), __isset.compensation};
  }

  ::std::int32_t get_weeks() const {
    return weeks;
  }

  [[deprecated("Use `FOO.weeks_ref() = BAR;` instead of `FOO.set_weeks(BAR);`")]]
  ::std::int32_t& set_weeks(::std::int32_t weeks_) {
    weeks = weeks_;
    return weeks;
  }

  const ::std::string& get_title() const& {
    return title;
  }

  ::std::string get_title() && {
    return std::move(title);
  }

  template <typename T_Internship_title_struct_setter = ::std::string>
  [[deprecated("Use `FOO.title_ref() = BAR;` instead of `FOO.set_title(BAR);`")]]
  ::std::string& set_title(T_Internship_title_struct_setter&& title_) {
    title = std::forward<T_Internship_title_struct_setter>(title_);
    __isset.title = true;
    return title;
  }

  const ::cpp2::Company* get_employer() const& {
    return employer_ref() ? std::addressof(employer) : nullptr;
  }

  ::cpp2::Company* get_employer() & {
    return employer_ref() ? std::addressof(employer) : nullptr;
  }
  ::cpp2::Company* get_employer() && = delete;

  [[deprecated("Use `FOO.employer_ref() = BAR;` instead of `FOO.set_employer(BAR);`")]]
  ::cpp2::Company& set_employer(::cpp2::Company employer_) {
    employer = employer_;
    __isset.employer = true;
    return employer;
  }

  const double* get_compensation() const& {
    return compensation_ref() ? std::addressof(compensation) : nullptr;
  }

  double* get_compensation() & {
    return compensation_ref() ? std::addressof(compensation) : nullptr;
  }
  double* get_compensation() && = delete;

  [[deprecated("Use `FOO.compensation_ref() = BAR;` instead of `FOO.set_compensation(BAR);`")]]
  double& set_compensation(double compensation_) {
    compensation = compensation_;
    __isset.compensation = true;
    return compensation;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Internship>;
  friend void swap(Internship& a, Internship& b);
};

template <class Protocol_>
uint32_t Internship::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class Range final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Range;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Range() :
      min(0),
      max(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Range(apache::thrift::FragileConstructor, ::std::int32_t min__arg, ::std::int32_t max__arg);

  Range(Range&&) = default;

  Range(const Range&) = default;


  Range& operator=(Range&&) = default;

  Range& operator=(const Range&) = default;
  void __clear();
 public:
  ::std::int32_t min;
 public:
  ::std::int32_t max;

 private:

 public:

  bool operator==(const Range&) const;
  bool operator<(const Range&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> min_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->min};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> min_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->min)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> min_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->min};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> min_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->min)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> max_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->max};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> max_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->max)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> max_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->max};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> max_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->max)};
  }

  ::std::int32_t get_min() const {
    return min;
  }

  [[deprecated("Use `FOO.min_ref() = BAR;` instead of `FOO.set_min(BAR);`")]]
  ::std::int32_t& set_min(::std::int32_t min_) {
    min = min_;
    return min;
  }

  ::std::int32_t get_max() const {
    return max;
  }

  [[deprecated("Use `FOO.max_ref() = BAR;` instead of `FOO.set_max(BAR);`")]]
  ::std::int32_t& set_max(::std::int32_t max_) {
    max = max_;
    return max;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Range>;
  friend void swap(Range& a, Range& b);
};

template <class Protocol_>
uint32_t Range::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class struct1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = struct1;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  struct1() :
      a(1234567),
      b(apache::thrift::StringTraits<std::string>::fromStringLiteral("<uninitialized>")) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct1(apache::thrift::FragileConstructor, ::std::int32_t a__arg, ::std::string b__arg);

  struct1(struct1&&) noexcept;

  struct1(const struct1& src);


  struct1& operator=(struct1&&) noexcept;
  struct1& operator=(const struct1& src);
  void __clear();
 private:
  ::std::int32_t a;
 private:
  ::std::string b;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
  } __isset = {};

 public:

  bool operator==(const struct1&) const;
  bool operator<(const struct1&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  ::std::int32_t get_a() const {
    return a;
  }

  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::int32_t& set_a(::std::int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  const ::std::string& get_b() const& {
    return b;
  }

  ::std::string get_b() && {
    return std::move(b);
  }

  template <typename T_struct1_b_struct_setter = ::std::string>
  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  ::std::string& set_b(T_struct1_b_struct_setter&& b_) {
    b = std::forward<T_struct1_b_struct_setter>(b_);
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct1>;
  friend void swap(struct1& a, struct1& b);
};

template <class Protocol_>
uint32_t struct1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class struct2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = struct2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  struct2() :
      a(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct2(apache::thrift::FragileConstructor, ::std::int32_t a__arg, ::std::string b__arg, ::cpp2::struct1 c__arg, ::std::vector<::std::int32_t> d__arg);

  struct2(struct2&&) noexcept;

  struct2(const struct2& src);


  struct2& operator=(struct2&&) noexcept;
  struct2& operator=(const struct2& src);
  void __clear();
 private:
  ::std::int32_t a;
 private:
  ::std::string b;
 private:
  ::cpp2::struct1 c;
 private:
  ::std::vector<::std::int32_t> d;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
    bool c;
    bool d;
  } __isset = {};

 public:

  bool operator==(const struct2&) const;
  bool operator<(const struct2&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> c_ref() const& {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> c_ref() const&& {
    return {std::move(this->c), __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> c_ref() & {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> c_ref() && {
    return {std::move(this->c), __isset.c};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> d_ref() const& {
    return {this->d, __isset.d};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> d_ref() const&& {
    return {std::move(this->d), __isset.d};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> d_ref() & {
    return {this->d, __isset.d};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> d_ref() && {
    return {std::move(this->d), __isset.d};
  }

  ::std::int32_t get_a() const {
    return a;
  }

  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::int32_t& set_a(::std::int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  const ::std::string& get_b() const& {
    return b;
  }

  ::std::string get_b() && {
    return std::move(b);
  }

  template <typename T_struct2_b_struct_setter = ::std::string>
  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  ::std::string& set_b(T_struct2_b_struct_setter&& b_) {
    b = std::forward<T_struct2_b_struct_setter>(b_);
    __isset.b = true;
    return b;
  }
  const ::cpp2::struct1& get_c() const&;
  ::cpp2::struct1 get_c() &&;

  template <typename T_struct2_c_struct_setter = ::cpp2::struct1>
  [[deprecated("Use `FOO.c_ref() = BAR;` instead of `FOO.set_c(BAR);`")]]
  ::cpp2::struct1& set_c(T_struct2_c_struct_setter&& c_) {
    c = std::forward<T_struct2_c_struct_setter>(c_);
    __isset.c = true;
    return c;
  }
  const ::std::vector<::std::int32_t>& get_d() const&;
  ::std::vector<::std::int32_t> get_d() &&;

  template <typename T_struct2_d_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.d_ref() = BAR;` instead of `FOO.set_d(BAR);`")]]
  ::std::vector<::std::int32_t>& set_d(T_struct2_d_struct_setter&& d_) {
    d = std::forward<T_struct2_d_struct_setter>(d_);
    __isset.d = true;
    return d;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct2>;
  friend void swap(struct2& a, struct2& b);
};

template <class Protocol_>
uint32_t struct2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class struct3 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = struct3;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  struct3() :
      b(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct3(apache::thrift::FragileConstructor, ::std::string a__arg, ::std::int32_t b__arg, ::cpp2::struct2 c__arg);

  struct3(struct3&&) noexcept;

  struct3(const struct3& src);


  struct3& operator=(struct3&&) noexcept;
  struct3& operator=(const struct3& src);
  void __clear();
 private:
  ::std::string a;
 private:
  ::std::int32_t b;
 private:
  ::cpp2::struct2 c;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
    bool c;
  } __isset = {};

 public:

  bool operator==(const struct3&) const;
  bool operator<(const struct3&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> c_ref() const& {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> c_ref() const&& {
    return {std::move(this->c), __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> c_ref() & {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::cpp2::struct2>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> c_ref() && {
    return {std::move(this->c), __isset.c};
  }

  const ::std::string& get_a() const& {
    return a;
  }

  ::std::string get_a() && {
    return std::move(a);
  }

  template <typename T_struct3_a_struct_setter = ::std::string>
  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::string& set_a(T_struct3_a_struct_setter&& a_) {
    a = std::forward<T_struct3_a_struct_setter>(a_);
    __isset.a = true;
    return a;
  }

  ::std::int32_t get_b() const {
    return b;
  }

  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  ::std::int32_t& set_b(::std::int32_t b_) {
    b = b_;
    __isset.b = true;
    return b;
  }
  const ::cpp2::struct2& get_c() const&;
  ::cpp2::struct2 get_c() &&;

  template <typename T_struct3_c_struct_setter = ::cpp2::struct2>
  [[deprecated("Use `FOO.c_ref() = BAR;` instead of `FOO.set_c(BAR);`")]]
  ::cpp2::struct2& set_c(T_struct3_c_struct_setter&& c_) {
    c = std::forward<T_struct3_c_struct_setter>(c_);
    __isset.c = true;
    return c;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct3>;
  friend void swap(struct3& a, struct3& b);
};

template <class Protocol_>
uint32_t struct3::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class struct4 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = struct4;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  struct4() :
      a(0),
      b(0),
      c(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  struct4(apache::thrift::FragileConstructor, ::std::int32_t a__arg, double b__arg, ::std::int8_t c__arg);

  struct4(struct4&&) noexcept;

  struct4(const struct4& src);


  struct4& operator=(struct4&&) noexcept;
  struct4& operator=(const struct4& src);
  void __clear();
 private:
  ::std::int32_t a;
 private:
  double b;
 private:
  ::std::int8_t c;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
    bool c;
  } __isset = {};

 public:

  bool operator==(const struct4&) const;
  bool operator<(const struct4&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> c_ref() const& {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> c_ref() const&& {
    return {std::move(this->c), __isset.c};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> c_ref() & {
    return {this->c, __isset.c};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> c_ref() && {
    return {std::move(this->c), __isset.c};
  }

  ::std::int32_t get_a() const {
    return a;
  }

  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::int32_t& set_a(::std::int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  const double* get_b() const& {
    return b_ref() ? std::addressof(b) : nullptr;
  }

  double* get_b() & {
    return b_ref() ? std::addressof(b) : nullptr;
  }
  double* get_b() && = delete;

  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  double& set_b(double b_) {
    b = b_;
    __isset.b = true;
    return b;
  }

  const ::std::int8_t* get_c() const& {
    return c_ref() ? std::addressof(c) : nullptr;
  }

  ::std::int8_t* get_c() & {
    return c_ref() ? std::addressof(c) : nullptr;
  }
  ::std::int8_t* get_c() && = delete;

  [[deprecated("Use `FOO.c_ref() = BAR;` instead of `FOO.set_c(BAR);`")]]
  ::std::int8_t& set_c(::std::int8_t c_) {
    c = c_;
    __isset.c = true;
    return c;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<struct4>;
  friend void swap(struct4& a, struct4& b);
};

template <class Protocol_>
uint32_t struct4::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class union1 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = union1;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    i = 1,
    d = 2,
  } ;

  union1()
      : type_(Type::__EMPTY__) {}

  union1(union1&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  union1(const union1& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(rhs.value_.i);
        break;
      }
      case Type::d:
      {
        set_d(rhs.value_.d);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  union1& operator=(union1&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  union1& operator=(const union1& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(rhs.value_.i);
        break;
      }
      case Type::d:
      {
        set_d(rhs.value_.d);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~union1() {
    __clear();
  }
  union storage_type {
    ::std::int32_t i;
    double d;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const union1&) const;
  bool operator<(const union1&) const;

  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    __clear();
    type_ = Type::i;
    ::new (std::addressof(value_.i)) ::std::int32_t(t);
    return value_.i;
  }

  double& set_d(double t = double()) {
    __clear();
    type_ = Type::d;
    ::new (std::addressof(value_.d)) double(t);
    return value_.d;
  }

  ::std::int32_t const& get_i() const {
    if (type_ != Type::i) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.i;
  }

  double const& get_d() const {
    if (type_ != Type::d) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.d;
  }

  ::std::int32_t& mutable_i() {
    assert(type_ == Type::i);
    return value_.i;
  }

  double& mutable_d() {
    assert(type_ == Type::d);
    return value_.d;
  }

  ::std::int32_t move_i() {
    assert(type_ == Type::i);
    return std::move(value_.i);
  }

  double move_d() {
    assert(type_ == Type::d);
    return std::move(value_.d);
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> i_ref() const&& {
    return {std::move(value_.i), type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> d_ref() const& {
    return {value_.d, type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> d_ref() const&& {
    return {std::move(value_.d), type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> d_ref() & {
    return {value_.d, type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> d_ref() && {
    return {std::move(value_.d), type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<union1>;
  friend void swap(union1& a, union1& b);
};

template <class Protocol_>
uint32_t union1::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class union2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = union2;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    i = 1,
    d = 2,
    s = 3,
    u = 4,
  } ;

  union2()
      : type_(Type::__EMPTY__) {}

  union2(union2&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::u:
      {
        set_u(std::move(rhs.value_.u));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  union2(const union2& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(rhs.value_.i);
        break;
      }
      case Type::d:
      {
        set_d(rhs.value_.d);
        break;
      }
      case Type::s:
      {
        set_s(rhs.value_.s);
        break;
      }
      case Type::u:
      {
        set_u(rhs.value_.u);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  union2& operator=(union2&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(std::move(rhs.value_.i));
        break;
      }
      case Type::d:
      {
        set_d(std::move(rhs.value_.d));
        break;
      }
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      case Type::u:
      {
        set_u(std::move(rhs.value_.u));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  union2& operator=(const union2& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::i:
      {
        set_i(rhs.value_.i);
        break;
      }
      case Type::d:
      {
        set_d(rhs.value_.d);
        break;
      }
      case Type::s:
      {
        set_s(rhs.value_.s);
        break;
      }
      case Type::u:
      {
        set_u(rhs.value_.u);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~union2() {
    __clear();
  }
  union storage_type {
    ::std::int32_t i;
    double d;
    ::cpp2::struct1 s;
    ::cpp2::union1 u;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const union2&) const;
  bool operator<(const union2&) const;

  ::std::int32_t& set_i(::std::int32_t t = ::std::int32_t()) {
    __clear();
    type_ = Type::i;
    ::new (std::addressof(value_.i)) ::std::int32_t(t);
    return value_.i;
  }

  double& set_d(double t = double()) {
    __clear();
    type_ = Type::d;
    ::new (std::addressof(value_.d)) double(t);
    return value_.d;
  }

  ::cpp2::struct1& set_s(::cpp2::struct1 const &t) {
    __clear();
    type_ = Type::s;
    ::new (std::addressof(value_.s)) ::cpp2::struct1(t);
    return value_.s;
  }

  ::cpp2::struct1& set_s(::cpp2::struct1&& t) {
    __clear();
    type_ = Type::s;
    ::new (std::addressof(value_.s)) ::cpp2::struct1(std::move(t));
    return value_.s;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::struct1, T...>> ::cpp2::struct1& set_s(T&&... t) {
    __clear();
    type_ = Type::s;
    ::new (std::addressof(value_.s)) ::cpp2::struct1(std::forward<T>(t)...);
    return value_.s;
  }

  ::cpp2::union1& set_u(::cpp2::union1 const &t) {
    __clear();
    type_ = Type::u;
    ::new (std::addressof(value_.u)) ::cpp2::union1(t);
    return value_.u;
  }

  ::cpp2::union1& set_u(::cpp2::union1&& t) {
    __clear();
    type_ = Type::u;
    ::new (std::addressof(value_.u)) ::cpp2::union1(std::move(t));
    return value_.u;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::union1, T...>> ::cpp2::union1& set_u(T&&... t) {
    __clear();
    type_ = Type::u;
    ::new (std::addressof(value_.u)) ::cpp2::union1(std::forward<T>(t)...);
    return value_.u;
  }

  ::std::int32_t const& get_i() const {
    if (type_ != Type::i) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.i;
  }

  double const& get_d() const {
    if (type_ != Type::d) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.d;
  }

  ::cpp2::struct1 const& get_s() const {
    if (type_ != Type::s) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.s;
  }

  ::cpp2::union1 const& get_u() const {
    if (type_ != Type::u) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.u;
  }

  ::std::int32_t& mutable_i() {
    assert(type_ == Type::i);
    return value_.i;
  }

  double& mutable_d() {
    assert(type_ == Type::d);
    return value_.d;
  }

  ::cpp2::struct1& mutable_s() {
    assert(type_ == Type::s);
    return value_.s;
  }

  ::cpp2::union1& mutable_u() {
    assert(type_ == Type::u);
    return value_.u;
  }

  ::std::int32_t move_i() {
    assert(type_ == Type::i);
    return std::move(value_.i);
  }

  double move_d() {
    assert(type_ == Type::d);
    return std::move(value_.d);
  }

  ::cpp2::struct1 move_s() {
    assert(type_ == Type::s);
    return std::move(value_.s);
  }

  ::cpp2::union1 move_u() {
    assert(type_ == Type::u);
    return std::move(value_.u);
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i_ref() const& {
    return {value_.i, type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> i_ref() const&& {
    return {std::move(value_.i), type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i_ref() & {
    return {value_.i, type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i_ref() && {
    return {std::move(value_.i), type_, i, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> d_ref() const& {
    return {value_.d, type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> d_ref() const&& {
    return {std::move(value_.d), type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> d_ref() & {
    return {value_.d, type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> d_ref() && {
    return {std::move(value_.d), type_, d, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> s_ref() const& {
    return {value_.s, type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> s_ref() const&& {
    return {std::move(value_.s), type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> s_ref() & {
    return {value_.s, type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::struct1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> s_ref() && {
    return {std::move(value_.s), type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> u_ref() const& {
    return {value_.u, type_, u, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> u_ref() const&& {
    return {std::move(value_.u), type_, u, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> u_ref() & {
    return {value_.u, type_, u, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::union1>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> u_ref() && {
    return {std::move(value_.u), type_, u, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<union2>;
  friend void swap(union2& a, union2& b);
};

template <class Protocol_>
uint32_t union2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
THRIFT_IGNORE_ISSET_USE_WARNING_END

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::union1::Type>;

template <> struct TEnumTraits<::cpp2::union1::Type> {
  using type = ::cpp2::union1::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::union2::Type>;

template <> struct TEnumTraits<::cpp2::union2::Type> {
  using type = ::cpp2::union2::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};
}} // apache::thrift
