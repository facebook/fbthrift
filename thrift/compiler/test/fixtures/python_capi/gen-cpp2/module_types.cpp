/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/python_capi/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

#if FOLLY_CPLUSPLUS < 201703L
constexpr std::size_t const TEnumTraits<::test::fixtures::python_capi::MyEnum>::size;
#endif
folly::Range<::test::fixtures::python_capi::MyEnum const*> const TEnumTraits<::test::fixtures::python_capi::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MyEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::python_capi::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::MyEnum>::names);

bool TEnumTraits<::test::fixtures::python_capi::MyEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::MyEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache { namespace thrift {

#if FOLLY_CPLUSPLUS < 201703L
constexpr std::size_t const TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::size;
#endif
folly::Range<::test::fixtures::python_capi::NormalDecentEnum const*> const TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::NormalDecentEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::NormalDecentEnum>::names);

bool TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_inty(),
      __fbthrift_field_myEnumy(),
      __fbthrift_field_boulet() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_myItemy(std::move(other.__fbthrift_field_myItemy)),
    __fbthrift_field_myEnumy(std::move(other.__fbthrift_field_myEnumy)),
    __fbthrift_field_boulet(std::move(other.__fbthrift_field_boulet)),
    __fbthrift_field_floatListy(std::move(other.__fbthrift_field_floatListy)),
    __fbthrift_field_strMappy(std::move(other.__fbthrift_field_strMappy)),
    __fbthrift_field_intSetty(std::move(other.__fbthrift_field_intSetty)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_myItemy = std::move(other.__fbthrift_field_myItemy);
    this->__fbthrift_field_myEnumy = std::move(other.__fbthrift_field_myEnumy);
    this->__fbthrift_field_boulet = std::move(other.__fbthrift_field_boulet);
    this->__fbthrift_field_floatListy = std::move(other.__fbthrift_field_floatListy);
    this->__fbthrift_field_strMappy = std::move(other.__fbthrift_field_strMappy);
    this->__fbthrift_field_intSetty = std::move(other.__fbthrift_field_intSetty);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::test::fixtures::python_capi::MyDataItem myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool boulet__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg) :
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_myItemy(std::move(myItemy__arg)),
    __fbthrift_field_myEnumy(std::move(myEnumy__arg)),
    __fbthrift_field_boulet(std::move(boulet__arg)),
    __fbthrift_field_floatListy(std::move(floatListy__arg)),
    __fbthrift_field_strMappy(std::move(strMappy__arg)),
    __fbthrift_field_intSetty(std::move(intSetty__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_inty = ::std::int64_t();
  this->__fbthrift_field_stringy = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_myItemy);
  this->__fbthrift_field_myEnumy = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_boulet = bool();
  this->__fbthrift_field_floatListy.clear();
  this->__fbthrift_field_strMappy.clear();
  this->__fbthrift_field_intSetty.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.inty_ref() == rhs.inty_ref())) {
    return false;
  }
  if (!(lhs.stringy_ref() == rhs.stringy_ref())) {
    return false;
  }
  if (!(lhs.myItemy_ref() == rhs.myItemy_ref())) {
    return false;
  }
  if (!(lhs.myEnumy_ref() == rhs.myEnumy_ref())) {
    return false;
  }
  if (!(lhs.boulet_ref() == rhs.boulet_ref())) {
    return false;
  }
  if (!(lhs.floatListy_ref() == rhs.floatListy_ref())) {
    return false;
  }
  if (!(lhs.strMappy_ref() == rhs.strMappy_ref())) {
    return false;
  }
  if (!(lhs.intSetty_ref() == rhs.intSetty_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::python_capi::MyDataItem& MyStruct::get_myItemy() const& {
  return __fbthrift_field_myItemy;
}

::test::fixtures::python_capi::MyDataItem MyStruct::get_myItemy() && {
  return std::move(__fbthrift_field_myItemy);
}

const ::std::vector<float>& MyStruct::get_floatListy() const& {
  return __fbthrift_field_floatListy;
}

::std::vector<float> MyStruct::get_floatListy() && {
  return std::move(__fbthrift_field_floatListy);
}

const ::std::map<::std::string, ::std::string>& MyStruct::get_strMappy() const& {
  return __fbthrift_field_strMappy;
}

::std::map<::std::string, ::std::string> MyStruct::get_strMappy() && {
  return std::move(__fbthrift_field_strMappy);
}

const ::std::set<::std::int32_t>& MyStruct::get_intSetty() const& {
  return __fbthrift_field_intSetty;
}

::std::set<::std::int32_t> MyStruct::get_intSetty() && {
  return std::move(__fbthrift_field_intSetty);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_myItemy, b.__fbthrift_field_myItemy);
  swap(a.__fbthrift_field_myEnumy, b.__fbthrift_field_myEnumy);
  swap(a.__fbthrift_field_boulet, b.__fbthrift_field_boulet);
  swap(a.__fbthrift_field_floatListy, b.__fbthrift_field_floatListy);
  swap(a.__fbthrift_field_strMappy, b.__fbthrift_field_strMappy);
  swap(a.__fbthrift_field_intSetty, b.__fbthrift_field_intSetty);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItem>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyDataItem>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyDataItem>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyDataItem::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyDataItem";
}

const folly::StringPiece MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}

MyDataItem::MyDataItem(const MyDataItem&) = default;
MyDataItem& MyDataItem::operator=(const MyDataItem&) = default;
MyDataItem::MyDataItem() {
}


MyDataItem::~MyDataItem() {}

MyDataItem::MyDataItem(FOLLY_MAYBE_UNUSED MyDataItem&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __isset(other.__isset) {
}

MyDataItem& MyDataItem::operator=(FOLLY_MAYBE_UNUSED MyDataItem&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    __isset = other.__isset;
    return *this;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor, ::std::string s__arg) :
    __fbthrift_field_s(std::move(s__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyDataItem::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return false;
}

bool MyDataItem::operator==(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.s_ref() == rhs.s_ref())) {
    return false;
  }
  return true;
}

bool MyDataItem::operator<(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyDataItem& a, FOLLY_MAYBE_UNUSED MyDataItem& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__isset, b.__isset);
}

template void MyDataItem::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::TransitiveDoubler>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::TransitiveDoubler>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* TransitiveDoubler::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/TransitiveDoubler";
}

const folly::StringPiece TransitiveDoubler::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece TransitiveDoubler::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::name;
}


TransitiveDoubler::TransitiveDoubler(apache::thrift::FragileConstructor) {}


void TransitiveDoubler::__fbthrift_clear() {
  // clear all fields
}

void TransitiveDoubler::__fbthrift_clear_terse_fields() {
}

bool TransitiveDoubler::__fbthrift_is_empty() const {
  return true;
}

bool TransitiveDoubler::operator==(FOLLY_MAYBE_UNUSED const TransitiveDoubler& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool TransitiveDoubler::operator<(FOLLY_MAYBE_UNUSED const TransitiveDoubler& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED TransitiveDoubler& a, FOLLY_MAYBE_UNUSED TransitiveDoubler& b) {
  using ::std::swap;
}

template void TransitiveDoubler::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TransitiveDoubler::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TransitiveDoubler::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TransitiveDoubler::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TransitiveDoubler::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TransitiveDoubler::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TransitiveDoubler::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TransitiveDoubler::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::detail::DoubledPair>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::detail::DoubledPair>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {namespace detail {


const char* DoubledPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/DoubledPair";
}

const folly::StringPiece DoubledPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DoubledPair>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece DoubledPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DoubledPair>::name;
}

DoubledPair::DoubledPair(const DoubledPair&) = default;
DoubledPair& DoubledPair::operator=(const DoubledPair&) = default;
DoubledPair::DoubledPair() :
      __fbthrift_field_x() {
}


DoubledPair::~DoubledPair() {}

DoubledPair::DoubledPair(FOLLY_MAYBE_UNUSED DoubledPair&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __fbthrift_field_x(std::move(other.__fbthrift_field_x)),
    __isset(other.__isset) {
}

DoubledPair& DoubledPair::operator=(FOLLY_MAYBE_UNUSED DoubledPair&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    this->__fbthrift_field_x = std::move(other.__fbthrift_field_x);
    __isset = other.__isset;
    return *this;
}


DoubledPair::DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg) :
    __fbthrift_field_s(std::move(s__arg)),
    __fbthrift_field_x(std::move(x__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void DoubledPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_x = ::std::int32_t();
  __isset = {};
}

void DoubledPair::__fbthrift_clear_terse_fields() {
}

bool DoubledPair::__fbthrift_is_empty() const {
  return false;
}

bool DoubledPair::operator==(FOLLY_MAYBE_UNUSED const DoubledPair& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.s_ref() == rhs.s_ref())) {
    return false;
  }
  if (!(lhs.x_ref() == rhs.x_ref())) {
    return false;
  }
  return true;
}

bool DoubledPair::operator<(FOLLY_MAYBE_UNUSED const DoubledPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED DoubledPair& a, FOLLY_MAYBE_UNUSED DoubledPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__fbthrift_field_x, b.__fbthrift_field_x);
  swap(a.__isset, b.__isset);
}

template void DoubledPair::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DoubledPair::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DoubledPair::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DoubledPair::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DoubledPair::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DoubledPair::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DoubledPair::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DoubledPair::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::StringPair>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::StringPair>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* StringPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/StringPair";
}

const folly::StringPiece StringPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StringPair>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece StringPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StringPair>::name;
}

StringPair::StringPair(const StringPair& srcObj) :
    __fbthrift_field_normal(srcObj.__fbthrift_field_normal),
    __fbthrift_field_doubled(srcObj.__fbthrift_field_doubled),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

StringPair& StringPair::operator=(const StringPair& other) {
  StringPair tmp(other);
  swap(*this, tmp);
  return *this;
}

StringPair::StringPair() {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}


StringPair::~StringPair() {}

StringPair::StringPair(FOLLY_MAYBE_UNUSED StringPair&& other) noexcept :
    __fbthrift_field_normal(std::move(other.__fbthrift_field_normal)),
    __fbthrift_field_doubled(std::move(other.__fbthrift_field_doubled)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

StringPair& StringPair::operator=(FOLLY_MAYBE_UNUSED StringPair&& other) noexcept {
    this->__fbthrift_field_normal = std::move(other.__fbthrift_field_normal);
    this->__fbthrift_field_doubled = std::move(other.__fbthrift_field_doubled);
    __isset = other.__isset;
    return *this;
}


StringPair::StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg) :
    __fbthrift_field_normal(std::move(normal__arg)),
    __fbthrift_field_doubled(std::move(doubled__arg)) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void StringPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_normal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  ::apache::thrift::adapt_detail::clear<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset = {};
}

void StringPair::__fbthrift_clear_terse_fields() {
}

bool StringPair::__fbthrift_is_empty() const {
  return false;
}

bool StringPair::operator==(FOLLY_MAYBE_UNUSED const StringPair& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.normal_ref() == rhs.normal_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::thrift::test::lib::StringDoubler>(lhs.__fbthrift_field_doubled, rhs.__fbthrift_field_doubled)) {
    return false;
  }
  return true;
}

bool StringPair::operator<(FOLLY_MAYBE_UNUSED const StringPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED StringPair& a, FOLLY_MAYBE_UNUSED StringPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_normal, b.__fbthrift_field_normal);
  swap(a.__fbthrift_field_doubled, b.__fbthrift_field_doubled);
  swap(a.__isset, b.__isset);
}

template void StringPair::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StringPair::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StringPair::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StringPair::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StringPair::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StringPair::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StringPair::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StringPair::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::VapidStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::VapidStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* VapidStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/EmptyStruct";
}

const folly::StringPiece VapidStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<VapidStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece VapidStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<VapidStruct>::name;
}


VapidStruct::VapidStruct(apache::thrift::FragileConstructor) {}


void VapidStruct::__fbthrift_clear() {
  // clear all fields
}

void VapidStruct::__fbthrift_clear_terse_fields() {
}

bool VapidStruct::__fbthrift_is_empty() const {
  return true;
}

bool VapidStruct::operator==(FOLLY_MAYBE_UNUSED const VapidStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool VapidStruct::operator<(FOLLY_MAYBE_UNUSED const VapidStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED VapidStruct& a, FOLLY_MAYBE_UNUSED VapidStruct& b) {
  using ::std::swap;
}

template void VapidStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t VapidStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t VapidStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t VapidStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void VapidStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t VapidStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t VapidStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t VapidStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::PrimitiveStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::PrimitiveStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* PrimitiveStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/PrimitiveStruct";
}

const folly::StringPiece PrimitiveStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece PrimitiveStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::name;
}

PrimitiveStruct::PrimitiveStruct(const PrimitiveStruct& srcObj) :
    __fbthrift_field_booly(srcObj.__fbthrift_field_booly),
    __fbthrift_field_charry(srcObj.__fbthrift_field_charry),
    __fbthrift_field_shortay(srcObj.__fbthrift_field_shortay),
    __fbthrift_field_inty(srcObj.__fbthrift_field_inty),
    __fbthrift_field_longy(srcObj.__fbthrift_field_longy),
    __fbthrift_field_floaty(srcObj.__fbthrift_field_floaty),
    __fbthrift_field_dubby(srcObj.__fbthrift_field_dubby),
    __fbthrift_field_stringy(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(srcObj.__fbthrift_field_bytey),
    __fbthrift_field_buffy(srcObj.__fbthrift_field_buffy),
    __fbthrift_field_pointbuffy(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::binary>(srcObj.__fbthrift_field_pointbuffy)),
    __fbthrift_field_patched_struct(srcObj.__fbthrift_field_patched_struct),
    __fbthrift_field_empty_struct(srcObj.__fbthrift_field_empty_struct),
    __fbthrift_field_fbstring(srcObj.__fbthrift_field_fbstring),
    __fbthrift_field_managed_string_view(srcObj.__fbthrift_field_managed_string_view),
    __fbthrift_field_some_error(srcObj.__fbthrift_field_some_error),
    __isset(srcObj.__isset) {
}

PrimitiveStruct& PrimitiveStruct::operator=(const PrimitiveStruct& other) {
  PrimitiveStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

PrimitiveStruct::PrimitiveStruct() :
      __fbthrift_field_booly(),
      __fbthrift_field_charry(),
      __fbthrift_field_shortay(),
      __fbthrift_field_inty(),
      __fbthrift_field_longy(),
      __fbthrift_field_floaty() {
}


PrimitiveStruct::~PrimitiveStruct() {}

PrimitiveStruct::PrimitiveStruct(FOLLY_MAYBE_UNUSED PrimitiveStruct&& other) noexcept :
    __fbthrift_field_booly(std::move(other.__fbthrift_field_booly)),
    __fbthrift_field_charry(std::move(other.__fbthrift_field_charry)),
    __fbthrift_field_shortay(std::move(other.__fbthrift_field_shortay)),
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_longy(std::move(other.__fbthrift_field_longy)),
    __fbthrift_field_floaty(std::move(other.__fbthrift_field_floaty)),
    __fbthrift_field_dubby(std::move(other.__fbthrift_field_dubby)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(std::move(other.__fbthrift_field_bytey)),
    __fbthrift_field_buffy(std::move(other.__fbthrift_field_buffy)),
    __fbthrift_field_pointbuffy(std::move(other.__fbthrift_field_pointbuffy)),
    __fbthrift_field_patched_struct(std::move(other.__fbthrift_field_patched_struct)),
    __fbthrift_field_empty_struct(std::move(other.__fbthrift_field_empty_struct)),
    __fbthrift_field_fbstring(std::move(other.__fbthrift_field_fbstring)),
    __fbthrift_field_managed_string_view(std::move(other.__fbthrift_field_managed_string_view)),
    __fbthrift_field_some_error(std::move(other.__fbthrift_field_some_error)),
    __isset(other.__isset) {
}

PrimitiveStruct& PrimitiveStruct::operator=(FOLLY_MAYBE_UNUSED PrimitiveStruct&& other) noexcept {
    this->__fbthrift_field_booly = std::move(other.__fbthrift_field_booly);
    this->__fbthrift_field_charry = std::move(other.__fbthrift_field_charry);
    this->__fbthrift_field_shortay = std::move(other.__fbthrift_field_shortay);
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_longy = std::move(other.__fbthrift_field_longy);
    this->__fbthrift_field_floaty = std::move(other.__fbthrift_field_floaty);
    this->__fbthrift_field_dubby = std::move(other.__fbthrift_field_dubby);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_bytey = std::move(other.__fbthrift_field_bytey);
    this->__fbthrift_field_buffy = std::move(other.__fbthrift_field_buffy);
    this->__fbthrift_field_pointbuffy = std::move(other.__fbthrift_field_pointbuffy);
    this->__fbthrift_field_patched_struct = std::move(other.__fbthrift_field_patched_struct);
    this->__fbthrift_field_empty_struct = std::move(other.__fbthrift_field_empty_struct);
    this->__fbthrift_field_fbstring = std::move(other.__fbthrift_field_fbstring);
    this->__fbthrift_field_managed_string_view = std::move(other.__fbthrift_field_managed_string_view);
    this->__fbthrift_field_some_error = std::move(other.__fbthrift_field_some_error);
    __isset = other.__isset;
    return *this;
}


PrimitiveStruct::PrimitiveStruct(apache::thrift::FragileConstructor, bool booly__arg, ::test::fixtures::python_capi::signed_byte charry__arg, uint16_t shortay__arg, ::std::int32_t inty__arg, uint64_t longy__arg, float floaty__arg, ::apache::thrift::detail::boxed_value_ptr<double> dubby__arg, ::std::unique_ptr<::std::string> stringy__arg, ::std::shared_ptr<const ::std::string> bytey__arg, ::test::fixtures::python_capi::IOBuf buffy__arg, ::test::fixtures::python_capi::IOBufPtr pointbuffy__arg, ::test::fixtures::python_capi::MyStruct patched_struct__arg, ::test::fixtures::python_capi::VapidStruct empty_struct__arg, folly::fbstring fbstring__arg, ::apache::thrift::ManagedStringViewWithConversions managed_string_view__arg, ::test::fixtures::python_capi::SomeError some_error__arg) :
    __fbthrift_field_booly(std::move(booly__arg)),
    __fbthrift_field_charry(std::move(charry__arg)),
    __fbthrift_field_shortay(std::move(shortay__arg)),
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_longy(std::move(longy__arg)),
    __fbthrift_field_floaty(std::move(floaty__arg)),
    __fbthrift_field_dubby(std::move(dubby__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_bytey(std::move(bytey__arg)),
    __fbthrift_field_buffy(std::move(buffy__arg)),
    __fbthrift_field_pointbuffy(std::move(pointbuffy__arg)),
    __fbthrift_field_patched_struct(std::move(patched_struct__arg)),
    __fbthrift_field_empty_struct(std::move(empty_struct__arg)),
    __fbthrift_field_fbstring(std::move(fbstring__arg)),
    __fbthrift_field_managed_string_view(std::move(managed_string_view__arg)),
    __fbthrift_field_some_error(std::move(some_error__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}


void PrimitiveStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_booly = bool();
  this->__fbthrift_field_charry = ::test::fixtures::python_capi::signed_byte();
  this->__fbthrift_field_shortay = uint16_t();
  this->__fbthrift_field_inty = ::std::int32_t();
  this->__fbthrift_field_longy = uint64_t();
  this->__fbthrift_field_floaty = float();
  this->__fbthrift_field_dubby.reset();
  this->__fbthrift_field_stringy.reset();
  this->__fbthrift_field_bytey.reset();
  this->__fbthrift_field_buffy = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->__fbthrift_field_pointbuffy = apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_patched_struct);
  this->__fbthrift_field_fbstring = apache::thrift::StringTraits<folly::fbstring>::fromStringLiteral("");
  this->__fbthrift_field_managed_string_view = apache::thrift::StringTraits<::apache::thrift::ManagedStringViewWithConversions>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_some_error);
  __isset = {};
}

void PrimitiveStruct::__fbthrift_clear_terse_fields() {
}

bool PrimitiveStruct::__fbthrift_is_empty() const {
  return false;
}

bool PrimitiveStruct::operator==(FOLLY_MAYBE_UNUSED const PrimitiveStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.booly_ref() == rhs.booly_ref())) {
    return false;
  }
  if (!(lhs.charry_ref() == rhs.charry_ref())) {
    return false;
  }
  if (!(lhs.shortay_ref() == rhs.shortay_ref())) {
    return false;
  }
  if (!(lhs.inty_ref() == rhs.inty_ref())) {
    return false;
  }
  if (!(lhs.longy_ref() == rhs.longy_ref())) {
    return false;
  }
  if (!(lhs.floaty_ref() == rhs.floaty_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.dubby_ref(), rhs.dubby_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.stringy_ref(), rhs.stringy_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.bytey_ref(), rhs.bytey_ref()))) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.__fbthrift_field_buffy, rhs.__fbthrift_field_buffy)) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(lhs.__fbthrift_field_pointbuffy, rhs.__fbthrift_field_pointbuffy)) {
    return false;
  }
  if (!(lhs.patched_struct_ref() == rhs.patched_struct_ref())) {
    return false;
  }
  if (!(lhs.empty_struct_ref() == rhs.empty_struct_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::fbstring>::isEqual(lhs.__fbthrift_field_fbstring, rhs.__fbthrift_field_fbstring)) {
    return false;
  }
  if (!(lhs.managed_string_view_ref() == rhs.managed_string_view_ref())) {
    return false;
  }
  if (!(lhs.some_error_ref() == rhs.some_error_ref())) {
    return false;
  }
  return true;
}

bool PrimitiveStruct::operator<(FOLLY_MAYBE_UNUSED const PrimitiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::python_capi::MyStruct& PrimitiveStruct::get_patched_struct() const& {
  return __fbthrift_field_patched_struct;
}

::test::fixtures::python_capi::MyStruct PrimitiveStruct::get_patched_struct() && {
  return std::move(__fbthrift_field_patched_struct);
}

const ::test::fixtures::python_capi::VapidStruct& PrimitiveStruct::get_empty_struct() const& {
  return __fbthrift_field_empty_struct;
}

::test::fixtures::python_capi::VapidStruct PrimitiveStruct::get_empty_struct() && {
  return std::move(__fbthrift_field_empty_struct);
}

const ::test::fixtures::python_capi::SomeError& PrimitiveStruct::get_some_error() const& {
  return __fbthrift_field_some_error;
}

::test::fixtures::python_capi::SomeError PrimitiveStruct::get_some_error() && {
  return std::move(__fbthrift_field_some_error);
}


void swap(FOLLY_MAYBE_UNUSED PrimitiveStruct& a, FOLLY_MAYBE_UNUSED PrimitiveStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_booly, b.__fbthrift_field_booly);
  swap(a.__fbthrift_field_charry, b.__fbthrift_field_charry);
  swap(a.__fbthrift_field_shortay, b.__fbthrift_field_shortay);
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_longy, b.__fbthrift_field_longy);
  swap(a.__fbthrift_field_floaty, b.__fbthrift_field_floaty);
  swap(a.__fbthrift_field_dubby, b.__fbthrift_field_dubby);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_bytey, b.__fbthrift_field_bytey);
  swap(a.__fbthrift_field_buffy, b.__fbthrift_field_buffy);
  swap(a.__fbthrift_field_pointbuffy, b.__fbthrift_field_pointbuffy);
  swap(a.__fbthrift_field_patched_struct, b.__fbthrift_field_patched_struct);
  swap(a.__fbthrift_field_empty_struct, b.__fbthrift_field_empty_struct);
  swap(a.__fbthrift_field_fbstring, b.__fbthrift_field_fbstring);
  swap(a.__fbthrift_field_managed_string_view, b.__fbthrift_field_managed_string_view);
  swap(a.__fbthrift_field_some_error, b.__fbthrift_field_some_error);
  swap(a.__isset, b.__isset);
}

template void PrimitiveStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PrimitiveStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PrimitiveStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PrimitiveStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PrimitiveStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PrimitiveStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PrimitiveStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PrimitiveStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PrimitiveStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        PrimitiveStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::VapidStruct>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::AdaptedFields>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::AdaptedFields>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* AdaptedFields::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/AdaptedFields";
}

const folly::StringPiece AdaptedFields::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<AdaptedFields>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece AdaptedFields::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<AdaptedFields>::name;
}

AdaptedFields::AdaptedFields(const AdaptedFields& srcObj) :
    __fbthrift_field_adapted_int(srcObj.__fbthrift_field_adapted_int),
    __fbthrift_field_list_adapted_int(srcObj.__fbthrift_field_list_adapted_int),
    __fbthrift_field_set_adapted_int(srcObj.__fbthrift_field_set_adapted_int),
    __fbthrift_field_inline_adapted_int(srcObj.__fbthrift_field_inline_adapted_int),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}

AdaptedFields& AdaptedFields::operator=(const AdaptedFields& other) {
  AdaptedFields tmp(other);
  swap(*this, tmp);
  return *this;
}

AdaptedFields::AdaptedFields() :
      __fbthrift_field_adapted_int(),
      __fbthrift_field_inline_adapted_int() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}


AdaptedFields::~AdaptedFields() {}

AdaptedFields::AdaptedFields(FOLLY_MAYBE_UNUSED AdaptedFields&& other) noexcept :
    __fbthrift_field_adapted_int(std::move(other.__fbthrift_field_adapted_int)),
    __fbthrift_field_list_adapted_int(std::move(other.__fbthrift_field_list_adapted_int)),
    __fbthrift_field_set_adapted_int(std::move(other.__fbthrift_field_set_adapted_int)),
    __fbthrift_field_inline_adapted_int(std::move(other.__fbthrift_field_inline_adapted_int)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
}

AdaptedFields& AdaptedFields::operator=(FOLLY_MAYBE_UNUSED AdaptedFields&& other) noexcept {
    this->__fbthrift_field_adapted_int = std::move(other.__fbthrift_field_adapted_int);
    this->__fbthrift_field_list_adapted_int = std::move(other.__fbthrift_field_list_adapted_int);
    this->__fbthrift_field_set_adapted_int = std::move(other.__fbthrift_field_set_adapted_int);
    this->__fbthrift_field_inline_adapted_int = std::move(other.__fbthrift_field_inline_adapted_int);
    __isset = other.__isset;
    return *this;
}


AdaptedFields::AdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::type::ProtocolId adapted_int__arg, ::std::vector<::apache::thrift::type::FieldId> list_adapted_int__arg, ::apache::thrift::type::AnnotationIds set_adapted_int__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> inline_adapted_int__arg) :
    __fbthrift_field_adapted_int(std::move(adapted_int__arg)),
    __fbthrift_field_list_adapted_int(std::move(list_adapted_int__arg)),
    __fbthrift_field_set_adapted_int(std::move(set_adapted_int__arg)),
    __fbthrift_field_inline_adapted_int(std::move(inline_adapted_int__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void AdaptedFields::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1>(__fbthrift_field_adapted_int, *this);
  this->__fbthrift_field_list_adapted_int.clear();
  this->__fbthrift_field_set_adapted_int.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4>(__fbthrift_field_inline_adapted_int, *this);
  __isset = {};
}

void AdaptedFields::__fbthrift_clear_terse_fields() {
}

bool AdaptedFields::__fbthrift_is_empty() const {
  return false;
}

bool AdaptedFields::operator==(FOLLY_MAYBE_UNUSED const AdaptedFields& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>>(lhs.__fbthrift_field_adapted_int, rhs.__fbthrift_field_adapted_int)) {
    return false;
  }
  if (!(lhs.list_adapted_int_ref() == rhs.list_adapted_int_ref())) {
    return false;
  }
  if (!(lhs.set_adapted_int_ref() == rhs.set_adapted_int_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>>(lhs.__fbthrift_field_inline_adapted_int, rhs.__fbthrift_field_inline_adapted_int)) {
    return false;
  }
  return true;
}

bool AdaptedFields::operator<(FOLLY_MAYBE_UNUSED const AdaptedFields& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<::apache::thrift::type::FieldId>& AdaptedFields::get_list_adapted_int() const& {
  return __fbthrift_field_list_adapted_int;
}

::std::vector<::apache::thrift::type::FieldId> AdaptedFields::get_list_adapted_int() && {
  return std::move(__fbthrift_field_list_adapted_int);
}

const ::apache::thrift::type::AnnotationIds& AdaptedFields::get_set_adapted_int() const& {
  return __fbthrift_field_set_adapted_int;
}

::apache::thrift::type::AnnotationIds AdaptedFields::get_set_adapted_int() && {
  return std::move(__fbthrift_field_set_adapted_int);
}


void swap(FOLLY_MAYBE_UNUSED AdaptedFields& a, FOLLY_MAYBE_UNUSED AdaptedFields& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_adapted_int, b.__fbthrift_field_adapted_int);
  swap(a.__fbthrift_field_list_adapted_int, b.__fbthrift_field_list_adapted_int);
  swap(a.__fbthrift_field_set_adapted_int, b.__fbthrift_field_set_adapted_int);
  swap(a.__fbthrift_field_inline_adapted_int, b.__fbthrift_field_inline_adapted_int);
  swap(a.__isset, b.__isset);
}

template void AdaptedFields::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AdaptedFields::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AdaptedFields::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AdaptedFields::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AdaptedFields::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AdaptedFields::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AdaptedFields::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AdaptedFields::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::ListStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::ListStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* ListStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/ListStruct";
}

const folly::StringPiece ListStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ListStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ListStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ListStruct>::name;
}

ListStruct::ListStruct() {
}


ListStruct::~ListStruct() {}

ListStruct::ListStruct(FOLLY_MAYBE_UNUSED ListStruct&& other) noexcept :
    __fbthrift_field_boolz(std::move(other.__fbthrift_field_boolz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_stringz(std::move(other.__fbthrift_field_stringz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_uidz(std::move(other.__fbthrift_field_uidz)),
    __fbthrift_field_matrix(std::move(other.__fbthrift_field_matrix)),
    __fbthrift_field_ucharz(std::move(other.__fbthrift_field_ucharz)),
    __fbthrift_field_voxels(std::move(other.__fbthrift_field_voxels)),
    __fbthrift_field_buf_ptrs(std::move(other.__fbthrift_field_buf_ptrs)),
    __isset(other.__isset) {
}

ListStruct& ListStruct::operator=(FOLLY_MAYBE_UNUSED ListStruct&& other) noexcept {
    this->__fbthrift_field_boolz = std::move(other.__fbthrift_field_boolz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_stringz = std::move(other.__fbthrift_field_stringz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_uidz = std::move(other.__fbthrift_field_uidz);
    this->__fbthrift_field_matrix = std::move(other.__fbthrift_field_matrix);
    this->__fbthrift_field_ucharz = std::move(other.__fbthrift_field_ucharz);
    this->__fbthrift_field_voxels = std::move(other.__fbthrift_field_voxels);
    this->__fbthrift_field_buf_ptrs = std::move(other.__fbthrift_field_buf_ptrs);
    __isset = other.__isset;
    return *this;
}


ListStruct::ListStruct(apache::thrift::FragileConstructor, ::std::vector<bool> boolz__arg, ::std::vector<::std::int64_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> stringz__arg, std::deque<::std::string> encoded__arg, std::deque<uint64_t> uidz__arg, ::std::vector<::std::vector<double>> matrix__arg, folly::small_vector<folly::small_vector<uint8_t>> ucharz__arg, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> voxels__arg, ::std::vector<::test::fixtures::python_capi::IOBufPtr> buf_ptrs__arg) :
    __fbthrift_field_boolz(std::move(boolz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_stringz(std::move(stringz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_uidz(std::move(uidz__arg)),
    __fbthrift_field_matrix(std::move(matrix__arg)),
    __fbthrift_field_ucharz(std::move(ucharz__arg)),
    __fbthrift_field_voxels(std::move(voxels__arg)),
    __fbthrift_field_buf_ptrs(std::move(buf_ptrs__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void ListStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_stringz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_uidz.clear();
  this->__fbthrift_field_matrix.clear();
  this->__fbthrift_field_ucharz.clear();
  this->__fbthrift_field_voxels.clear();
  this->__fbthrift_field_buf_ptrs.clear();
  __isset = {};
}

void ListStruct::__fbthrift_clear_terse_fields() {
}

bool ListStruct::__fbthrift_is_empty() const {
  return false;
}

bool ListStruct::operator==(FOLLY_MAYBE_UNUSED const ListStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolz_ref() == rhs.boolz_ref())) {
    return false;
  }
  if (!(lhs.intz_ref() == rhs.intz_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.stringz_ref(), rhs.stringz_ref()))) {
    return false;
  }
  if (!(lhs.encoded_ref() == rhs.encoded_ref())) {
    return false;
  }
  if (!(lhs.uidz_ref() == rhs.uidz_ref())) {
    return false;
  }
  if (!(lhs.matrix_ref() == rhs.matrix_ref())) {
    return false;
  }
  if (!(lhs.ucharz_ref() == rhs.ucharz_ref())) {
    return false;
  }
  if (!(lhs.voxels_ref() == rhs.voxels_ref())) {
    return false;
  }
  if (!(lhs.buf_ptrs_ref() == rhs.buf_ptrs_ref())) {
    return false;
  }
  return true;
}

bool ListStruct::operator<(FOLLY_MAYBE_UNUSED const ListStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<bool>& ListStruct::get_boolz() const& {
  return __fbthrift_field_boolz;
}

::std::vector<bool> ListStruct::get_boolz() && {
  return std::move(__fbthrift_field_boolz);
}

const ::std::vector<::std::int64_t>* ListStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::vector<::std::int64_t>* ListStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::deque<::std::string>& ListStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::deque<::std::string> ListStruct::get_encoded() && {
  return std::move(__fbthrift_field_encoded);
}

const std::deque<uint64_t>& ListStruct::get_uidz() const& {
  return __fbthrift_field_uidz;
}

std::deque<uint64_t> ListStruct::get_uidz() && {
  return std::move(__fbthrift_field_uidz);
}

const ::std::vector<::std::vector<double>>& ListStruct::get_matrix() const& {
  return __fbthrift_field_matrix;
}

::std::vector<::std::vector<double>> ListStruct::get_matrix() && {
  return std::move(__fbthrift_field_matrix);
}

const folly::small_vector<folly::small_vector<uint8_t>>& ListStruct::get_ucharz() const& {
  return __fbthrift_field_ucharz;
}

folly::small_vector<folly::small_vector<uint8_t>> ListStruct::get_ucharz() && {
  return std::move(__fbthrift_field_ucharz);
}

const folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& ListStruct::get_voxels() const& {
  return __fbthrift_field_voxels;
}

folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> ListStruct::get_voxels() && {
  return std::move(__fbthrift_field_voxels);
}

const ::std::vector<::test::fixtures::python_capi::IOBufPtr>& ListStruct::get_buf_ptrs() const& {
  return __fbthrift_field_buf_ptrs;
}

::std::vector<::test::fixtures::python_capi::IOBufPtr> ListStruct::get_buf_ptrs() && {
  return std::move(__fbthrift_field_buf_ptrs);
}


void swap(FOLLY_MAYBE_UNUSED ListStruct& a, FOLLY_MAYBE_UNUSED ListStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolz, b.__fbthrift_field_boolz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_stringz, b.__fbthrift_field_stringz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_uidz, b.__fbthrift_field_uidz);
  swap(a.__fbthrift_field_matrix, b.__fbthrift_field_matrix);
  swap(a.__fbthrift_field_ucharz, b.__fbthrift_field_ucharz);
  swap(a.__fbthrift_field_voxels, b.__fbthrift_field_voxels);
  swap(a.__fbthrift_field_buf_ptrs, b.__fbthrift_field_buf_ptrs);
  swap(a.__isset, b.__isset);
}

template void ListStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ListStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ListStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ListStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ListStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ListStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ListStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ListStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::SetStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::SetStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* SetStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/SetStruct";
}

const folly::StringPiece SetStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<SetStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece SetStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<SetStruct>::name;
}

SetStruct::SetStruct(const SetStruct&) = default;
SetStruct& SetStruct::operator=(const SetStruct&) = default;
SetStruct::SetStruct() {
}


SetStruct::~SetStruct() {}

SetStruct::SetStruct(FOLLY_MAYBE_UNUSED SetStruct&& other) noexcept :
    __fbthrift_field_enumz(std::move(other.__fbthrift_field_enumz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_binnaz(std::move(other.__fbthrift_field_binnaz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_uidz(std::move(other.__fbthrift_field_uidz)),
    __fbthrift_field_charz(std::move(other.__fbthrift_field_charz)),
    __fbthrift_field_setz(std::move(other.__fbthrift_field_setz)),
    __isset(other.__isset) {
}

SetStruct& SetStruct::operator=(FOLLY_MAYBE_UNUSED SetStruct&& other) noexcept {
    this->__fbthrift_field_enumz = std::move(other.__fbthrift_field_enumz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_binnaz = std::move(other.__fbthrift_field_binnaz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_uidz = std::move(other.__fbthrift_field_uidz);
    this->__fbthrift_field_charz = std::move(other.__fbthrift_field_charz);
    this->__fbthrift_field_setz = std::move(other.__fbthrift_field_setz);
    __isset = other.__isset;
    return *this;
}


SetStruct::SetStruct(apache::thrift::FragileConstructor, ::std::set<::test::fixtures::python_capi::MyEnum> enumz__arg, ::std::set<::std::int32_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> binnaz__arg, std::unordered_set<::std::string> encoded__arg, std::unordered_set<uint64_t> uidz__arg, folly::F14FastSet<uint8_t> charz__arg, ::std::vector<::std::set<::std::int64_t>> setz__arg) :
    __fbthrift_field_enumz(std::move(enumz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_binnaz(std::move(binnaz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_uidz(std::move(uidz__arg)),
    __fbthrift_field_charz(std::move(charz__arg)),
    __fbthrift_field_setz(std::move(setz__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void SetStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enumz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_binnaz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_uidz.clear();
  this->__fbthrift_field_charz.clear();
  this->__fbthrift_field_setz.clear();
  __isset = {};
}

void SetStruct::__fbthrift_clear_terse_fields() {
}

bool SetStruct::__fbthrift_is_empty() const {
  return false;
}

bool SetStruct::operator==(FOLLY_MAYBE_UNUSED const SetStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.enumz_ref() == rhs.enumz_ref())) {
    return false;
  }
  if (!(lhs.intz_ref() == rhs.intz_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.binnaz_ref(), rhs.binnaz_ref()))) {
    return false;
  }
  if (!(lhs.encoded_ref() == rhs.encoded_ref())) {
    return false;
  }
  if (!(lhs.uidz_ref() == rhs.uidz_ref())) {
    return false;
  }
  if (!(lhs.charz_ref() == rhs.charz_ref())) {
    return false;
  }
  if (!(lhs.setz_ref() == rhs.setz_ref())) {
    return false;
  }
  return true;
}

bool SetStruct::operator<(FOLLY_MAYBE_UNUSED const SetStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::set<::test::fixtures::python_capi::MyEnum>& SetStruct::get_enumz() const& {
  return __fbthrift_field_enumz;
}

::std::set<::test::fixtures::python_capi::MyEnum> SetStruct::get_enumz() && {
  return std::move(__fbthrift_field_enumz);
}

const ::std::set<::std::int32_t>* SetStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::set<::std::int32_t>* SetStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::unordered_set<::std::string>& SetStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::unordered_set<::std::string> SetStruct::get_encoded() && {
  return std::move(__fbthrift_field_encoded);
}

const std::unordered_set<uint64_t>& SetStruct::get_uidz() const& {
  return __fbthrift_field_uidz;
}

std::unordered_set<uint64_t> SetStruct::get_uidz() && {
  return std::move(__fbthrift_field_uidz);
}

const folly::F14FastSet<uint8_t>& SetStruct::get_charz() const& {
  return __fbthrift_field_charz;
}

folly::F14FastSet<uint8_t> SetStruct::get_charz() && {
  return std::move(__fbthrift_field_charz);
}

const ::std::vector<::std::set<::std::int64_t>>& SetStruct::get_setz() const& {
  return __fbthrift_field_setz;
}

::std::vector<::std::set<::std::int64_t>> SetStruct::get_setz() && {
  return std::move(__fbthrift_field_setz);
}


void swap(FOLLY_MAYBE_UNUSED SetStruct& a, FOLLY_MAYBE_UNUSED SetStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enumz, b.__fbthrift_field_enumz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_binnaz, b.__fbthrift_field_binnaz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_uidz, b.__fbthrift_field_uidz);
  swap(a.__fbthrift_field_charz, b.__fbthrift_field_charz);
  swap(a.__fbthrift_field_setz, b.__fbthrift_field_setz);
  swap(a.__isset, b.__isset);
}

template void SetStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SetStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SetStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SetStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SetStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SetStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SetStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SetStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MapStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MapStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MapStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MapStruct";
}

const folly::StringPiece MapStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MapStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MapStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MapStruct>::name;
}

MapStruct::MapStruct(const MapStruct& srcObj) :
    __fbthrift_field_enumz(srcObj.__fbthrift_field_enumz),
    __fbthrift_field_intz(srcObj.__fbthrift_field_intz),
    __fbthrift_field_binnaz(srcObj.__fbthrift_field_binnaz),
    __fbthrift_field_encoded(srcObj.__fbthrift_field_encoded),
    __fbthrift_field_flotz(srcObj.__fbthrift_field_flotz),
    __fbthrift_field_map_list(srcObj.__fbthrift_field_map_list),
    __fbthrift_field_list_map(srcObj.__fbthrift_field_list_map),
    __fbthrift_field_fast_list_map(srcObj.__fbthrift_field_fast_list_map),
    __fbthrift_field_buf_map(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>>(srcObj.__fbthrift_field_buf_map)),
    __fbthrift_field_unsigned_list_map(srcObj.__fbthrift_field_unsigned_list_map),
    __isset(srcObj.__isset) {
}

MapStruct& MapStruct::operator=(const MapStruct& other) {
  MapStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MapStruct::MapStruct() {
}


MapStruct::~MapStruct() {}

MapStruct::MapStruct(FOLLY_MAYBE_UNUSED MapStruct&& other) noexcept :
    __fbthrift_field_enumz(std::move(other.__fbthrift_field_enumz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_binnaz(std::move(other.__fbthrift_field_binnaz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_flotz(std::move(other.__fbthrift_field_flotz)),
    __fbthrift_field_map_list(std::move(other.__fbthrift_field_map_list)),
    __fbthrift_field_list_map(std::move(other.__fbthrift_field_list_map)),
    __fbthrift_field_fast_list_map(std::move(other.__fbthrift_field_fast_list_map)),
    __fbthrift_field_buf_map(std::move(other.__fbthrift_field_buf_map)),
    __fbthrift_field_unsigned_list_map(std::move(other.__fbthrift_field_unsigned_list_map)),
    __isset(other.__isset) {
}

MapStruct& MapStruct::operator=(FOLLY_MAYBE_UNUSED MapStruct&& other) noexcept {
    this->__fbthrift_field_enumz = std::move(other.__fbthrift_field_enumz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_binnaz = std::move(other.__fbthrift_field_binnaz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_flotz = std::move(other.__fbthrift_field_flotz);
    this->__fbthrift_field_map_list = std::move(other.__fbthrift_field_map_list);
    this->__fbthrift_field_list_map = std::move(other.__fbthrift_field_list_map);
    this->__fbthrift_field_fast_list_map = std::move(other.__fbthrift_field_fast_list_map);
    this->__fbthrift_field_buf_map = std::move(other.__fbthrift_field_buf_map);
    this->__fbthrift_field_unsigned_list_map = std::move(other.__fbthrift_field_unsigned_list_map);
    __isset = other.__isset;
    return *this;
}


MapStruct::MapStruct(apache::thrift::FragileConstructor, ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> enumz__arg, ::std::map<::std::int32_t, ::std::string> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> binnaz__arg, std::unordered_map<::std::string, double> encoded__arg, std::unordered_map<uint64_t, float> flotz__arg, ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> map_list__arg, ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> list_map__arg, folly::F14FastMap<int, folly::fbvector<double>> fast_list_map__arg, ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> buf_map__arg, ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> unsigned_list_map__arg) :
    __fbthrift_field_enumz(std::move(enumz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_binnaz(std::move(binnaz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_flotz(std::move(flotz__arg)),
    __fbthrift_field_map_list(std::move(map_list__arg)),
    __fbthrift_field_list_map(std::move(list_map__arg)),
    __fbthrift_field_fast_list_map(std::move(fast_list_map__arg)),
    __fbthrift_field_buf_map(std::move(buf_map__arg)),
    __fbthrift_field_unsigned_list_map(std::move(unsigned_list_map__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void MapStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enumz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_binnaz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_flotz.clear();
  this->__fbthrift_field_map_list.clear();
  this->__fbthrift_field_list_map.clear();
  this->__fbthrift_field_fast_list_map.clear();
  this->__fbthrift_field_buf_map.clear();
  this->__fbthrift_field_unsigned_list_map.clear();
  __isset = {};
}

void MapStruct::__fbthrift_clear_terse_fields() {
}

bool MapStruct::__fbthrift_is_empty() const {
  return false;
}

bool MapStruct::operator==(FOLLY_MAYBE_UNUSED const MapStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.enumz_ref() == rhs.enumz_ref())) {
    return false;
  }
  if (!(lhs.intz_ref() == rhs.intz_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.binnaz_ref(), rhs.binnaz_ref()))) {
    return false;
  }
  if (!(lhs.encoded_ref() == rhs.encoded_ref())) {
    return false;
  }
  if (!(lhs.flotz_ref() == rhs.flotz_ref())) {
    return false;
  }
  if (!(lhs.map_list_ref() == rhs.map_list_ref())) {
    return false;
  }
  if (!(lhs.list_map_ref() == rhs.list_map_ref())) {
    return false;
  }
  if (!(lhs.fast_list_map_ref() == rhs.fast_list_map_ref())) {
    return false;
  }
  if (!(lhs.buf_map_ref() == rhs.buf_map_ref())) {
    return false;
  }
  if (!(lhs.unsigned_list_map_ref() == rhs.unsigned_list_map_ref())) {
    return false;
  }
  return true;
}

bool MapStruct::operator<(FOLLY_MAYBE_UNUSED const MapStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& MapStruct::get_enumz() const& {
  return __fbthrift_field_enumz;
}

::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> MapStruct::get_enumz() && {
  return std::move(__fbthrift_field_enumz);
}

const ::std::map<::std::int32_t, ::std::string>* MapStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::map<::std::int32_t, ::std::string>* MapStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::unordered_map<::std::string, double>& MapStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::unordered_map<::std::string, double> MapStruct::get_encoded() && {
  return std::move(__fbthrift_field_encoded);
}

const std::unordered_map<uint64_t, float>& MapStruct::get_flotz() const& {
  return __fbthrift_field_flotz;
}

std::unordered_map<uint64_t, float> MapStruct::get_flotz() && {
  return std::move(__fbthrift_field_flotz);
}

const ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& MapStruct::get_map_list() const& {
  return __fbthrift_field_map_list;
}

::std::vector<::std::map<::std::int32_t, ::std::int64_t>> MapStruct::get_map_list() && {
  return std::move(__fbthrift_field_map_list);
}

const ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& MapStruct::get_list_map() const& {
  return __fbthrift_field_list_map;
}

::std::map<::std::int32_t, ::std::vector<::std::int64_t>> MapStruct::get_list_map() && {
  return std::move(__fbthrift_field_list_map);
}

const folly::F14FastMap<int, folly::fbvector<double>>& MapStruct::get_fast_list_map() const& {
  return __fbthrift_field_fast_list_map;
}

folly::F14FastMap<int, folly::fbvector<double>> MapStruct::get_fast_list_map() && {
  return std::move(__fbthrift_field_fast_list_map);
}

const ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& MapStruct::get_buf_map() const& {
  return __fbthrift_field_buf_map;
}

::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> MapStruct::get_buf_map() && {
  return std::move(__fbthrift_field_buf_map);
}

const ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& MapStruct::get_unsigned_list_map() const& {
  return __fbthrift_field_unsigned_list_map;
}

::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> MapStruct::get_unsigned_list_map() && {
  return std::move(__fbthrift_field_unsigned_list_map);
}


void swap(FOLLY_MAYBE_UNUSED MapStruct& a, FOLLY_MAYBE_UNUSED MapStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enumz, b.__fbthrift_field_enumz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_binnaz, b.__fbthrift_field_binnaz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_flotz, b.__fbthrift_field_flotz);
  swap(a.__fbthrift_field_map_list, b.__fbthrift_field_map_list);
  swap(a.__fbthrift_field_list_map, b.__fbthrift_field_list_map);
  swap(a.__fbthrift_field_fast_list_map, b.__fbthrift_field_fast_list_map);
  swap(a.__fbthrift_field_buf_map, b.__fbthrift_field_buf_map);
  swap(a.__fbthrift_field_unsigned_list_map, b.__fbthrift_field_unsigned_list_map);
  swap(a.__isset, b.__isset);
}

template void MapStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MapStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MapStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MapStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MapStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MapStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MapStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MapStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MapStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>,
        ::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::ComposeStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::ComposeStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* ComposeStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/ComposeStruct";
}

const folly::StringPiece ComposeStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ComposeStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ComposeStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ComposeStruct>::name;
}

ComposeStruct::ComposeStruct() :
      __fbthrift_field_enum_(),
      __fbthrift_field_renamed_(),
      __fbthrift_field_aliased(std::make_shared<::test::fixtures::python_capi::ListAlias>()),
      __fbthrift_field_xenum() {
}


ComposeStruct::~ComposeStruct() {}

ComposeStruct::ComposeStruct(FOLLY_MAYBE_UNUSED ComposeStruct&& other) noexcept :
    __fbthrift_field_enum_(std::move(other.__fbthrift_field_enum_)),
    __fbthrift_field_renamed_(std::move(other.__fbthrift_field_renamed_)),
    __fbthrift_field_primitive(std::move(other.__fbthrift_field_primitive)),
    __fbthrift_field_aliased(std::move(other.__fbthrift_field_aliased)),
    __fbthrift_field_xenum(std::move(other.__fbthrift_field_xenum)),
    __fbthrift_field_xstruct(std::move(other.__fbthrift_field_xstruct)),
    __fbthrift_field_friends(std::move(other.__fbthrift_field_friends)),
    __fbthrift_field_serial_struct(std::move(other.__fbthrift_field_serial_struct)),
    __fbthrift_field_serial_union(std::move(other.__fbthrift_field_serial_union)),
    __fbthrift_field_serial_error(std::move(other.__fbthrift_field_serial_error)),
    __isset(other.__isset) {
}

ComposeStruct& ComposeStruct::operator=(FOLLY_MAYBE_UNUSED ComposeStruct&& other) noexcept {
    this->__fbthrift_field_enum_ = std::move(other.__fbthrift_field_enum_);
    this->__fbthrift_field_renamed_ = std::move(other.__fbthrift_field_renamed_);
    this->__fbthrift_field_primitive = std::move(other.__fbthrift_field_primitive);
    this->__fbthrift_field_aliased = std::move(other.__fbthrift_field_aliased);
    this->__fbthrift_field_xenum = std::move(other.__fbthrift_field_xenum);
    this->__fbthrift_field_xstruct = std::move(other.__fbthrift_field_xstruct);
    this->__fbthrift_field_friends = std::move(other.__fbthrift_field_friends);
    this->__fbthrift_field_serial_struct = std::move(other.__fbthrift_field_serial_struct);
    this->__fbthrift_field_serial_union = std::move(other.__fbthrift_field_serial_union);
    this->__fbthrift_field_serial_error = std::move(other.__fbthrift_field_serial_error);
    __isset = other.__isset;
    return *this;
}


ComposeStruct::ComposeStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum enum___arg, ::test::fixtures::python_capi::NormalDecentEnum renamed___arg, ::test::fixtures::python_capi::PrimitiveStruct primitive__arg, ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> aliased__arg, ::test::fixtures::python_capi::DepEnum xenum__arg, ::test::fixtures::python_capi::DepStruct xstruct__arg, ::std::vector<::test::fixtures::python_capi::DepStruct> friends__arg, ::test::fixtures::python_capi::SerializedStruct serial_struct__arg, ::test::fixtures::python_capi::SerializedUnion serial_union__arg, ::test::fixtures::python_capi::SerializedError serial_error__arg) :
    __fbthrift_field_enum_(std::move(enum___arg)),
    __fbthrift_field_renamed_(std::move(renamed___arg)),
    __fbthrift_field_primitive(std::move(primitive__arg)),
    __fbthrift_field_aliased(std::move(aliased__arg)),
    __fbthrift_field_xenum(std::move(xenum__arg)),
    __fbthrift_field_xstruct(std::move(xstruct__arg)),
    __fbthrift_field_friends(std::move(friends__arg)),
    __fbthrift_field_serial_struct(std::move(serial_struct__arg)),
    __fbthrift_field_serial_union(std::move(serial_union__arg)),
    __fbthrift_field_serial_error(std::move(serial_error__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
}


void ComposeStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_enum_ = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_renamed_ = ::test::fixtures::python_capi::NormalDecentEnum();
  ::apache::thrift::clear(this->__fbthrift_field_primitive);
  if (this->__fbthrift_field_aliased) this->__fbthrift_field_aliased = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>();
  this->__fbthrift_field_xenum = ::test::fixtures::python_capi::DepEnum();
  ::apache::thrift::clear(this->__fbthrift_field_xstruct);
  this->__fbthrift_field_friends.clear();
  ::apache::thrift::clear(this->__fbthrift_field_serial_struct);
  ::apache::thrift::clear(this->__fbthrift_field_serial_union);
  ::apache::thrift::clear(this->__fbthrift_field_serial_error);
  __isset = {};
}

void ComposeStruct::__fbthrift_clear_terse_fields() {
}

bool ComposeStruct::__fbthrift_is_empty() const {
  return false;
}

bool ComposeStruct::operator==(FOLLY_MAYBE_UNUSED const ComposeStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.enum__ref() == rhs.enum__ref())) {
    return false;
  }
  if (!(lhs.renamed__ref() == rhs.renamed__ref())) {
    return false;
  }
  if (!(lhs.primitive_ref() == rhs.primitive_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.aliased_ref(), rhs.aliased_ref()))) {
    return false;
  }
  if (!(lhs.xenum_ref() == rhs.xenum_ref())) {
    return false;
  }
  if (!(lhs.xstruct_ref() == rhs.xstruct_ref())) {
    return false;
  }
  if (!(lhs.friends_ref() == rhs.friends_ref())) {
    return false;
  }
  if (!(lhs.serial_struct_ref() == rhs.serial_struct_ref())) {
    return false;
  }
  if (!(lhs.serial_union_ref() == rhs.serial_union_ref())) {
    return false;
  }
  if (!(lhs.serial_error_ref() == rhs.serial_error_ref())) {
    return false;
  }
  return true;
}

bool ComposeStruct::operator<(FOLLY_MAYBE_UNUSED const ComposeStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::python_capi::PrimitiveStruct& ComposeStruct::get_primitive() const& {
  return __fbthrift_field_primitive;
}

::test::fixtures::python_capi::PrimitiveStruct ComposeStruct::get_primitive() && {
  return std::move(__fbthrift_field_primitive);
}

const ::test::fixtures::python_capi::DepStruct& ComposeStruct::get_xstruct() const& {
  return __fbthrift_field_xstruct;
}

::test::fixtures::python_capi::DepStruct ComposeStruct::get_xstruct() && {
  return std::move(__fbthrift_field_xstruct);
}

const ::std::vector<::test::fixtures::python_capi::DepStruct>& ComposeStruct::get_friends() const& {
  return __fbthrift_field_friends;
}

::std::vector<::test::fixtures::python_capi::DepStruct> ComposeStruct::get_friends() && {
  return std::move(__fbthrift_field_friends);
}

const ::test::fixtures::python_capi::SerializedStruct& ComposeStruct::get_serial_struct() const& {
  return __fbthrift_field_serial_struct;
}

::test::fixtures::python_capi::SerializedStruct ComposeStruct::get_serial_struct() && {
  return std::move(__fbthrift_field_serial_struct);
}

const ::test::fixtures::python_capi::SerializedUnion& ComposeStruct::get_serial_union() const& {
  return __fbthrift_field_serial_union;
}

::test::fixtures::python_capi::SerializedUnion ComposeStruct::get_serial_union() && {
  return std::move(__fbthrift_field_serial_union);
}

const ::test::fixtures::python_capi::SerializedError& ComposeStruct::get_serial_error() const& {
  return __fbthrift_field_serial_error;
}

::test::fixtures::python_capi::SerializedError ComposeStruct::get_serial_error() && {
  return std::move(__fbthrift_field_serial_error);
}


void swap(FOLLY_MAYBE_UNUSED ComposeStruct& a, FOLLY_MAYBE_UNUSED ComposeStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_enum_, b.__fbthrift_field_enum_);
  swap(a.__fbthrift_field_renamed_, b.__fbthrift_field_renamed_);
  swap(a.__fbthrift_field_primitive, b.__fbthrift_field_primitive);
  swap(a.__fbthrift_field_aliased, b.__fbthrift_field_aliased);
  swap(a.__fbthrift_field_xenum, b.__fbthrift_field_xenum);
  swap(a.__fbthrift_field_xstruct, b.__fbthrift_field_xstruct);
  swap(a.__fbthrift_field_friends, b.__fbthrift_field_friends);
  swap(a.__fbthrift_field_serial_struct, b.__fbthrift_field_serial_struct);
  swap(a.__fbthrift_field_serial_union, b.__fbthrift_field_serial_union);
  swap(a.__fbthrift_field_serial_error, b.__fbthrift_field_serial_error);
  swap(a.__isset, b.__isset);
}

template void ComposeStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComposeStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComposeStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComposeStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComposeStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComposeStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComposeStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComposeStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::PrimitiveStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::ListAlias>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::DepStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>,
        ::std::vector<::test::fixtures::python_capi::DepStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::SerializedStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComposeStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::python_capi::SerializedUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::Shallot>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::Shallot>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

#if FOLLY_CPLUSPLUS < 201703L
constexpr std::size_t const TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::size;
#endif
folly::Range<::test::fixtures::python_capi::Shallot::Type const*> const TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>::names);

bool TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::python_capi::Shallot::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace python_capi {

const char* Shallot::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/Onion";
}

const folly::StringPiece Shallot::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<Shallot>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece Shallot::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<Shallot>::name;
}

void Shallot::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::myEnum:
      destruct(value_.myEnum);
      break;
    case Type::myStruct:
      destruct(value_.myStruct);
      break;
    case Type::myString:
      destruct(value_.myString);
      break;
    case Type::intSet:
      destruct(value_.intSet);
      break;
    case Type::doubleList:
      destruct(value_.doubleList);
      break;
    case Type::strMap:
      destruct(value_.strMap);
      break;
    case Type::adaptedInt:
      destruct(value_.adaptedInt);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool Shallot::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool Shallot::operator==(const Shallot& rhs) const {
  return ::apache::thrift::op::detail::UnionEquality{}(*this, rhs);
}

bool Shallot::operator<(FOLLY_MAYBE_UNUSED const Shallot& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

void swap(Shallot& a, Shallot& b) {
  Shallot temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void Shallot::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Shallot::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Shallot::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Shallot::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Shallot::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Shallot::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Shallot::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Shallot::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Shallot,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::PrimitiveStruct>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructPatch";
}

const folly::StringPiece MyStructPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructPatchStruct>::name;
}

MyStructPatchStruct::MyStructPatchStruct(const MyStructPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(const MyStructPatchStruct& other) {
  MyStructPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructPatchStruct::MyStructPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


MyStructPatchStruct::~MyStructPatchStruct() {}

MyStructPatchStruct::MyStructPatchStruct(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


MyStructPatchStruct::MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::python_capi::MyStructFieldPatch patchPrior__arg, ::test::fixtures::python_capi::MyStructEnsureStruct ensure__arg, ::test::fixtures::python_capi::MyStructFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void MyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void MyStructPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool MyStructPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool MyStructPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldIdListToSetAdapter>(lhs.__fbthrift_field_remove, rhs.__fbthrift_field_remove)) {
    return false;
  }
  return true;
}

bool MyStructPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::python_capi::MyStructEnsureStruct& MyStructPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::python_capi::MyStructEnsureStruct MyStructPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyStructPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void MyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructField4PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructField4PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructField4PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructField4Patch";
}

const folly::StringPiece MyStructField4PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField4PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField4PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField4PatchStruct>::name;
}


MyStructField4PatchStruct::MyStructField4PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum assign__arg, bool clear__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField4PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_clear = bool();
  __isset = {};
}

void MyStructField4PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
}

bool MyStructField4PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear);
}

bool MyStructField4PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField4PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  return true;
}

bool MyStructField4PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField4PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField4PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField4PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__isset, b.__isset);
}

template void MyStructField4PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField4PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField4PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField4PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField4PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField4PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField4PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField4PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructField6PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructField6PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructField6PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructField6Patch";
}

const folly::StringPiece MyStructField6PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField6PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField6PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField6PatchStruct>::name;
}

MyStructField6PatchStruct::MyStructField6PatchStruct(const MyStructField6PatchStruct&) = default;
MyStructField6PatchStruct& MyStructField6PatchStruct::operator=(const MyStructField6PatchStruct&) = default;
MyStructField6PatchStruct::MyStructField6PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField6PatchStruct::~MyStructField6PatchStruct() {}

MyStructField6PatchStruct::MyStructField6PatchStruct(FOLLY_MAYBE_UNUSED MyStructField6PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField6PatchStruct& MyStructField6PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField6PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField6PatchStruct::MyStructField6PatchStruct(apache::thrift::FragileConstructor, ::std::vector<float> assign__arg, bool clear__arg, ::std::vector<float> prepend__arg, ::std::vector<float> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField6PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField6PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
}

bool MyStructField6PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::float_t>>(this->__fbthrift_field_prepend) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::list<::apache::thrift::type::float_t>>(this->__fbthrift_field_append);
}

bool MyStructField6PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField6PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return false;
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return false;
  }
  return true;
}

bool MyStructField6PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField6PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<float>* MyStructField6PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<float>* MyStructField6PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<float>& MyStructField6PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<float> MyStructField6PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<float>& MyStructField6PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<float> MyStructField6PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField6PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField6PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_prepend, b.__fbthrift_field_prepend);
  swap(a.__fbthrift_field_append, b.__fbthrift_field_append);
  swap(a.__isset, b.__isset);
}

template void MyStructField6PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField6PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField6PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField6PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField6PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField6PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField6PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField6PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructField7PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructField7PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructField7PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructField7Patch";
}

const folly::StringPiece MyStructField7PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField7PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField7PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField7PatchStruct>::name;
}

MyStructField7PatchStruct::MyStructField7PatchStruct(const MyStructField7PatchStruct&) = default;
MyStructField7PatchStruct& MyStructField7PatchStruct::operator=(const MyStructField7PatchStruct&) = default;
MyStructField7PatchStruct::MyStructField7PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField7PatchStruct::~MyStructField7PatchStruct() {}

MyStructField7PatchStruct::MyStructField7PatchStruct(FOLLY_MAYBE_UNUSED MyStructField7PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField7PatchStruct& MyStructField7PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField7PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField7PatchStruct::MyStructField7PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patchPrior__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::string> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_add(std::move(add__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField7PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField7PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_patchPrior.clear();
  this->__fbthrift_field_add.clear();
  this->__fbthrift_field_patch.clear();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_put.clear();
}

bool MyStructField7PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>>(this->__fbthrift_field_add) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::binary_t>>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>>(this->__fbthrift_field_put);
}

bool MyStructField7PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField7PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.patchPrior_ref() == rhs.patchPrior_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  if (!(lhs.patch_ref() == rhs.patch_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

bool MyStructField7PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField7PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::map<::std::string, ::std::string>* MyStructField7PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructField7PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField7PatchStruct::get_patchPrior() const& {
  return __fbthrift_field_patchPrior;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField7PatchStruct::get_patchPrior() && {
  return std::move(__fbthrift_field_patchPrior);
}

const ::std::map<::std::string, ::std::string>& MyStructField7PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::map<::std::string, ::std::string> MyStructField7PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}

const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& MyStructField7PatchStruct::get_patch() const& {
  return __fbthrift_field_patch;
}

::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> MyStructField7PatchStruct::get_patch() && {
  return std::move(__fbthrift_field_patch);
}

const ::std::unordered_set<::std::string>& MyStructField7PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::unordered_set<::std::string> MyStructField7PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::map<::std::string, ::std::string>& MyStructField7PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::string> MyStructField7PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField7PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField7PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_put, b.__fbthrift_field_put);
  swap(a.__isset, b.__isset);
}

template void MyStructField7PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField7PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField7PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField7PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField7PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField7PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField7PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField7PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField7PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructField7PatchStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>,
        ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructField8PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructField8PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructField8PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructField8Patch";
}

const folly::StringPiece MyStructField8PatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructField8PatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructField8PatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructField8PatchStruct>::name;
}

MyStructField8PatchStruct::MyStructField8PatchStruct(const MyStructField8PatchStruct&) = default;
MyStructField8PatchStruct& MyStructField8PatchStruct::operator=(const MyStructField8PatchStruct&) = default;
MyStructField8PatchStruct::MyStructField8PatchStruct() :
      __fbthrift_field_clear() {
}


MyStructField8PatchStruct::~MyStructField8PatchStruct() {}

MyStructField8PatchStruct::MyStructField8PatchStruct(FOLLY_MAYBE_UNUSED MyStructField8PatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __isset(other.__isset) {
}

MyStructField8PatchStruct& MyStructField8PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField8PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    __isset = other.__isset;
    return *this;
}


MyStructField8PatchStruct::MyStructField8PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::int32_t> assign__arg, bool clear__arg, ::std::set<::std::int32_t> remove__arg, ::std::set<::std::int32_t> add__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_add(std::move(add__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyStructField8PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
  __isset = {};
}

void MyStructField8PatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
}

bool MyStructField8PatchStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::i32_t>>(this->__fbthrift_field_remove) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::set<::apache::thrift::type::i32_t>>(this->__fbthrift_field_add);
}

bool MyStructField8PatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructField8PatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  return true;
}

bool MyStructField8PatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructField8PatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::set<::std::int32_t>* MyStructField8PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::set<::std::int32_t>* MyStructField8PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::set<::std::int32_t>& MyStructField8PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::set<::std::int32_t> MyStructField8PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::set<::std::int32_t>& MyStructField8PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::set<::std::int32_t> MyStructField8PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}


void swap(FOLLY_MAYBE_UNUSED MyStructField8PatchStruct& a, FOLLY_MAYBE_UNUSED MyStructField8PatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
  swap(a.__fbthrift_field_add, b.__fbthrift_field_add);
  swap(a.__isset, b.__isset);
}

template void MyStructField8PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField8PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField8PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField8PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField8PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField8PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField8PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField8PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructFieldPatch";
}

const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructFieldPatchStruct>::name;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(const MyStructFieldPatchStruct& srcObj) :
    __fbthrift_field_inty(srcObj.__fbthrift_field_inty),
    __fbthrift_field_stringy(srcObj.__fbthrift_field_stringy),
    __fbthrift_field_myItemy(srcObj.__fbthrift_field_myItemy),
    __fbthrift_field_myEnumy(srcObj.__fbthrift_field_myEnumy),
    __fbthrift_field_booly(srcObj.__fbthrift_field_booly),
    __fbthrift_field_floatListy(srcObj.__fbthrift_field_floatListy),
    __fbthrift_field_strMappy(srcObj.__fbthrift_field_strMappy),
    __fbthrift_field_intSetty(srcObj.__fbthrift_field_intSetty) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, 1>(*__fbthrift_field_inty, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 2>(*__fbthrift_field_stringy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, 3>(*__fbthrift_field_myItemy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, 4>(*__fbthrift_field_myEnumy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, 5>(*__fbthrift_field_booly, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, 6>(*__fbthrift_field_floatListy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, 7>(*__fbthrift_field_strMappy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, 8>(*__fbthrift_field_intSetty, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(const MyStructFieldPatchStruct& other) {
  MyStructFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyStructFieldPatchStruct::MyStructFieldPatchStruct() :
      __fbthrift_field_inty(::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>())),
      __fbthrift_field_stringy(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())),
      __fbthrift_field_myItemy(::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>())),
      __fbthrift_field_myEnumy(::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>())),
      __fbthrift_field_booly(::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>())),
      __fbthrift_field_floatListy(::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>())),
      __fbthrift_field_strMappy(::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>())),
      __fbthrift_field_intSetty(::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>())) {
}


MyStructFieldPatchStruct::~MyStructFieldPatchStruct() {}

MyStructFieldPatchStruct::MyStructFieldPatchStruct(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept :
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_myItemy(std::move(other.__fbthrift_field_myItemy)),
    __fbthrift_field_myEnumy(std::move(other.__fbthrift_field_myEnumy)),
    __fbthrift_field_booly(std::move(other.__fbthrift_field_booly)),
    __fbthrift_field_floatListy(std::move(other.__fbthrift_field_floatListy)),
    __fbthrift_field_strMappy(std::move(other.__fbthrift_field_strMappy)),
    __fbthrift_field_intSetty(std::move(other.__fbthrift_field_intSetty)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, 1>(*__fbthrift_field_inty, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 2>(*__fbthrift_field_stringy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, 3>(*__fbthrift_field_myItemy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, 4>(*__fbthrift_field_myEnumy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, 5>(*__fbthrift_field_booly, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, 6>(*__fbthrift_field_floatListy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, 7>(*__fbthrift_field_strMappy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, 8>(*__fbthrift_field_intSetty, *this);
}

MyStructFieldPatchStruct& MyStructFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_myItemy = std::move(other.__fbthrift_field_myItemy);
    this->__fbthrift_field_myEnumy = std::move(other.__fbthrift_field_myEnumy);
    this->__fbthrift_field_booly = std::move(other.__fbthrift_field_booly);
    this->__fbthrift_field_floatListy = std::move(other.__fbthrift_field_floatListy);
    this->__fbthrift_field_strMappy = std::move(other.__fbthrift_field_strMappy);
    this->__fbthrift_field_intSetty = std::move(other.__fbthrift_field_intSetty);
    return *this;
}


MyStructFieldPatchStruct::MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> inty__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> stringy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch> myItemy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch> myEnumy__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> booly__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch> floatListy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch> strMappy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch> intSetty__arg) :
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_myItemy(std::move(myItemy__arg)),
    __fbthrift_field_myEnumy(std::move(myEnumy__arg)),
    __fbthrift_field_booly(std::move(booly__arg)),
    __fbthrift_field_floatListy(std::move(floatListy__arg)),
    __fbthrift_field_strMappy(std::move(strMappy__arg)),
    __fbthrift_field_intSetty(std::move(intSetty__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, 1>(*__fbthrift_field_inty, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 2>(*__fbthrift_field_stringy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, 3>(*__fbthrift_field_myItemy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, 4>(*__fbthrift_field_myEnumy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, 5>(*__fbthrift_field_booly, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, 6>(*__fbthrift_field_floatListy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, 7>(*__fbthrift_field_strMappy, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, 8>(*__fbthrift_field_intSetty, *this);
}


void MyStructFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_inty = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_stringy = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_myItemy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>());
  this->__fbthrift_field_myEnumy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>());
  this->__fbthrift_field_booly = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_floatListy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>());
  this->__fbthrift_field_strMappy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>());
  this->__fbthrift_field_intSetty = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>());
}

void MyStructFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_inty = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>());
  this->__fbthrift_field_stringy = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
  this->__fbthrift_field_myItemy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>());
  this->__fbthrift_field_myEnumy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>());
  this->__fbthrift_field_booly = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>());
  this->__fbthrift_field_floatListy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>());
  this->__fbthrift_field_strMappy = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>());
  this->__fbthrift_field_intSetty = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>());
}

bool MyStructFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_inty.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>(*this->__fbthrift_field_inty)) &&
 (this->__fbthrift_field_stringy.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_stringy)) &&
 (this->__fbthrift_field_myItemy.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>(*this->__fbthrift_field_myItemy)) &&
 (this->__fbthrift_field_myEnumy.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>(*this->__fbthrift_field_myEnumy)) &&
 (this->__fbthrift_field_booly.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>(*this->__fbthrift_field_booly)) &&
 (this->__fbthrift_field_floatListy.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>(*this->__fbthrift_field_floatListy)) &&
 (this->__fbthrift_field_strMappy.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>(*this->__fbthrift_field_strMappy)) &&
 (this->__fbthrift_field_intSetty.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>(*this->__fbthrift_field_intSetty));
}

bool MyStructFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>(*lhs.__fbthrift_field_inty, *rhs.__fbthrift_field_inty)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*lhs.__fbthrift_field_stringy, *rhs.__fbthrift_field_stringy)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>(*lhs.__fbthrift_field_myItemy, *rhs.__fbthrift_field_myItemy)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>(*lhs.__fbthrift_field_myEnumy, *rhs.__fbthrift_field_myEnumy)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>(*lhs.__fbthrift_field_booly, *rhs.__fbthrift_field_booly)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>(*lhs.__fbthrift_field_floatListy, *rhs.__fbthrift_field_floatListy)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>(*lhs.__fbthrift_field_strMappy, *rhs.__fbthrift_field_strMappy)) {
    return false;
  }
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>(*lhs.__fbthrift_field_intSetty, *rhs.__fbthrift_field_intSetty)) {
    return false;
  }
  return true;
}

bool MyStructFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyStructFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_myItemy, b.__fbthrift_field_myItemy);
  swap(a.__fbthrift_field_myEnumy, b.__fbthrift_field_myEnumy);
  swap(a.__fbthrift_field_booly, b.__fbthrift_field_booly);
  swap(a.__fbthrift_field_floatListy, b.__fbthrift_field_floatListy);
  swap(a.__fbthrift_field_strMappy, b.__fbthrift_field_strMappy);
  swap(a.__fbthrift_field_intSetty, b.__fbthrift_field_intSetty);
}

template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItemPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructField4Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructField6Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructField7Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyStructField8Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyStructEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyStructEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyStructEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyStructEnsureStruct";
}

const folly::StringPiece MyStructEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStructEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStructEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStructEnsureStruct>::name;
}

MyStructEnsureStruct::MyStructEnsureStruct(const MyStructEnsureStruct&) = default;
MyStructEnsureStruct& MyStructEnsureStruct::operator=(const MyStructEnsureStruct&) = default;
MyStructEnsureStruct::MyStructEnsureStruct() :
      __fbthrift_field_inty(),
      __fbthrift_field_myEnumy(),
      __fbthrift_field_booly() {
}


MyStructEnsureStruct::~MyStructEnsureStruct() {}

MyStructEnsureStruct::MyStructEnsureStruct(FOLLY_MAYBE_UNUSED MyStructEnsureStruct&& other) noexcept :
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_myItemy(std::move(other.__fbthrift_field_myItemy)),
    __fbthrift_field_myEnumy(std::move(other.__fbthrift_field_myEnumy)),
    __fbthrift_field_booly(std::move(other.__fbthrift_field_booly)),
    __fbthrift_field_floatListy(std::move(other.__fbthrift_field_floatListy)),
    __fbthrift_field_strMappy(std::move(other.__fbthrift_field_strMappy)),
    __fbthrift_field_intSetty(std::move(other.__fbthrift_field_intSetty)),
    __isset(other.__isset) {
}

MyStructEnsureStruct& MyStructEnsureStruct::operator=(FOLLY_MAYBE_UNUSED MyStructEnsureStruct&& other) noexcept {
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_myItemy = std::move(other.__fbthrift_field_myItemy);
    this->__fbthrift_field_myEnumy = std::move(other.__fbthrift_field_myEnumy);
    this->__fbthrift_field_booly = std::move(other.__fbthrift_field_booly);
    this->__fbthrift_field_floatListy = std::move(other.__fbthrift_field_floatListy);
    this->__fbthrift_field_strMappy = std::move(other.__fbthrift_field_strMappy);
    this->__fbthrift_field_intSetty = std::move(other.__fbthrift_field_intSetty);
    __isset = other.__isset;
    return *this;
}


MyStructEnsureStruct::MyStructEnsureStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool booly__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg) :
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_myItemy(std::move(myItemy__arg)),
    __fbthrift_field_myEnumy(std::move(myEnumy__arg)),
    __fbthrift_field_booly(std::move(booly__arg)),
    __fbthrift_field_floatListy(std::move(floatListy__arg)),
    __fbthrift_field_strMappy(std::move(strMappy__arg)),
    __fbthrift_field_intSetty(std::move(intSetty__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void MyStructEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_inty = ::std::int64_t();
  this->__fbthrift_field_stringy = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myItemy.reset();
  this->__fbthrift_field_myEnumy = ::test::fixtures::python_capi::MyEnum();
  this->__fbthrift_field_booly = bool();
  this->__fbthrift_field_floatListy.clear();
  this->__fbthrift_field_strMappy.clear();
  this->__fbthrift_field_intSetty.clear();
  __isset = {};
}

void MyStructEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__fbthrift_field_myItemy) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6));
}

bool MyStructEnsureStruct::operator==(FOLLY_MAYBE_UNUSED const MyStructEnsureStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.inty_ref() == rhs.inty_ref())) {
    return false;
  }
  if (!(lhs.stringy_ref() == rhs.stringy_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.myItemy_ref(), rhs.myItemy_ref()))) {
    return false;
  }
  if (!(lhs.myEnumy_ref() == rhs.myEnumy_ref())) {
    return false;
  }
  if (!(lhs.booly_ref() == rhs.booly_ref())) {
    return false;
  }
  if (!(lhs.floatListy_ref() == rhs.floatListy_ref())) {
    return false;
  }
  if (!(lhs.strMappy_ref() == rhs.strMappy_ref())) {
    return false;
  }
  if (!(lhs.intSetty_ref() == rhs.intSetty_ref())) {
    return false;
  }
  return true;
}

bool MyStructEnsureStruct::operator<(FOLLY_MAYBE_UNUSED const MyStructEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<float>* MyStructEnsureStruct::get_floatListy() const& {
  return floatListy_ref().has_value() ? std::addressof(__fbthrift_field_floatListy) : nullptr;
}

::std::vector<float>* MyStructEnsureStruct::get_floatListy() & {
  return floatListy_ref().has_value() ? std::addressof(__fbthrift_field_floatListy) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStructEnsureStruct::get_strMappy() const& {
  return strMappy_ref().has_value() ? std::addressof(__fbthrift_field_strMappy) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructEnsureStruct::get_strMappy() & {
  return strMappy_ref().has_value() ? std::addressof(__fbthrift_field_strMappy) : nullptr;
}

const ::std::set<::std::int32_t>* MyStructEnsureStruct::get_intSetty() const& {
  return intSetty_ref().has_value() ? std::addressof(__fbthrift_field_intSetty) : nullptr;
}

::std::set<::std::int32_t>* MyStructEnsureStruct::get_intSetty() & {
  return intSetty_ref().has_value() ? std::addressof(__fbthrift_field_intSetty) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED MyStructEnsureStruct& a, FOLLY_MAYBE_UNUSED MyStructEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_myItemy, b.__fbthrift_field_myItemy);
  swap(a.__fbthrift_field_myEnumy, b.__fbthrift_field_myEnumy);
  swap(a.__fbthrift_field_booly, b.__fbthrift_field_booly);
  swap(a.__fbthrift_field_floatListy, b.__fbthrift_field_floatListy);
  swap(a.__fbthrift_field_strMappy, b.__fbthrift_field_strMappy);
  swap(a.__fbthrift_field_intSetty, b.__fbthrift_field_intSetty);
  swap(a.__isset, b.__isset);
}

template void MyStructEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructEnsureStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItem>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyDataItemPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyDataItemPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyDataItemPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyDataItemPatch";
}

const folly::StringPiece MyDataItemPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItemPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItemPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItemPatchStruct>::name;
}

MyDataItemPatchStruct::MyDataItemPatchStruct(const MyDataItemPatchStruct& srcObj) :
    __fbthrift_field_assign(srcObj.__fbthrift_field_assign),
    __fbthrift_field_clear(srcObj.__fbthrift_field_clear),
    __fbthrift_field_patchPrior(srcObj.__fbthrift_field_patchPrior),
    __fbthrift_field_ensure(srcObj.__fbthrift_field_ensure),
    __fbthrift_field_patch(srcObj.__fbthrift_field_patch),
    __fbthrift_field_remove(srcObj.__fbthrift_field_remove) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyDataItemPatchStruct& MyDataItemPatchStruct::operator=(const MyDataItemPatchStruct& other) {
  MyDataItemPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataItemPatchStruct::MyDataItemPatchStruct() :
      __fbthrift_field_clear() {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


MyDataItemPatchStruct::~MyDataItemPatchStruct() {}

MyDataItemPatchStruct::MyDataItemPatchStruct(FOLLY_MAYBE_UNUSED MyDataItemPatchStruct&& other) noexcept :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patchPrior(std::move(other.__fbthrift_field_patchPrior)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

MyDataItemPatchStruct& MyDataItemPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataItemPatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patchPrior = std::move(other.__fbthrift_field_patchPrior);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    return *this;
}


MyDataItemPatchStruct::MyDataItemPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> assign__arg, bool clear__arg, ::test::fixtures::python_capi::MyDataItemFieldPatch patchPrior__arg, ::test::fixtures::python_capi::MyDataItemEnsureStruct ensure__arg, ::test::fixtures::python_capi::MyDataItemFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patchPrior(std::move(patchPrior__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_remove(std::move(remove__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}


void MyDataItemPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

void MyDataItemPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3>(__fbthrift_field_patchPrior, *this);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7>(__fbthrift_field_remove, *this);
}

bool MyDataItemPatchStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_assign) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::bool_t>(this->__fbthrift_field_clear) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>>(this->__fbthrift_field_patchPrior) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemEnsureStruct>>(this->__fbthrift_field_ensure) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>>(this->__fbthrift_field_patch) &&
 ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>>(this->__fbthrift_field_remove);
}

bool MyDataItemPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataItemPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>(lhs.__fbthrift_field_patchPrior, rhs.__fbthrift_field_patchPrior)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::FieldIdListToSetAdapter>(lhs.__fbthrift_field_remove, rhs.__fbthrift_field_remove)) {
    return false;
  }
  return true;
}

bool MyDataItemPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataItemPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::python_capi::MyDataItemEnsureStruct& MyDataItemPatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::python_capi::MyDataItemEnsureStruct MyDataItemPatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(FOLLY_MAYBE_UNUSED MyDataItemPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataItemPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.__fbthrift_field_clear, b.__fbthrift_field_clear);
  swap(a.__fbthrift_field_patchPrior, b.__fbthrift_field_patchPrior);
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.__fbthrift_field_patch, b.__fbthrift_field_patch);
  swap(a.__fbthrift_field_remove, b.__fbthrift_field_remove);
}

template void MyDataItemPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItemPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItemPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItemPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItemPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItemPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItemPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItemPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataItemPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItem>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataItemPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItemFieldPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataItemPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItemEnsureStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataItemPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::python_capi::MyDataItemFieldPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyDataItemFieldPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyDataItemFieldPatch";
}

const folly::StringPiece MyDataItemFieldPatchStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItemFieldPatchStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItemFieldPatchStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItemFieldPatchStruct>::name;
}

MyDataItemFieldPatchStruct::MyDataItemFieldPatchStruct(const MyDataItemFieldPatchStruct& srcObj) :
    __fbthrift_field_s(srcObj.__fbthrift_field_s) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_s, *this);
}

MyDataItemFieldPatchStruct& MyDataItemFieldPatchStruct::operator=(const MyDataItemFieldPatchStruct& other) {
  MyDataItemFieldPatchStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

MyDataItemFieldPatchStruct::MyDataItemFieldPatchStruct() :
      __fbthrift_field_s(::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>())) {
}


MyDataItemFieldPatchStruct::~MyDataItemFieldPatchStruct() {}

MyDataItemFieldPatchStruct::MyDataItemFieldPatchStruct(FOLLY_MAYBE_UNUSED MyDataItemFieldPatchStruct&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_s, *this);
}

MyDataItemFieldPatchStruct& MyDataItemFieldPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataItemFieldPatchStruct&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    return *this;
}


MyDataItemFieldPatchStruct::MyDataItemFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> s__arg) :
    __fbthrift_field_s(std::move(s__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1>(*__fbthrift_field_s, *this);
}


void MyDataItemFieldPatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
}

void MyDataItemFieldPatchStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_s = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>::fromStaticConstant(&::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>());
}

bool MyDataItemFieldPatchStruct::__fbthrift_is_empty() const {
  return (this->__fbthrift_field_s.get() == &::apache::thrift::op::getIntrinsicDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>() || ::apache::thrift::op::isEmpty<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*this->__fbthrift_field_s));
}

bool MyDataItemFieldPatchStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataItemFieldPatchStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!::apache::thrift::op::equal<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>(*lhs.__fbthrift_field_s, *rhs.__fbthrift_field_s)) {
    return false;
  }
  return true;
}

bool MyDataItemFieldPatchStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataItemFieldPatchStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyDataItemFieldPatchStruct& a, FOLLY_MAYBE_UNUSED MyDataItemFieldPatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
}

template void MyDataItemFieldPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItemFieldPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItemFieldPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItemFieldPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItemFieldPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItemFieldPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItemFieldPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItemFieldPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataItemFieldPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::python_capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::python_capi::MyDataItemEnsureStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::python_capi::MyDataItemEnsureStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace python_capi {

const char* MyDataItemEnsureStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/python_capi/MyDataItemEnsureStruct";
}

const folly::StringPiece MyDataItemEnsureStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItemEnsureStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItemEnsureStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItemEnsureStruct>::name;
}

MyDataItemEnsureStruct::MyDataItemEnsureStruct(const MyDataItemEnsureStruct&) = default;
MyDataItemEnsureStruct& MyDataItemEnsureStruct::operator=(const MyDataItemEnsureStruct&) = default;
MyDataItemEnsureStruct::MyDataItemEnsureStruct() {
}


MyDataItemEnsureStruct::~MyDataItemEnsureStruct() {}

MyDataItemEnsureStruct::MyDataItemEnsureStruct(FOLLY_MAYBE_UNUSED MyDataItemEnsureStruct&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __isset(other.__isset) {
}

MyDataItemEnsureStruct& MyDataItemEnsureStruct::operator=(FOLLY_MAYBE_UNUSED MyDataItemEnsureStruct&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    __isset = other.__isset;
    return *this;
}


MyDataItemEnsureStruct::MyDataItemEnsureStruct(apache::thrift::FragileConstructor, ::std::string s__arg) :
    __fbthrift_field_s(std::move(s__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void MyDataItemEnsureStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  __isset = {};
}

void MyDataItemEnsureStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataItemEnsureStruct::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool MyDataItemEnsureStruct::operator==(FOLLY_MAYBE_UNUSED const MyDataItemEnsureStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.s_ref() == rhs.s_ref())) {
    return false;
  }
  return true;
}

bool MyDataItemEnsureStruct::operator<(FOLLY_MAYBE_UNUSED const MyDataItemEnsureStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyDataItemEnsureStruct& a, FOLLY_MAYBE_UNUSED MyDataItemEnsureStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__isset, b.__isset);
}

template void MyDataItemEnsureStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItemEnsureStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItemEnsureStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItemEnsureStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItemEnsureStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItemEnsureStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItemEnsureStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItemEnsureStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::python_capi

namespace test { namespace fixtures { namespace python_capi { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::thrift::test::lib::StringDoubler, 2, ::std::string, ::test::fixtures::python_capi::StringPair>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 1, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::AdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::AdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, 10, ::apache::thrift::type::ExternId, ::test::fixtures::python_capi::Shallot>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 3, ::test::fixtures::python_capi::MyStructFieldPatchStruct, ::test::fixtures::python_capi::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, 6, ::test::fixtures::python_capi::MyStructFieldPatchStruct, ::test::fixtures::python_capi::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::python_capi::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, 1, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 2, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, 3, ::test::fixtures::python_capi::MyDataItemPatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, 4, ::test::fixtures::python_capi::MyStructField4PatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, 5, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, 6, ::test::fixtures::python_capi::MyStructField6PatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, 7, ::test::fixtures::python_capi::MyStructField7PatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, 8, ::test::fixtures::python_capi::MyStructField8PatchStruct, ::test::fixtures::python_capi::MyStructFieldPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 3, ::test::fixtures::python_capi::MyDataItemFieldPatchStruct, ::test::fixtures::python_capi::MyDataItemPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, 6, ::test::fixtures::python_capi::MyDataItemFieldPatchStruct, ::test::fixtures::python_capi::MyDataItemPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::FieldIdListToSetAdapter, 7, ::std::vector<::std::int16_t>, ::test::fixtures::python_capi::MyDataItemPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::python_capi::MyDataItemFieldPatchStruct>();
}
}}}} // test::fixtures::python_capi
