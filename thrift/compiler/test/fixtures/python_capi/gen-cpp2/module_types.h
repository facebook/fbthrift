/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/python_capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/lib/thrift/gen-cpp2/patch_types.h"
#include "thrift/compiler/test/fixtures/python_capi/src/gen-cpp2/thrift_dep_types.h"
#include "thrift/compiler/test/fixtures/python_capi/src/gen-cpp2/serialized_dep_types.h"
#include "thrift/lib/thrift/gen-cpp2/id_types.h"
#include "thrift/lib/thrift/gen-cpp2/schema_types.h"
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <folly/container/F14Set.h>
#include <folly/FBString.h>
#include <folly/container/F14Map.h>
#include <folly/small_vector.h>
#include "thrift/test/python_capi/adapter.h"
#include "thrift/lib/cpp2/util/ManagedStringView.h"

namespace apache {
namespace thrift {
namespace ident {
struct inty;
struct stringy;
struct myItemy;
struct myEnumy;
struct boulet;
struct floatListy;
struct strMappy;
struct intSetty;
struct s;
struct s;
struct x;
struct normal;
struct doubled;
struct booly;
struct charry;
struct shortay;
struct inty;
struct longy;
struct floaty;
struct dubby;
struct stringy;
struct bytey;
struct buffy;
struct pointbuffy;
struct patched_struct;
struct empty_struct;
struct fbstring;
struct managed_string_view;
struct some_error;
struct adapted_int;
struct list_adapted_int;
struct set_adapted_int;
struct inline_adapted_int;
struct boolz;
struct intz;
struct stringz;
struct encoded;
struct uidz;
struct matrix;
struct ucharz;
struct voxels;
struct buf_ptrs;
struct enumz;
struct intz;
struct binnaz;
struct encoded;
struct uidz;
struct charz;
struct setz;
struct enumz;
struct intz;
struct binnaz;
struct encoded;
struct flotz;
struct map_list;
struct list_map;
struct fast_list_map;
struct buf_map;
struct unsigned_list_map;
struct enum_;
struct renamed_;
struct primitive;
struct aliased;
struct xenum;
struct xstruct;
struct friends;
struct serial_struct;
struct serial_union;
struct serial_error;
struct myEnum;
struct myStruct;
struct myString;
struct intSet;
struct doubleList;
struct strMap;
struct adaptedInt;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct remove;
struct assign;
struct clear;
struct assign;
struct clear;
struct prepend;
struct append;
struct assign;
struct clear;
struct patchPrior;
struct add;
struct patch;
struct remove;
struct put;
struct assign;
struct clear;
struct remove;
struct add;
struct inty;
struct stringy;
struct myItemy;
struct myEnumy;
struct booly;
struct floatListy;
struct strMappy;
struct intSetty;
struct inty;
struct stringy;
struct myItemy;
struct myEnumy;
struct booly;
struct floatListy;
struct strMappy;
struct intSetty;
struct assign;
struct clear;
struct patchPrior;
struct ensure;
struct patch;
struct remove;
struct s;
struct s;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myItemy
#define APACHE_THRIFT_ACCESSOR_myItemy
APACHE_THRIFT_DEFINE_ACCESSOR(myItemy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnumy
#define APACHE_THRIFT_ACCESSOR_myEnumy
APACHE_THRIFT_DEFINE_ACCESSOR(myEnumy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boulet
#define APACHE_THRIFT_ACCESSOR_boulet
APACHE_THRIFT_DEFINE_ACCESSOR(boulet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatListy
#define APACHE_THRIFT_ACCESSOR_floatListy
APACHE_THRIFT_DEFINE_ACCESSOR(floatListy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMappy
#define APACHE_THRIFT_ACCESSOR_strMappy
APACHE_THRIFT_DEFINE_ACCESSOR(strMappy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSetty
#define APACHE_THRIFT_ACCESSOR_intSetty
APACHE_THRIFT_DEFINE_ACCESSOR(intSetty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_x
#define APACHE_THRIFT_ACCESSOR_x
APACHE_THRIFT_DEFINE_ACCESSOR(x);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_normal
#define APACHE_THRIFT_ACCESSOR_normal
APACHE_THRIFT_DEFINE_ACCESSOR(normal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubled
#define APACHE_THRIFT_ACCESSOR_doubled
APACHE_THRIFT_DEFINE_ACCESSOR(doubled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_booly
#define APACHE_THRIFT_ACCESSOR_booly
APACHE_THRIFT_DEFINE_ACCESSOR(booly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_charry
#define APACHE_THRIFT_ACCESSOR_charry
APACHE_THRIFT_DEFINE_ACCESSOR(charry);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_shortay
#define APACHE_THRIFT_ACCESSOR_shortay
APACHE_THRIFT_DEFINE_ACCESSOR(shortay);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longy
#define APACHE_THRIFT_ACCESSOR_longy
APACHE_THRIFT_DEFINE_ACCESSOR(longy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floaty
#define APACHE_THRIFT_ACCESSOR_floaty
APACHE_THRIFT_DEFINE_ACCESSOR(floaty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_dubby
#define APACHE_THRIFT_ACCESSOR_dubby
APACHE_THRIFT_DEFINE_ACCESSOR(dubby);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bytey
#define APACHE_THRIFT_ACCESSOR_bytey
APACHE_THRIFT_DEFINE_ACCESSOR(bytey);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buffy
#define APACHE_THRIFT_ACCESSOR_buffy
APACHE_THRIFT_DEFINE_ACCESSOR(buffy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_pointbuffy
#define APACHE_THRIFT_ACCESSOR_pointbuffy
APACHE_THRIFT_DEFINE_ACCESSOR(pointbuffy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patched_struct
#define APACHE_THRIFT_ACCESSOR_patched_struct
APACHE_THRIFT_DEFINE_ACCESSOR(patched_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_empty_struct
#define APACHE_THRIFT_ACCESSOR_empty_struct
APACHE_THRIFT_DEFINE_ACCESSOR(empty_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fbstring
#define APACHE_THRIFT_ACCESSOR_fbstring
APACHE_THRIFT_DEFINE_ACCESSOR(fbstring);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_managed_string_view
#define APACHE_THRIFT_ACCESSOR_managed_string_view
APACHE_THRIFT_DEFINE_ACCESSOR(managed_string_view);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_some_error
#define APACHE_THRIFT_ACCESSOR_some_error
APACHE_THRIFT_DEFINE_ACCESSOR(some_error);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adapted_int
#define APACHE_THRIFT_ACCESSOR_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_adapted_int
#define APACHE_THRIFT_ACCESSOR_list_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(list_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_set_adapted_int
#define APACHE_THRIFT_ACCESSOR_set_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(set_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inline_adapted_int
#define APACHE_THRIFT_ACCESSOR_inline_adapted_int
APACHE_THRIFT_DEFINE_ACCESSOR(inline_adapted_int);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolz
#define APACHE_THRIFT_ACCESSOR_boolz
APACHE_THRIFT_DEFINE_ACCESSOR(boolz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringz
#define APACHE_THRIFT_ACCESSOR_stringz
APACHE_THRIFT_DEFINE_ACCESSOR(stringz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uidz
#define APACHE_THRIFT_ACCESSOR_uidz
APACHE_THRIFT_DEFINE_ACCESSOR(uidz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_matrix
#define APACHE_THRIFT_ACCESSOR_matrix
APACHE_THRIFT_DEFINE_ACCESSOR(matrix);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ucharz
#define APACHE_THRIFT_ACCESSOR_ucharz
APACHE_THRIFT_DEFINE_ACCESSOR(ucharz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_voxels
#define APACHE_THRIFT_ACCESSOR_voxels
APACHE_THRIFT_DEFINE_ACCESSOR(voxels);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buf_ptrs
#define APACHE_THRIFT_ACCESSOR_buf_ptrs
APACHE_THRIFT_DEFINE_ACCESSOR(buf_ptrs);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumz
#define APACHE_THRIFT_ACCESSOR_enumz
APACHE_THRIFT_DEFINE_ACCESSOR(enumz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binnaz
#define APACHE_THRIFT_ACCESSOR_binnaz
APACHE_THRIFT_DEFINE_ACCESSOR(binnaz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_uidz
#define APACHE_THRIFT_ACCESSOR_uidz
APACHE_THRIFT_DEFINE_ACCESSOR(uidz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_charz
#define APACHE_THRIFT_ACCESSOR_charz
APACHE_THRIFT_DEFINE_ACCESSOR(charz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setz
#define APACHE_THRIFT_ACCESSOR_setz
APACHE_THRIFT_DEFINE_ACCESSOR(setz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumz
#define APACHE_THRIFT_ACCESSOR_enumz
APACHE_THRIFT_DEFINE_ACCESSOR(enumz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intz
#define APACHE_THRIFT_ACCESSOR_intz
APACHE_THRIFT_DEFINE_ACCESSOR(intz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binnaz
#define APACHE_THRIFT_ACCESSOR_binnaz
APACHE_THRIFT_DEFINE_ACCESSOR(binnaz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_encoded
#define APACHE_THRIFT_ACCESSOR_encoded
APACHE_THRIFT_DEFINE_ACCESSOR(encoded);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_flotz
#define APACHE_THRIFT_ACCESSOR_flotz
APACHE_THRIFT_DEFINE_ACCESSOR(flotz);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_map_list
#define APACHE_THRIFT_ACCESSOR_map_list
APACHE_THRIFT_DEFINE_ACCESSOR(map_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_map
#define APACHE_THRIFT_ACCESSOR_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fast_list_map
#define APACHE_THRIFT_ACCESSOR_fast_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(fast_list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_buf_map
#define APACHE_THRIFT_ACCESSOR_buf_map
APACHE_THRIFT_DEFINE_ACCESSOR(buf_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unsigned_list_map
#define APACHE_THRIFT_ACCESSOR_unsigned_list_map
APACHE_THRIFT_DEFINE_ACCESSOR(unsigned_list_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enum_
#define APACHE_THRIFT_ACCESSOR_enum_
APACHE_THRIFT_DEFINE_ACCESSOR(enum_);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_renamed_
#define APACHE_THRIFT_ACCESSOR_renamed_
APACHE_THRIFT_DEFINE_ACCESSOR(renamed_);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_primitive
#define APACHE_THRIFT_ACCESSOR_primitive
APACHE_THRIFT_DEFINE_ACCESSOR(primitive);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aliased
#define APACHE_THRIFT_ACCESSOR_aliased
APACHE_THRIFT_DEFINE_ACCESSOR(aliased);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_xenum
#define APACHE_THRIFT_ACCESSOR_xenum
APACHE_THRIFT_DEFINE_ACCESSOR(xenum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_xstruct
#define APACHE_THRIFT_ACCESSOR_xstruct
APACHE_THRIFT_DEFINE_ACCESSOR(xstruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_friends
#define APACHE_THRIFT_ACCESSOR_friends
APACHE_THRIFT_DEFINE_ACCESSOR(friends);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_struct
#define APACHE_THRIFT_ACCESSOR_serial_struct
APACHE_THRIFT_DEFINE_ACCESSOR(serial_struct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_union
#define APACHE_THRIFT_ACCESSOR_serial_union
APACHE_THRIFT_DEFINE_ACCESSOR(serial_union);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_serial_error
#define APACHE_THRIFT_ACCESSOR_serial_error
APACHE_THRIFT_DEFINE_ACCESSOR(serial_error);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myString
#define APACHE_THRIFT_ACCESSOR_myString
APACHE_THRIFT_DEFINE_ACCESSOR(myString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSet
#define APACHE_THRIFT_ACCESSOR_intSet
APACHE_THRIFT_DEFINE_ACCESSOR(intSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleList
#define APACHE_THRIFT_ACCESSOR_doubleList
APACHE_THRIFT_DEFINE_ACCESSOR(doubleList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMap
#define APACHE_THRIFT_ACCESSOR_strMap
APACHE_THRIFT_DEFINE_ACCESSOR(strMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_adaptedInt
#define APACHE_THRIFT_ACCESSOR_adaptedInt
APACHE_THRIFT_DEFINE_ACCESSOR(adaptedInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_prepend
#define APACHE_THRIFT_ACCESSOR_prepend
APACHE_THRIFT_DEFINE_ACCESSOR(prepend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_append
#define APACHE_THRIFT_ACCESSOR_append
APACHE_THRIFT_DEFINE_ACCESSOR(append);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myItemy
#define APACHE_THRIFT_ACCESSOR_myItemy
APACHE_THRIFT_DEFINE_ACCESSOR(myItemy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnumy
#define APACHE_THRIFT_ACCESSOR_myEnumy
APACHE_THRIFT_DEFINE_ACCESSOR(myEnumy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_booly
#define APACHE_THRIFT_ACCESSOR_booly
APACHE_THRIFT_DEFINE_ACCESSOR(booly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatListy
#define APACHE_THRIFT_ACCESSOR_floatListy
APACHE_THRIFT_DEFINE_ACCESSOR(floatListy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMappy
#define APACHE_THRIFT_ACCESSOR_strMappy
APACHE_THRIFT_DEFINE_ACCESSOR(strMappy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSetty
#define APACHE_THRIFT_ACCESSOR_intSetty
APACHE_THRIFT_DEFINE_ACCESSOR(intSetty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_inty
#define APACHE_THRIFT_ACCESSOR_inty
APACHE_THRIFT_DEFINE_ACCESSOR(inty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringy
#define APACHE_THRIFT_ACCESSOR_stringy
APACHE_THRIFT_DEFINE_ACCESSOR(stringy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myItemy
#define APACHE_THRIFT_ACCESSOR_myItemy
APACHE_THRIFT_DEFINE_ACCESSOR(myItemy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnumy
#define APACHE_THRIFT_ACCESSOR_myEnumy
APACHE_THRIFT_DEFINE_ACCESSOR(myEnumy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_booly
#define APACHE_THRIFT_ACCESSOR_booly
APACHE_THRIFT_DEFINE_ACCESSOR(booly);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatListy
#define APACHE_THRIFT_ACCESSOR_floatListy
APACHE_THRIFT_DEFINE_ACCESSOR(floatListy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMappy
#define APACHE_THRIFT_ACCESSOR_strMappy
APACHE_THRIFT_DEFINE_ACCESSOR(strMappy);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intSetty
#define APACHE_THRIFT_ACCESSOR_intSetty
APACHE_THRIFT_DEFINE_ACCESSOR(intSetty);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchPrior
#define APACHE_THRIFT_ACCESSOR_patchPrior
APACHE_THRIFT_DEFINE_ACCESSOR(patchPrior);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace python_capi {

enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
};



enum class NormalDecentEnum {
  l0O1 = 1,
  FuBaR = 2,
};



}}} // test::fixtures::python_capi

namespace std {
template<> struct hash<::test::fixtures::python_capi::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::python_capi::MyEnum> {};
template<> struct hash<::test::fixtures::python_capi::NormalDecentEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::python_capi::NormalDecentEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::python_capi::MyEnum>;

template <> struct TEnumTraits<::test::fixtures::python_capi::MyEnum> {
  using type = ::test::fixtures::python_capi::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue2; }
};


template <> struct TEnumDataStorage<::test::fixtures::python_capi::NormalDecentEnum>;

template <> struct TEnumTraits<::test::fixtures::python_capi::NormalDecentEnum> {
  using type = ::test::fixtures::python_capi::NormalDecentEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::l0O1; }
  static constexpr type max() { return type::FuBaR; }
};


}} // apache::thrift


// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace python_capi {
class MyStruct;
class MyDataItem;
class TransitiveDoubler;
namespace detail {
class DoubledPair;
} // namespace detail
class StringPair;
class VapidStruct;
class PrimitiveStruct;
class AdaptedFields;
class ListStruct;
class SetStruct;
class MapStruct;
class ComposeStruct;
class Shallot;
class MyStructPatchStruct;
class MyStructField4PatchStruct;
class MyStructField6PatchStruct;
class MyStructField7PatchStruct;
class MyStructField8PatchStruct;
class MyStructFieldPatchStruct;
class MyStructEnsureStruct;
class MyDataItemPatchStruct;
class MyDataItemFieldPatchStruct;
class MyDataItemEnsureStruct;
}}} // test::fixtures::python_capi
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace python_capi {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

typedef uint64_t uint64;
typedef ::test::fixtures::python_capi::uint64 ui64;
typedef ::std::int8_t signed_byte;
typedef folly::IOBuf IOBuf;
typedef std::unique_ptr<folly::IOBuf> IOBufPtr;
typedef ::test::fixtures::python_capi::ListStruct ListAlias;

class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyDataItemPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor, ::std::string s__arg);

  MyDataItem(MyDataItem&&) noexcept;

  MyDataItem(const MyDataItem& src);


  MyDataItem& operator=(MyDataItem&&) noexcept;
  MyDataItem& operator=(const MyDataItem& src);

  ~MyDataItem();

 private:
  ::std::string __fbthrift_field_s;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  ::std::string get_s() && {
    return std::move(__fbthrift_field_s);
  }

  template <typename T_MyDataItem_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_MyDataItem_s_struct_setter&& s_) {
    s_ref() = std::forward<T_MyDataItem_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  using __fbthrift_patch_struct = MyStructPatchStruct;
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::myItemy,
    ::apache::thrift::ident::myEnumy,
    ::apache::thrift::ident::boulet,
    ::apache::thrift::ident::floatListy,
    ::apache::thrift::ident::strMappy,
    ::apache::thrift::ident::intSetty
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::test::fixtures::python_capi::MyDataItem myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool boulet__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_inty;
 private:
  ::std::string __fbthrift_field_stringy;
 private:
  ::test::fixtures::python_capi::MyDataItem __fbthrift_field_myItemy;
 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_myEnumy;
 private:
  bool __fbthrift_field_boulet;
 private:
  ::std::vector<float> __fbthrift_field_floatListy;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_strMappy;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_intSetty;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inty_ref() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inty_ref() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inty() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inty() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inty() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringy_ref() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringy_ref() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringy() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringy() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringy() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myItemy_ref() const& {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myItemy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myItemy_ref() & {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myItemy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myItemy() const& {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myItemy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myItemy() & {
    return {this->__fbthrift_field_myItemy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myItemy() && {
    return {static_cast<T&&>(this->__fbthrift_field_myItemy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnumy_ref() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnumy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnumy_ref() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnumy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnumy() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnumy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnumy() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnumy() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnumy), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boulet_ref() const& {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boulet_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boulet_ref() & {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boulet_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boulet() const& {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boulet() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boulet() & {
    return {this->__fbthrift_field_boulet, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boulet() && {
    return {static_cast<T&&>(this->__fbthrift_field_boulet), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatListy_ref() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatListy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatListy_ref() & {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatListy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatListy() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatListy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatListy() & {
    return {this->__fbthrift_field_floatListy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatListy() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatListy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> strMappy_ref() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> strMappy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> strMappy_ref() & {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> strMappy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> strMappy() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> strMappy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> strMappy() & {
    return {this->__fbthrift_field_strMappy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> strMappy() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMappy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intSetty_ref() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intSetty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intSetty_ref() & {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intSetty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intSetty() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intSetty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intSetty() & {
    return {this->__fbthrift_field_intSetty, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intSetty() && {
    return {static_cast<T&&>(this->__fbthrift_field_intSetty), __isset.at(7), __isset.bit(7)};
  }

  ::std::int64_t get_inty() const {
    return __fbthrift_field_inty;
  }

  [[deprecated("Use `FOO.inty_ref() = BAR;` instead of `FOO.set_inty(BAR);`")]]
  ::std::int64_t& set_inty(::std::int64_t inty_) {
    inty_ref() = inty_;
    return __fbthrift_field_inty;
  }

  const ::std::string& get_stringy() const& {
    return __fbthrift_field_stringy;
  }

  ::std::string get_stringy() && {
    return std::move(__fbthrift_field_stringy);
  }

  template <typename T_MyStruct_stringy_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringy_ref() = BAR;` instead of `FOO.set_stringy(BAR);`")]]
  ::std::string& set_stringy(T_MyStruct_stringy_struct_setter&& stringy_) {
    stringy_ref() = std::forward<T_MyStruct_stringy_struct_setter>(stringy_);
    return __fbthrift_field_stringy;
  }
  const ::test::fixtures::python_capi::MyDataItem& get_myItemy() const&;
  ::test::fixtures::python_capi::MyDataItem get_myItemy() &&;

  template <typename T_MyStruct_myItemy_struct_setter = ::test::fixtures::python_capi::MyDataItem>
  [[deprecated("Use `FOO.myItemy_ref() = BAR;` instead of `FOO.set_myItemy(BAR);`")]]
  ::test::fixtures::python_capi::MyDataItem& set_myItemy(T_MyStruct_myItemy_struct_setter&& myItemy_) {
    myItemy_ref() = std::forward<T_MyStruct_myItemy_struct_setter>(myItemy_);
    return __fbthrift_field_myItemy;
  }

  ::test::fixtures::python_capi::MyEnum get_myEnumy() const {
    return __fbthrift_field_myEnumy;
  }

  [[deprecated("Use `FOO.myEnumy_ref() = BAR;` instead of `FOO.set_myEnumy(BAR);`")]]
  ::test::fixtures::python_capi::MyEnum& set_myEnumy(::test::fixtures::python_capi::MyEnum myEnumy_) {
    myEnumy_ref() = myEnumy_;
    return __fbthrift_field_myEnumy;
  }

  bool get_boulet() const {
    return __fbthrift_field_boulet;
  }

  [[deprecated("Use `FOO.boulet_ref() = BAR;` instead of `FOO.set_boulet(BAR);`")]]
  bool& set_boulet(bool boulet_) {
    boulet_ref() = boulet_;
    return __fbthrift_field_boulet;
  }
  const ::std::vector<float>& get_floatListy() const&;
  ::std::vector<float> get_floatListy() &&;

  template <typename T_MyStruct_floatListy_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.floatListy_ref() = BAR;` instead of `FOO.set_floatListy(BAR);`")]]
  ::std::vector<float>& set_floatListy(T_MyStruct_floatListy_struct_setter&& floatListy_) {
    floatListy_ref() = std::forward<T_MyStruct_floatListy_struct_setter>(floatListy_);
    return __fbthrift_field_floatListy;
  }
  const ::std::map<::std::string, ::std::string>& get_strMappy() const&;
  ::std::map<::std::string, ::std::string> get_strMappy() &&;

  template <typename T_MyStruct_strMappy_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.strMappy_ref() = BAR;` instead of `FOO.set_strMappy(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_strMappy(T_MyStruct_strMappy_struct_setter&& strMappy_) {
    strMappy_ref() = std::forward<T_MyStruct_strMappy_struct_setter>(strMappy_);
    return __fbthrift_field_strMappy;
  }
  const ::std::set<::std::int32_t>& get_intSetty() const&;
  ::std::set<::std::int32_t> get_intSetty() &&;

  template <typename T_MyStruct_intSetty_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.intSetty_ref() = BAR;` instead of `FOO.set_intSetty(BAR);`")]]
  ::std::set<::std::int32_t>& set_intSetty(T_MyStruct_intSetty_struct_setter&& intSetty_) {
    intSetty_ref() = std::forward<T_MyStruct_intSetty_struct_setter>(intSetty_);
    return __fbthrift_field_intSetty;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class TransitiveDoubler final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TransitiveDoubler;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TransitiveDoubler() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TransitiveDoubler(apache::thrift::FragileConstructor);

  TransitiveDoubler(TransitiveDoubler&&) = default;

  TransitiveDoubler(const TransitiveDoubler&) = default;


  TransitiveDoubler& operator=(TransitiveDoubler&&) = default;

  TransitiveDoubler& operator=(const TransitiveDoubler&) = default;

 public:

  bool operator==(const TransitiveDoubler&) const;
  bool operator<(const TransitiveDoubler&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TransitiveDoubler>;
  friend void swap(TransitiveDoubler& a, TransitiveDoubler& b);
};

template <class Protocol_>
unsigned long TransitiveDoubler::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
class DoubledPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::x
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DoubledPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DoubledPair();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg);

  DoubledPair(DoubledPair&&) noexcept;

  DoubledPair(const DoubledPair& src);


  DoubledPair& operator=(DoubledPair&&) noexcept;
  DoubledPair& operator=(const DoubledPair& src);

  ~DoubledPair();

 private:
  ::std::string __fbthrift_field_s;
 private:
  ::std::int32_t __fbthrift_field_x;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DoubledPair&) const;
  bool operator<(const DoubledPair&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> x_ref() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> x_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> x_ref() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> x_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> x() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> x() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> x() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> x() && {
    return {static_cast<T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  ::std::string get_s() && {
    return std::move(__fbthrift_field_s);
  }

  template <typename T_DoubledPair_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_DoubledPair_s_struct_setter&& s_) {
    s_ref() = std::forward<T_DoubledPair_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  ::std::int32_t get_x() const {
    return __fbthrift_field_x;
  }

  [[deprecated("Use `FOO.x_ref() = BAR;` instead of `FOO.set_x(BAR);`")]]
  ::std::int32_t& set_x(::std::int32_t x_) {
    x_ref() = x_;
    return __fbthrift_field_x;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DoubledPair>;
  friend void swap(DoubledPair& a, DoubledPair& b);
};

template <class Protocol_>
unsigned long DoubledPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DoubledPair = ::apache::thrift::adapt_detail::adapted_t<::thrift::test::lib::StructDoubler, ::test::fixtures::python_capi::detail::DoubledPair>;


class StringPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::normal,
    ::apache::thrift::ident::doubled
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::adapted<::thrift::test::lib::StringDoubler, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StringPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StringPair();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg);

  StringPair(StringPair&&) noexcept;
  StringPair(const StringPair& src);


  StringPair& operator=(StringPair&&) noexcept;
  StringPair& operator=(const StringPair& src);

  ~StringPair();

 private:
  ::std::string __fbthrift_field_normal;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> __fbthrift_field_doubled;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StringPair&) const;
  bool operator<(const StringPair&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> normal_ref() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> normal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> normal_ref() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> normal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> normal() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> normal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> normal() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> normal() && {
    return {static_cast<T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubled_ref() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubled_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubled_ref() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubled_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubled() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubled() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubled() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubled() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_normal() const& {
    return __fbthrift_field_normal;
  }

  ::std::string get_normal() && {
    return std::move(__fbthrift_field_normal);
  }

  template <typename T_StringPair_normal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.normal_ref() = BAR;` instead of `FOO.set_normal(BAR);`")]]
  ::std::string& set_normal(T_StringPair_normal_struct_setter&& normal_) {
    normal_ref() = std::forward<T_StringPair_normal_struct_setter>(normal_);
    return __fbthrift_field_normal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StringPair>;
  friend void swap(StringPair& a, StringPair& b);
};

template <class Protocol_>
unsigned long StringPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class VapidStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = VapidStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  VapidStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  VapidStruct(apache::thrift::FragileConstructor);

  VapidStruct(VapidStruct&&) = default;

  VapidStruct(const VapidStruct&) = default;


  VapidStruct& operator=(VapidStruct&&) = default;

  VapidStruct& operator=(const VapidStruct&) = default;

 public:

  bool operator==(const VapidStruct&) const;
  bool operator<(const VapidStruct&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<VapidStruct>;
  friend void swap(VapidStruct& a, VapidStruct& b);
};

template <class Protocol_>
unsigned long VapidStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class PrimitiveStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::booly,
    ::apache::thrift::ident::charry,
    ::apache::thrift::ident::shortay,
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::longy,
    ::apache::thrift::ident::floaty,
    ::apache::thrift::ident::dubby,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::bytey,
    ::apache::thrift::ident::buffy,
    ::apache::thrift::ident::pointbuffy,
    ::apache::thrift::ident::patched_struct,
    ::apache::thrift::ident::empty_struct,
    ::apache::thrift::ident::fbstring,
    ::apache::thrift::ident::managed_string_view,
    ::apache::thrift::ident::some_error
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,7,8,9,12,13,14,15,18,19,20,21,22};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::byte_t,
    ::apache::thrift::type::cpp_type<uint16_t, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::i32_t,
    ::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::float_t,
    ::apache::thrift::type::double_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::binary_t,
    ::apache::thrift::type::cpp_type<folly::IOBuf, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::VapidStruct>,
    ::apache::thrift::type::cpp_type<folly::fbstring, ::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<::apache::thrift::ManagedStringViewWithConversions, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::exception_t<::test::fixtures::python_capi::SomeError>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 16;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = PrimitiveStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  PrimitiveStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  PrimitiveStruct(apache::thrift::FragileConstructor, bool booly__arg, ::test::fixtures::python_capi::signed_byte charry__arg, uint16_t shortay__arg, ::std::int32_t inty__arg, uint64_t longy__arg, float floaty__arg, ::apache::thrift::detail::boxed_value_ptr<double> dubby__arg, ::std::unique_ptr<::std::string> stringy__arg, ::std::shared_ptr<const ::std::string> bytey__arg, ::test::fixtures::python_capi::IOBuf buffy__arg, ::test::fixtures::python_capi::IOBufPtr pointbuffy__arg, ::test::fixtures::python_capi::MyStruct patched_struct__arg, ::test::fixtures::python_capi::VapidStruct empty_struct__arg, folly::fbstring fbstring__arg, ::apache::thrift::ManagedStringViewWithConversions managed_string_view__arg, ::test::fixtures::python_capi::SomeError some_error__arg);

  PrimitiveStruct(PrimitiveStruct&&) noexcept;
  PrimitiveStruct(const PrimitiveStruct& src);


  PrimitiveStruct& operator=(PrimitiveStruct&&) noexcept;
  PrimitiveStruct& operator=(const PrimitiveStruct& src);

  ~PrimitiveStruct();

 private:
  bool __fbthrift_field_booly;
 private:
  ::test::fixtures::python_capi::signed_byte __fbthrift_field_charry;
 private:
  uint16_t __fbthrift_field_shortay;
 private:
  ::std::int32_t __fbthrift_field_inty;
 private:
  uint64_t __fbthrift_field_longy;
 private:
  float __fbthrift_field_floaty;
 private:
  ::apache::thrift::detail::boxed_value_ptr<double> __fbthrift_field_dubby;
 private:
  ::std::unique_ptr<::std::string> __fbthrift_field_stringy;
 private:
  ::std::shared_ptr<const ::std::string> __fbthrift_field_bytey;
 private:
  ::test::fixtures::python_capi::IOBuf __fbthrift_field_buffy;
 private:
  ::test::fixtures::python_capi::IOBufPtr __fbthrift_field_pointbuffy;
 private:
  ::test::fixtures::python_capi::MyStruct __fbthrift_field_patched_struct;
 private:
  ::test::fixtures::python_capi::VapidStruct __fbthrift_field_empty_struct;
 private:
  folly::fbstring __fbthrift_field_fbstring;
 private:
  ::apache::thrift::ManagedStringViewWithConversions __fbthrift_field_managed_string_view;
 private:
  ::test::fixtures::python_capi::SomeError __fbthrift_field_some_error;
 private:
  apache::thrift::detail::isset_bitset<13, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const PrimitiveStruct&) const;
  bool operator<(const PrimitiveStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> booly_ref() const& {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> booly_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> booly_ref() & {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> booly_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> booly() const& {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> booly() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> booly() & {
    return {this->__fbthrift_field_booly, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> booly() && {
    return {static_cast<T&&>(this->__fbthrift_field_booly), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> charry_ref() const& {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> charry_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> charry_ref() & {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> charry_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> charry() const& {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> charry() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> charry() & {
    return {this->__fbthrift_field_charry, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::signed_byte>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> charry() && {
    return {static_cast<T&&>(this->__fbthrift_field_charry), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> shortay_ref() const& {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> shortay_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> shortay_ref() & {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> shortay_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> shortay() const& {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> shortay() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> shortay() & {
    return {this->__fbthrift_field_shortay, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = uint16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> shortay() && {
    return {static_cast<T&&>(this->__fbthrift_field_shortay), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inty_ref() const& {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inty_ref() & {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inty() const& {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inty() & {
    return {this->__fbthrift_field_inty, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inty() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> longy_ref() const& {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> longy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> longy_ref() & {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> longy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> longy() const& {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> longy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> longy() & {
    return {this->__fbthrift_field_longy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = uint64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> longy() && {
    return {static_cast<T&&>(this->__fbthrift_field_longy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floaty_ref() const& {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floaty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floaty_ref() & {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floaty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floaty() const& {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floaty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floaty() & {
    return {this->__fbthrift_field_floaty, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floaty() && {
    return {static_cast<T&&>(this->__fbthrift_field_floaty), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> dubby_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_dubby};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> dubby_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_dubby)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> dubby_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_dubby};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> dubby_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_dubby)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> dubby() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_dubby};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> dubby() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_dubby)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> dubby() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_dubby};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<double>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> dubby() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_dubby)};
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& stringy_ref() & {
    return __fbthrift_field_stringy;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& stringy_ref() const& {
    return __fbthrift_field_stringy;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& stringy_ref() && {
    return static_cast<T&&>(__fbthrift_field_stringy);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& stringy_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_stringy);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T& stringy() & {
    return __fbthrift_field_stringy;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T& stringy() const& {
    return __fbthrift_field_stringy;
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE T&& stringy() && {
    return static_cast<T&&>(__fbthrift_field_stringy);
  }

  template <typename ..., typename T = ::std::unique_ptr<::std::string>>
  FOLLY_ERASE const T&& stringy() const&& {
    return static_cast<const T&&>(__fbthrift_field_stringy);
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T& bytey_ref() & {
    return __fbthrift_field_bytey;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T& bytey_ref() const& {
    return __fbthrift_field_bytey;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T&& bytey_ref() && {
    return static_cast<T&&>(__fbthrift_field_bytey);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T&& bytey_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_bytey);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T& bytey() & {
    return __fbthrift_field_bytey;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T& bytey() const& {
    return __fbthrift_field_bytey;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE T&& bytey() && {
    return static_cast<T&&>(__fbthrift_field_bytey);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::std::string>>
  FOLLY_ERASE const T&& bytey() const&& {
    return static_cast<const T&&>(__fbthrift_field_bytey);
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buffy_ref() const& {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buffy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buffy_ref() & {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buffy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buffy() const& {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buffy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buffy() & {
    return {this->__fbthrift_field_buffy, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buffy() && {
    return {static_cast<T&&>(this->__fbthrift_field_buffy), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> pointbuffy_ref() const& {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> pointbuffy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> pointbuffy_ref() & {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> pointbuffy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> pointbuffy() const& {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> pointbuffy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> pointbuffy() & {
    return {this->__fbthrift_field_pointbuffy, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::IOBufPtr>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> pointbuffy() && {
    return {static_cast<T&&>(this->__fbthrift_field_pointbuffy), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patched_struct_ref() const& {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patched_struct_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patched_struct_ref() & {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patched_struct_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patched_struct() const& {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patched_struct() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patched_struct() & {
    return {this->__fbthrift_field_patched_struct, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patched_struct() && {
    return {static_cast<T&&>(this->__fbthrift_field_patched_struct), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> empty_struct_ref() const& {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> empty_struct_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> empty_struct_ref() & {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> empty_struct_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> empty_struct() const& {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> empty_struct() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> empty_struct() & {
    return {this->__fbthrift_field_empty_struct, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::VapidStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> empty_struct() && {
    return {static_cast<T&&>(this->__fbthrift_field_empty_struct), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fbstring_ref() const& {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fbstring_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fbstring_ref() & {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fbstring_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fbstring() const& {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fbstring() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fbstring() & {
    return {this->__fbthrift_field_fbstring, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = folly::fbstring>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fbstring() && {
    return {static_cast<T&&>(this->__fbthrift_field_fbstring), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> managed_string_view_ref() const& {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> managed_string_view_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> managed_string_view_ref() & {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> managed_string_view_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> managed_string_view() const& {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> managed_string_view() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> managed_string_view() & {
    return {this->__fbthrift_field_managed_string_view, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::ManagedStringViewWithConversions>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> managed_string_view() && {
    return {static_cast<T&&>(this->__fbthrift_field_managed_string_view), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> some_error_ref() const& {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> some_error_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> some_error_ref() & {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> some_error_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> some_error() const& {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> some_error() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> some_error() & {
    return {this->__fbthrift_field_some_error, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SomeError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> some_error() && {
    return {static_cast<T&&>(this->__fbthrift_field_some_error), __isset.at(12), __isset.bit(12)};
  }

  bool get_booly() const {
    return __fbthrift_field_booly;
  }

  [[deprecated("Use `FOO.booly_ref() = BAR;` instead of `FOO.set_booly(BAR);`")]]
  bool& set_booly(bool booly_) {
    booly_ref() = booly_;
    return __fbthrift_field_booly;
  }

  ::test::fixtures::python_capi::signed_byte get_charry() const {
    return __fbthrift_field_charry;
  }

  [[deprecated("Use `FOO.charry_ref() = BAR;` instead of `FOO.set_charry(BAR);`")]]
  ::test::fixtures::python_capi::signed_byte& set_charry(::test::fixtures::python_capi::signed_byte charry_) {
    charry_ref() = charry_;
    return __fbthrift_field_charry;
  }

  uint16_t get_shortay() const {
    return __fbthrift_field_shortay;
  }

  [[deprecated("Use `FOO.shortay_ref() = BAR;` instead of `FOO.set_shortay(BAR);`")]]
  uint16_t& set_shortay(uint16_t shortay_) {
    shortay_ref() = shortay_;
    return __fbthrift_field_shortay;
  }

  ::std::int32_t get_inty() const {
    return __fbthrift_field_inty;
  }

  [[deprecated("Use `FOO.inty_ref() = BAR;` instead of `FOO.set_inty(BAR);`")]]
  ::std::int32_t& set_inty(::std::int32_t inty_) {
    inty_ref() = inty_;
    return __fbthrift_field_inty;
  }

  uint64_t get_longy() const {
    return __fbthrift_field_longy;
  }

  [[deprecated("Use `FOO.longy_ref() = BAR;` instead of `FOO.set_longy(BAR);`")]]
  uint64_t& set_longy(uint64_t longy_) {
    longy_ref() = longy_;
    return __fbthrift_field_longy;
  }

  const float* get_floaty() const& {
    return floaty_ref() ? std::addressof(__fbthrift_field_floaty) : nullptr;
  }

  float* get_floaty() & {
    return floaty_ref() ? std::addressof(__fbthrift_field_floaty) : nullptr;
  }
  float* get_floaty() && = delete;

  [[deprecated("Use `FOO.floaty_ref() = BAR;` instead of `FOO.set_floaty(BAR);`")]]
  float& set_floaty(float floaty_) {
    floaty_ref() = floaty_;
    return __fbthrift_field_floaty;
  }

  const ::test::fixtures::python_capi::IOBuf& get_buffy() const& {
    return __fbthrift_field_buffy;
  }

  ::test::fixtures::python_capi::IOBuf get_buffy() && {
    return std::move(__fbthrift_field_buffy);
  }

  template <typename T_PrimitiveStruct_buffy_struct_setter = ::test::fixtures::python_capi::IOBuf>
  [[deprecated("Use `FOO.buffy_ref() = BAR;` instead of `FOO.set_buffy(BAR);`")]]
  ::test::fixtures::python_capi::IOBuf& set_buffy(T_PrimitiveStruct_buffy_struct_setter&& buffy_) {
    buffy_ref() = std::forward<T_PrimitiveStruct_buffy_struct_setter>(buffy_);
    return __fbthrift_field_buffy;
  }

  const ::test::fixtures::python_capi::IOBufPtr& get_pointbuffy() const& {
    return __fbthrift_field_pointbuffy;
  }

  ::test::fixtures::python_capi::IOBufPtr get_pointbuffy() && {
    return std::move(__fbthrift_field_pointbuffy);
  }

  template <typename T_PrimitiveStruct_pointbuffy_struct_setter = ::test::fixtures::python_capi::IOBufPtr>
  [[deprecated("Use `FOO.pointbuffy_ref() = BAR;` instead of `FOO.set_pointbuffy(BAR);`")]]
  ::test::fixtures::python_capi::IOBufPtr& set_pointbuffy(T_PrimitiveStruct_pointbuffy_struct_setter&& pointbuffy_) {
    pointbuffy_ref() = std::forward<T_PrimitiveStruct_pointbuffy_struct_setter>(pointbuffy_);
    return __fbthrift_field_pointbuffy;
  }
  const ::test::fixtures::python_capi::MyStruct& get_patched_struct() const&;
  ::test::fixtures::python_capi::MyStruct get_patched_struct() &&;

  template <typename T_PrimitiveStruct_patched_struct_struct_setter = ::test::fixtures::python_capi::MyStruct>
  [[deprecated("Use `FOO.patched_struct_ref() = BAR;` instead of `FOO.set_patched_struct(BAR);`")]]
  ::test::fixtures::python_capi::MyStruct& set_patched_struct(T_PrimitiveStruct_patched_struct_struct_setter&& patched_struct_) {
    patched_struct_ref() = std::forward<T_PrimitiveStruct_patched_struct_struct_setter>(patched_struct_);
    return __fbthrift_field_patched_struct;
  }
  const ::test::fixtures::python_capi::VapidStruct& get_empty_struct() const&;
  ::test::fixtures::python_capi::VapidStruct get_empty_struct() &&;

  template <typename T_PrimitiveStruct_empty_struct_struct_setter = ::test::fixtures::python_capi::VapidStruct>
  [[deprecated("Use `FOO.empty_struct_ref() = BAR;` instead of `FOO.set_empty_struct(BAR);`")]]
  ::test::fixtures::python_capi::VapidStruct& set_empty_struct(T_PrimitiveStruct_empty_struct_struct_setter&& empty_struct_) {
    empty_struct_ref() = std::forward<T_PrimitiveStruct_empty_struct_struct_setter>(empty_struct_);
    return __fbthrift_field_empty_struct;
  }

  const folly::fbstring& get_fbstring() const& {
    return __fbthrift_field_fbstring;
  }

  folly::fbstring get_fbstring() && {
    return std::move(__fbthrift_field_fbstring);
  }

  template <typename T_PrimitiveStruct_fbstring_struct_setter = folly::fbstring>
  [[deprecated("Use `FOO.fbstring_ref() = BAR;` instead of `FOO.set_fbstring(BAR);`")]]
  folly::fbstring& set_fbstring(T_PrimitiveStruct_fbstring_struct_setter&& fbstring_) {
    fbstring_ref() = std::forward<T_PrimitiveStruct_fbstring_struct_setter>(fbstring_);
    return __fbthrift_field_fbstring;
  }

  const ::apache::thrift::ManagedStringViewWithConversions& get_managed_string_view() const& {
    return __fbthrift_field_managed_string_view;
  }

  ::apache::thrift::ManagedStringViewWithConversions get_managed_string_view() && {
    return std::move(__fbthrift_field_managed_string_view);
  }

  template <typename T_PrimitiveStruct_managed_string_view_struct_setter = ::apache::thrift::ManagedStringViewWithConversions>
  [[deprecated("Use `FOO.managed_string_view_ref() = BAR;` instead of `FOO.set_managed_string_view(BAR);`")]]
  ::apache::thrift::ManagedStringViewWithConversions& set_managed_string_view(T_PrimitiveStruct_managed_string_view_struct_setter&& managed_string_view_) {
    managed_string_view_ref() = std::forward<T_PrimitiveStruct_managed_string_view_struct_setter>(managed_string_view_);
    return __fbthrift_field_managed_string_view;
  }
  const ::test::fixtures::python_capi::SomeError& get_some_error() const&;
  ::test::fixtures::python_capi::SomeError get_some_error() &&;

  template <typename T_PrimitiveStruct_some_error_struct_setter = ::test::fixtures::python_capi::SomeError>
  [[deprecated("Use `FOO.some_error_ref() = BAR;` instead of `FOO.set_some_error(BAR);`")]]
  ::test::fixtures::python_capi::SomeError& set_some_error(T_PrimitiveStruct_some_error_struct_setter&& some_error_) {
    some_error_ref() = std::forward<T_PrimitiveStruct_some_error_struct_setter>(some_error_);
    return __fbthrift_field_some_error;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<PrimitiveStruct>;
  friend void swap(PrimitiveStruct& a, PrimitiveStruct& b);
};

template <class Protocol_>
unsigned long PrimitiveStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class AdaptedFields final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::adapted_int,
    ::apache::thrift::ident::list_adapted_int,
    ::apache::thrift::ident::set_adapted_int,
    ::apache::thrift::ident::inline_adapted_int
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::FieldId>, ::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::set<::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, ::apache::thrift::type::i64_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = AdaptedFields;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AdaptedFields();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::type::ProtocolId adapted_int__arg, ::std::vector<::apache::thrift::type::FieldId> list_adapted_int__arg, ::apache::thrift::type::AnnotationIds set_adapted_int__arg, ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> inline_adapted_int__arg);

  AdaptedFields(AdaptedFields&&) noexcept;
  AdaptedFields(const AdaptedFields& src);


  AdaptedFields& operator=(AdaptedFields&&) noexcept;
  AdaptedFields& operator=(const AdaptedFields& src);

  ~AdaptedFields();

 private:
  ::apache::thrift::type::ProtocolId __fbthrift_field_adapted_int;
 private:
  ::std::vector<::apache::thrift::type::FieldId> __fbthrift_field_list_adapted_int;
 private:
  ::apache::thrift::type::AnnotationIds __fbthrift_field_set_adapted_int;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields> __fbthrift_field_inline_adapted_int;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const AdaptedFields&) const;
  bool operator<(const AdaptedFields&) const;

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adapted_int_ref() const& {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adapted_int_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adapted_int_ref() & {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adapted_int_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> adapted_int() const& {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> adapted_int() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> adapted_int() & {
    return {this->__fbthrift_field_adapted_int, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> adapted_int() && {
    return {static_cast<T&&>(this->__fbthrift_field_adapted_int), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_adapted_int_ref() const& {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_adapted_int_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_adapted_int_ref() & {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_adapted_int_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_adapted_int() const& {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_adapted_int() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_adapted_int() & {
    return {this->__fbthrift_field_list_adapted_int, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::type::FieldId>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_adapted_int() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_adapted_int), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_adapted_int_ref() const& {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_adapted_int_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_adapted_int_ref() & {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_adapted_int_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> set_adapted_int() const& {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> set_adapted_int() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> set_adapted_int() & {
    return {this->__fbthrift_field_set_adapted_int, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::type::AnnotationIds>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> set_adapted_int() && {
    return {static_cast<T&&>(this->__fbthrift_field_set_adapted_int), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inline_adapted_int_ref() const& {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inline_adapted_int_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inline_adapted_int_ref() & {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inline_adapted_int_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> inline_adapted_int() const& {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> inline_adapted_int() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> inline_adapted_int() & {
    return {this->__fbthrift_field_inline_adapted_int, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ValueId>, 4, ::apache::thrift::type::ExternId, AdaptedFields>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> inline_adapted_int() && {
    return {static_cast<T&&>(this->__fbthrift_field_inline_adapted_int), __isset.at(3), __isset.bit(3)};
  }
  const ::std::vector<::apache::thrift::type::FieldId>& get_list_adapted_int() const&;
  ::std::vector<::apache::thrift::type::FieldId> get_list_adapted_int() &&;

  template <typename T_AdaptedFields_list_adapted_int_struct_setter = ::std::vector<::apache::thrift::type::FieldId>>
  [[deprecated("Use `FOO.list_adapted_int_ref() = BAR;` instead of `FOO.set_list_adapted_int(BAR);`")]]
  ::std::vector<::apache::thrift::type::FieldId>& set_list_adapted_int(T_AdaptedFields_list_adapted_int_struct_setter&& list_adapted_int_) {
    list_adapted_int_ref() = std::forward<T_AdaptedFields_list_adapted_int_struct_setter>(list_adapted_int_);
    return __fbthrift_field_list_adapted_int;
  }
  const ::apache::thrift::type::AnnotationIds& get_set_adapted_int() const&;
  ::apache::thrift::type::AnnotationIds get_set_adapted_int() &&;

  template <typename T_AdaptedFields_set_adapted_int_struct_setter = ::apache::thrift::type::AnnotationIds>
  [[deprecated("Use `FOO.set_adapted_int_ref() = BAR;` instead of `FOO.set_set_adapted_int(BAR);`")]]
  ::apache::thrift::type::AnnotationIds& set_set_adapted_int(T_AdaptedFields_set_adapted_int_struct_setter&& set_adapted_int_) {
    set_adapted_int_ref() = std::forward<T_AdaptedFields_set_adapted_int_struct_setter>(set_adapted_int_);
    return __fbthrift_field_set_adapted_int;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AdaptedFields>;
  friend void swap(AdaptedFields& a, AdaptedFields& b);
};

template <class Protocol_>
unsigned long AdaptedFields::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class ListStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::boolz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::stringz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::uidz,
    ::apache::thrift::ident::matrix,
    ::apache::thrift::ident::ucharz,
    ::apache::thrift::ident::voxels,
    ::apache::thrift::ident::buf_ptrs
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::bool_t>,
    ::apache::thrift::type::list<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<std::deque<::std::string>, ::apache::thrift::type::list<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::cpp_type<std::deque<uint64_t>, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::double_t>>,
    ::apache::thrift::type::cpp_type<folly::small_vector<folly::small_vector<uint8_t>>, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::byte_t>>>,
    ::apache::thrift::type::cpp_type<folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>, ::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::list<::apache::thrift::type::byte_t>>>>,
    ::apache::thrift::type::list<::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 9;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ListStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ListStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ListStruct(apache::thrift::FragileConstructor, ::std::vector<bool> boolz__arg, ::std::vector<::std::int64_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> stringz__arg, std::deque<::std::string> encoded__arg, std::deque<uint64_t> uidz__arg, ::std::vector<::std::vector<double>> matrix__arg, folly::small_vector<folly::small_vector<uint8_t>> ucharz__arg, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> voxels__arg, ::std::vector<::test::fixtures::python_capi::IOBufPtr> buf_ptrs__arg);

  ListStruct(ListStruct&&) noexcept;


  ListStruct& operator=(ListStruct&&) noexcept;

  ~ListStruct();

 private:
  ::std::vector<bool> __fbthrift_field_boolz;
 private:
  ::std::vector<::std::int64_t> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> __fbthrift_field_stringz;
 private:
  std::deque<::std::string> __fbthrift_field_encoded;
 private:
  std::deque<uint64_t> __fbthrift_field_uidz;
 private:
  ::std::vector<::std::vector<double>> __fbthrift_field_matrix;
 private:
  folly::small_vector<folly::small_vector<uint8_t>> __fbthrift_field_ucharz;
 private:
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> __fbthrift_field_voxels;
 private:
  ::std::vector<::test::fixtures::python_capi::IOBufPtr> __fbthrift_field_buf_ptrs;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ListStruct&) const;
  bool operator<(const ListStruct&) const;

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolz_ref() const& {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolz_ref() & {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolz() const& {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolz() & {
    return {this->__fbthrift_field_boolz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolz() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> stringz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_stringz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> stringz_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> stringz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_stringz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> stringz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> stringz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_stringz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> stringz() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> stringz() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_stringz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> stringz() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringz)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> uidz_ref() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> uidz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> uidz_ref() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> uidz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> uidz() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> uidz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> uidz() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::deque<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> uidz() && {
    return {static_cast<T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> matrix_ref() const& {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> matrix_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> matrix_ref() & {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> matrix_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> matrix() const& {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> matrix() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> matrix() & {
    return {this->__fbthrift_field_matrix, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::vector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> matrix() && {
    return {static_cast<T&&>(this->__fbthrift_field_matrix), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ucharz_ref() const& {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ucharz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ucharz_ref() & {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ucharz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ucharz() const& {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ucharz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ucharz() & {
    return {this->__fbthrift_field_ucharz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::small_vector<folly::small_vector<uint8_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ucharz() && {
    return {static_cast<T&&>(this->__fbthrift_field_ucharz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> voxels_ref() const& {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> voxels_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> voxels_ref() & {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> voxels_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> voxels() const& {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> voxels() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> voxels() & {
    return {this->__fbthrift_field_voxels, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> voxels() && {
    return {static_cast<T&&>(this->__fbthrift_field_voxels), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buf_ptrs_ref() const& {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buf_ptrs_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buf_ptrs_ref() & {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buf_ptrs_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buf_ptrs() const& {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buf_ptrs() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buf_ptrs() & {
    return {this->__fbthrift_field_buf_ptrs, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buf_ptrs() && {
    return {static_cast<T&&>(this->__fbthrift_field_buf_ptrs), __isset.at(7), __isset.bit(7)};
  }
  const ::std::vector<bool>& get_boolz() const&;
  ::std::vector<bool> get_boolz() &&;

  template <typename T_ListStruct_boolz_struct_setter = ::std::vector<bool>>
  [[deprecated("Use `FOO.boolz_ref() = BAR;` instead of `FOO.set_boolz(BAR);`")]]
  ::std::vector<bool>& set_boolz(T_ListStruct_boolz_struct_setter&& boolz_) {
    boolz_ref() = std::forward<T_ListStruct_boolz_struct_setter>(boolz_);
    return __fbthrift_field_boolz;
  }
  const ::std::vector<::std::int64_t>* get_intz() const&;
  ::std::vector<::std::int64_t>* get_intz() &;
  ::std::vector<::std::int64_t>* get_intz() && = delete;

  template <typename T_ListStruct_intz_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.intz_ref() = BAR;` instead of `FOO.set_intz(BAR);`")]]
  ::std::vector<::std::int64_t>& set_intz(T_ListStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_ListStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }
  const std::deque<::std::string>& get_encoded() const&;
  std::deque<::std::string> get_encoded() &&;

  template <typename T_ListStruct_encoded_struct_setter = std::deque<::std::string>>
  [[deprecated("Use `FOO.encoded_ref() = BAR;` instead of `FOO.set_encoded(BAR);`")]]
  std::deque<::std::string>& set_encoded(T_ListStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_ListStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }
  const std::deque<uint64_t>& get_uidz() const&;
  std::deque<uint64_t> get_uidz() &&;

  template <typename T_ListStruct_uidz_struct_setter = std::deque<uint64_t>>
  [[deprecated("Use `FOO.uidz_ref() = BAR;` instead of `FOO.set_uidz(BAR);`")]]
  std::deque<uint64_t>& set_uidz(T_ListStruct_uidz_struct_setter&& uidz_) {
    uidz_ref() = std::forward<T_ListStruct_uidz_struct_setter>(uidz_);
    return __fbthrift_field_uidz;
  }
  const ::std::vector<::std::vector<double>>& get_matrix() const&;
  ::std::vector<::std::vector<double>> get_matrix() &&;

  template <typename T_ListStruct_matrix_struct_setter = ::std::vector<::std::vector<double>>>
  [[deprecated("Use `FOO.matrix_ref() = BAR;` instead of `FOO.set_matrix(BAR);`")]]
  ::std::vector<::std::vector<double>>& set_matrix(T_ListStruct_matrix_struct_setter&& matrix_) {
    matrix_ref() = std::forward<T_ListStruct_matrix_struct_setter>(matrix_);
    return __fbthrift_field_matrix;
  }
  const folly::small_vector<folly::small_vector<uint8_t>>& get_ucharz() const&;
  folly::small_vector<folly::small_vector<uint8_t>> get_ucharz() &&;

  template <typename T_ListStruct_ucharz_struct_setter = folly::small_vector<folly::small_vector<uint8_t>>>
  [[deprecated("Use `FOO.ucharz_ref() = BAR;` instead of `FOO.set_ucharz(BAR);`")]]
  folly::small_vector<folly::small_vector<uint8_t>>& set_ucharz(T_ListStruct_ucharz_struct_setter&& ucharz_) {
    ucharz_ref() = std::forward<T_ListStruct_ucharz_struct_setter>(ucharz_);
    return __fbthrift_field_ucharz;
  }
  const folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& get_voxels() const&;
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> get_voxels() &&;

  template <typename T_ListStruct_voxels_struct_setter = folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>
  [[deprecated("Use `FOO.voxels_ref() = BAR;` instead of `FOO.set_voxels(BAR);`")]]
  folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& set_voxels(T_ListStruct_voxels_struct_setter&& voxels_) {
    voxels_ref() = std::forward<T_ListStruct_voxels_struct_setter>(voxels_);
    return __fbthrift_field_voxels;
  }
  const ::std::vector<::test::fixtures::python_capi::IOBufPtr>& get_buf_ptrs() const&;
  ::std::vector<::test::fixtures::python_capi::IOBufPtr> get_buf_ptrs() &&;

  template <typename T_ListStruct_buf_ptrs_struct_setter = ::std::vector<::test::fixtures::python_capi::IOBufPtr>>
  [[deprecated("Use `FOO.buf_ptrs_ref() = BAR;` instead of `FOO.set_buf_ptrs(BAR);`")]]
  ::std::vector<::test::fixtures::python_capi::IOBufPtr>& set_buf_ptrs(T_ListStruct_buf_ptrs_struct_setter&& buf_ptrs_) {
    buf_ptrs_ref() = std::forward<T_ListStruct_buf_ptrs_struct_setter>(buf_ptrs_);
    return __fbthrift_field_buf_ptrs;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ListStruct>;
  friend void swap(ListStruct& a, ListStruct& b);
};

template <class Protocol_>
unsigned long ListStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class SetStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::enumz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::binnaz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::uidz,
    ::apache::thrift::ident::charz,
    ::apache::thrift::ident::setz
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::binary_t>,
    ::apache::thrift::type::cpp_type<std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_set<uint64_t>, ::apache::thrift::type::set<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastSet<uint8_t>, ::apache::thrift::type::set<::apache::thrift::type::byte_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::set<::apache::thrift::type::i64_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = SetStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SetStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SetStruct(apache::thrift::FragileConstructor, ::std::set<::test::fixtures::python_capi::MyEnum> enumz__arg, ::std::set<::std::int32_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> binnaz__arg, std::unordered_set<::std::string> encoded__arg, std::unordered_set<uint64_t> uidz__arg, folly::F14FastSet<uint8_t> charz__arg, ::std::vector<::std::set<::std::int64_t>> setz__arg);

  SetStruct(SetStruct&&) noexcept;

  SetStruct(const SetStruct& src);


  SetStruct& operator=(SetStruct&&) noexcept;
  SetStruct& operator=(const SetStruct& src);

  ~SetStruct();

 private:
  ::std::set<::test::fixtures::python_capi::MyEnum> __fbthrift_field_enumz;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>> __fbthrift_field_binnaz;
 private:
  std::unordered_set<::std::string> __fbthrift_field_encoded;
 private:
  std::unordered_set<uint64_t> __fbthrift_field_uidz;
 private:
  folly::F14FastSet<uint8_t> __fbthrift_field_charz;
 private:
  ::std::vector<::std::set<::std::int64_t>> __fbthrift_field_setz;
 private:
  apache::thrift::detail::isset_bitset<6, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const SetStruct&) const;
  bool operator<(const SetStruct&) const;

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enumz_ref() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enumz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enumz_ref() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enumz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enumz() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enumz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enumz() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::test::fixtures::python_capi::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enumz() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> binnaz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> binnaz_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> binnaz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> binnaz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> binnaz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> binnaz() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> binnaz() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::set<::std::string>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> binnaz() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> uidz_ref() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> uidz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> uidz_ref() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> uidz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> uidz() const& {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> uidz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> uidz() & {
    return {this->__fbthrift_field_uidz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_set<uint64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> uidz() && {
    return {static_cast<T&&>(this->__fbthrift_field_uidz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> charz_ref() const& {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> charz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> charz_ref() & {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> charz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> charz() const& {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> charz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> charz() & {
    return {this->__fbthrift_field_charz, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = folly::F14FastSet<uint8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> charz() && {
    return {static_cast<T&&>(this->__fbthrift_field_charz), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setz_ref() const& {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setz_ref() & {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setz() const& {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setz() & {
    return {this->__fbthrift_field_setz, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setz() && {
    return {static_cast<T&&>(this->__fbthrift_field_setz), __isset.at(5), __isset.bit(5)};
  }
  const ::std::set<::test::fixtures::python_capi::MyEnum>& get_enumz() const&;
  ::std::set<::test::fixtures::python_capi::MyEnum> get_enumz() &&;

  template <typename T_SetStruct_enumz_struct_setter = ::std::set<::test::fixtures::python_capi::MyEnum>>
  [[deprecated("Use `FOO.enumz_ref() = BAR;` instead of `FOO.set_enumz(BAR);`")]]
  ::std::set<::test::fixtures::python_capi::MyEnum>& set_enumz(T_SetStruct_enumz_struct_setter&& enumz_) {
    enumz_ref() = std::forward<T_SetStruct_enumz_struct_setter>(enumz_);
    return __fbthrift_field_enumz;
  }
  const ::std::set<::std::int32_t>* get_intz() const&;
  ::std::set<::std::int32_t>* get_intz() &;
  ::std::set<::std::int32_t>* get_intz() && = delete;

  template <typename T_SetStruct_intz_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.intz_ref() = BAR;` instead of `FOO.set_intz(BAR);`")]]
  ::std::set<::std::int32_t>& set_intz(T_SetStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_SetStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }
  const std::unordered_set<::std::string>& get_encoded() const&;
  std::unordered_set<::std::string> get_encoded() &&;

  template <typename T_SetStruct_encoded_struct_setter = std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.encoded_ref() = BAR;` instead of `FOO.set_encoded(BAR);`")]]
  std::unordered_set<::std::string>& set_encoded(T_SetStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_SetStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }
  const std::unordered_set<uint64_t>& get_uidz() const&;
  std::unordered_set<uint64_t> get_uidz() &&;

  template <typename T_SetStruct_uidz_struct_setter = std::unordered_set<uint64_t>>
  [[deprecated("Use `FOO.uidz_ref() = BAR;` instead of `FOO.set_uidz(BAR);`")]]
  std::unordered_set<uint64_t>& set_uidz(T_SetStruct_uidz_struct_setter&& uidz_) {
    uidz_ref() = std::forward<T_SetStruct_uidz_struct_setter>(uidz_);
    return __fbthrift_field_uidz;
  }
  const folly::F14FastSet<uint8_t>& get_charz() const&;
  folly::F14FastSet<uint8_t> get_charz() &&;

  template <typename T_SetStruct_charz_struct_setter = folly::F14FastSet<uint8_t>>
  [[deprecated("Use `FOO.charz_ref() = BAR;` instead of `FOO.set_charz(BAR);`")]]
  folly::F14FastSet<uint8_t>& set_charz(T_SetStruct_charz_struct_setter&& charz_) {
    charz_ref() = std::forward<T_SetStruct_charz_struct_setter>(charz_);
    return __fbthrift_field_charz;
  }
  const ::std::vector<::std::set<::std::int64_t>>& get_setz() const&;
  ::std::vector<::std::set<::std::int64_t>> get_setz() &&;

  template <typename T_SetStruct_setz_struct_setter = ::std::vector<::std::set<::std::int64_t>>>
  [[deprecated("Use `FOO.setz_ref() = BAR;` instead of `FOO.set_setz(BAR);`")]]
  ::std::vector<::std::set<::std::int64_t>>& set_setz(T_SetStruct_setz_struct_setter&& setz_) {
    setz_ref() = std::forward<T_SetStruct_setz_struct_setter>(setz_);
    return __fbthrift_field_setz;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SetStruct>;
  friend void swap(SetStruct& a, SetStruct& b);
};

template <class Protocol_>
unsigned long SetStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MapStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::enumz,
    ::apache::thrift::ident::intz,
    ::apache::thrift::ident::binnaz,
    ::apache::thrift::ident::encoded,
    ::apache::thrift::ident::flotz,
    ::apache::thrift::ident::map_list,
    ::apache::thrift::ident::list_map,
    ::apache::thrift::ident::fast_list_map,
    ::apache::thrift::ident::buf_map,
    ::apache::thrift::ident::unsigned_list_map
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9,10};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<::std::string, double>, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::double_t>>,
    ::apache::thrift::type::cpp_type<std::unordered_map<uint64_t, float>, ::apache::thrift::type::map<::apache::thrift::type::i64_t, ::apache::thrift::type::float_t>>,
    ::apache::thrift::type::list<::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::i64_t>>,
    ::apache::thrift::type::cpp_type<folly::F14FastMap<int, folly::fbvector<double>>, ::apache::thrift::type::map<::apache::thrift::type::i32_t, ::apache::thrift::type::list<::apache::thrift::type::double_t>>>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::cpp_type<std::unique_ptr<folly::IOBuf>, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>, ::apache::thrift::type::list<::apache::thrift::type::cpp_type<uint64_t, ::apache::thrift::type::i64_t>>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 10;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MapStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MapStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MapStruct(apache::thrift::FragileConstructor, ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> enumz__arg, ::std::map<::std::int32_t, ::std::string> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> binnaz__arg, std::unordered_map<::std::string, double> encoded__arg, std::unordered_map<uint64_t, float> flotz__arg, ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> map_list__arg, ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> list_map__arg, folly::F14FastMap<int, folly::fbvector<double>> fast_list_map__arg, ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> buf_map__arg, ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> unsigned_list_map__arg);

  MapStruct(MapStruct&&) noexcept;
  MapStruct(const MapStruct& src);


  MapStruct& operator=(MapStruct&&) noexcept;
  MapStruct& operator=(const MapStruct& src);

  ~MapStruct();

 private:
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> __fbthrift_field_enumz;
 private:
  ::std::map<::std::int32_t, ::std::string> __fbthrift_field_intz;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>> __fbthrift_field_binnaz;
 private:
  std::unordered_map<::std::string, double> __fbthrift_field_encoded;
 private:
  std::unordered_map<uint64_t, float> __fbthrift_field_flotz;
 private:
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> __fbthrift_field_map_list;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> __fbthrift_field_list_map;
 private:
  folly::F14FastMap<int, folly::fbvector<double>> __fbthrift_field_fast_list_map;
 private:
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> __fbthrift_field_buf_map;
 private:
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> __fbthrift_field_unsigned_list_map;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MapStruct&) const;
  bool operator<(const MapStruct&) const;

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enumz_ref() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enumz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enumz_ref() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enumz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enumz() const& {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enumz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enumz() & {
    return {this->__fbthrift_field_enumz, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enumz() && {
    return {static_cast<T&&>(this->__fbthrift_field_enumz), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz_ref() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz_ref() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intz() const& {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intz() & {
    return {this->__fbthrift_field_intz, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intz() && {
    return {static_cast<T&&>(this->__fbthrift_field_intz), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> binnaz_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> binnaz_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> binnaz_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> binnaz_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> binnaz() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> binnaz() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> binnaz() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_binnaz};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::std::map<::std::string, ::test::fixtures::python_capi::PrimitiveStruct>>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> binnaz() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_binnaz)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded_ref() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded_ref() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> encoded() const& {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> encoded() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> encoded() & {
    return {this->__fbthrift_field_encoded, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<::std::string, double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> encoded() && {
    return {static_cast<T&&>(this->__fbthrift_field_encoded), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flotz_ref() const& {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flotz_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flotz_ref() & {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flotz_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> flotz() const& {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> flotz() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> flotz() & {
    return {this->__fbthrift_field_flotz, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = std::unordered_map<uint64_t, float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> flotz() && {
    return {static_cast<T&&>(this->__fbthrift_field_flotz), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> map_list_ref() const& {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> map_list_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> map_list_ref() & {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> map_list_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> map_list() const& {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> map_list() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> map_list() & {
    return {this->__fbthrift_field_map_list, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> map_list() && {
    return {static_cast<T&&>(this->__fbthrift_field_map_list), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_map_ref() const& {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_map_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_map_ref() & {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_map_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_map() const& {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_map() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_map() & {
    return {this->__fbthrift_field_list_map, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_map() && {
    return {static_cast<T&&>(this->__fbthrift_field_list_map), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fast_list_map_ref() const& {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fast_list_map_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fast_list_map_ref() & {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fast_list_map_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fast_list_map() const& {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fast_list_map() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fast_list_map() & {
    return {this->__fbthrift_field_fast_list_map, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = folly::F14FastMap<int, folly::fbvector<double>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fast_list_map() && {
    return {static_cast<T&&>(this->__fbthrift_field_fast_list_map), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buf_map_ref() const& {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buf_map_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buf_map_ref() & {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buf_map_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> buf_map() const& {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> buf_map() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> buf_map() & {
    return {this->__fbthrift_field_buf_map, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> buf_map() && {
    return {static_cast<T&&>(this->__fbthrift_field_buf_map), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unsigned_list_map_ref() const& {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unsigned_list_map_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unsigned_list_map_ref() & {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unsigned_list_map_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unsigned_list_map() const& {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unsigned_list_map() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unsigned_list_map() & {
    return {this->__fbthrift_field_unsigned_list_map, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unsigned_list_map() && {
    return {static_cast<T&&>(this->__fbthrift_field_unsigned_list_map), __isset.at(8), __isset.bit(8)};
  }
  const ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& get_enumz() const&;
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string> get_enumz() &&;

  template <typename T_MapStruct_enumz_struct_setter = ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>>
  [[deprecated("Use `FOO.enumz_ref() = BAR;` instead of `FOO.set_enumz(BAR);`")]]
  ::std::map<::test::fixtures::python_capi::MyEnum, ::std::string>& set_enumz(T_MapStruct_enumz_struct_setter&& enumz_) {
    enumz_ref() = std::forward<T_MapStruct_enumz_struct_setter>(enumz_);
    return __fbthrift_field_enumz;
  }
  const ::std::map<::std::int32_t, ::std::string>* get_intz() const&;
  ::std::map<::std::int32_t, ::std::string>* get_intz() &;
  ::std::map<::std::int32_t, ::std::string>* get_intz() && = delete;

  template <typename T_MapStruct_intz_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.intz_ref() = BAR;` instead of `FOO.set_intz(BAR);`")]]
  ::std::map<::std::int32_t, ::std::string>& set_intz(T_MapStruct_intz_struct_setter&& intz_) {
    intz_ref() = std::forward<T_MapStruct_intz_struct_setter>(intz_);
    return __fbthrift_field_intz;
  }
  const std::unordered_map<::std::string, double>& get_encoded() const&;
  std::unordered_map<::std::string, double> get_encoded() &&;

  template <typename T_MapStruct_encoded_struct_setter = std::unordered_map<::std::string, double>>
  [[deprecated("Use `FOO.encoded_ref() = BAR;` instead of `FOO.set_encoded(BAR);`")]]
  std::unordered_map<::std::string, double>& set_encoded(T_MapStruct_encoded_struct_setter&& encoded_) {
    encoded_ref() = std::forward<T_MapStruct_encoded_struct_setter>(encoded_);
    return __fbthrift_field_encoded;
  }
  const std::unordered_map<uint64_t, float>& get_flotz() const&;
  std::unordered_map<uint64_t, float> get_flotz() &&;

  template <typename T_MapStruct_flotz_struct_setter = std::unordered_map<uint64_t, float>>
  [[deprecated("Use `FOO.flotz_ref() = BAR;` instead of `FOO.set_flotz(BAR);`")]]
  std::unordered_map<uint64_t, float>& set_flotz(T_MapStruct_flotz_struct_setter&& flotz_) {
    flotz_ref() = std::forward<T_MapStruct_flotz_struct_setter>(flotz_);
    return __fbthrift_field_flotz;
  }
  const ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& get_map_list() const&;
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>> get_map_list() &&;

  template <typename T_MapStruct_map_list_struct_setter = ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>>
  [[deprecated("Use `FOO.map_list_ref() = BAR;` instead of `FOO.set_map_list(BAR);`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int64_t>>& set_map_list(T_MapStruct_map_list_struct_setter&& map_list_) {
    map_list_ref() = std::forward<T_MapStruct_map_list_struct_setter>(map_list_);
    return __fbthrift_field_map_list;
  }
  const ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& get_list_map() const&;
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>> get_list_map() &&;

  template <typename T_MapStruct_list_map_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>>
  [[deprecated("Use `FOO.list_map_ref() = BAR;` instead of `FOO.set_list_map(BAR);`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::int64_t>>& set_list_map(T_MapStruct_list_map_struct_setter&& list_map_) {
    list_map_ref() = std::forward<T_MapStruct_list_map_struct_setter>(list_map_);
    return __fbthrift_field_list_map;
  }
  const folly::F14FastMap<int, folly::fbvector<double>>& get_fast_list_map() const&;
  folly::F14FastMap<int, folly::fbvector<double>> get_fast_list_map() &&;

  template <typename T_MapStruct_fast_list_map_struct_setter = folly::F14FastMap<int, folly::fbvector<double>>>
  [[deprecated("Use `FOO.fast_list_map_ref() = BAR;` instead of `FOO.set_fast_list_map(BAR);`")]]
  folly::F14FastMap<int, folly::fbvector<double>>& set_fast_list_map(T_MapStruct_fast_list_map_struct_setter&& fast_list_map_) {
    fast_list_map_ref() = std::forward<T_MapStruct_fast_list_map_struct_setter>(fast_list_map_);
    return __fbthrift_field_fast_list_map;
  }
  const ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& get_buf_map() const&;
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr> get_buf_map() &&;

  template <typename T_MapStruct_buf_map_struct_setter = ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>>
  [[deprecated("Use `FOO.buf_map_ref() = BAR;` instead of `FOO.set_buf_map(BAR);`")]]
  ::std::map<::std::string, ::test::fixtures::python_capi::IOBufPtr>& set_buf_map(T_MapStruct_buf_map_struct_setter&& buf_map_) {
    buf_map_ref() = std::forward<T_MapStruct_buf_map_struct_setter>(buf_map_);
    return __fbthrift_field_buf_map;
  }
  const ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& get_unsigned_list_map() const&;
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>> get_unsigned_list_map() &&;

  template <typename T_MapStruct_unsigned_list_map_struct_setter = ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>>
  [[deprecated("Use `FOO.unsigned_list_map_ref() = BAR;` instead of `FOO.set_unsigned_list_map(BAR);`")]]
  ::std::map<::test::fixtures::python_capi::ui64, ::std::vector<::test::fixtures::python_capi::ui64>>& set_unsigned_list_map(T_MapStruct_unsigned_list_map_struct_setter&& unsigned_list_map_) {
    unsigned_list_map_ref() = std::forward<T_MapStruct_unsigned_list_map_struct_setter>(unsigned_list_map_);
    return __fbthrift_field_unsigned_list_map;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MapStruct>;
  friend void swap(MapStruct& a, MapStruct& b);
};

template <class Protocol_>
unsigned long MapStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class ComposeStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::enum_,
    ::apache::thrift::ident::renamed_,
    ::apache::thrift::ident::primitive,
    ::apache::thrift::ident::aliased,
    ::apache::thrift::ident::xenum,
    ::apache::thrift::ident::xstruct,
    ::apache::thrift::ident::friends,
    ::apache::thrift::ident::serial_struct,
    ::apache::thrift::ident::serial_union,
    ::apache::thrift::ident::serial_error
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8,9,10};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::NormalDecentEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::ListStruct>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::DepEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::DepStruct>,
    ::apache::thrift::type::list<::apache::thrift::type::struct_t<::test::fixtures::python_capi::DepStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::SerializedStruct>,
    ::apache::thrift::type::union_t<::test::fixtures::python_capi::SerializedUnion>,
    ::apache::thrift::type::exception_t<::test::fixtures::python_capi::SerializedError>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 10;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = ComposeStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ComposeStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComposeStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum enum___arg, ::test::fixtures::python_capi::NormalDecentEnum renamed___arg, ::test::fixtures::python_capi::PrimitiveStruct primitive__arg, ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> aliased__arg, ::test::fixtures::python_capi::DepEnum xenum__arg, ::test::fixtures::python_capi::DepStruct xstruct__arg, ::std::vector<::test::fixtures::python_capi::DepStruct> friends__arg, ::test::fixtures::python_capi::SerializedStruct serial_struct__arg, ::test::fixtures::python_capi::SerializedUnion serial_union__arg, ::test::fixtures::python_capi::SerializedError serial_error__arg);

  ComposeStruct(ComposeStruct&&) noexcept;


  ComposeStruct& operator=(ComposeStruct&&) noexcept;

  ~ComposeStruct();

 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_enum_;
 private:
  ::test::fixtures::python_capi::NormalDecentEnum __fbthrift_field_renamed_;
 private:
  ::test::fixtures::python_capi::PrimitiveStruct __fbthrift_field_primitive;
 private:
  ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias> __fbthrift_field_aliased;
 private:
  ::test::fixtures::python_capi::DepEnum __fbthrift_field_xenum;
 private:
  ::test::fixtures::python_capi::DepStruct __fbthrift_field_xstruct;
 private:
  ::std::vector<::test::fixtures::python_capi::DepStruct> __fbthrift_field_friends;
 private:
  ::test::fixtures::python_capi::SerializedStruct __fbthrift_field_serial_struct;
 private:
  ::test::fixtures::python_capi::SerializedUnion __fbthrift_field_serial_union;
 private:
  ::test::fixtures::python_capi::SerializedError __fbthrift_field_serial_error;
 private:
  apache::thrift::detail::isset_bitset<9, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const ComposeStruct&) const;
  bool operator<(const ComposeStruct&) const;

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enum__ref() const& {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enum__ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enum__ref() & {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enum__ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enum_() const& {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enum_() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enum_() & {
    return {this->__fbthrift_field_enum_, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enum_() && {
    return {static_cast<T&&>(this->__fbthrift_field_enum_), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> renamed__ref() const& {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> renamed__ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> renamed__ref() & {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> renamed__ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> renamed_() const& {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> renamed_() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> renamed_() & {
    return {this->__fbthrift_field_renamed_, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::NormalDecentEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> renamed_() && {
    return {static_cast<T&&>(this->__fbthrift_field_renamed_), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> primitive_ref() const& {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> primitive_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> primitive_ref() & {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> primitive_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> primitive() const& {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> primitive() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> primitive() & {
    return {this->__fbthrift_field_primitive, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> primitive() && {
    return {static_cast<T&&>(this->__fbthrift_field_primitive), __isset.at(2), __isset.bit(2)};
  }
  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE T& aliased_ref() & {
    return __fbthrift_field_aliased;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const T& aliased_ref() const& {
    return __fbthrift_field_aliased;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE T&& aliased_ref() && {
    return static_cast<T&&>(__fbthrift_field_aliased);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const T&& aliased_ref() const&& {
    return static_cast<const T&&>(__fbthrift_field_aliased);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE T& aliased() & {
    return __fbthrift_field_aliased;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const T& aliased() const& {
    return __fbthrift_field_aliased;
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE T&& aliased() && {
    return static_cast<T&&>(__fbthrift_field_aliased);
  }

  template <typename ..., typename T = ::std::shared_ptr<const ::test::fixtures::python_capi::ListAlias>>
  FOLLY_ERASE const T&& aliased() const&& {
    return static_cast<const T&&>(__fbthrift_field_aliased);
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> xenum_ref() const& {
    return {this->__fbthrift_field_xenum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> xenum_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_xenum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> xenum_ref() & {
    return {this->__fbthrift_field_xenum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> xenum_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_xenum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> xenum() const& {
    return {this->__fbthrift_field_xenum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> xenum() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_xenum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> xenum() & {
    return {this->__fbthrift_field_xenum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> xenum() && {
    return {static_cast<T&&>(this->__fbthrift_field_xenum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> xstruct_ref() const& {
    return {this->__fbthrift_field_xstruct, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> xstruct_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_xstruct), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> xstruct_ref() & {
    return {this->__fbthrift_field_xstruct, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> xstruct_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_xstruct), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> xstruct() const& {
    return {this->__fbthrift_field_xstruct, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> xstruct() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_xstruct), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> xstruct() & {
    return {this->__fbthrift_field_xstruct, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::DepStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> xstruct() && {
    return {static_cast<T&&>(this->__fbthrift_field_xstruct), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> friends_ref() const& {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> friends_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> friends_ref() & {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> friends_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> friends() const& {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> friends() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> friends() & {
    return {this->__fbthrift_field_friends, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> friends() && {
    return {static_cast<T&&>(this->__fbthrift_field_friends), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_struct_ref() const& {
    return {this->__fbthrift_field_serial_struct, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_struct_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_struct), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_struct_ref() & {
    return {this->__fbthrift_field_serial_struct, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_struct_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_struct), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_struct() const& {
    return {this->__fbthrift_field_serial_struct, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_struct() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_struct), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_struct() & {
    return {this->__fbthrift_field_serial_struct, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_struct() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_struct), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_union_ref() const& {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_union_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_union_ref() & {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_union_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_union() const& {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_union() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_union() & {
    return {this->__fbthrift_field_serial_union, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_union() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_union), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_error_ref() const& {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_error_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_error_ref() & {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_error_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> serial_error() const& {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> serial_error() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> serial_error() & {
    return {this->__fbthrift_field_serial_error, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::SerializedError>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> serial_error() && {
    return {static_cast<T&&>(this->__fbthrift_field_serial_error), __isset.at(8), __isset.bit(8)};
  }

  ::test::fixtures::python_capi::MyEnum get_enum_() const {
    return __fbthrift_field_enum_;
  }

  [[deprecated("Use `FOO.enum__ref() = BAR;` instead of `FOO.set_enum_(BAR);`")]]
  ::test::fixtures::python_capi::MyEnum& set_enum_(::test::fixtures::python_capi::MyEnum enum__) {
    enum__ref() = enum__;
    return __fbthrift_field_enum_;
  }

  ::test::fixtures::python_capi::NormalDecentEnum get_renamed_() const {
    return __fbthrift_field_renamed_;
  }

  [[deprecated("Use `FOO.renamed__ref() = BAR;` instead of `FOO.set_renamed_(BAR);`")]]
  ::test::fixtures::python_capi::NormalDecentEnum& set_renamed_(::test::fixtures::python_capi::NormalDecentEnum renamed__) {
    renamed__ref() = renamed__;
    return __fbthrift_field_renamed_;
  }
  const ::test::fixtures::python_capi::PrimitiveStruct& get_primitive() const&;
  ::test::fixtures::python_capi::PrimitiveStruct get_primitive() &&;

  template <typename T_ComposeStruct_primitive_struct_setter = ::test::fixtures::python_capi::PrimitiveStruct>
  [[deprecated("Use `FOO.primitive_ref() = BAR;` instead of `FOO.set_primitive(BAR);`")]]
  ::test::fixtures::python_capi::PrimitiveStruct& set_primitive(T_ComposeStruct_primitive_struct_setter&& primitive_) {
    primitive_ref() = std::forward<T_ComposeStruct_primitive_struct_setter>(primitive_);
    return __fbthrift_field_primitive;
  }

  ::test::fixtures::python_capi::DepEnum get_xenum() const {
    return __fbthrift_field_xenum;
  }

  [[deprecated("Use `FOO.xenum_ref() = BAR;` instead of `FOO.set_xenum(BAR);`")]]
  ::test::fixtures::python_capi::DepEnum& set_xenum(::test::fixtures::python_capi::DepEnum xenum_) {
    xenum_ref() = xenum_;
    return __fbthrift_field_xenum;
  }
  const ::test::fixtures::python_capi::DepStruct& get_xstruct() const&;
  ::test::fixtures::python_capi::DepStruct get_xstruct() &&;

  template <typename T_ComposeStruct_xstruct_struct_setter = ::test::fixtures::python_capi::DepStruct>
  [[deprecated("Use `FOO.xstruct_ref() = BAR;` instead of `FOO.set_xstruct(BAR);`")]]
  ::test::fixtures::python_capi::DepStruct& set_xstruct(T_ComposeStruct_xstruct_struct_setter&& xstruct_) {
    xstruct_ref() = std::forward<T_ComposeStruct_xstruct_struct_setter>(xstruct_);
    return __fbthrift_field_xstruct;
  }
  const ::std::vector<::test::fixtures::python_capi::DepStruct>& get_friends() const&;
  ::std::vector<::test::fixtures::python_capi::DepStruct> get_friends() &&;

  template <typename T_ComposeStruct_friends_struct_setter = ::std::vector<::test::fixtures::python_capi::DepStruct>>
  [[deprecated("Use `FOO.friends_ref() = BAR;` instead of `FOO.set_friends(BAR);`")]]
  ::std::vector<::test::fixtures::python_capi::DepStruct>& set_friends(T_ComposeStruct_friends_struct_setter&& friends_) {
    friends_ref() = std::forward<T_ComposeStruct_friends_struct_setter>(friends_);
    return __fbthrift_field_friends;
  }
  const ::test::fixtures::python_capi::SerializedStruct& get_serial_struct() const&;
  ::test::fixtures::python_capi::SerializedStruct get_serial_struct() &&;

  template <typename T_ComposeStruct_serial_struct_struct_setter = ::test::fixtures::python_capi::SerializedStruct>
  [[deprecated("Use `FOO.serial_struct_ref() = BAR;` instead of `FOO.set_serial_struct(BAR);`")]]
  ::test::fixtures::python_capi::SerializedStruct& set_serial_struct(T_ComposeStruct_serial_struct_struct_setter&& serial_struct_) {
    serial_struct_ref() = std::forward<T_ComposeStruct_serial_struct_struct_setter>(serial_struct_);
    return __fbthrift_field_serial_struct;
  }
  const ::test::fixtures::python_capi::SerializedUnion& get_serial_union() const&;
  ::test::fixtures::python_capi::SerializedUnion get_serial_union() &&;

  template <typename T_ComposeStruct_serial_union_struct_setter = ::test::fixtures::python_capi::SerializedUnion>
  [[deprecated("Use `FOO.serial_union_ref() = BAR;` instead of `FOO.set_serial_union(BAR);`")]]
  ::test::fixtures::python_capi::SerializedUnion& set_serial_union(T_ComposeStruct_serial_union_struct_setter&& serial_union_) {
    serial_union_ref() = std::forward<T_ComposeStruct_serial_union_struct_setter>(serial_union_);
    return __fbthrift_field_serial_union;
  }
  const ::test::fixtures::python_capi::SerializedError& get_serial_error() const&;
  ::test::fixtures::python_capi::SerializedError get_serial_error() &&;

  template <typename T_ComposeStruct_serial_error_struct_setter = ::test::fixtures::python_capi::SerializedError>
  [[deprecated("Use `FOO.serial_error_ref() = BAR;` instead of `FOO.set_serial_error(BAR);`")]]
  ::test::fixtures::python_capi::SerializedError& set_serial_error(T_ComposeStruct_serial_error_struct_setter&& serial_error_) {
    serial_error_ref() = std::forward<T_ComposeStruct_serial_error_struct_setter>(serial_error_);
    return __fbthrift_field_serial_error;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComposeStruct>;
  friend void swap(ComposeStruct& a, ComposeStruct& b);
};

template <class Protocol_>
unsigned long ComposeStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class Shallot final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myString,
    ::apache::thrift::ident::intSet,
    ::apache::thrift::ident::doubleList,
    ::apache::thrift::ident::strMap,
    ::apache::thrift::ident::adaptedInt
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,4,6,8,9,10};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::PrimitiveStruct>,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::set<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::adapted<::apache::thrift::type::detail::StrongIntegerAdapter<::apache::thrift::type::ProtocolId>, ::apache::thrift::type::i64_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = Shallot;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myString = 4,
    intSet = 6,
    doubleList = 8,
    strMap = 9,
    adaptedInt = 10,
  } ;

  Shallot()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  Shallot(Shallot&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myString:
      {
        set_myString(std::move(rhs.value_.myString));
        break;
      }
      case Type::intSet:
      {
        set_intSet(std::move(rhs.value_.intSet));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(rhs.value_.strMap));
        break;
      }
      case Type::adaptedInt:
      {
        set_adaptedInt(std::move(rhs.value_.adaptedInt));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  Shallot(const Shallot& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myString:
      {
        set_myString(rhs.value_.myString);
        break;
      }
      case Type::intSet:
      {
        set_intSet(rhs.value_.intSet);
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(rhs.value_.doubleList);
        break;
      }
      case Type::strMap:
      {
        set_strMap(rhs.value_.strMap);
        break;
      }
      case Type::adaptedInt:
      {
        set_adaptedInt(rhs.value_.adaptedInt);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  Shallot& operator=(Shallot&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myString:
      {
        set_myString(std::move(rhs.value_.myString));
        break;
      }
      case Type::intSet:
      {
        set_intSet(std::move(rhs.value_.intSet));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(rhs.value_.strMap));
        break;
      }
      case Type::adaptedInt:
      {
        set_adaptedInt(std::move(rhs.value_.adaptedInt));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  Shallot& operator=(const Shallot& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myString:
      {
        set_myString(rhs.value_.myString);
        break;
      }
      case Type::intSet:
      {
        set_intSet(rhs.value_.intSet);
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(rhs.value_.doubleList);
        break;
      }
      case Type::strMap:
      {
        set_strMap(rhs.value_.strMap);
        break;
      }
      case Type::adaptedInt:
      {
        set_adaptedInt(rhs.value_.adaptedInt);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~Shallot() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::test::fixtures::python_capi::MyEnum myEnum;
    ::test::fixtures::python_capi::PrimitiveStruct myStruct;
    ::std::string myString;
    ::std::set<::std::int64_t> intSet;
    ::std::vector<double> doubleList;
    ::std::map<::std::string, ::std::string> strMap;
    ::apache::thrift::type::ProtocolId adaptedInt;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const Shallot&) const;
  bool operator<(const Shallot&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::MyEnum& set_myEnum(::test::fixtures::python_capi::MyEnum t = ::test::fixtures::python_capi::MyEnum()) {
    using T0 = ::test::fixtures::python_capi::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(::test::fixtures::python_capi::PrimitiveStruct const &t) {
    using T0 = ::test::fixtures::python_capi::PrimitiveStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(::test::fixtures::python_capi::PrimitiveStruct&& t) {
    using T0 = ::test::fixtures::python_capi::PrimitiveStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::python_capi::PrimitiveStruct, T...>> ::test::fixtures::python_capi::PrimitiveStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::test::fixtures::python_capi::PrimitiveStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_myString(::std::string const &t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) T(t);
    return value_.myString;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::string& set_myString(::std::string&& t) {
    using T0 = ::std::string;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) T(std::move(t));
    return value_.myString;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_myString(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myString);
    ::new (std::addressof(value_.myString)) ::std::string(std::forward<T>(t)...);
    return value_.myString;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<::std::int64_t>& set_intSet(::std::set<::std::int64_t> const &t) {
    using T0 = ::std::set<::std::int64_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::intSet);
    ::new (std::addressof(value_.intSet)) T(t);
    return value_.intSet;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<::std::int64_t>& set_intSet(::std::set<::std::int64_t>&& t) {
    using T0 = ::std::set<::std::int64_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::intSet);
    ::new (std::addressof(value_.intSet)) T(std::move(t));
    return value_.intSet;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::set<::std::int64_t>, T...>> ::std::set<::std::int64_t>& set_intSet(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::intSet);
    ::new (std::addressof(value_.intSet)) ::std::set<::std::int64_t>(std::forward<T>(t)...);
    return value_.intSet;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::vector<double>& set_doubleList(::std::vector<double> const &t) {
    using T0 = ::std::vector<double>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) T(t);
    return value_.doubleList;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::vector<double>& set_doubleList(::std::vector<double>&& t) {
    using T0 = ::std::vector<double>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) T(std::move(t));
    return value_.doubleList;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<double>, T...>> ::std::vector<double>& set_doubleList(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) ::std::vector<double>(std::forward<T>(t)...);
    return value_.doubleList;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::map<::std::string, ::std::string>& set_strMap(::std::map<::std::string, ::std::string> const &t) {
    using T0 = ::std::map<::std::string, ::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) T(t);
    return value_.strMap;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::map<::std::string, ::std::string>& set_strMap(::std::map<::std::string, ::std::string>&& t) {
    using T0 = ::std::map<::std::string, ::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) T(std::move(t));
    return value_.strMap;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::map<::std::string, ::std::string>, T...>> ::std::map<::std::string, ::std::string>& set_strMap(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) ::std::map<::std::string, ::std::string>(std::forward<T>(t)...);
    return value_.strMap;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::apache::thrift::type::ProtocolId& set_adaptedInt(::apache::thrift::type::ProtocolId t = ::apache::thrift::type::ProtocolId()) {
    using T0 = ::apache::thrift::type::ProtocolId;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::adaptedInt);
    ::new (std::addressof(value_.adaptedInt)) T(t);
    return value_.adaptedInt;
  }

  ::test::fixtures::python_capi::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  ::test::fixtures::python_capi::PrimitiveStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  ::std::string const& get_myString() const {
    if (getType() != Type::myString) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myString;
  }

  ::std::set<::std::int64_t> const& get_intSet() const {
    if (getType() != Type::intSet) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.intSet;
  }

  ::std::vector<double> const& get_doubleList() const {
    if (getType() != Type::doubleList) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.doubleList;
  }

  ::std::map<::std::string, ::std::string> const& get_strMap() const {
    if (getType() != Type::strMap) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.strMap;
  }

  ::apache::thrift::type::ProtocolId const& get_adaptedInt() const {
    if (getType() != Type::adaptedInt) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.adaptedInt;
  }

  ::test::fixtures::python_capi::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::test::fixtures::python_capi::PrimitiveStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::std::string& mutable_myString() {
    assert(getType() == Type::myString);
    return value_.myString;
  }

  ::std::set<::std::int64_t>& mutable_intSet() {
    assert(getType() == Type::intSet);
    return value_.intSet;
  }

  ::std::vector<double>& mutable_doubleList() {
    assert(getType() == Type::doubleList);
    return value_.doubleList;
  }

  ::std::map<::std::string, ::std::string>& mutable_strMap() {
    assert(getType() == Type::strMap);
    return value_.strMap;
  }

  ::apache::thrift::type::ProtocolId& mutable_adaptedInt() {
    assert(getType() == Type::adaptedInt);
    return value_.adaptedInt;
  }

  ::test::fixtures::python_capi::MyEnum move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  ::test::fixtures::python_capi::PrimitiveStruct move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  ::std::string move_myString() {
    assert(getType() == Type::myString);
    return std::move(value_.myString);
  }

  ::std::set<::std::int64_t> move_intSet() {
    assert(getType() == Type::intSet);
    return std::move(value_.intSet);
  }

  ::std::vector<double> move_doubleList() {
    assert(getType() == Type::doubleList);
    return std::move(value_.doubleList);
  }

  ::std::map<::std::string, ::std::string> move_strMap() {
    assert(getType() == Type::strMap);
    return std::move(value_.strMap);
  }

  ::apache::thrift::type::ProtocolId move_adaptedInt() {
    assert(getType() == Type::adaptedInt);
    return std::move(value_.adaptedInt);
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myStruct_ref() const&& {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::PrimitiveStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myString_ref() const& {
    return {value_.myString, type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myString_ref() const&& {
    return {std::move(value_.myString), type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myString_ref() & {
    return {value_.myString, type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myString_ref() && {
    return {std::move(value_.myString), type_, folly::to_underlying(Type::myString), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intSet_ref() const& {
    return {value_.intSet, type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intSet_ref() const&& {
    return {std::move(value_.intSet), type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intSet_ref() & {
    return {value_.intSet, type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intSet_ref() && {
    return {std::move(value_.intSet), type_, folly::to_underlying(Type::intSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> doubleList_ref() const& {
    return {value_.doubleList, type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> doubleList_ref() const&& {
    return {std::move(value_.doubleList), type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> doubleList_ref() & {
    return {value_.doubleList, type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> doubleList_ref() && {
    return {std::move(value_.doubleList), type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> strMap_ref() const& {
    return {value_.strMap, type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> strMap_ref() const&& {
    return {std::move(value_.strMap), type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> strMap_ref() & {
    return {value_.strMap, type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> strMap_ref() && {
    return {std::move(value_.strMap), type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> adaptedInt_ref() const& {
    return {value_.adaptedInt, type_, folly::to_underlying(Type::adaptedInt), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> adaptedInt_ref() const&& {
    return {std::move(value_.adaptedInt), type_, folly::to_underlying(Type::adaptedInt), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> adaptedInt_ref() & {
    return {value_.adaptedInt, type_, folly::to_underlying(Type::adaptedInt), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::type::ProtocolId>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> adaptedInt_ref() && {
    return {std::move(value_.adaptedInt), type_, folly::to_underlying(Type::adaptedInt), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Shallot>;
  friend void swap(Shallot& a, Shallot& b);
};

template <class Protocol_>
unsigned long Shallot::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStructField4PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::bool_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField4PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField4PatchStruct() :
      __fbthrift_field_assign(),
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField4PatchStruct(apache::thrift::FragileConstructor, ::test::fixtures::python_capi::MyEnum assign__arg, bool clear__arg);

  MyStructField4PatchStruct(MyStructField4PatchStruct&&) = default;

  MyStructField4PatchStruct(const MyStructField4PatchStruct&) = default;


  MyStructField4PatchStruct& operator=(MyStructField4PatchStruct&&) = default;

  MyStructField4PatchStruct& operator=(const MyStructField4PatchStruct&) = default;
 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField4PatchStruct&) const;
  bool operator<(const MyStructField4PatchStruct&) const;

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  const ::test::fixtures::python_capi::MyEnum* get_assign() const& {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }

  ::test::fixtures::python_capi::MyEnum* get_assign() & {
    return assign_ref() ? std::addressof(__fbthrift_field_assign) : nullptr;
  }
  ::test::fixtures::python_capi::MyEnum* get_assign() && = delete;

  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::test::fixtures::python_capi::MyEnum& set_assign(::test::fixtures::python_capi::MyEnum assign_) {
    assign_ref() = assign_;
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField4PatchStruct>;
  friend void swap(MyStructField4PatchStruct& a, MyStructField4PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField4PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField4Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::test::fixtures::python_capi::MyStructField4PatchStruct>;


class MyStructField6PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::prepend,
    ::apache::thrift::ident::append
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,8,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField6PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField6PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField6PatchStruct(apache::thrift::FragileConstructor, ::std::vector<float> assign__arg, bool clear__arg, ::std::vector<float> prepend__arg, ::std::vector<float> append__arg);

  MyStructField6PatchStruct(MyStructField6PatchStruct&&) noexcept;

  MyStructField6PatchStruct(const MyStructField6PatchStruct& src);


  MyStructField6PatchStruct& operator=(MyStructField6PatchStruct&&) noexcept;
  MyStructField6PatchStruct& operator=(const MyStructField6PatchStruct& src);

  ~MyStructField6PatchStruct();

 private:
  ::std::vector<float> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::vector<float> __fbthrift_field_prepend;
 private:
  ::std::vector<float> __fbthrift_field_append;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField6PatchStruct&) const;
  bool operator<(const MyStructField6PatchStruct&) const;

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> prepend() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> prepend() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> prepend() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_prepend};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> prepend() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_prepend)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> append() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> append() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_append)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> append() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_append};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> append() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_append)};
  }
  const ::std::vector<float>* get_assign() const&;
  ::std::vector<float>* get_assign() &;
  ::std::vector<float>* get_assign() && = delete;

  template <typename T_MyStructField6PatchStruct_assign_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::vector<float>& set_assign(T_MyStructField6PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField6PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::vector<float>& get_prepend() const&;
  ::std::vector<float> get_prepend() &&;

  template <typename T_MyStructField6PatchStruct_prepend_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.prepend_ref() = BAR;` instead of `FOO.set_prepend(BAR);`")]]
  ::std::vector<float>& set_prepend(T_MyStructField6PatchStruct_prepend_struct_setter&& prepend_) {
    prepend_ref() = std::forward<T_MyStructField6PatchStruct_prepend_struct_setter>(prepend_);
    return __fbthrift_field_prepend;
  }
  const ::std::vector<float>& get_append() const&;
  ::std::vector<float> get_append() &&;

  template <typename T_MyStructField6PatchStruct_append_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.append_ref() = BAR;` instead of `FOO.set_append(BAR);`")]]
  ::std::vector<float>& set_append(T_MyStructField6PatchStruct_append_struct_setter&& append_) {
    append_ref() = std::forward<T_MyStructField6PatchStruct_append_struct_setter>(append_);
    return __fbthrift_field_append;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField6PatchStruct>;
  friend void swap(MyStructField6PatchStruct& a, MyStructField6PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField6PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField6Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::test::fixtures::python_capi::MyStructField6PatchStruct>;


class MyStructField7PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::add,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::put
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7,9};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::cpp_type<::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>, ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>>,
    ::apache::thrift::type::cpp_type<::std::unordered_set<::std::string>, ::apache::thrift::type::set<::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 7;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField7PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField7PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField7PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patchPrior__arg, ::std::map<::std::string, ::std::string> add__arg, ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> patch__arg, ::std::unordered_set<::std::string> remove__arg, ::std::map<::std::string, ::std::string> put__arg);

  MyStructField7PatchStruct(MyStructField7PatchStruct&&) noexcept;

  MyStructField7PatchStruct(const MyStructField7PatchStruct& src);


  MyStructField7PatchStruct& operator=(MyStructField7PatchStruct&&) noexcept;
  MyStructField7PatchStruct& operator=(const MyStructField7PatchStruct& src);

  ~MyStructField7PatchStruct();

 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> __fbthrift_field_patchPrior;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_add;
 private:
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> __fbthrift_field_patch;
 private:
  ::std::unordered_set<::std::string> __fbthrift_field_remove;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField7PatchStruct&) const;
  bool operator<(const MyStructField7PatchStruct&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::unordered_set<::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> put() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> put() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_put)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> put() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_put};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> put() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_put)};
  }
  const ::std::map<::std::string, ::std::string>* get_assign() const&;
  ::std::map<::std::string, ::std::string>* get_assign() &;
  ::std::map<::std::string, ::std::string>* get_assign() && = delete;

  template <typename T_MyStructField7PatchStruct_assign_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_assign(T_MyStructField7PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField7PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& get_patchPrior() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> get_patchPrior() &&;

  template <typename T_MyStructField7PatchStruct_patchPrior_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  [[deprecated("Use `FOO.patchPrior_ref() = BAR;` instead of `FOO.set_patchPrior(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& set_patchPrior(T_MyStructField7PatchStruct_patchPrior_struct_setter&& patchPrior_) {
    patchPrior_ref() = std::forward<T_MyStructField7PatchStruct_patchPrior_struct_setter>(patchPrior_);
    return __fbthrift_field_patchPrior;
  }
  const ::std::map<::std::string, ::std::string>& get_add() const&;
  ::std::map<::std::string, ::std::string> get_add() &&;

  template <typename T_MyStructField7PatchStruct_add_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_add(T_MyStructField7PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField7PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }
  const ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& get_patch() const&;
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch> get_patch() &&;

  template <typename T_MyStructField7PatchStruct_patch_struct_setter = ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::std::unordered_map<::std::string, ::apache::thrift::op::StringPatch>& set_patch(T_MyStructField7PatchStruct_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructField7PatchStruct_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::std::unordered_set<::std::string>& get_remove() const&;
  ::std::unordered_set<::std::string> get_remove() &&;

  template <typename T_MyStructField7PatchStruct_remove_struct_setter = ::std::unordered_set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::unordered_set<::std::string>& set_remove(T_MyStructField7PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField7PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::map<::std::string, ::std::string>& get_put() const&;
  ::std::map<::std::string, ::std::string> get_put() &&;

  template <typename T_MyStructField7PatchStruct_put_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_put(T_MyStructField7PatchStruct_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField7PatchStruct_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField7PatchStruct>;
  friend void swap(MyStructField7PatchStruct& a, MyStructField7PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField7PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField7Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::test::fixtures::python_capi::MyStructField7PatchStruct>;


class MyStructField8PatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::remove,
    ::apache::thrift::ident::add
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 4;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField8PatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField8PatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField8PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::int32_t> assign__arg, bool clear__arg, ::std::set<::std::int32_t> remove__arg, ::std::set<::std::int32_t> add__arg);

  MyStructField8PatchStruct(MyStructField8PatchStruct&&) noexcept;

  MyStructField8PatchStruct(const MyStructField8PatchStruct& src);


  MyStructField8PatchStruct& operator=(MyStructField8PatchStruct&&) noexcept;
  MyStructField8PatchStruct& operator=(const MyStructField8PatchStruct& src);

  ~MyStructField8PatchStruct();

 private:
  ::std::set<::std::int32_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_remove;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_add;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField8PatchStruct&) const;
  bool operator<(const MyStructField8PatchStruct&) const;

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> add() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> add() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_add)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> add() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_add};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> add() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_add)};
  }
  const ::std::set<::std::int32_t>* get_assign() const&;
  ::std::set<::std::int32_t>* get_assign() &;
  ::std::set<::std::int32_t>* get_assign() && = delete;

  template <typename T_MyStructField8PatchStruct_assign_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::set<::std::int32_t>& set_assign(T_MyStructField8PatchStruct_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField8PatchStruct_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::int32_t>& get_remove() const&;
  ::std::set<::std::int32_t> get_remove() &&;

  template <typename T_MyStructField8PatchStruct_remove_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::set<::std::int32_t>& set_remove(T_MyStructField8PatchStruct_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField8PatchStruct_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::set<::std::int32_t>& get_add() const&;
  ::std::set<::std::int32_t> get_add() &&;

  template <typename T_MyStructField8PatchStruct_add_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::set<::std::int32_t>& set_add(T_MyStructField8PatchStruct_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField8PatchStruct_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField8PatchStruct>;
  friend void swap(MyStructField8PatchStruct& a, MyStructField8PatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructField8PatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructField8Patch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::test::fixtures::python_capi::MyStructField8PatchStruct>;


class MyDataItemFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItemFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItemFieldPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItemFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> s__arg);

  MyDataItemFieldPatchStruct(MyDataItemFieldPatchStruct&&) noexcept;
  MyDataItemFieldPatchStruct(const MyDataItemFieldPatchStruct& src);


  MyDataItemFieldPatchStruct& operator=(MyDataItemFieldPatchStruct&&) noexcept;
  MyDataItemFieldPatchStruct& operator=(const MyDataItemFieldPatchStruct& src);

  ~MyDataItemFieldPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_s;

 public:

  bool operator==(const MyDataItemFieldPatchStruct&) const;
  bool operator<(const MyDataItemFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> s_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_s, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> s_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_s), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> s_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_s, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> s_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_s), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> s() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_s, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> s() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_s), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> s() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_s, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> s() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_s), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItemFieldPatchStruct>;
  friend void swap(MyDataItemFieldPatchStruct& a, MyDataItemFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataItemFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataItemFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, ::test::fixtures::python_capi::MyDataItemFieldPatchStruct>;


class MyDataItemEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 1;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItemEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItemEnsureStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItemEnsureStruct(apache::thrift::FragileConstructor, ::std::string s__arg);

  MyDataItemEnsureStruct(MyDataItemEnsureStruct&&) noexcept;

  MyDataItemEnsureStruct(const MyDataItemEnsureStruct& src);


  MyDataItemEnsureStruct& operator=(MyDataItemEnsureStruct&&) noexcept;
  MyDataItemEnsureStruct& operator=(const MyDataItemEnsureStruct& src);

  ~MyDataItemEnsureStruct();

 private:
  ::std::string __fbthrift_field_s;
 private:
  apache::thrift::detail::isset_bitset<1, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataItemEnsureStruct&) const;
  bool operator<(const MyDataItemEnsureStruct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  const ::std::string* get_s() const& {
    return s_ref() ? std::addressof(__fbthrift_field_s) : nullptr;
  }

  ::std::string* get_s() & {
    return s_ref() ? std::addressof(__fbthrift_field_s) : nullptr;
  }
  ::std::string* get_s() && = delete;

  template <typename T_MyDataItemEnsureStruct_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_MyDataItemEnsureStruct_s_struct_setter&& s_) {
    s_ref() = std::forward<T_MyDataItemEnsureStruct_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItemEnsureStruct>;
  friend void swap(MyDataItemEnsureStruct& a, MyDataItemEnsureStruct& b);
};

template <class Protocol_>
unsigned long MyDataItemEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyDataItemPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItem>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemFieldPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItemPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItemPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItemPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> assign__arg, bool clear__arg, ::test::fixtures::python_capi::MyDataItemFieldPatch patchPrior__arg, ::test::fixtures::python_capi::MyDataItemEnsureStruct ensure__arg, ::test::fixtures::python_capi::MyDataItemFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg);

  MyDataItemPatchStruct(MyDataItemPatchStruct&&) noexcept;
  MyDataItemPatchStruct(const MyDataItemPatchStruct& src);


  MyDataItemPatchStruct& operator=(MyDataItemPatchStruct&&) noexcept;
  MyDataItemPatchStruct& operator=(const MyDataItemPatchStruct& src);

  ~MyDataItemPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::python_capi::MyDataItemFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::python_capi::MyDataItemEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::python_capi::MyDataItemFieldPatch __fbthrift_field_patch;
 private:
  ::apache::thrift::op::FieldIdList __fbthrift_field_remove;

 public:

  bool operator==(const MyDataItemPatchStruct&) const;
  bool operator<(const MyDataItemPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyDataItemFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::python_capi::MyDataItemEnsureStruct& get_ensure() const&;
  ::test::fixtures::python_capi::MyDataItemEnsureStruct get_ensure() &&;

  template <typename T_MyDataItemPatchStruct_ensure_struct_setter = ::test::fixtures::python_capi::MyDataItemEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::python_capi::MyDataItemEnsureStruct& set_ensure(T_MyDataItemPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyDataItemPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItemPatchStruct>;
  friend void swap(MyDataItemPatchStruct& a, MyDataItemPatchStruct& b);
};

template <class Protocol_>
unsigned long MyDataItemPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyDataItemPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::test::fixtures::python_capi::MyDataItemPatchStruct>;


class MyStructFieldPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::myItemy,
    ::apache::thrift::ident::myEnumy,
    ::apache::thrift::ident::booly,
    ::apache::thrift::ident::floatListy,
    ::apache::thrift::ident::strMappy,
    ::apache::thrift::ident::intSetty
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructFieldPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructFieldPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructFieldPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> inty__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> stringy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch> myItemy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch> myEnumy__arg, ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> booly__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch> floatListy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch> strMappy__arg, ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch> intSetty__arg);

  MyStructFieldPatchStruct(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct(const MyStructFieldPatchStruct& src);


  MyStructFieldPatchStruct& operator=(MyStructFieldPatchStruct&&) noexcept;
  MyStructFieldPatchStruct& operator=(const MyStructFieldPatchStruct& src);

  ~MyStructFieldPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch> __fbthrift_field_inty;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch> __fbthrift_field_stringy;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch> __fbthrift_field_myItemy;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch> __fbthrift_field_myEnumy;
 private:
  ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch> __fbthrift_field_booly;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch> __fbthrift_field_floatListy;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch> __fbthrift_field_strMappy;
 private:
  ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch> __fbthrift_field_intSetty;

 public:

  bool operator==(const MyStructFieldPatchStruct&) const;
  bool operator<(const MyStructFieldPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> inty_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_inty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> inty_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_inty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> inty_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_inty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> inty_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_inty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> inty() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_inty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> inty() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_inty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> inty() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_inty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::I64Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> inty() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_inty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::NumberPatchAdapter<::apache::thrift::op::I64PatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::I64PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> stringy_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_stringy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> stringy_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> stringy_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_stringy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> stringy_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> stringy() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_stringy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> stringy() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_stringy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> stringy() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_stringy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::StringPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> stringy() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_stringy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StringPatchAdapter<::apache::thrift::op::StringPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::StringPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> myItemy_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_myItemy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> myItemy_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myItemy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> myItemy_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_myItemy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> myItemy_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myItemy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> myItemy() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_myItemy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> myItemy() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myItemy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> myItemy() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_myItemy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyDataItemPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> myItemy() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myItemy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyDataItemPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItemPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> myEnumy_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_myEnumy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> myEnumy_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myEnumy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> myEnumy_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_myEnumy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> myEnumy_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myEnumy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> myEnumy() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_myEnumy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> myEnumy() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myEnumy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> myEnumy() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_myEnumy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField4Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> myEnumy() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myEnumy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::python_capi::MyStructField4PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField4PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> booly_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_booly, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> booly_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_booly), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> booly_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_booly, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> booly_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_booly), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> booly() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_booly, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> booly() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_booly), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> booly() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_booly, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::apache::thrift::op::BoolPatch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> booly() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_booly), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::BoolPatchAdapter<::apache::thrift::op::BoolPatchStruct>, ::apache::thrift::type::struct_t<::apache::thrift::op::BoolPatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> floatListy_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_floatListy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> floatListy_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatListy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> floatListy_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_floatListy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> floatListy_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatListy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> floatListy() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_floatListy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> floatListy() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_floatListy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> floatListy() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_floatListy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField6Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> floatListy() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_floatListy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::python_capi::MyStructField6PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField6PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> strMappy_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_strMappy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> strMappy_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_strMappy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> strMappy_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_strMappy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> strMappy_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_strMappy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> strMappy() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_strMappy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> strMappy() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_strMappy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> strMappy() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_strMappy, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField7Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> strMappy() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_strMappy), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::python_capi::MyStructField7PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField7PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> intSetty_ref() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_intSetty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> intSetty_ref() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_intSetty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> intSetty_ref() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_intSetty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> intSetty_ref() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_intSetty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&> intSetty() const& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&>{this->__fbthrift_field_intSetty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<const T&&> intSetty() const&& {
    return ::apache::thrift::terse_intern_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_intSetty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&> intSetty() & {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&>{this->__fbthrift_field_intSetty, ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value<::test::fixtures::python_capi::MyStructField8Patch>>
  FOLLY_ERASE ::apache::thrift::terse_intern_boxed_field_ref<T&&> intSetty() && {
    return ::apache::thrift::terse_intern_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_intSetty), ::apache::thrift::op::getDefault<::apache::thrift::type::adapted<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::python_capi::MyStructField8PatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructField8PatchStruct>>>};
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructFieldPatchStruct>;
  friend void swap(MyStructFieldPatchStruct& a, MyStructFieldPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructFieldPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructFieldPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, ::test::fixtures::python_capi::MyStructFieldPatchStruct>;


class MyStructEnsureStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::inty,
    ::apache::thrift::ident::stringy,
    ::apache::thrift::ident::myItemy,
    ::apache::thrift::ident::myEnumy,
    ::apache::thrift::ident::booly,
    ::apache::thrift::ident::floatListy,
    ::apache::thrift::ident::strMappy,
    ::apache::thrift::ident::intSetty
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::python_capi::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructEnsureStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructEnsureStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructEnsureStruct(apache::thrift::FragileConstructor, ::std::int64_t inty__arg, ::std::string stringy__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> myItemy__arg, ::test::fixtures::python_capi::MyEnum myEnumy__arg, bool booly__arg, ::std::vector<float> floatListy__arg, ::std::map<::std::string, ::std::string> strMappy__arg, ::std::set<::std::int32_t> intSetty__arg);

  MyStructEnsureStruct(MyStructEnsureStruct&&) noexcept;

  MyStructEnsureStruct(const MyStructEnsureStruct& src);


  MyStructEnsureStruct& operator=(MyStructEnsureStruct&&) noexcept;
  MyStructEnsureStruct& operator=(const MyStructEnsureStruct& src);

  ~MyStructEnsureStruct();

 private:
  ::std::int64_t __fbthrift_field_inty;
 private:
  ::std::string __fbthrift_field_stringy;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem> __fbthrift_field_myItemy;
 private:
  ::test::fixtures::python_capi::MyEnum __fbthrift_field_myEnumy;
 private:
  bool __fbthrift_field_booly;
 private:
  ::std::vector<float> __fbthrift_field_floatListy;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_strMappy;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_intSetty;
 private:
  apache::thrift::detail::isset_bitset<7, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructEnsureStruct&) const;
  bool operator<(const MyStructEnsureStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> inty_ref() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> inty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> inty_ref() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> inty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> inty() const& {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> inty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> inty() & {
    return {this->__fbthrift_field_inty, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> inty() && {
    return {static_cast<T&&>(this->__fbthrift_field_inty), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> stringy_ref() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> stringy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> stringy_ref() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> stringy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> stringy() const& {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> stringy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> stringy() & {
    return {this->__fbthrift_field_stringy, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> stringy() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringy), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> myItemy_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_myItemy};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> myItemy_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myItemy)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> myItemy_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_myItemy};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> myItemy_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myItemy)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> myItemy() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_myItemy};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> myItemy() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_myItemy)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> myItemy() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_myItemy};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyDataItem>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> myItemy() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_myItemy)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> myEnumy_ref() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> myEnumy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnumy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> myEnumy_ref() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> myEnumy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnumy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> myEnumy() const& {
    return {this->__fbthrift_field_myEnumy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> myEnumy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnumy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> myEnumy() & {
    return {this->__fbthrift_field_myEnumy, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> myEnumy() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnumy), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> booly_ref() const& {
    return {this->__fbthrift_field_booly, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> booly_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_booly), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> booly_ref() & {
    return {this->__fbthrift_field_booly, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> booly_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_booly), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> booly() const& {
    return {this->__fbthrift_field_booly, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> booly() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_booly), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> booly() & {
    return {this->__fbthrift_field_booly, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> booly() && {
    return {static_cast<T&&>(this->__fbthrift_field_booly), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floatListy_ref() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floatListy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatListy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floatListy_ref() & {
    return {this->__fbthrift_field_floatListy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floatListy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatListy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> floatListy() const& {
    return {this->__fbthrift_field_floatListy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> floatListy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatListy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> floatListy() & {
    return {this->__fbthrift_field_floatListy, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> floatListy() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatListy), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> strMappy_ref() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> strMappy_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMappy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> strMappy_ref() & {
    return {this->__fbthrift_field_strMappy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> strMappy_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMappy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> strMappy() const& {
    return {this->__fbthrift_field_strMappy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> strMappy() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMappy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> strMappy() & {
    return {this->__fbthrift_field_strMappy, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> strMappy() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMappy), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intSetty_ref() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intSetty_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intSetty), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intSetty_ref() & {
    return {this->__fbthrift_field_intSetty, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intSetty_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intSetty), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> intSetty() const& {
    return {this->__fbthrift_field_intSetty, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> intSetty() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intSetty), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> intSetty() & {
    return {this->__fbthrift_field_intSetty, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> intSetty() && {
    return {static_cast<T&&>(this->__fbthrift_field_intSetty), __isset.at(6), __isset.bit(6)};
  }

  const ::std::int64_t* get_inty() const& {
    return inty_ref() ? std::addressof(__fbthrift_field_inty) : nullptr;
  }

  ::std::int64_t* get_inty() & {
    return inty_ref() ? std::addressof(__fbthrift_field_inty) : nullptr;
  }
  ::std::int64_t* get_inty() && = delete;

  [[deprecated("Use `FOO.inty_ref() = BAR;` instead of `FOO.set_inty(BAR);`")]]
  ::std::int64_t& set_inty(::std::int64_t inty_) {
    inty_ref() = inty_;
    return __fbthrift_field_inty;
  }

  const ::std::string* get_stringy() const& {
    return stringy_ref() ? std::addressof(__fbthrift_field_stringy) : nullptr;
  }

  ::std::string* get_stringy() & {
    return stringy_ref() ? std::addressof(__fbthrift_field_stringy) : nullptr;
  }
  ::std::string* get_stringy() && = delete;

  template <typename T_MyStructEnsureStruct_stringy_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringy_ref() = BAR;` instead of `FOO.set_stringy(BAR);`")]]
  ::std::string& set_stringy(T_MyStructEnsureStruct_stringy_struct_setter&& stringy_) {
    stringy_ref() = std::forward<T_MyStructEnsureStruct_stringy_struct_setter>(stringy_);
    return __fbthrift_field_stringy;
  }

  const ::test::fixtures::python_capi::MyEnum* get_myEnumy() const& {
    return myEnumy_ref() ? std::addressof(__fbthrift_field_myEnumy) : nullptr;
  }

  ::test::fixtures::python_capi::MyEnum* get_myEnumy() & {
    return myEnumy_ref() ? std::addressof(__fbthrift_field_myEnumy) : nullptr;
  }
  ::test::fixtures::python_capi::MyEnum* get_myEnumy() && = delete;

  [[deprecated("Use `FOO.myEnumy_ref() = BAR;` instead of `FOO.set_myEnumy(BAR);`")]]
  ::test::fixtures::python_capi::MyEnum& set_myEnumy(::test::fixtures::python_capi::MyEnum myEnumy_) {
    myEnumy_ref() = myEnumy_;
    return __fbthrift_field_myEnumy;
  }

  const bool* get_booly() const& {
    return booly_ref() ? std::addressof(__fbthrift_field_booly) : nullptr;
  }

  bool* get_booly() & {
    return booly_ref() ? std::addressof(__fbthrift_field_booly) : nullptr;
  }
  bool* get_booly() && = delete;

  [[deprecated("Use `FOO.booly_ref() = BAR;` instead of `FOO.set_booly(BAR);`")]]
  bool& set_booly(bool booly_) {
    booly_ref() = booly_;
    return __fbthrift_field_booly;
  }
  const ::std::vector<float>* get_floatListy() const&;
  ::std::vector<float>* get_floatListy() &;
  ::std::vector<float>* get_floatListy() && = delete;

  template <typename T_MyStructEnsureStruct_floatListy_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.floatListy_ref() = BAR;` instead of `FOO.set_floatListy(BAR);`")]]
  ::std::vector<float>& set_floatListy(T_MyStructEnsureStruct_floatListy_struct_setter&& floatListy_) {
    floatListy_ref() = std::forward<T_MyStructEnsureStruct_floatListy_struct_setter>(floatListy_);
    return __fbthrift_field_floatListy;
  }
  const ::std::map<::std::string, ::std::string>* get_strMappy() const&;
  ::std::map<::std::string, ::std::string>* get_strMappy() &;
  ::std::map<::std::string, ::std::string>* get_strMappy() && = delete;

  template <typename T_MyStructEnsureStruct_strMappy_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.strMappy_ref() = BAR;` instead of `FOO.set_strMappy(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_strMappy(T_MyStructEnsureStruct_strMappy_struct_setter&& strMappy_) {
    strMappy_ref() = std::forward<T_MyStructEnsureStruct_strMappy_struct_setter>(strMappy_);
    return __fbthrift_field_strMappy;
  }
  const ::std::set<::std::int32_t>* get_intSetty() const&;
  ::std::set<::std::int32_t>* get_intSetty() &;
  ::std::set<::std::int32_t>* get_intSetty() && = delete;

  template <typename T_MyStructEnsureStruct_intSetty_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.intSetty_ref() = BAR;` instead of `FOO.set_intSetty(BAR);`")]]
  ::std::set<::std::int32_t>& set_intSetty(T_MyStructEnsureStruct_intSetty_struct_setter&& intSetty_) {
    intSetty_ref() = std::forward<T_MyStructEnsureStruct_intSetty_struct_setter>(intSetty_);
    return __fbthrift_field_intSetty;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructEnsureStruct>;
  friend void swap(MyStructEnsureStruct& a, MyStructEnsureStruct& b);
};

template <class Protocol_>
unsigned long MyStructEnsureStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStructPatchStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::assign,
    ::apache::thrift::ident::clear,
    ::apache::thrift::ident::patchPrior,
    ::apache::thrift::ident::ensure,
    ::apache::thrift::ident::patch,
    ::apache::thrift::ident::remove
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,5,6,7};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStruct>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructFieldPatchStruct>>,
    ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructEnsureStruct>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::python_capi::MyStructFieldPatchStruct>, ::apache::thrift::type::struct_t<::test::fixtures::python_capi::MyStructFieldPatchStruct>>,
    ::apache::thrift::type::adapted<::apache::thrift::op::detail::FieldIdListToSetAdapter, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructPatchStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructPatchStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::python_capi::MyStructFieldPatch patchPrior__arg, ::test::fixtures::python_capi::MyStructEnsureStruct ensure__arg, ::test::fixtures::python_capi::MyStructFieldPatch patch__arg, ::apache::thrift::op::FieldIdList remove__arg);

  MyStructPatchStruct(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct(const MyStructPatchStruct& src);


  MyStructPatchStruct& operator=(MyStructPatchStruct&&) noexcept;
  MyStructPatchStruct& operator=(const MyStructPatchStruct& src);

  ~MyStructPatchStruct();

 private:
  ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::test::fixtures::python_capi::MyStructFieldPatch __fbthrift_field_patchPrior;
 private:
  ::test::fixtures::python_capi::MyStructEnsureStruct __fbthrift_field_ensure;
 private:
  ::test::fixtures::python_capi::MyStructFieldPatch __fbthrift_field_patch;
 private:
  ::apache::thrift::op::FieldIdList __fbthrift_field_remove;

 public:

  bool operator==(const MyStructPatchStruct&) const;
  bool operator<(const MyStructPatchStruct&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::python_capi::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> clear() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> clear() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> clear() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_clear};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> clear() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_clear)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patchPrior() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patchPrior() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patchPrior() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patchPrior};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patchPrior() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patchPrior)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> ensure() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> ensure() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructEnsureStruct>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> ensure() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> patch() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> patch() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> patch() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_patch};
  }

  template <typename..., typename T = ::test::fixtures::python_capi::MyStructFieldPatch>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> patch() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_patch)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove_ref() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove_ref() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove_ref() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove_ref() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&> remove() const& {
    return ::apache::thrift::terse_field_ref<const T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<const T&&> remove() const&& {
    return ::apache::thrift::terse_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_remove)};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&> remove() & {
    return ::apache::thrift::terse_field_ref<T&>{this->__fbthrift_field_remove};
  }

  template <typename..., typename T = ::apache::thrift::op::FieldIdList>
  FOLLY_ERASE ::apache::thrift::terse_field_ref<T&&> remove() && {
    return ::apache::thrift::terse_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_remove)};
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::test::fixtures::python_capi::MyStructEnsureStruct& get_ensure() const&;
  ::test::fixtures::python_capi::MyStructEnsureStruct get_ensure() &&;

  template <typename T_MyStructPatchStruct_ensure_struct_setter = ::test::fixtures::python_capi::MyStructEnsureStruct>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::test::fixtures::python_capi::MyStructEnsureStruct& set_ensure(T_MyStructPatchStruct_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_MyStructPatchStruct_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructPatchStruct>;
  friend void swap(MyStructPatchStruct& a, MyStructPatchStruct& b);
};

template <class Protocol_>
unsigned long MyStructPatchStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

using MyStructPatch = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::python_capi::MyStructPatchStruct>, ::test::fixtures::python_capi::MyStructPatchStruct>;


}}} // test::fixtures::python_capi

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::python_capi::Shallot::Type>;

template <> struct TEnumTraits<::test::fixtures::python_capi::Shallot::Type> {
  using type = ::test::fixtures::python_capi::Shallot::Type;

  static constexpr std::size_t const size = 7;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
