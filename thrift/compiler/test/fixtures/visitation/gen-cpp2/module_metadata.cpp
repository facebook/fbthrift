/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/visitation/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::test_cpp2::cpp_reflection::enum1>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.enum1", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.enum1";
  using EnumTraits = TEnumTraits<::test_cpp2::cpp_reflection::enum1>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}
void EnumMetadata<::test_cpp2::cpp_reflection::enum2>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.enum2", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.enum2";
  using EnumTraits = TEnumTraits<::test_cpp2::cpp_reflection::enum2>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}
void EnumMetadata<::test_cpp2::cpp_reflection::enum3>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.enum3", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.enum3";
  using EnumTraits = TEnumTraits<::test_cpp2::cpp_reflection::enum3>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}
void EnumMetadata<::test_cpp2::cpp_reflection::enum_with_special_names>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.enum_with_special_names", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.enum_with_special_names";
  using EnumTraits = TEnumTraits<::test_cpp2::cpp_reflection::enum_with_special_names>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::union1>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.union1", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union1 = res.first->second;
  module_union1.name_ref() = "module.union1";
  module_union1.is_union_ref() = true;
  static const EncodedThriftField
  module_union1_fields[] = {
    std::make_tuple(1, "ui", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "ud", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "us", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "ue", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_union1_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_union1.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::union2>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.union2", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union2 = res.first->second;
  module_union2.name_ref() = "module.union2";
  module_union2.is_union_ref() = true;
  static const EncodedThriftField
  module_union2_fields[] = {
    std::make_tuple(1, "ui_2", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "ud_2", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "us_2", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "ue_2", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_union2_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_union2.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::union3>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.union3", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union3 = res.first->second;
  module_union3.name_ref() = "module.union3";
  module_union3.is_union_ref() = true;
  static const EncodedThriftField
  module_union3_fields[] = {
    std::make_tuple(1, "ui_3", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "ud_3", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "us_3", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "ue_3", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_union3_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_union3.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::structA>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.structA", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structA = res.first->second;
  module_structA.name_ref() = "module.structA";
  module_structA.is_union_ref() = false;
  static const EncodedThriftField
  module_structA_fields[] = {
    std::make_tuple(1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "b", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_structA_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_structA.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::unionA>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.unionA", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_unionA = res.first->second;
  module_unionA.name_ref() = "module.unionA";
  module_unionA.is_union_ref() = true;
  static const EncodedThriftField
  module_unionA_fields[] = {
    std::make_tuple(1, "i", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "d", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "s", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "e", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "a", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_unionA_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_unionA.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::structB>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.structB", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structB = res.first->second;
  module_structB.name_ref() = "module.structB";
  module_structB.is_union_ref() = false;
  static const EncodedThriftField
  module_structB_fields[] = {
    std::make_tuple(1, "c", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "d", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_structB_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_structB.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::structC>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.structC", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_structC = res.first->second;
  module_structC.name_ref() = "module.structC";
  module_structC.is_union_ref() = false;
  static const EncodedThriftField
  module_structC_fields[] = {
    std::make_tuple(1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "b", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "c", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "d", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "e", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "f", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "g", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "h", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::unionA>>("module.unionA"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(9, "i", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::unionA>>("module.unionA"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(10, "j", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(11, "j1", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(12, "j2", false, std::make_unique<List>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(13, "j3", false, std::make_unique<List>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(14, "k", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(15, "k1", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(16, "k2", false, std::make_unique<Set>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(17, "k3", false, std::make_unique<Set>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(18, "l", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(19, "l1", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(20, "l2", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(21, "l3", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(22, "m1", false, std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(23, "m2", false, std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(24, "m3", false, std::make_unique<Map>(std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(25, "n1", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(26, "n2", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(27, "n3", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(28, "o1", false, std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(29, "o2", false, std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(30, "o3", false, std::make_unique<Map>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_structC_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_structC.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct1>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct1", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct1 = res.first->second;
  module_struct1.name_ref() = "module.struct1";
  module_struct1.is_union_ref() = false;
  static const EncodedThriftField
  module_struct1_fields[] = {
    std::make_tuple(1, "field0", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "field1", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "field2", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "field3", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "field4", true, std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "field5", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct1_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct1.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct2>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct2", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct2 = res.first->second;
  module_struct2.name_ref() = "module.struct2";
  module_struct2.is_union_ref() = false;
  static const EncodedThriftField
  module_struct2_fields[] = {
    std::make_tuple(1, "fieldA", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "fieldB", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "fieldC", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "fieldD", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "fieldE", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "fieldF", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "fieldG", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct2_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct2.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct3>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct3", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct3 = res.first->second;
  module_struct3.name_ref() = "module.struct3";
  module_struct3.is_union_ref() = false;
  static const EncodedThriftField
  module_struct3_fields[] = {
    std::make_tuple(1, "fieldA", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "fieldB", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "fieldC", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "fieldD", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum2>>("module.enum2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "fieldE", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union1>>("module.union1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "fieldF", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "fieldG", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "fieldH", false, std::make_unique<Union< ::test_cpp2::cpp_reflection::union2>>("module.union2"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(9, "fieldI", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(10, "fieldJ", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(11, "fieldK", false, std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(12, "fieldL", false, std::make_unique<List>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(13, "fieldM", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(14, "fieldN", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(15, "fieldO", false, std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(16, "fieldP", false, std::make_unique<Set>(std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(17, "fieldQ", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA")), std::vector<ThriftConstStruct>{}),
    std::make_tuple(18, "fieldR", false, std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB")), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct3_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct3.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct4>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct4", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct4 = res.first->second;
  module_struct4.name_ref() = "module.struct4";
  module_struct4.is_union_ref() = false;
  static const EncodedThriftField
  module_struct4_fields[] = {
    std::make_tuple(1, "field0", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "field1", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "field2", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "field3", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct4_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct4.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct5>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct5", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct5 = res.first->second;
  module_struct5.name_ref() = "module.struct5";
  module_struct5.is_union_ref() = false;
  static const EncodedThriftField
  module_struct5_fields[] = {
    std::make_tuple(1, "field0", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "field1", true, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "field2", false, std::make_unique<Enum< ::test_cpp2::cpp_reflection::enum1>>("module.enum1"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "field3", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::structA>>("module.structA"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "field4", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::structB>>("module.structB"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct5_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct5.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct_binary>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct_binary", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_binary = res.first->second;
  module_struct_binary.name_ref() = "module.struct_binary";
  module_struct_binary.is_union_ref() = false;
  static const EncodedThriftField
  module_struct_binary_fields[] = {
    std::make_tuple(1, "bi", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct_binary_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct_binary.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::dep_A_struct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.dep_A_struct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_dep_A_struct = res.first->second;
  module_dep_A_struct.name_ref() = "module.dep_A_struct";
  module_dep_A_struct.is_union_ref() = false;
  static const EncodedThriftField
  module_dep_A_struct_fields[] = {
    std::make_tuple(1, "b", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_B_struct>>("reflection_dep_B.dep_B_struct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "c", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_C_struct>>("reflection_dep_C.dep_C_struct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "i_a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_dep_A_struct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_dep_A_struct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::dep_B_struct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.dep_B_struct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_dep_B_struct = res.first->second;
  module_dep_B_struct.name_ref() = "module.dep_B_struct";
  module_dep_B_struct.is_union_ref() = false;
  static const EncodedThriftField
  module_dep_B_struct_fields[] = {
    std::make_tuple(1, "b", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_B_struct>>("reflection_dep_B.dep_B_struct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "c", false, std::make_unique<Struct< ::test_cpp2::cpp_reflection::dep_C_struct>>("reflection_dep_C.dep_C_struct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "i_a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_dep_B_struct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_dep_B_struct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::annotated>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.annotated", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_annotated = res.first->second;
  module_annotated.name_ref() = "module.annotated";
  module_annotated.is_union_ref() = false;
  static const EncodedThriftField
  module_annotated_fields[] = {
    std::make_tuple(1, "a", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_annotated_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_annotated.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::union_with_special_names>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.union_with_special_names", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_union_with_special_names = res.first->second;
  module_union_with_special_names.name_ref() = "module.union_with_special_names";
  module_union_with_special_names.is_union_ref() = true;
  static const EncodedThriftField
  module_union_with_special_names_fields[] = {
    std::make_tuple(1, "get", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "getter", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "lists", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "maps", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "name_to_value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "names", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "prefix_tree", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(9, "sets", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(10, "setter", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(11, "str", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(12, "strings", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(13, "type", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(14, "value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(15, "value_to_name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(16, "values", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(17, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(18, "ids", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(19, "descriptor", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(20, "descriptors", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(21, "key", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(22, "keys", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(23, "annotation", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(24, "annotations", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(25, "member", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(26, "members", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(27, "field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(28, "fields", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_union_with_special_names_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_union_with_special_names.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct_with_special_names>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct_with_special_names", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_with_special_names = res.first->second;
  module_struct_with_special_names.name_ref() = "module.struct_with_special_names";
  module_struct_with_special_names.is_union_ref() = false;
  static const EncodedThriftField
  module_struct_with_special_names_fields[] = {
    std::make_tuple(1, "get", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "getter", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "lists", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "maps", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "name_to_value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "names", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "prefix_tree", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(9, "sets", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(10, "setter", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(11, "str", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(12, "strings", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(13, "type", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(14, "value", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(15, "value_to_name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(16, "values", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(17, "id", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(18, "ids", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(19, "descriptor", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(20, "descriptors", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(21, "key", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(22, "keys", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(23, "annotation", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(24, "annotations", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(25, "member", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(26, "members", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(27, "field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(28, "fields", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct_with_special_names_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct_with_special_names.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::test_cpp2::cpp_reflection::struct_with_indirections>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.struct_with_indirections", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_struct_with_indirections = res.first->second;
  module_struct_with_indirections.name_ref() = "module.struct_with_indirections";
  module_struct_with_indirections.is_union_ref() = false;
  static const EncodedThriftField
  module_struct_with_indirections_fields[] = {
    std::make_tuple(1, "real", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "fake", false, std::make_unique<Typedef>("module.FakeI32", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "number", false, std::make_unique<Typedef>("module.HasANumber", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "result", false, std::make_unique<Typedef>("module.HasAResult", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "phrase", false, std::make_unique<Typedef>("module.HasAPhrase", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_struct_with_indirections_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_struct_with_indirections.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method1(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method1";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method2(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method2";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service1_method2_x_1;
  module_service1_method2_x_1.id_ref() = 1;
  module_service1_method2_x_1.name_ref() = "x";
  module_service1_method2_x_1.is_optional_ref() = false;
  auto module_service1_method2_x_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service1_method2_x_1_type->writeAndGenType(*module_service1_method2_x_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method2_x_1));
  ::apache::thrift::metadata::ThriftField module_service1_method2_y_2;
  module_service1_method2_y_2.id_ref() = 2;
  module_service1_method2_y_2.name_ref() = "y";
  module_service1_method2_y_2.is_optional_ref() = false;
  auto module_service1_method2_y_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service1_method2_y_2_type->writeAndGenType(*module_service1_method2_y_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method2_y_2));
  ::apache::thrift::metadata::ThriftField module_service1_method2_z_3;
  module_service1_method2_z_3.id_ref() = 3;
  module_service1_method2_z_3.name_ref() = "z";
  module_service1_method2_z_3.is_optional_ref() = false;
  auto module_service1_method2_z_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service1_method2_z_3_type->writeAndGenType(*module_service1_method2_z_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method2_z_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method3(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method3";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method4(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method4";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service1_method4_i_1;
  module_service1_method4_i_1.id_ref() = 1;
  module_service1_method4_i_1.name_ref() = "i";
  module_service1_method4_i_1.is_optional_ref() = false;
  auto module_service1_method4_i_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service1_method4_i_1_type->writeAndGenType(*module_service1_method4_i_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method4_i_1));
  ::apache::thrift::metadata::ThriftField module_service1_method4_j_2;
  module_service1_method4_j_2.id_ref() = 2;
  module_service1_method4_j_2.name_ref() = "j";
  module_service1_method4_j_2.is_optional_ref() = false;
  auto module_service1_method4_j_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service1_method4_j_2_type->writeAndGenType(*module_service1_method4_j_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method4_j_2));
  ::apache::thrift::metadata::ThriftField module_service1_method4_k_3;
  module_service1_method4_k_3.id_ref() = 3;
  module_service1_method4_k_3.name_ref() = "k";
  module_service1_method4_k_3.is_optional_ref() = false;
  auto module_service1_method4_k_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service1_method4_k_3_type->writeAndGenType(*module_service1_method4_k_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method4_k_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method5(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method5";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct2>>("module.struct2");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method6(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "method6";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct2>>("module.struct2");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service1_method6_l_1;
  module_service1_method6_l_1.id_ref() = 1;
  module_service1_method6_l_1.name_ref() = "l";
  module_service1_method6_l_1.is_optional_ref() = false;
  auto module_service1_method6_l_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service1_method6_l_1_type->writeAndGenType(*module_service1_method6_l_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method6_l_1));
  ::apache::thrift::metadata::ThriftField module_service1_method6_m_2;
  module_service1_method6_m_2.id_ref() = 2;
  module_service1_method6_m_2.name_ref() = "m";
  module_service1_method6_m_2.is_optional_ref() = false;
  auto module_service1_method6_m_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service1_method6_m_2_type->writeAndGenType(*module_service1_method6_m_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method6_m_2));
  ::apache::thrift::metadata::ThriftField module_service1_method6_n_3;
  module_service1_method6_n_3.id_ref() = 3;
  module_service1_method6_n_3.name_ref() = "n";
  module_service1_method6_n_3.is_optional_ref() = false;
  auto module_service1_method6_n_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service1_method6_n_3_type->writeAndGenType(*module_service1_method6_n_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service1_method6_n_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_service1;
  module_service1.name_ref() = "module.service1";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method1,
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method2,
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method3,
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method4,
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method5,
    ServiceMetadata<::test_cpp2::cpp_reflection::service1SvIf>::gen_method6,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_service1);
  }
  context.service_info_ref() = std::move(module_service1);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodA(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodA";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodB(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodB";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service2_methodB_x_1;
  module_service2_methodB_x_1.id_ref() = 1;
  module_service2_methodB_x_1.name_ref() = "x";
  module_service2_methodB_x_1.is_optional_ref() = false;
  auto module_service2_methodB_x_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service2_methodB_x_1_type->writeAndGenType(*module_service2_methodB_x_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodB_x_1));
  ::apache::thrift::metadata::ThriftField module_service2_methodB_y_2;
  module_service2_methodB_y_2.id_ref() = 2;
  module_service2_methodB_y_2.name_ref() = "y";
  module_service2_methodB_y_2.is_optional_ref() = false;
  auto module_service2_methodB_y_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service2_methodB_y_2_type->writeAndGenType(*module_service2_methodB_y_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodB_y_2));
  ::apache::thrift::metadata::ThriftField module_service2_methodB_z_3;
  module_service2_methodB_z_3.id_ref() = 3;
  module_service2_methodB_z_3.name_ref() = "z";
  module_service2_methodB_z_3.is_optional_ref() = false;
  auto module_service2_methodB_z_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service2_methodB_z_3_type->writeAndGenType(*module_service2_methodB_z_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodB_z_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodC(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodC";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodD(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodD";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service2_methodD_i_1;
  module_service2_methodD_i_1.id_ref() = 1;
  module_service2_methodD_i_1.name_ref() = "i";
  module_service2_methodD_i_1.is_optional_ref() = false;
  auto module_service2_methodD_i_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service2_methodD_i_1_type->writeAndGenType(*module_service2_methodD_i_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodD_i_1));
  ::apache::thrift::metadata::ThriftField module_service2_methodD_j_2;
  module_service2_methodD_j_2.id_ref() = 2;
  module_service2_methodD_j_2.name_ref() = "j";
  module_service2_methodD_j_2.is_optional_ref() = false;
  auto module_service2_methodD_j_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service2_methodD_j_2_type->writeAndGenType(*module_service2_methodD_j_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodD_j_2));
  ::apache::thrift::metadata::ThriftField module_service2_methodD_k_3;
  module_service2_methodD_k_3.id_ref() = 3;
  module_service2_methodD_k_3.name_ref() = "k";
  module_service2_methodD_k_3.is_optional_ref() = false;
  auto module_service2_methodD_k_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service2_methodD_k_3_type->writeAndGenType(*module_service2_methodD_k_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodD_k_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodE(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodE";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct2>>("module.struct2");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodF(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodF";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct2>>("module.struct2");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service2_methodF_l_1;
  module_service2_methodF_l_1.id_ref() = 1;
  module_service2_methodF_l_1.name_ref() = "l";
  module_service2_methodF_l_1.is_optional_ref() = false;
  auto module_service2_methodF_l_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service2_methodF_l_1_type->writeAndGenType(*module_service2_methodF_l_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodF_l_1));
  ::apache::thrift::metadata::ThriftField module_service2_methodF_m_2;
  module_service2_methodF_m_2.id_ref() = 2;
  module_service2_methodF_m_2.name_ref() = "m";
  module_service2_methodF_m_2.is_optional_ref() = false;
  auto module_service2_methodF_m_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service2_methodF_m_2_type->writeAndGenType(*module_service2_methodF_m_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodF_m_2));
  ::apache::thrift::metadata::ThriftField module_service2_methodF_n_3;
  module_service2_methodF_n_3.id_ref() = 3;
  module_service2_methodF_n_3.name_ref() = "n";
  module_service2_methodF_n_3.is_optional_ref() = false;
  auto module_service2_methodF_n_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service2_methodF_n_3_type->writeAndGenType(*module_service2_methodF_n_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service2_methodF_n_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_service2;
  module_service2.name_ref() = "module.service2";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodA,
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodB,
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodC,
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodD,
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodE,
    ServiceMetadata<::test_cpp2::cpp_reflection::service2SvIf>::gen_methodF,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_service2);
  }
  context.service_info_ref() = std::move(module_service2);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodA(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodA";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodB(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodB";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service3_methodB_x_1;
  module_service3_methodB_x_1.id_ref() = 1;
  module_service3_methodB_x_1.name_ref() = "x";
  module_service3_methodB_x_1.is_optional_ref() = false;
  auto module_service3_methodB_x_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service3_methodB_x_1_type->writeAndGenType(*module_service3_methodB_x_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodB_x_1));
  ::apache::thrift::metadata::ThriftField module_service3_methodB_y_2;
  module_service3_methodB_y_2.id_ref() = 2;
  module_service3_methodB_y_2.name_ref() = "y";
  module_service3_methodB_y_2.is_optional_ref() = false;
  auto module_service3_methodB_y_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service3_methodB_y_2_type->writeAndGenType(*module_service3_methodB_y_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodB_y_2));
  ::apache::thrift::metadata::ThriftField module_service3_methodB_z_3;
  module_service3_methodB_z_3.id_ref() = 3;
  module_service3_methodB_z_3.name_ref() = "z";
  module_service3_methodB_z_3.is_optional_ref() = false;
  auto module_service3_methodB_z_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service3_methodB_z_3_type->writeAndGenType(*module_service3_methodB_z_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodB_z_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodC(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodC";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodD(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodD";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service3_methodD_i_1;
  module_service3_methodD_i_1.id_ref() = 1;
  module_service3_methodD_i_1.name_ref() = "i";
  module_service3_methodD_i_1.is_optional_ref() = false;
  auto module_service3_methodD_i_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service3_methodD_i_1_type->writeAndGenType(*module_service3_methodD_i_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodD_i_1));
  ::apache::thrift::metadata::ThriftField module_service3_methodD_j_2;
  module_service3_methodD_j_2.id_ref() = 2;
  module_service3_methodD_j_2.name_ref() = "j";
  module_service3_methodD_j_2.is_optional_ref() = false;
  auto module_service3_methodD_j_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service3_methodD_j_2_type->writeAndGenType(*module_service3_methodD_j_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodD_j_2));
  ::apache::thrift::metadata::ThriftField module_service3_methodD_k_3;
  module_service3_methodD_k_3.id_ref() = 3;
  module_service3_methodD_k_3.name_ref() = "k";
  module_service3_methodD_k_3.is_optional_ref() = false;
  auto module_service3_methodD_k_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service3_methodD_k_3_type->writeAndGenType(*module_service3_methodD_k_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodD_k_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodE(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodE";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct2>>("module.struct2");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodF(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "methodF";
  auto func_ret_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct3>>("module.struct3");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_service3_methodF_l_1;
  module_service3_methodF_l_1.id_ref() = 1;
  module_service3_methodF_l_1.name_ref() = "l";
  module_service3_methodF_l_1.is_optional_ref() = false;
  auto module_service3_methodF_l_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_service3_methodF_l_1_type->writeAndGenType(*module_service3_methodF_l_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodF_l_1));
  ::apache::thrift::metadata::ThriftField module_service3_methodF_m_2;
  module_service3_methodF_m_2.id_ref() = 2;
  module_service3_methodF_m_2.name_ref() = "m";
  module_service3_methodF_m_2.is_optional_ref() = false;
  auto module_service3_methodF_m_2_type = std::make_unique<Struct< ::test_cpp2::cpp_reflection::struct1>>("module.struct1");
  module_service3_methodF_m_2_type->writeAndGenType(*module_service3_methodF_m_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodF_m_2));
  ::apache::thrift::metadata::ThriftField module_service3_methodF_n_3;
  module_service3_methodF_n_3.id_ref() = 3;
  module_service3_methodF_n_3.name_ref() = "n";
  module_service3_methodF_n_3.is_optional_ref() = false;
  auto module_service3_methodF_n_3_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_service3_methodF_n_3_type->writeAndGenType(*module_service3_methodF_n_3.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_service3_methodF_n_3));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_service3;
  module_service3.name_ref() = "module.service3";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodA,
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodB,
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodC,
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodD,
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodE,
    ServiceMetadata<::test_cpp2::cpp_reflection::service3SvIf>::gen_methodF,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_service3);
  }
  context.service_info_ref() = std::move(module_service3);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_get(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_getter(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "getter";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_lists(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "lists";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_maps(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "maps";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_name(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "name";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_name_to_value(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "name_to_value";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_names(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "names";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_prefix_tree(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "prefix_tree";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_sets(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sets";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_setter(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "setter";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_str(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "str";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_strings(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "strings";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_type(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "type";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_value(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "value";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_value_to_name(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "value_to_name";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_values(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "values";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_id(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "id";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_ids(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "ids";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_descriptor(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "descriptor";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_descriptors(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "descriptors";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_key(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "key";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_keys(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "keys";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_annotation(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "annotation";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_annotations(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "annotations";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_member(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "member";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_members(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "members";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_field(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "field";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_fields(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "fields";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_service_with_special_names;
  module_service_with_special_names.name_ref() = "module.service_with_special_names";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_get,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_getter,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_lists,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_maps,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_name,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_name_to_value,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_names,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_prefix_tree,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_sets,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_setter,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_str,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_strings,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_type,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_value,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_value_to_name,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_values,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_id,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_ids,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_descriptor,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_descriptors,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_key,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_keys,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_annotation,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_annotations,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_member,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_members,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_field,
    ServiceMetadata<::test_cpp2::cpp_reflection::service_with_special_namesSvIf>::gen_fields,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_service_with_special_names);
  }
  context.service_info_ref() = std::move(module_service_with_special_names);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
