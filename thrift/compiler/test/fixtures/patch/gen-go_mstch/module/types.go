// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module // [[[ program thrift source path ]]]

import (
    "fmt"
    "strings"

    patch "thrift/lib/thrift/patch"
    standard "thrift/lib/thrift/standard"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = patch.GoUnusedProtection__
var _ = standard.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO
var _ = strings.Split


type MyEnum int32

const (
    MyEnum_MyValue0 MyEnum = 0
)

// Enum value maps for MyEnum
var (
    MyEnumToName = map[MyEnum]string {
        MyEnum_MyValue0: "MyValue0",
    }

    MyEnumToValue = map[string]MyEnum {
        "MyValue0": MyEnum_MyValue0,
    }

    MyEnumNames = []string{
        "MyValue0",
    }

    MyEnumValues = []MyEnum{
        MyEnum_MyValue0,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnumToValue instead (e.g. `x, ok := MyEnumToValue["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnumToValue[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

// Deprecated: Use MyEnum.Ptr() instead.
func MyEnumPtr(v MyEnum) *MyEnum {
    return &v
}


type MyData struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyData{}

func NewMyData() *MyData {
    return (&MyData{}).
        SetData1NonCompat("").
        SetData2NonCompat(0)
}

func (x *MyData) GetData1NonCompat() string {
    return x.Data1
}

func (x *MyData) GetData1() string {
    return x.Data1
}

func (x *MyData) GetData2NonCompat() int32 {
    return x.Data2
}

func (x *MyData) GetData2() int32 {
    return x.Data2
}

func (x *MyData) SetData1NonCompat(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData1(value string) *MyData {
    x.Data1 = value
    return x
}

func (x *MyData) SetData2NonCompat(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) SetData2(value int32) *MyData {
    x.Data2 = value
    return x
}

func (x *MyData) writeField1(p thrift.Protocol) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData1NonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) writeField2(p thrift.Protocol) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyData) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyData) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyData) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}


// Deprecated: Use MyData.Set* methods instead or set the fields directly.
type MyDataBuilder struct {
    obj *MyData
}

func NewMyDataBuilder() *MyDataBuilder {
    return &MyDataBuilder{
        obj: NewMyData(),
    }
}

func (x *MyDataBuilder) Data1(value string) *MyDataBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataBuilder) Data2(value int32) *MyDataBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataBuilder) Emit() *MyData {
    var objCopy MyData = *x.obj
    return &objCopy
}

func (x *MyData) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyData) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyData) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyData({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefault struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataWithCustomDefault{}

func NewMyDataWithCustomDefault() *MyDataWithCustomDefault {
    return (&MyDataWithCustomDefault{}).
        SetData1NonCompat("1").
        SetData2NonCompat(2)
}

func (x *MyDataWithCustomDefault) GetData1NonCompat() string {
    return x.Data1
}

func (x *MyDataWithCustomDefault) GetData1() string {
    return x.Data1
}

func (x *MyDataWithCustomDefault) GetData2NonCompat() int32 {
    return x.Data2
}

func (x *MyDataWithCustomDefault) GetData2() int32 {
    return x.Data2
}

func (x *MyDataWithCustomDefault) SetData1NonCompat(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData1(value string) *MyDataWithCustomDefault {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2NonCompat(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) SetData2(value int32) *MyDataWithCustomDefault {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefault) writeField1(p thrift.Protocol) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData1NonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) writeField2(p thrift.Protocol) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefault) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefault) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyDataWithCustomDefault) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}


// Deprecated: Use MyDataWithCustomDefault.Set* methods instead or set the fields directly.
type MyDataWithCustomDefaultBuilder struct {
    obj *MyDataWithCustomDefault
}

func NewMyDataWithCustomDefaultBuilder() *MyDataWithCustomDefaultBuilder {
    return &MyDataWithCustomDefaultBuilder{
        obj: NewMyDataWithCustomDefault(),
    }
}

func (x *MyDataWithCustomDefaultBuilder) Data1(value string) *MyDataWithCustomDefaultBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultBuilder) Data2(value int32) *MyDataWithCustomDefaultBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultBuilder) Emit() *MyDataWithCustomDefault {
    var objCopy MyDataWithCustomDefault = *x.obj
    return &objCopy
}

func (x *MyDataWithCustomDefault) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefault"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefault) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefault) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefault({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnion struct {
    InnerOption []byte `thrift:"innerOption,1" json:"innerOption" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnion{}

func NewInnerUnion() *InnerUnion {
    return (&InnerUnion{})
}

func (x *InnerUnion) GetInnerOptionNonCompat() []byte {
    return x.InnerOption
}

func (x *InnerUnion) GetInnerOption() []byte {
    if !x.IsSetInnerOption() {
        return []byte("")
    }

    return x.InnerOption
}

func (x *InnerUnion) SetInnerOptionNonCompat(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) SetInnerOption(value []byte) *InnerUnion {
    x.InnerOption = value
    return x
}

func (x *InnerUnion) IsSetInnerOption() bool {
    return x.InnerOption != nil
}

func (x *InnerUnion) writeField1(p thrift.Protocol) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetInnerOptionNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) readField1(p thrift.Protocol) error {  // InnerOption
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetInnerOptionNonCompat(result)
    return nil
}

func (x *InnerUnion) toString1() string {  // InnerOption
    return fmt.Sprintf("%v", x.GetInnerOptionNonCompat())
}

func (x *InnerUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetInnerOption()) {
        count++
    }
    return count
}

func (x *InnerUnion) CountSetFieldsInnerUnion() int {
    return x.countSetFields()
}


// Deprecated: Use InnerUnion.Set* methods instead or set the fields directly.
type InnerUnionBuilder struct {
    obj *InnerUnion
}

func NewInnerUnionBuilder() *InnerUnionBuilder {
    return &InnerUnionBuilder{
        obj: NewInnerUnion(),
    }
}

func (x *InnerUnionBuilder) InnerOption(value []byte) *InnerUnionBuilder {
    x.obj.InnerOption = value
    return x
}

func (x *InnerUnionBuilder) Emit() *InnerUnion {
    var objCopy InnerUnion = *x.obj
    return &objCopy
}

func (x *InnerUnion) Write(p thrift.Protocol) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("InnerUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnion({")
    sb.WriteString(fmt.Sprintf("InnerOption:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnion struct {
    Option1 *string `thrift:"option1,1" json:"option1" db:"option1"`
    Option2 *int32 `thrift:"option2,2" json:"option2" db:"option2"`
    Option3 *InnerUnion `thrift:"option3,3" json:"option3" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnion{}

func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}

func (x *MyUnion) GetOption1NonCompat() *string {
    return x.Option1
}

func (x *MyUnion) GetOption1() string {
    if !x.IsSetOption1() {
        return ""
    }

    return *x.Option1
}

func (x *MyUnion) GetOption2NonCompat() *int32 {
    return x.Option2
}

func (x *MyUnion) GetOption2() int32 {
    if !x.IsSetOption2() {
        return 0
    }

    return *x.Option2
}

func (x *MyUnion) GetOption3NonCompat() *InnerUnion {
    return x.Option3
}

func (x *MyUnion) GetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return nil
    }

    return x.Option3
}

func (x *MyUnion) SetOption1NonCompat(value string) *MyUnion {
    x.Option1 = &value
    return x
}

func (x *MyUnion) SetOption1(value *string) *MyUnion {
    x.Option1 = value
    return x
}

func (x *MyUnion) SetOption2NonCompat(value int32) *MyUnion {
    x.Option2 = &value
    return x
}

func (x *MyUnion) SetOption2(value *int32) *MyUnion {
    x.Option2 = value
    return x
}

func (x *MyUnion) SetOption3NonCompat(value InnerUnion) *MyUnion {
    x.Option3 = &value
    return x
}

func (x *MyUnion) SetOption3(value *InnerUnion) *MyUnion {
    x.Option3 = value
    return x
}

func (x *MyUnion) IsSetOption1() bool {
    return x.Option1 != nil
}

func (x *MyUnion) IsSetOption2() bool {
    return x.Option2 != nil
}

func (x *MyUnion) IsSetOption3() bool {
    return x.Option3 != nil
}

func (x *MyUnion) writeField1(p thrift.Protocol) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption1NonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Protocol) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Protocol) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOption3NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Protocol) error {  // Option1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOption1NonCompat(result)
    return nil
}

func (x *MyUnion) readField2(p thrift.Protocol) error {  // Option2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOption2NonCompat(result)
    return nil
}

func (x *MyUnion) readField3(p thrift.Protocol) error {  // Option3
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption3NonCompat(result)
    return nil
}

func (x *MyUnion) toString1() string {  // Option1
    if x.IsSetOption1() {
        return fmt.Sprintf("%v", *x.GetOption1NonCompat())
    }
    return fmt.Sprintf("%v", x.GetOption1NonCompat())
}

func (x *MyUnion) toString2() string {  // Option2
    if x.IsSetOption2() {
        return fmt.Sprintf("%v", *x.GetOption2NonCompat())
    }
    return fmt.Sprintf("%v", x.GetOption2NonCompat())
}

func (x *MyUnion) toString3() string {  // Option3
    return fmt.Sprintf("%v", x.GetOption3NonCompat())
}

// Deprecated: Use NewMyUnion().GetOption1() instead.
var MyUnion_Option1_DEFAULT = NewMyUnion().GetOption1()

// Deprecated: Use NewMyUnion().GetOption2() instead.
var MyUnion_Option2_DEFAULT = NewMyUnion().GetOption2()

// Deprecated: Use NewMyUnion().GetOption3() instead.
var MyUnion_Option3_DEFAULT = NewMyUnion().GetOption3()

// Deprecated: Use NewMyUnion().GetOption3() instead.
func (x *MyUnion) DefaultGetOption3() *InnerUnion {
    if !x.IsSetOption3() {
        return NewInnerUnion()
    }
    return x.Option3
}

func (x *MyUnion) countSetFields() int {
    count := int(0)
    if (x.IsSetOption1()) {
        count++
    }
    if (x.IsSetOption2()) {
        count++
    }
    if (x.IsSetOption3()) {
        count++
    }
    return count
}

func (x *MyUnion) CountSetFieldsMyUnion() int {
    return x.countSetFields()
}


// Deprecated: Use MyUnion.Set* methods instead or set the fields directly.
type MyUnionBuilder struct {
    obj *MyUnion
}

func NewMyUnionBuilder() *MyUnionBuilder {
    return &MyUnionBuilder{
        obj: NewMyUnion(),
    }
}

func (x *MyUnionBuilder) Option1(value *string) *MyUnionBuilder {
    x.obj.Option1 = value
    return x
}

func (x *MyUnionBuilder) Option2(value *int32) *MyUnionBuilder {
    x.obj.Option2 = value
    return x
}

func (x *MyUnionBuilder) Option3(value *InnerUnion) *MyUnionBuilder {
    x.obj.Option3 = value
    return x
}

func (x *MyUnionBuilder) Emit() *MyUnion {
    var objCopy MyUnion = *x.obj
    return &objCopy
}

func (x *MyUnion) Write(p thrift.Protocol) error {
    if countSet := x.countSetFields(); countSet > 1 {
        return fmt.Errorf("%T write union: no more than one field must be set (%d set).", x, countSet)
    }
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnion) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnion({")
    sb.WriteString(fmt.Sprintf("Option1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Option2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Option3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type MyStruct struct {
    BoolVal bool `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    ByteVal int8 `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    I16Val int16 `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    I32Val int32 `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I64Val int64 `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    FloatVal float32 `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    DoubleVal float64 `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    StringVal string `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    BinaryVal []byte `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    EnumVal MyEnum `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    StructVal *MyData `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    OptByteVal *int8 `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    ListMap []map[string]int32 `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    I32WithCustomDefault int32 `thrift:"i32WithCustomDefault,-31" json:"i32WithCustomDefault" db:"i32WithCustomDefault"`
    StructWithCustomDefault *MyDataWithCustomDefault `thrift:"structWithCustomDefault,-32" json:"structWithCustomDefault" db:"structWithCustomDefault"`
    StructWithFieldCustomDefault *MyData `thrift:"structWithFieldCustomDefault,1" json:"structWithFieldCustomDefault" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStruct{}

func NewMyStruct() *MyStruct {
    return (&MyStruct{}).
        SetBoolValNonCompat(false).
        SetByteValNonCompat(0).
        SetI16ValNonCompat(0).
        SetI32ValNonCompat(0).
        SetI64ValNonCompat(0).
        SetFloatValNonCompat(0.0).
        SetDoubleValNonCompat(0.0).
        SetStringValNonCompat("").
        SetBinaryValNonCompat([]byte("")).
        SetEnumValNonCompat(0).
        SetStructValNonCompat(*NewMyData()).
        SetUnionValNonCompat(*NewMyUnion()).
        SetLateStructValNonCompat(*NewLateDefStruct()).
        SetListMapNonCompat(nil).
        SetMapMapNonCompat(nil).
        SetI32WithCustomDefaultNonCompat(1).
        SetStructWithCustomDefaultNonCompat(*NewMyDataWithCustomDefault()).
        SetStructWithFieldCustomDefaultNonCompat(
              *NewMyData().
    SetData1NonCompat("1").
    SetData2NonCompat(2),
          )
}

func (x *MyStruct) GetBoolValNonCompat() bool {
    return x.BoolVal
}

func (x *MyStruct) GetBoolVal() bool {
    return x.BoolVal
}

func (x *MyStruct) GetByteValNonCompat() int8 {
    return x.ByteVal
}

func (x *MyStruct) GetByteVal() int8 {
    return x.ByteVal
}

func (x *MyStruct) GetI16ValNonCompat() int16 {
    return x.I16Val
}

func (x *MyStruct) GetI16Val() int16 {
    return x.I16Val
}

func (x *MyStruct) GetI32ValNonCompat() int32 {
    return x.I32Val
}

func (x *MyStruct) GetI32Val() int32 {
    return x.I32Val
}

func (x *MyStruct) GetI64ValNonCompat() int64 {
    return x.I64Val
}

func (x *MyStruct) GetI64Val() int64 {
    return x.I64Val
}

func (x *MyStruct) GetFloatValNonCompat() float32 {
    return x.FloatVal
}

func (x *MyStruct) GetFloatVal() float32 {
    return x.FloatVal
}

func (x *MyStruct) GetDoubleValNonCompat() float64 {
    return x.DoubleVal
}

func (x *MyStruct) GetDoubleVal() float64 {
    return x.DoubleVal
}

func (x *MyStruct) GetStringValNonCompat() string {
    return x.StringVal
}

func (x *MyStruct) GetStringVal() string {
    return x.StringVal
}

func (x *MyStruct) GetBinaryValNonCompat() []byte {
    return x.BinaryVal
}

func (x *MyStruct) GetBinaryVal() []byte {
    if !x.IsSetBinaryVal() {
        return []byte("")
    }

    return x.BinaryVal
}

func (x *MyStruct) GetEnumValNonCompat() MyEnum {
    return x.EnumVal
}

func (x *MyStruct) GetEnumVal() MyEnum {
    return x.EnumVal
}

func (x *MyStruct) GetStructValNonCompat() *MyData {
    return x.StructVal
}

func (x *MyStruct) GetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStruct) GetUnionValNonCompat() *MyUnion {
    return x.UnionVal
}

func (x *MyStruct) GetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStruct) GetLateStructValNonCompat() *LateDefStruct {
    return x.LateStructVal
}

func (x *MyStruct) GetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStruct) GetOptBoolValNonCompat() *bool {
    return x.OptBoolVal
}

func (x *MyStruct) GetOptBoolVal() bool {
    if !x.IsSetOptBoolVal() {
        return false
    }

    return *x.OptBoolVal
}

func (x *MyStruct) GetOptByteValNonCompat() *int8 {
    return x.OptByteVal
}

func (x *MyStruct) GetOptByteVal() int8 {
    if !x.IsSetOptByteVal() {
        return 0
    }

    return *x.OptByteVal
}

func (x *MyStruct) GetOptI16ValNonCompat() *int16 {
    return x.OptI16Val
}

func (x *MyStruct) GetOptI16Val() int16 {
    if !x.IsSetOptI16Val() {
        return 0
    }

    return *x.OptI16Val
}

func (x *MyStruct) GetOptI32ValNonCompat() *int32 {
    return x.OptI32Val
}

func (x *MyStruct) GetOptI32Val() int32 {
    if !x.IsSetOptI32Val() {
        return 0
    }

    return *x.OptI32Val
}

func (x *MyStruct) GetOptI64ValNonCompat() *int64 {
    return x.OptI64Val
}

func (x *MyStruct) GetOptI64Val() int64 {
    if !x.IsSetOptI64Val() {
        return 0
    }

    return *x.OptI64Val
}

func (x *MyStruct) GetOptFloatValNonCompat() *float32 {
    return x.OptFloatVal
}

func (x *MyStruct) GetOptFloatVal() float32 {
    if !x.IsSetOptFloatVal() {
        return 0.0
    }

    return *x.OptFloatVal
}

func (x *MyStruct) GetOptDoubleValNonCompat() *float64 {
    return x.OptDoubleVal
}

func (x *MyStruct) GetOptDoubleVal() float64 {
    if !x.IsSetOptDoubleVal() {
        return 0.0
    }

    return *x.OptDoubleVal
}

func (x *MyStruct) GetOptStringValNonCompat() *string {
    return x.OptStringVal
}

func (x *MyStruct) GetOptStringVal() string {
    if !x.IsSetOptStringVal() {
        return ""
    }

    return *x.OptStringVal
}

func (x *MyStruct) GetOptBinaryValNonCompat() []byte {
    return x.OptBinaryVal
}

func (x *MyStruct) GetOptBinaryVal() []byte {
    if !x.IsSetOptBinaryVal() {
        return []byte("")
    }

    return x.OptBinaryVal
}

func (x *MyStruct) GetOptEnumValNonCompat() *MyEnum {
    return x.OptEnumVal
}

func (x *MyStruct) GetOptEnumVal() MyEnum {
    if !x.IsSetOptEnumVal() {
        return 0
    }

    return *x.OptEnumVal
}

func (x *MyStruct) GetOptStructValNonCompat() *MyData {
    return x.OptStructVal
}

func (x *MyStruct) GetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStruct) GetOptLateStructValNonCompat() *LateDefStruct {
    return x.OptLateStructVal
}

func (x *MyStruct) GetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStruct) GetOptListValNonCompat() []int16 {
    return x.OptListVal
}

func (x *MyStruct) GetOptListVal() []int16 {
    if !x.IsSetOptListVal() {
        return nil
    }

    return x.OptListVal
}

func (x *MyStruct) GetOptSetValNonCompat() []string {
    return x.OptSetVal
}

func (x *MyStruct) GetOptSetVal() []string {
    if !x.IsSetOptSetVal() {
        return nil
    }

    return x.OptSetVal
}

func (x *MyStruct) GetOptMapValNonCompat() map[string]string {
    return x.OptMapVal
}

func (x *MyStruct) GetOptMapVal() map[string]string {
    if !x.IsSetOptMapVal() {
        return nil
    }

    return x.OptMapVal
}

func (x *MyStruct) GetListMapNonCompat() []map[string]int32 {
    return x.ListMap
}

func (x *MyStruct) GetListMap() []map[string]int32 {
    if !x.IsSetListMap() {
        return nil
    }

    return x.ListMap
}

func (x *MyStruct) GetMapMapNonCompat() map[string]map[string]int32 {
    return x.MapMap
}

func (x *MyStruct) GetMapMap() map[string]map[string]int32 {
    if !x.IsSetMapMap() {
        return nil
    }

    return x.MapMap
}

func (x *MyStruct) GetI32WithCustomDefaultNonCompat() int32 {
    return x.I32WithCustomDefault
}

func (x *MyStruct) GetI32WithCustomDefault() int32 {
    return x.I32WithCustomDefault
}

func (x *MyStruct) GetStructWithCustomDefaultNonCompat() *MyDataWithCustomDefault {
    return x.StructWithCustomDefault
}

func (x *MyStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStruct) GetStructWithFieldCustomDefaultNonCompat() *MyData {
    return x.StructWithFieldCustomDefault
}

func (x *MyStruct) GetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyStruct().StructWithFieldCustomDefault
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStruct) SetBoolValNonCompat(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetBoolVal(value bool) *MyStruct {
    x.BoolVal = value
    return x
}

func (x *MyStruct) SetByteValNonCompat(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetByteVal(value int8) *MyStruct {
    x.ByteVal = value
    return x
}

func (x *MyStruct) SetI16ValNonCompat(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetI16Val(value int16) *MyStruct {
    x.I16Val = value
    return x
}

func (x *MyStruct) SetI32ValNonCompat(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI32Val(value int32) *MyStruct {
    x.I32Val = value
    return x
}

func (x *MyStruct) SetI64ValNonCompat(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetI64Val(value int64) *MyStruct {
    x.I64Val = value
    return x
}

func (x *MyStruct) SetFloatValNonCompat(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetFloatVal(value float32) *MyStruct {
    x.FloatVal = value
    return x
}

func (x *MyStruct) SetDoubleValNonCompat(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetDoubleVal(value float64) *MyStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStruct) SetStringValNonCompat(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetStringVal(value string) *MyStruct {
    x.StringVal = value
    return x
}

func (x *MyStruct) SetBinaryValNonCompat(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetBinaryVal(value []byte) *MyStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStruct) SetEnumValNonCompat(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetEnumVal(value MyEnum) *MyStruct {
    x.EnumVal = value
    return x
}

func (x *MyStruct) SetStructValNonCompat(value MyData) *MyStruct {
    x.StructVal = &value
    return x
}

func (x *MyStruct) SetStructVal(value *MyData) *MyStruct {
    x.StructVal = value
    return x
}

func (x *MyStruct) SetUnionValNonCompat(value MyUnion) *MyStruct {
    x.UnionVal = &value
    return x
}

func (x *MyStruct) SetUnionVal(value *MyUnion) *MyStruct {
    x.UnionVal = value
    return x
}

func (x *MyStruct) SetLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.LateStructVal = &value
    return x
}

func (x *MyStruct) SetLateStructVal(value *LateDefStruct) *MyStruct {
    x.LateStructVal = value
    return x
}

func (x *MyStruct) SetOptBoolValNonCompat(value bool) *MyStruct {
    x.OptBoolVal = &value
    return x
}

func (x *MyStruct) SetOptBoolVal(value *bool) *MyStruct {
    x.OptBoolVal = value
    return x
}

func (x *MyStruct) SetOptByteValNonCompat(value int8) *MyStruct {
    x.OptByteVal = &value
    return x
}

func (x *MyStruct) SetOptByteVal(value *int8) *MyStruct {
    x.OptByteVal = value
    return x
}

func (x *MyStruct) SetOptI16ValNonCompat(value int16) *MyStruct {
    x.OptI16Val = &value
    return x
}

func (x *MyStruct) SetOptI16Val(value *int16) *MyStruct {
    x.OptI16Val = value
    return x
}

func (x *MyStruct) SetOptI32ValNonCompat(value int32) *MyStruct {
    x.OptI32Val = &value
    return x
}

func (x *MyStruct) SetOptI32Val(value *int32) *MyStruct {
    x.OptI32Val = value
    return x
}

func (x *MyStruct) SetOptI64ValNonCompat(value int64) *MyStruct {
    x.OptI64Val = &value
    return x
}

func (x *MyStruct) SetOptI64Val(value *int64) *MyStruct {
    x.OptI64Val = value
    return x
}

func (x *MyStruct) SetOptFloatValNonCompat(value float32) *MyStruct {
    x.OptFloatVal = &value
    return x
}

func (x *MyStruct) SetOptFloatVal(value *float32) *MyStruct {
    x.OptFloatVal = value
    return x
}

func (x *MyStruct) SetOptDoubleValNonCompat(value float64) *MyStruct {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStruct) SetOptDoubleVal(value *float64) *MyStruct {
    x.OptDoubleVal = value
    return x
}

func (x *MyStruct) SetOptStringValNonCompat(value string) *MyStruct {
    x.OptStringVal = &value
    return x
}

func (x *MyStruct) SetOptStringVal(value *string) *MyStruct {
    x.OptStringVal = value
    return x
}

func (x *MyStruct) SetOptBinaryValNonCompat(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptBinaryVal(value []byte) *MyStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStruct) SetOptEnumValNonCompat(value MyEnum) *MyStruct {
    x.OptEnumVal = &value
    return x
}

func (x *MyStruct) SetOptEnumVal(value *MyEnum) *MyStruct {
    x.OptEnumVal = value
    return x
}

func (x *MyStruct) SetOptStructValNonCompat(value MyData) *MyStruct {
    x.OptStructVal = &value
    return x
}

func (x *MyStruct) SetOptStructVal(value *MyData) *MyStruct {
    x.OptStructVal = value
    return x
}

func (x *MyStruct) SetOptLateStructValNonCompat(value LateDefStruct) *MyStruct {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStruct) SetOptLateStructVal(value *LateDefStruct) *MyStruct {
    x.OptLateStructVal = value
    return x
}

func (x *MyStruct) SetOptListValNonCompat(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptListVal(value []int16) *MyStruct {
    x.OptListVal = value
    return x
}

func (x *MyStruct) SetOptSetValNonCompat(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptSetVal(value []string) *MyStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStruct) SetOptMapValNonCompat(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetOptMapVal(value map[string]string) *MyStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStruct) SetListMapNonCompat(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetListMap(value []map[string]int32) *MyStruct {
    x.ListMap = value
    return x
}

func (x *MyStruct) SetMapMapNonCompat(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetMapMap(value map[string]map[string]int32) *MyStruct {
    x.MapMap = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefaultNonCompat(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetI32WithCustomDefault(value int32) *MyStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStruct) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithCustomDefault(value *MyDataWithCustomDefault) *MyStruct {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefaultNonCompat(value MyData) *MyStruct {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStruct) SetStructWithFieldCustomDefault(value *MyData) *MyStruct {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStruct) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}

func (x *MyStruct) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStruct) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStruct) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStruct) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStruct) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStruct) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStruct) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStruct) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStruct) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStruct) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStruct) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStruct) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStruct) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStruct) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStruct) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStruct) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStruct) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStruct) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStruct) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStruct) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStruct) IsSetStructWithCustomDefault() bool {
    return x.StructWithCustomDefault != nil
}

func (x *MyStruct) IsSetStructWithFieldCustomDefault() bool {
    return x.StructWithFieldCustomDefault != nil
}

func (x *MyStruct) writeField_1(p thrift.Protocol) error {  // BoolVal
    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolValNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_2(p thrift.Protocol) error {  // ByteVal
    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteValNonCompat()
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_3(p thrift.Protocol) error {  // I16Val
    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI16ValNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_4(p thrift.Protocol) error {  // I32Val
    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI32ValNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_5(p thrift.Protocol) error {  // I64Val
    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI64ValNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_6(p thrift.Protocol) error {  // FloatVal
    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatValNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleValNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_8(p thrift.Protocol) error {  // StringVal
    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringValNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryValNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_10(p thrift.Protocol) error {  // EnumVal
    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumValNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnionValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBoolValNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptByteValNonCompat()
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI16ValNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI32ValNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI64ValNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptFloatValNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptDoubleValNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStringValNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBinaryValNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptEnumValNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptListValNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptSetValNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptMapValNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListMapNonCompat()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapMapNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI32WithCustomDefaultNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithFieldCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField_1(p thrift.Protocol) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_2(p thrift.Protocol) error {  // ByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.SetByteValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_3(p thrift.Protocol) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetI16ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_4(p thrift.Protocol) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_5(p thrift.Protocol) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetI64ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_6(p thrift.Protocol) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_7(p thrift.Protocol) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_8(p thrift.Protocol) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_9(p thrift.Protocol) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_10(p thrift.Protocol) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetOptBoolValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_15(p thrift.Protocol) error {  // OptByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.SetOptByteValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_16(p thrift.Protocol) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetOptI16ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_17(p thrift.Protocol) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOptI32ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_18(p thrift.Protocol) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetOptI64ValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetOptFloatValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetOptDoubleValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_21(p thrift.Protocol) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOptStringValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetOptBinaryValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_23(p thrift.Protocol) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetOptEnumValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_26(p thrift.Protocol) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetOptListValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_27(p thrift.Protocol) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetOptSetValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_28(p thrift.Protocol) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetOptMapValNonCompat(result)
    return nil
}

func (x *MyStruct) readField_29(p thrift.Protocol) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListMapNonCompat(result)
    return nil
}

func (x *MyStruct) readField_30(p thrift.Protocol) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapMapNonCompat(result)
    return nil
}

func (x *MyStruct) readField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32WithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStruct) readField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStruct) readField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithFieldCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStruct) toString_1() string {  // BoolVal
    return fmt.Sprintf("%v", x.GetBoolValNonCompat())
}

func (x *MyStruct) toString_2() string {  // ByteVal
    return fmt.Sprintf("%v", x.GetByteValNonCompat())
}

func (x *MyStruct) toString_3() string {  // I16Val
    return fmt.Sprintf("%v", x.GetI16ValNonCompat())
}

func (x *MyStruct) toString_4() string {  // I32Val
    return fmt.Sprintf("%v", x.GetI32ValNonCompat())
}

func (x *MyStruct) toString_5() string {  // I64Val
    return fmt.Sprintf("%v", x.GetI64ValNonCompat())
}

func (x *MyStruct) toString_6() string {  // FloatVal
    return fmt.Sprintf("%v", x.GetFloatValNonCompat())
}

func (x *MyStruct) toString_7() string {  // DoubleVal
    return fmt.Sprintf("%v", x.GetDoubleValNonCompat())
}

func (x *MyStruct) toString_8() string {  // StringVal
    return fmt.Sprintf("%v", x.GetStringValNonCompat())
}

func (x *MyStruct) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.GetBinaryValNonCompat())
}

func (x *MyStruct) toString_10() string {  // EnumVal
    return fmt.Sprintf("%v", x.GetEnumValNonCompat())
}

func (x *MyStruct) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.GetStructValNonCompat())
}

func (x *MyStruct) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.GetUnionValNonCompat())
}

func (x *MyStruct) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.GetLateStructValNonCompat())
}

func (x *MyStruct) toString_14() string {  // OptBoolVal
    if x.IsSetOptBoolVal() {
        return fmt.Sprintf("%v", *x.GetOptBoolValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptBoolValNonCompat())
}

func (x *MyStruct) toString_15() string {  // OptByteVal
    if x.IsSetOptByteVal() {
        return fmt.Sprintf("%v", *x.GetOptByteValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptByteValNonCompat())
}

func (x *MyStruct) toString_16() string {  // OptI16Val
    if x.IsSetOptI16Val() {
        return fmt.Sprintf("%v", *x.GetOptI16ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI16ValNonCompat())
}

func (x *MyStruct) toString_17() string {  // OptI32Val
    if x.IsSetOptI32Val() {
        return fmt.Sprintf("%v", *x.GetOptI32ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI32ValNonCompat())
}

func (x *MyStruct) toString_18() string {  // OptI64Val
    if x.IsSetOptI64Val() {
        return fmt.Sprintf("%v", *x.GetOptI64ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI64ValNonCompat())
}

func (x *MyStruct) toString_19() string {  // OptFloatVal
    if x.IsSetOptFloatVal() {
        return fmt.Sprintf("%v", *x.GetOptFloatValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptFloatValNonCompat())
}

func (x *MyStruct) toString_20() string {  // OptDoubleVal
    if x.IsSetOptDoubleVal() {
        return fmt.Sprintf("%v", *x.GetOptDoubleValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptDoubleValNonCompat())
}

func (x *MyStruct) toString_21() string {  // OptStringVal
    if x.IsSetOptStringVal() {
        return fmt.Sprintf("%v", *x.GetOptStringValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptStringValNonCompat())
}

func (x *MyStruct) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.GetOptBinaryValNonCompat())
}

func (x *MyStruct) toString_23() string {  // OptEnumVal
    if x.IsSetOptEnumVal() {
        return fmt.Sprintf("%v", *x.GetOptEnumValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptEnumValNonCompat())
}

func (x *MyStruct) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.GetOptStructValNonCompat())
}

func (x *MyStruct) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.GetOptLateStructValNonCompat())
}

func (x *MyStruct) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.GetOptListValNonCompat())
}

func (x *MyStruct) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.GetOptSetValNonCompat())
}

func (x *MyStruct) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.GetOptMapValNonCompat())
}

func (x *MyStruct) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.GetListMapNonCompat())
}

func (x *MyStruct) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.GetMapMapNonCompat())
}

func (x *MyStruct) toString_31() string {  // I32WithCustomDefault
    return fmt.Sprintf("%v", x.GetI32WithCustomDefaultNonCompat())
}

func (x *MyStruct) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithCustomDefaultNonCompat())
}

func (x *MyStruct) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithFieldCustomDefaultNonCompat())
}

// Deprecated: Use NewMyStruct().GetStructVal() instead.
var MyStruct_StructVal_DEFAULT = NewMyStruct().GetStructVal()

// Deprecated: Use NewMyStruct().GetStructVal() instead.
func (x *MyStruct) DefaultGetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return NewMyData()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStruct().GetUnionVal() instead.
var MyStruct_UnionVal_DEFAULT = NewMyStruct().GetUnionVal()

// Deprecated: Use NewMyStruct().GetUnionVal() instead.
func (x *MyStruct) DefaultGetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return NewMyUnion()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStruct().GetLateStructVal() instead.
var MyStruct_LateStructVal_DEFAULT = NewMyStruct().GetLateStructVal()

// Deprecated: Use NewMyStruct().GetLateStructVal() instead.
func (x *MyStruct) DefaultGetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return NewLateDefStruct()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStruct().GetOptBoolVal() instead.
var MyStruct_OptBoolVal_DEFAULT = NewMyStruct().GetOptBoolVal()

// Deprecated: Use NewMyStruct().GetOptByteVal() instead.
var MyStruct_OptByteVal_DEFAULT = NewMyStruct().GetOptByteVal()

// Deprecated: Use NewMyStruct().GetOptI16Val() instead.
var MyStruct_OptI16Val_DEFAULT = NewMyStruct().GetOptI16Val()

// Deprecated: Use NewMyStruct().GetOptI32Val() instead.
var MyStruct_OptI32Val_DEFAULT = NewMyStruct().GetOptI32Val()

// Deprecated: Use NewMyStruct().GetOptI64Val() instead.
var MyStruct_OptI64Val_DEFAULT = NewMyStruct().GetOptI64Val()

// Deprecated: Use NewMyStruct().GetOptFloatVal() instead.
var MyStruct_OptFloatVal_DEFAULT = NewMyStruct().GetOptFloatVal()

// Deprecated: Use NewMyStruct().GetOptDoubleVal() instead.
var MyStruct_OptDoubleVal_DEFAULT = NewMyStruct().GetOptDoubleVal()

// Deprecated: Use NewMyStruct().GetOptStringVal() instead.
var MyStruct_OptStringVal_DEFAULT = NewMyStruct().GetOptStringVal()

// Deprecated: Use NewMyStruct().GetOptEnumVal() instead.
var MyStruct_OptEnumVal_DEFAULT = NewMyStruct().GetOptEnumVal()

// Deprecated: Use NewMyStruct().GetOptStructVal() instead.
var MyStruct_OptStructVal_DEFAULT = NewMyStruct().GetOptStructVal()

// Deprecated: Use NewMyStruct().GetOptStructVal() instead.
func (x *MyStruct) DefaultGetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return NewMyData()
    }
    return x.OptStructVal
}

// Deprecated: Use NewMyStruct().GetOptLateStructVal() instead.
var MyStruct_OptLateStructVal_DEFAULT = NewMyStruct().GetOptLateStructVal()

// Deprecated: Use NewMyStruct().GetOptLateStructVal() instead.
func (x *MyStruct) DefaultGetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStruct()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStruct().GetStructWithCustomDefault() instead.
var MyStruct_StructWithCustomDefault_DEFAULT = NewMyStruct().GetStructWithCustomDefault()

// Deprecated: Use NewMyStruct().GetStructWithCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefault()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStruct().GetStructWithFieldCustomDefault() instead.
var MyStruct_StructWithFieldCustomDefault_DEFAULT = NewMyStruct().GetStructWithFieldCustomDefault()

// Deprecated: Use NewMyStruct().GetStructWithFieldCustomDefault() instead.
func (x *MyStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyData()
    }
    return x.StructWithFieldCustomDefault
}


// Deprecated: Use MyStruct.Set* methods instead or set the fields directly.
type MyStructBuilder struct {
    obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder {
    return &MyStructBuilder{
        obj: NewMyStruct(),
    }
}

func (x *MyStructBuilder) BoolVal(value bool) *MyStructBuilder {
    x.obj.BoolVal = value
    return x
}

func (x *MyStructBuilder) ByteVal(value int8) *MyStructBuilder {
    x.obj.ByteVal = value
    return x
}

func (x *MyStructBuilder) I16Val(value int16) *MyStructBuilder {
    x.obj.I16Val = value
    return x
}

func (x *MyStructBuilder) I32Val(value int32) *MyStructBuilder {
    x.obj.I32Val = value
    return x
}

func (x *MyStructBuilder) I64Val(value int64) *MyStructBuilder {
    x.obj.I64Val = value
    return x
}

func (x *MyStructBuilder) FloatVal(value float32) *MyStructBuilder {
    x.obj.FloatVal = value
    return x
}

func (x *MyStructBuilder) DoubleVal(value float64) *MyStructBuilder {
    x.obj.DoubleVal = value
    return x
}

func (x *MyStructBuilder) StringVal(value string) *MyStructBuilder {
    x.obj.StringVal = value
    return x
}

func (x *MyStructBuilder) BinaryVal(value []byte) *MyStructBuilder {
    x.obj.BinaryVal = value
    return x
}

func (x *MyStructBuilder) EnumVal(value MyEnum) *MyStructBuilder {
    x.obj.EnumVal = value
    return x
}

func (x *MyStructBuilder) StructVal(value *MyData) *MyStructBuilder {
    x.obj.StructVal = value
    return x
}

func (x *MyStructBuilder) UnionVal(value *MyUnion) *MyStructBuilder {
    x.obj.UnionVal = value
    return x
}

func (x *MyStructBuilder) LateStructVal(value *LateDefStruct) *MyStructBuilder {
    x.obj.LateStructVal = value
    return x
}

func (x *MyStructBuilder) OptBoolVal(value *bool) *MyStructBuilder {
    x.obj.OptBoolVal = value
    return x
}

func (x *MyStructBuilder) OptByteVal(value *int8) *MyStructBuilder {
    x.obj.OptByteVal = value
    return x
}

func (x *MyStructBuilder) OptI16Val(value *int16) *MyStructBuilder {
    x.obj.OptI16Val = value
    return x
}

func (x *MyStructBuilder) OptI32Val(value *int32) *MyStructBuilder {
    x.obj.OptI32Val = value
    return x
}

func (x *MyStructBuilder) OptI64Val(value *int64) *MyStructBuilder {
    x.obj.OptI64Val = value
    return x
}

func (x *MyStructBuilder) OptFloatVal(value *float32) *MyStructBuilder {
    x.obj.OptFloatVal = value
    return x
}

func (x *MyStructBuilder) OptDoubleVal(value *float64) *MyStructBuilder {
    x.obj.OptDoubleVal = value
    return x
}

func (x *MyStructBuilder) OptStringVal(value *string) *MyStructBuilder {
    x.obj.OptStringVal = value
    return x
}

func (x *MyStructBuilder) OptBinaryVal(value []byte) *MyStructBuilder {
    x.obj.OptBinaryVal = value
    return x
}

func (x *MyStructBuilder) OptEnumVal(value *MyEnum) *MyStructBuilder {
    x.obj.OptEnumVal = value
    return x
}

func (x *MyStructBuilder) OptStructVal(value *MyData) *MyStructBuilder {
    x.obj.OptStructVal = value
    return x
}

func (x *MyStructBuilder) OptLateStructVal(value *LateDefStruct) *MyStructBuilder {
    x.obj.OptLateStructVal = value
    return x
}

func (x *MyStructBuilder) OptListVal(value []int16) *MyStructBuilder {
    x.obj.OptListVal = value
    return x
}

func (x *MyStructBuilder) OptSetVal(value []string) *MyStructBuilder {
    x.obj.OptSetVal = value
    return x
}

func (x *MyStructBuilder) OptMapVal(value map[string]string) *MyStructBuilder {
    x.obj.OptMapVal = value
    return x
}

func (x *MyStructBuilder) ListMap(value []map[string]int32) *MyStructBuilder {
    x.obj.ListMap = value
    return x
}

func (x *MyStructBuilder) MapMap(value map[string]map[string]int32) *MyStructBuilder {
    x.obj.MapMap = value
    return x
}

func (x *MyStructBuilder) I32WithCustomDefault(value int32) *MyStructBuilder {
    x.obj.I32WithCustomDefault = value
    return x
}

func (x *MyStructBuilder) StructWithCustomDefault(value *MyDataWithCustomDefault) *MyStructBuilder {
    x.obj.StructWithCustomDefault = value
    return x
}

func (x *MyStructBuilder) StructWithFieldCustomDefault(value *MyData) *MyStructBuilder {
    x.obj.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructBuilder) Emit() *MyStruct {
    var objCopy MyStruct = *x.obj
    return &objCopy
}

func (x *MyStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case -31:  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case -32:  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case 1:  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStruct({")
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStruct{}

func NewLateDefStruct() *LateDefStruct {
    return (&LateDefStruct{})
}


// Deprecated: Use LateDefStruct.Set* methods instead or set the fields directly.
type LateDefStructBuilder struct {
    obj *LateDefStruct
}

func NewLateDefStructBuilder() *LateDefStructBuilder {
    return &LateDefStructBuilder{
        obj: NewLateDefStruct(),
    }
}

func (x *LateDefStructBuilder) Emit() *LateDefStruct {
    var objCopy LateDefStruct = *x.obj
    return &objCopy
}

func (x *LateDefStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStruct({")
    sb.WriteString("})")

    return sb.String()
}

type Recursive struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Recursive{}

func NewRecursive() *Recursive {
    return (&Recursive{}).
        SetNodesNonCompat(nil)
}

func (x *Recursive) GetNodesNonCompat() map[string]*Recursive {
    return x.Nodes
}

func (x *Recursive) GetNodes() map[string]*Recursive {
    if !x.IsSetNodes() {
        return nil
    }

    return x.Nodes
}

func (x *Recursive) SetNodesNonCompat(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) SetNodes(value map[string]*Recursive) *Recursive {
    x.Nodes = value
    return x
}

func (x *Recursive) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *Recursive) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNodesNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Recursive) readField_1(p thrift.Protocol) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetNodesNonCompat(result)
    return nil
}

func (x *Recursive) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.GetNodesNonCompat())
}


// Deprecated: Use Recursive.Set* methods instead or set the fields directly.
type RecursiveBuilder struct {
    obj *Recursive
}

func NewRecursiveBuilder() *RecursiveBuilder {
    return &RecursiveBuilder{
        obj: NewRecursive(),
    }
}

func (x *RecursiveBuilder) Nodes(value map[string]*Recursive) *RecursiveBuilder {
    x.obj.Nodes = value
    return x
}

func (x *RecursiveBuilder) Emit() *Recursive {
    var objCopy Recursive = *x.obj
    return &objCopy
}

func (x *Recursive) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Recursive"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Recursive) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Recursive) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Recursive({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Bar struct {
    Loop *Loop `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Bar{}

func NewBar() *Bar {
    return (&Bar{}).
        SetLoopNonCompat(*NewLoop())
}

func (x *Bar) GetLoopNonCompat() *Loop {
    return x.Loop
}

func (x *Bar) GetLoop() *Loop {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *Bar) SetLoopNonCompat(value Loop) *Bar {
    x.Loop = &value
    return x
}

func (x *Bar) SetLoop(value *Loop) *Bar {
    x.Loop = value
    return x
}

func (x *Bar) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *Bar) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLoopNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bar) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoopNonCompat(result)
    return nil
}

func (x *Bar) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.GetLoopNonCompat())
}

// Deprecated: Use NewBar().GetLoop() instead.
var Bar_Loop_DEFAULT = NewBar().GetLoop()

// Deprecated: Use NewBar().GetLoop() instead.
func (x *Bar) DefaultGetLoop() *Loop {
    if !x.IsSetLoop() {
        return NewLoop()
    }
    return x.Loop
}


// Deprecated: Use Bar.Set* methods instead or set the fields directly.
type BarBuilder struct {
    obj *Bar
}

func NewBarBuilder() *BarBuilder {
    return &BarBuilder{
        obj: NewBar(),
    }
}

func (x *BarBuilder) Loop(value *Loop) *BarBuilder {
    x.obj.Loop = value
    return x
}

func (x *BarBuilder) Emit() *Bar {
    var objCopy Bar = *x.obj
    return &objCopy
}

func (x *Bar) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Bar"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bar) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Bar) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Bar({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type Loop struct {
    Bar *Bar `thrift:"bar,-1" json:"bar" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Loop{}

func NewLoop() *Loop {
    return (&Loop{}).
        SetBarNonCompat(*NewBar())
}

func (x *Loop) GetBarNonCompat() *Bar {
    return x.Bar
}

func (x *Loop) GetBar() *Bar {
    if !x.IsSetBar() {
        return nil
    }

    return x.Bar
}

func (x *Loop) SetBarNonCompat(value Bar) *Loop {
    x.Bar = &value
    return x
}

func (x *Loop) SetBar(value *Bar) *Loop {
    x.Bar = value
    return x
}

func (x *Loop) IsSetBar() bool {
    return x.Bar != nil
}

func (x *Loop) writeField_1(p thrift.Protocol) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBarNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Loop) readField_1(p thrift.Protocol) error {  // Bar
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBarNonCompat(result)
    return nil
}

func (x *Loop) toString_1() string {  // Bar
    return fmt.Sprintf("%v", x.GetBarNonCompat())
}

// Deprecated: Use NewLoop().GetBar() instead.
var Loop_Bar_DEFAULT = NewLoop().GetBar()

// Deprecated: Use NewLoop().GetBar() instead.
func (x *Loop) DefaultGetBar() *Bar {
    if !x.IsSetBar() {
        return NewBar()
    }
    return x.Bar
}


// Deprecated: Use Loop.Set* methods instead or set the fields directly.
type LoopBuilder struct {
    obj *Loop
}

func NewLoopBuilder() *LoopBuilder {
    return &LoopBuilder{
        obj: NewLoop(),
    }
}

func (x *LoopBuilder) Bar(value *Bar) *LoopBuilder {
    x.obj.Bar = value
    return x
}

func (x *LoopBuilder) Emit() *Loop {
    var objCopy Loop = *x.obj
    return &objCopy
}

func (x *Loop) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Loop"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Loop) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *Loop) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("Loop({")
    sb.WriteString(fmt.Sprintf("Bar:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataPatch struct {
    Assign *MyData `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyDataFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyDataEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyDataFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataPatch{}

func NewMyDataPatch() *MyDataPatch {
    return (&MyDataPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyDataFieldPatch()).
        SetEnsureNonCompat(*NewMyDataEnsureStruct()).
        SetPatchNonCompat(*NewMyDataFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyDataPatch) GetAssignNonCompat() *MyData {
    return x.Assign
}

func (x *MyDataPatch) GetAssign() *MyData {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyDataPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyDataPatch) GetClear() bool {
    return x.Clear
}

func (x *MyDataPatch) GetPatchPriorNonCompat() *MyDataFieldPatch {
    return x.PatchPrior
}

func (x *MyDataPatch) GetPatchPrior() *MyDataFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyDataPatch) GetEnsureNonCompat() *MyDataEnsureStruct {
    return x.Ensure
}

func (x *MyDataPatch) GetEnsure() *MyDataEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyDataPatch) GetPatchNonCompat() *MyDataFieldPatch {
    return x.Patch
}

func (x *MyDataPatch) GetPatch() *MyDataFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyDataPatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *MyDataPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyDataPatch) SetAssignNonCompat(value MyData) *MyDataPatch {
    x.Assign = &value
    return x
}

func (x *MyDataPatch) SetAssign(value *MyData) *MyDataPatch {
    x.Assign = value
    return x
}

func (x *MyDataPatch) SetClearNonCompat(value bool) *MyDataPatch {
    x.Clear = value
    return x
}

func (x *MyDataPatch) SetClear(value bool) *MyDataPatch {
    x.Clear = value
    return x
}

func (x *MyDataPatch) SetPatchPriorNonCompat(value MyDataFieldPatch) *MyDataPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyDataPatch) SetPatchPrior(value *MyDataFieldPatch) *MyDataPatch {
    x.PatchPrior = value
    return x
}

func (x *MyDataPatch) SetEnsureNonCompat(value MyDataEnsureStruct) *MyDataPatch {
    x.Ensure = &value
    return x
}

func (x *MyDataPatch) SetEnsure(value *MyDataEnsureStruct) *MyDataPatch {
    x.Ensure = value
    return x
}

func (x *MyDataPatch) SetPatchNonCompat(value MyDataFieldPatch) *MyDataPatch {
    x.Patch = &value
    return x
}

func (x *MyDataPatch) SetPatch(value *MyDataFieldPatch) *MyDataPatch {
    x.Patch = value
    return x
}

func (x *MyDataPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyDataPatch {
    x.Remove = value
    return x
}

func (x *MyDataPatch) SetRemove(value patch.FieldIdList) *MyDataPatch {
    x.Remove = value
    return x
}

func (x *MyDataPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyDataPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyDataPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyDataPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyDataPatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyDataPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyDataPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyDataPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyDataPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewMyDataEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *MyDataPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyDataPatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyDataPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyDataPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyDataPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyDataPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *MyDataPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyDataPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewMyDataPatch().GetAssign() instead.
var MyDataPatch_Assign_DEFAULT = NewMyDataPatch().GetAssign()

// Deprecated: Use NewMyDataPatch().GetAssign() instead.
func (x *MyDataPatch) DefaultGetAssign() *MyData {
    if !x.IsSetAssign() {
        return NewMyData()
    }
    return x.Assign
}

// Deprecated: Use NewMyDataPatch().GetPatchPrior() instead.
var MyDataPatch_PatchPrior_DEFAULT = NewMyDataPatch().GetPatchPrior()

// Deprecated: Use NewMyDataPatch().GetPatchPrior() instead.
func (x *MyDataPatch) DefaultGetPatchPrior() *MyDataFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyDataFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyDataPatch().GetEnsure() instead.
var MyDataPatch_Ensure_DEFAULT = NewMyDataPatch().GetEnsure()

// Deprecated: Use NewMyDataPatch().GetEnsure() instead.
func (x *MyDataPatch) DefaultGetEnsure() *MyDataEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyDataEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyDataPatch().GetPatch() instead.
var MyDataPatch_Patch_DEFAULT = NewMyDataPatch().GetPatch()

// Deprecated: Use NewMyDataPatch().GetPatch() instead.
func (x *MyDataPatch) DefaultGetPatch() *MyDataFieldPatch {
    if !x.IsSetPatch() {
        return NewMyDataFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use MyDataPatch.Set* methods instead or set the fields directly.
type MyDataPatchBuilder struct {
    obj *MyDataPatch
}

func NewMyDataPatchBuilder() *MyDataPatchBuilder {
    return &MyDataPatchBuilder{
        obj: NewMyDataPatch(),
    }
}

func (x *MyDataPatchBuilder) Assign(value *MyData) *MyDataPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyDataPatchBuilder) Clear(value bool) *MyDataPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyDataPatchBuilder) PatchPrior(value *MyDataFieldPatch) *MyDataPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyDataPatchBuilder) Ensure(value *MyDataEnsureStruct) *MyDataPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *MyDataPatchBuilder) Patch(value *MyDataFieldPatch) *MyDataPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyDataPatchBuilder) Remove(value patch.FieldIdList) *MyDataPatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyDataPatchBuilder) Emit() *MyDataPatch {
    var objCopy MyDataPatch = *x.obj
    return &objCopy
}

func (x *MyDataPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataFieldPatch struct {
    Data1 *patch.StringPatch `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 *patch.I32Patch `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataFieldPatch{}

func NewMyDataFieldPatch() *MyDataFieldPatch {
    return (&MyDataFieldPatch{}).
        SetData1NonCompat(*patch.NewStringPatch()).
        SetData2NonCompat(*patch.NewI32Patch())
}

func (x *MyDataFieldPatch) GetData1NonCompat() *patch.StringPatch {
    return x.Data1
}

func (x *MyDataFieldPatch) GetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return nil
    }

    return x.Data1
}

func (x *MyDataFieldPatch) GetData2NonCompat() *patch.I32Patch {
    return x.Data2
}

func (x *MyDataFieldPatch) GetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return nil
    }

    return x.Data2
}

func (x *MyDataFieldPatch) SetData1NonCompat(value patch.StringPatch) *MyDataFieldPatch {
    x.Data1 = &value
    return x
}

func (x *MyDataFieldPatch) SetData1(value *patch.StringPatch) *MyDataFieldPatch {
    x.Data1 = value
    return x
}

func (x *MyDataFieldPatch) SetData2NonCompat(value patch.I32Patch) *MyDataFieldPatch {
    x.Data2 = &value
    return x
}

func (x *MyDataFieldPatch) SetData2(value *patch.I32Patch) *MyDataFieldPatch {
    x.Data2 = value
    return x
}

func (x *MyDataFieldPatch) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataFieldPatch) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataFieldPatch) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData1NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData2NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) readField1(p thrift.Protocol) error {  // Data1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyDataFieldPatch) readField2(p thrift.Protocol) error {  // Data2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyDataFieldPatch) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyDataFieldPatch) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}

// Deprecated: Use NewMyDataFieldPatch().GetData1() instead.
var MyDataFieldPatch_Data1_DEFAULT = NewMyDataFieldPatch().GetData1()

// Deprecated: Use NewMyDataFieldPatch().GetData1() instead.
func (x *MyDataFieldPatch) DefaultGetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return patch.NewStringPatch()
    }
    return x.Data1
}

// Deprecated: Use NewMyDataFieldPatch().GetData2() instead.
var MyDataFieldPatch_Data2_DEFAULT = NewMyDataFieldPatch().GetData2()

// Deprecated: Use NewMyDataFieldPatch().GetData2() instead.
func (x *MyDataFieldPatch) DefaultGetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return patch.NewI32Patch()
    }
    return x.Data2
}


// Deprecated: Use MyDataFieldPatch.Set* methods instead or set the fields directly.
type MyDataFieldPatchBuilder struct {
    obj *MyDataFieldPatch
}

func NewMyDataFieldPatchBuilder() *MyDataFieldPatchBuilder {
    return &MyDataFieldPatchBuilder{
        obj: NewMyDataFieldPatch(),
    }
}

func (x *MyDataFieldPatchBuilder) Data1(value *patch.StringPatch) *MyDataFieldPatchBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataFieldPatchBuilder) Data2(value *patch.I32Patch) *MyDataFieldPatchBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataFieldPatchBuilder) Emit() *MyDataFieldPatch {
    var objCopy MyDataFieldPatch = *x.obj
    return &objCopy
}

func (x *MyDataFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataFieldPatch({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataEnsureStruct struct {
    Data1 *string `thrift:"data1,1,optional" json:"data1,omitempty" db:"data1"`
    Data2 *int32 `thrift:"data2,2,optional" json:"data2,omitempty" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataEnsureStruct{}

func NewMyDataEnsureStruct() *MyDataEnsureStruct {
    return (&MyDataEnsureStruct{})
}

func (x *MyDataEnsureStruct) GetData1NonCompat() *string {
    return x.Data1
}

func (x *MyDataEnsureStruct) GetData1() string {
    if !x.IsSetData1() {
        return ""
    }

    return *x.Data1
}

func (x *MyDataEnsureStruct) GetData2NonCompat() *int32 {
    return x.Data2
}

func (x *MyDataEnsureStruct) GetData2() int32 {
    if !x.IsSetData2() {
        return 0
    }

    return *x.Data2
}

func (x *MyDataEnsureStruct) SetData1NonCompat(value string) *MyDataEnsureStruct {
    x.Data1 = &value
    return x
}

func (x *MyDataEnsureStruct) SetData1(value *string) *MyDataEnsureStruct {
    x.Data1 = value
    return x
}

func (x *MyDataEnsureStruct) SetData2NonCompat(value int32) *MyDataEnsureStruct {
    x.Data2 = &value
    return x
}

func (x *MyDataEnsureStruct) SetData2(value *int32) *MyDataEnsureStruct {
    x.Data2 = value
    return x
}

func (x *MyDataEnsureStruct) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataEnsureStruct) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataEnsureStruct) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData1NonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyDataEnsureStruct) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyDataEnsureStruct) toString1() string {  // Data1
    if x.IsSetData1() {
        return fmt.Sprintf("%v", *x.GetData1NonCompat())
    }
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyDataEnsureStruct) toString2() string {  // Data2
    if x.IsSetData2() {
        return fmt.Sprintf("%v", *x.GetData2NonCompat())
    }
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}

// Deprecated: Use NewMyDataEnsureStruct().GetData1() instead.
var MyDataEnsureStruct_Data1_DEFAULT = NewMyDataEnsureStruct().GetData1()

// Deprecated: Use NewMyDataEnsureStruct().GetData2() instead.
var MyDataEnsureStruct_Data2_DEFAULT = NewMyDataEnsureStruct().GetData2()


// Deprecated: Use MyDataEnsureStruct.Set* methods instead or set the fields directly.
type MyDataEnsureStructBuilder struct {
    obj *MyDataEnsureStruct
}

func NewMyDataEnsureStructBuilder() *MyDataEnsureStructBuilder {
    return &MyDataEnsureStructBuilder{
        obj: NewMyDataEnsureStruct(),
    }
}

func (x *MyDataEnsureStructBuilder) Data1(value *string) *MyDataEnsureStructBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataEnsureStructBuilder) Data2(value *int32) *MyDataEnsureStructBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataEnsureStructBuilder) Emit() *MyDataEnsureStruct {
    var objCopy MyDataEnsureStruct = *x.obj
    return &objCopy
}

func (x *MyDataEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultPatch struct {
    Assign *MyDataWithCustomDefault `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyDataWithCustomDefaultFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyDataWithCustomDefaultEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyDataWithCustomDefaultFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataWithCustomDefaultPatch{}

func NewMyDataWithCustomDefaultPatch() *MyDataWithCustomDefaultPatch {
    return (&MyDataWithCustomDefaultPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyDataWithCustomDefaultFieldPatch()).
        SetEnsureNonCompat(*NewMyDataWithCustomDefaultEnsureStruct()).
        SetPatchNonCompat(*NewMyDataWithCustomDefaultFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyDataWithCustomDefaultPatch) GetAssignNonCompat() *MyDataWithCustomDefault {
    return x.Assign
}

func (x *MyDataWithCustomDefaultPatch) GetAssign() *MyDataWithCustomDefault {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyDataWithCustomDefaultPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyDataWithCustomDefaultPatch) GetClear() bool {
    return x.Clear
}

func (x *MyDataWithCustomDefaultPatch) GetPatchPriorNonCompat() *MyDataWithCustomDefaultFieldPatch {
    return x.PatchPrior
}

func (x *MyDataWithCustomDefaultPatch) GetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyDataWithCustomDefaultPatch) GetEnsureNonCompat() *MyDataWithCustomDefaultEnsureStruct {
    return x.Ensure
}

func (x *MyDataWithCustomDefaultPatch) GetEnsure() *MyDataWithCustomDefaultEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyDataWithCustomDefaultPatch) GetPatchNonCompat() *MyDataWithCustomDefaultFieldPatch {
    return x.Patch
}

func (x *MyDataWithCustomDefaultPatch) GetPatch() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyDataWithCustomDefaultPatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *MyDataWithCustomDefaultPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyDataWithCustomDefaultPatch) SetAssignNonCompat(value MyDataWithCustomDefault) *MyDataWithCustomDefaultPatch {
    x.Assign = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetAssign(value *MyDataWithCustomDefault) *MyDataWithCustomDefaultPatch {
    x.Assign = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetClearNonCompat(value bool) *MyDataWithCustomDefaultPatch {
    x.Clear = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetClear(value bool) *MyDataWithCustomDefaultPatch {
    x.Clear = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchPriorNonCompat(value MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchPrior(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.PatchPrior = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetEnsureNonCompat(value MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatch {
    x.Ensure = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetEnsure(value *MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatch {
    x.Ensure = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatchNonCompat(value MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.Patch = &value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetPatch(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatch {
    x.Patch = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyDataWithCustomDefaultPatch {
    x.Remove = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) SetRemove(value patch.FieldIdList) *MyDataWithCustomDefaultPatch {
    x.Remove = value
    return x
}

func (x *MyDataWithCustomDefaultPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyDataWithCustomDefaultPatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyDataWithCustomDefaultPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyDataWithCustomDefaultFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewMyDataWithCustomDefaultEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyDataWithCustomDefaultFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyDataWithCustomDefaultPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyDataWithCustomDefaultPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyDataWithCustomDefaultPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *MyDataWithCustomDefaultPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyDataWithCustomDefaultPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetAssign() instead.
var MyDataWithCustomDefaultPatch_Assign_DEFAULT = NewMyDataWithCustomDefaultPatch().GetAssign()

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetAssign() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetAssign() *MyDataWithCustomDefault {
    if !x.IsSetAssign() {
        return NewMyDataWithCustomDefault()
    }
    return x.Assign
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatchPrior() instead.
var MyDataWithCustomDefaultPatch_PatchPrior_DEFAULT = NewMyDataWithCustomDefaultPatch().GetPatchPrior()

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatchPrior() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetPatchPrior() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyDataWithCustomDefaultFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetEnsure() instead.
var MyDataWithCustomDefaultPatch_Ensure_DEFAULT = NewMyDataWithCustomDefaultPatch().GetEnsure()

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetEnsure() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetEnsure() *MyDataWithCustomDefaultEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyDataWithCustomDefaultEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatch() instead.
var MyDataWithCustomDefaultPatch_Patch_DEFAULT = NewMyDataWithCustomDefaultPatch().GetPatch()

// Deprecated: Use NewMyDataWithCustomDefaultPatch().GetPatch() instead.
func (x *MyDataWithCustomDefaultPatch) DefaultGetPatch() *MyDataWithCustomDefaultFieldPatch {
    if !x.IsSetPatch() {
        return NewMyDataWithCustomDefaultFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use MyDataWithCustomDefaultPatch.Set* methods instead or set the fields directly.
type MyDataWithCustomDefaultPatchBuilder struct {
    obj *MyDataWithCustomDefaultPatch
}

func NewMyDataWithCustomDefaultPatchBuilder() *MyDataWithCustomDefaultPatchBuilder {
    return &MyDataWithCustomDefaultPatchBuilder{
        obj: NewMyDataWithCustomDefaultPatch(),
    }
}

func (x *MyDataWithCustomDefaultPatchBuilder) Assign(value *MyDataWithCustomDefault) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) Clear(value bool) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) PatchPrior(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) Ensure(value *MyDataWithCustomDefaultEnsureStruct) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) Patch(value *MyDataWithCustomDefaultFieldPatch) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) Remove(value patch.FieldIdList) *MyDataWithCustomDefaultPatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyDataWithCustomDefaultPatchBuilder) Emit() *MyDataWithCustomDefaultPatch {
    var objCopy MyDataWithCustomDefaultPatch = *x.obj
    return &objCopy
}

func (x *MyDataWithCustomDefaultPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultFieldPatch struct {
    Data1 *patch.StringPatch `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 *patch.I32Patch `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataWithCustomDefaultFieldPatch{}

func NewMyDataWithCustomDefaultFieldPatch() *MyDataWithCustomDefaultFieldPatch {
    return (&MyDataWithCustomDefaultFieldPatch{}).
        SetData1NonCompat(*patch.NewStringPatch()).
        SetData2NonCompat(*patch.NewI32Patch())
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData1NonCompat() *patch.StringPatch {
    return x.Data1
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return nil
    }

    return x.Data1
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData2NonCompat() *patch.I32Patch {
    return x.Data2
}

func (x *MyDataWithCustomDefaultFieldPatch) GetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return nil
    }

    return x.Data2
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData1NonCompat(value patch.StringPatch) *MyDataWithCustomDefaultFieldPatch {
    x.Data1 = &value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData1(value *patch.StringPatch) *MyDataWithCustomDefaultFieldPatch {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData2NonCompat(value patch.I32Patch) *MyDataWithCustomDefaultFieldPatch {
    x.Data2 = &value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) SetData2(value *patch.I32Patch) *MyDataWithCustomDefaultFieldPatch {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatch) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataWithCustomDefaultFieldPatch) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataWithCustomDefaultFieldPatch) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData1NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData2NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) readField1(p thrift.Protocol) error {  // Data1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) readField2(p thrift.Protocol) error {  // Data2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) toString1() string {  // Data1
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyDataWithCustomDefaultFieldPatch) toString2() string {  // Data2
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData1() instead.
var MyDataWithCustomDefaultFieldPatch_Data1_DEFAULT = NewMyDataWithCustomDefaultFieldPatch().GetData1()

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData1() instead.
func (x *MyDataWithCustomDefaultFieldPatch) DefaultGetData1() *patch.StringPatch {
    if !x.IsSetData1() {
        return patch.NewStringPatch()
    }
    return x.Data1
}

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData2() instead.
var MyDataWithCustomDefaultFieldPatch_Data2_DEFAULT = NewMyDataWithCustomDefaultFieldPatch().GetData2()

// Deprecated: Use NewMyDataWithCustomDefaultFieldPatch().GetData2() instead.
func (x *MyDataWithCustomDefaultFieldPatch) DefaultGetData2() *patch.I32Patch {
    if !x.IsSetData2() {
        return patch.NewI32Patch()
    }
    return x.Data2
}


// Deprecated: Use MyDataWithCustomDefaultFieldPatch.Set* methods instead or set the fields directly.
type MyDataWithCustomDefaultFieldPatchBuilder struct {
    obj *MyDataWithCustomDefaultFieldPatch
}

func NewMyDataWithCustomDefaultFieldPatchBuilder() *MyDataWithCustomDefaultFieldPatchBuilder {
    return &MyDataWithCustomDefaultFieldPatchBuilder{
        obj: NewMyDataWithCustomDefaultFieldPatch(),
    }
}

func (x *MyDataWithCustomDefaultFieldPatchBuilder) Data1(value *patch.StringPatch) *MyDataWithCustomDefaultFieldPatchBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatchBuilder) Data2(value *patch.I32Patch) *MyDataWithCustomDefaultFieldPatchBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultFieldPatchBuilder) Emit() *MyDataWithCustomDefaultFieldPatch {
    var objCopy MyDataWithCustomDefaultFieldPatch = *x.obj
    return &objCopy
}

func (x *MyDataWithCustomDefaultFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultFieldPatch({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyDataWithCustomDefaultEnsureStruct struct {
    Data1 *string `thrift:"data1,1,optional" json:"data1,omitempty" db:"data1"`
    Data2 *int32 `thrift:"data2,2,optional" json:"data2,omitempty" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataWithCustomDefaultEnsureStruct{}

func NewMyDataWithCustomDefaultEnsureStruct() *MyDataWithCustomDefaultEnsureStruct {
    return (&MyDataWithCustomDefaultEnsureStruct{})
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData1NonCompat() *string {
    return x.Data1
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData1() string {
    if !x.IsSetData1() {
        return ""
    }

    return *x.Data1
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData2NonCompat() *int32 {
    return x.Data2
}

func (x *MyDataWithCustomDefaultEnsureStruct) GetData2() int32 {
    if !x.IsSetData2() {
        return 0
    }

    return *x.Data2
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData1NonCompat(value string) *MyDataWithCustomDefaultEnsureStruct {
    x.Data1 = &value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData1(value *string) *MyDataWithCustomDefaultEnsureStruct {
    x.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData2NonCompat(value int32) *MyDataWithCustomDefaultEnsureStruct {
    x.Data2 = &value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) SetData2(value *int32) *MyDataWithCustomDefaultEnsureStruct {
    x.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStruct) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData1NonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData2NonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2NonCompat(result)
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) toString1() string {  // Data1
    if x.IsSetData1() {
        return fmt.Sprintf("%v", *x.GetData1NonCompat())
    }
    return fmt.Sprintf("%v", x.GetData1NonCompat())
}

func (x *MyDataWithCustomDefaultEnsureStruct) toString2() string {  // Data2
    if x.IsSetData2() {
        return fmt.Sprintf("%v", *x.GetData2NonCompat())
    }
    return fmt.Sprintf("%v", x.GetData2NonCompat())
}

// Deprecated: Use NewMyDataWithCustomDefaultEnsureStruct().GetData1() instead.
var MyDataWithCustomDefaultEnsureStruct_Data1_DEFAULT = NewMyDataWithCustomDefaultEnsureStruct().GetData1()

// Deprecated: Use NewMyDataWithCustomDefaultEnsureStruct().GetData2() instead.
var MyDataWithCustomDefaultEnsureStruct_Data2_DEFAULT = NewMyDataWithCustomDefaultEnsureStruct().GetData2()


// Deprecated: Use MyDataWithCustomDefaultEnsureStruct.Set* methods instead or set the fields directly.
type MyDataWithCustomDefaultEnsureStructBuilder struct {
    obj *MyDataWithCustomDefaultEnsureStruct
}

func NewMyDataWithCustomDefaultEnsureStructBuilder() *MyDataWithCustomDefaultEnsureStructBuilder {
    return &MyDataWithCustomDefaultEnsureStructBuilder{
        obj: NewMyDataWithCustomDefaultEnsureStruct(),
    }
}

func (x *MyDataWithCustomDefaultEnsureStructBuilder) Data1(value *string) *MyDataWithCustomDefaultEnsureStructBuilder {
    x.obj.Data1 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStructBuilder) Data2(value *int32) *MyDataWithCustomDefaultEnsureStructBuilder {
    x.obj.Data2 = value
    return x
}

func (x *MyDataWithCustomDefaultEnsureStructBuilder) Emit() *MyDataWithCustomDefaultEnsureStruct {
    var objCopy MyDataWithCustomDefaultEnsureStruct = *x.obj
    return &objCopy
}

func (x *MyDataWithCustomDefaultEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataWithCustomDefaultEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyDataWithCustomDefaultEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyDataWithCustomDefaultEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Data1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Data2:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnionPatch struct {
    Assign *InnerUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *InnerUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *InnerUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *InnerUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnionPatch{}

func NewInnerUnionPatch() *InnerUnionPatch {
    return (&InnerUnionPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewInnerUnionFieldPatch()).
        SetEnsureNonCompat(*NewInnerUnion()).
        SetPatchNonCompat(*NewInnerUnionFieldPatch())
}

func (x *InnerUnionPatch) GetAssignNonCompat() *InnerUnion {
    return x.Assign
}

func (x *InnerUnionPatch) GetAssign() *InnerUnion {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *InnerUnionPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *InnerUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *InnerUnionPatch) GetPatchPriorNonCompat() *InnerUnionFieldPatch {
    return x.PatchPrior
}

func (x *InnerUnionPatch) GetPatchPrior() *InnerUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *InnerUnionPatch) GetEnsureNonCompat() *InnerUnion {
    return x.Ensure
}

func (x *InnerUnionPatch) GetEnsure() *InnerUnion {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *InnerUnionPatch) GetPatchNonCompat() *InnerUnionFieldPatch {
    return x.Patch
}

func (x *InnerUnionPatch) GetPatch() *InnerUnionFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *InnerUnionPatch) SetAssignNonCompat(value InnerUnion) *InnerUnionPatch {
    x.Assign = &value
    return x
}

func (x *InnerUnionPatch) SetAssign(value *InnerUnion) *InnerUnionPatch {
    x.Assign = value
    return x
}

func (x *InnerUnionPatch) SetClearNonCompat(value bool) *InnerUnionPatch {
    x.Clear = value
    return x
}

func (x *InnerUnionPatch) SetClear(value bool) *InnerUnionPatch {
    x.Clear = value
    return x
}

func (x *InnerUnionPatch) SetPatchPriorNonCompat(value InnerUnionFieldPatch) *InnerUnionPatch {
    x.PatchPrior = &value
    return x
}

func (x *InnerUnionPatch) SetPatchPrior(value *InnerUnionFieldPatch) *InnerUnionPatch {
    x.PatchPrior = value
    return x
}

func (x *InnerUnionPatch) SetEnsureNonCompat(value InnerUnion) *InnerUnionPatch {
    x.Ensure = &value
    return x
}

func (x *InnerUnionPatch) SetEnsure(value *InnerUnion) *InnerUnionPatch {
    x.Ensure = value
    return x
}

func (x *InnerUnionPatch) SetPatchNonCompat(value InnerUnionFieldPatch) *InnerUnionPatch {
    x.Patch = &value
    return x
}

func (x *InnerUnionPatch) SetPatch(value *InnerUnionFieldPatch) *InnerUnionPatch {
    x.Patch = value
    return x
}

func (x *InnerUnionPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *InnerUnionPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *InnerUnionPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *InnerUnionPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *InnerUnionPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField4(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *InnerUnionPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *InnerUnionPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *InnerUnionPatch) readField4(p thrift.Protocol) error {  // Ensure
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *InnerUnionPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *InnerUnionPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *InnerUnionPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *InnerUnionPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *InnerUnionPatch) toString4() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *InnerUnionPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

// Deprecated: Use NewInnerUnionPatch().GetAssign() instead.
var InnerUnionPatch_Assign_DEFAULT = NewInnerUnionPatch().GetAssign()

// Deprecated: Use NewInnerUnionPatch().GetAssign() instead.
func (x *InnerUnionPatch) DefaultGetAssign() *InnerUnion {
    if !x.IsSetAssign() {
        return NewInnerUnion()
    }
    return x.Assign
}

// Deprecated: Use NewInnerUnionPatch().GetPatchPrior() instead.
var InnerUnionPatch_PatchPrior_DEFAULT = NewInnerUnionPatch().GetPatchPrior()

// Deprecated: Use NewInnerUnionPatch().GetPatchPrior() instead.
func (x *InnerUnionPatch) DefaultGetPatchPrior() *InnerUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewInnerUnionFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewInnerUnionPatch().GetEnsure() instead.
var InnerUnionPatch_Ensure_DEFAULT = NewInnerUnionPatch().GetEnsure()

// Deprecated: Use NewInnerUnionPatch().GetEnsure() instead.
func (x *InnerUnionPatch) DefaultGetEnsure() *InnerUnion {
    if !x.IsSetEnsure() {
        return NewInnerUnion()
    }
    return x.Ensure
}

// Deprecated: Use NewInnerUnionPatch().GetPatch() instead.
var InnerUnionPatch_Patch_DEFAULT = NewInnerUnionPatch().GetPatch()

// Deprecated: Use NewInnerUnionPatch().GetPatch() instead.
func (x *InnerUnionPatch) DefaultGetPatch() *InnerUnionFieldPatch {
    if !x.IsSetPatch() {
        return NewInnerUnionFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use InnerUnionPatch.Set* methods instead or set the fields directly.
type InnerUnionPatchBuilder struct {
    obj *InnerUnionPatch
}

func NewInnerUnionPatchBuilder() *InnerUnionPatchBuilder {
    return &InnerUnionPatchBuilder{
        obj: NewInnerUnionPatch(),
    }
}

func (x *InnerUnionPatchBuilder) Assign(value *InnerUnion) *InnerUnionPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *InnerUnionPatchBuilder) Clear(value bool) *InnerUnionPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *InnerUnionPatchBuilder) PatchPrior(value *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *InnerUnionPatchBuilder) Ensure(value *InnerUnion) *InnerUnionPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *InnerUnionPatchBuilder) Patch(value *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *InnerUnionPatchBuilder) Emit() *InnerUnionPatch {
    var objCopy InnerUnionPatch = *x.obj
    return &objCopy
}

func (x *InnerUnionPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InnerUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnionPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnionPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Patch:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type InnerUnionFieldPatch struct {
    InnerOption *patch.BinaryPatch `thrift:"innerOption,1" json:"innerOption" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnionFieldPatch{}

func NewInnerUnionFieldPatch() *InnerUnionFieldPatch {
    return (&InnerUnionFieldPatch{}).
        SetInnerOptionNonCompat(*patch.NewBinaryPatch())
}

func (x *InnerUnionFieldPatch) GetInnerOptionNonCompat() *patch.BinaryPatch {
    return x.InnerOption
}

func (x *InnerUnionFieldPatch) GetInnerOption() *patch.BinaryPatch {
    if !x.IsSetInnerOption() {
        return nil
    }

    return x.InnerOption
}

func (x *InnerUnionFieldPatch) SetInnerOptionNonCompat(value patch.BinaryPatch) *InnerUnionFieldPatch {
    x.InnerOption = &value
    return x
}

func (x *InnerUnionFieldPatch) SetInnerOption(value *patch.BinaryPatch) *InnerUnionFieldPatch {
    x.InnerOption = value
    return x
}

func (x *InnerUnionFieldPatch) IsSetInnerOption() bool {
    return x.InnerOption != nil
}

func (x *InnerUnionFieldPatch) writeField1(p thrift.Protocol) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetInnerOptionNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) readField1(p thrift.Protocol) error {  // InnerOption
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetInnerOptionNonCompat(result)
    return nil
}

func (x *InnerUnionFieldPatch) toString1() string {  // InnerOption
    return fmt.Sprintf("%v", x.GetInnerOptionNonCompat())
}

// Deprecated: Use NewInnerUnionFieldPatch().GetInnerOption() instead.
var InnerUnionFieldPatch_InnerOption_DEFAULT = NewInnerUnionFieldPatch().GetInnerOption()

// Deprecated: Use NewInnerUnionFieldPatch().GetInnerOption() instead.
func (x *InnerUnionFieldPatch) DefaultGetInnerOption() *patch.BinaryPatch {
    if !x.IsSetInnerOption() {
        return patch.NewBinaryPatch()
    }
    return x.InnerOption
}


// Deprecated: Use InnerUnionFieldPatch.Set* methods instead or set the fields directly.
type InnerUnionFieldPatchBuilder struct {
    obj *InnerUnionFieldPatch
}

func NewInnerUnionFieldPatchBuilder() *InnerUnionFieldPatchBuilder {
    return &InnerUnionFieldPatchBuilder{
        obj: NewInnerUnionFieldPatch(),
    }
}

func (x *InnerUnionFieldPatchBuilder) InnerOption(value *patch.BinaryPatch) *InnerUnionFieldPatchBuilder {
    x.obj.InnerOption = value
    return x
}

func (x *InnerUnionFieldPatchBuilder) Emit() *InnerUnionFieldPatch {
    var objCopy InnerUnionFieldPatch = *x.obj
    return &objCopy
}

func (x *InnerUnionFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InnerUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *InnerUnionFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("InnerUnionFieldPatch({")
    sb.WriteString(fmt.Sprintf("InnerOption:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnionPatch struct {
    Assign *MyUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *MyUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnionPatch{}

func NewMyUnionPatch() *MyUnionPatch {
    return (&MyUnionPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyUnionFieldPatch()).
        SetEnsureNonCompat(*NewMyUnion()).
        SetPatchNonCompat(*NewMyUnionFieldPatch())
}

func (x *MyUnionPatch) GetAssignNonCompat() *MyUnion {
    return x.Assign
}

func (x *MyUnionPatch) GetAssign() *MyUnion {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyUnionPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *MyUnionPatch) GetPatchPriorNonCompat() *MyUnionFieldPatch {
    return x.PatchPrior
}

func (x *MyUnionPatch) GetPatchPrior() *MyUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyUnionPatch) GetEnsureNonCompat() *MyUnion {
    return x.Ensure
}

func (x *MyUnionPatch) GetEnsure() *MyUnion {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyUnionPatch) GetPatchNonCompat() *MyUnionFieldPatch {
    return x.Patch
}

func (x *MyUnionPatch) GetPatch() *MyUnionFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyUnionPatch) SetAssignNonCompat(value MyUnion) *MyUnionPatch {
    x.Assign = &value
    return x
}

func (x *MyUnionPatch) SetAssign(value *MyUnion) *MyUnionPatch {
    x.Assign = value
    return x
}

func (x *MyUnionPatch) SetClearNonCompat(value bool) *MyUnionPatch {
    x.Clear = value
    return x
}

func (x *MyUnionPatch) SetClear(value bool) *MyUnionPatch {
    x.Clear = value
    return x
}

func (x *MyUnionPatch) SetPatchPriorNonCompat(value MyUnionFieldPatch) *MyUnionPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyUnionPatch) SetPatchPrior(value *MyUnionFieldPatch) *MyUnionPatch {
    x.PatchPrior = value
    return x
}

func (x *MyUnionPatch) SetEnsureNonCompat(value MyUnion) *MyUnionPatch {
    x.Ensure = &value
    return x
}

func (x *MyUnionPatch) SetEnsure(value *MyUnion) *MyUnionPatch {
    x.Ensure = value
    return x
}

func (x *MyUnionPatch) SetPatchNonCompat(value MyUnionFieldPatch) *MyUnionPatch {
    x.Patch = &value
    return x
}

func (x *MyUnionPatch) SetPatch(value *MyUnionFieldPatch) *MyUnionPatch {
    x.Patch = value
    return x
}

func (x *MyUnionPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyUnionPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyUnionPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyUnionPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyUnionPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField4(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyUnionPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyUnionPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyUnionPatch) readField4(p thrift.Protocol) error {  // Ensure
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *MyUnionPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyUnionPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyUnionPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyUnionPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyUnionPatch) toString4() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *MyUnionPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

// Deprecated: Use NewMyUnionPatch().GetAssign() instead.
var MyUnionPatch_Assign_DEFAULT = NewMyUnionPatch().GetAssign()

// Deprecated: Use NewMyUnionPatch().GetAssign() instead.
func (x *MyUnionPatch) DefaultGetAssign() *MyUnion {
    if !x.IsSetAssign() {
        return NewMyUnion()
    }
    return x.Assign
}

// Deprecated: Use NewMyUnionPatch().GetPatchPrior() instead.
var MyUnionPatch_PatchPrior_DEFAULT = NewMyUnionPatch().GetPatchPrior()

// Deprecated: Use NewMyUnionPatch().GetPatchPrior() instead.
func (x *MyUnionPatch) DefaultGetPatchPrior() *MyUnionFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyUnionFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyUnionPatch().GetEnsure() instead.
var MyUnionPatch_Ensure_DEFAULT = NewMyUnionPatch().GetEnsure()

// Deprecated: Use NewMyUnionPatch().GetEnsure() instead.
func (x *MyUnionPatch) DefaultGetEnsure() *MyUnion {
    if !x.IsSetEnsure() {
        return NewMyUnion()
    }
    return x.Ensure
}

// Deprecated: Use NewMyUnionPatch().GetPatch() instead.
var MyUnionPatch_Patch_DEFAULT = NewMyUnionPatch().GetPatch()

// Deprecated: Use NewMyUnionPatch().GetPatch() instead.
func (x *MyUnionPatch) DefaultGetPatch() *MyUnionFieldPatch {
    if !x.IsSetPatch() {
        return NewMyUnionFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use MyUnionPatch.Set* methods instead or set the fields directly.
type MyUnionPatchBuilder struct {
    obj *MyUnionPatch
}

func NewMyUnionPatchBuilder() *MyUnionPatchBuilder {
    return &MyUnionPatchBuilder{
        obj: NewMyUnionPatch(),
    }
}

func (x *MyUnionPatchBuilder) Assign(value *MyUnion) *MyUnionPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyUnionPatchBuilder) Clear(value bool) *MyUnionPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyUnionPatchBuilder) PatchPrior(value *MyUnionFieldPatch) *MyUnionPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyUnionPatchBuilder) Ensure(value *MyUnion) *MyUnionPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *MyUnionPatchBuilder) Patch(value *MyUnionFieldPatch) *MyUnionPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyUnionPatchBuilder) Emit() *MyUnionPatch {
    var objCopy MyUnionPatch = *x.obj
    return &objCopy
}

func (x *MyUnionPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnionPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnionPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString4()))
    sb.WriteString(fmt.Sprintf("Patch:%s", x.toString6()))
    sb.WriteString("})")

    return sb.String()
}

type MyUnionFieldPatch struct {
    Option1 *patch.StringPatch `thrift:"option1,1" json:"option1" db:"option1"`
    Option2 *patch.I32Patch `thrift:"option2,2" json:"option2" db:"option2"`
    Option3 *InnerUnionPatch `thrift:"option3,3" json:"option3" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnionFieldPatch{}

func NewMyUnionFieldPatch() *MyUnionFieldPatch {
    return (&MyUnionFieldPatch{}).
        SetOption1NonCompat(*patch.NewStringPatch()).
        SetOption2NonCompat(*patch.NewI32Patch()).
        SetOption3NonCompat(*NewInnerUnionPatch())
}

func (x *MyUnionFieldPatch) GetOption1NonCompat() *patch.StringPatch {
    return x.Option1
}

func (x *MyUnionFieldPatch) GetOption1() *patch.StringPatch {
    if !x.IsSetOption1() {
        return nil
    }

    return x.Option1
}

func (x *MyUnionFieldPatch) GetOption2NonCompat() *patch.I32Patch {
    return x.Option2
}

func (x *MyUnionFieldPatch) GetOption2() *patch.I32Patch {
    if !x.IsSetOption2() {
        return nil
    }

    return x.Option2
}

func (x *MyUnionFieldPatch) GetOption3NonCompat() *InnerUnionPatch {
    return x.Option3
}

func (x *MyUnionFieldPatch) GetOption3() *InnerUnionPatch {
    if !x.IsSetOption3() {
        return nil
    }

    return x.Option3
}

func (x *MyUnionFieldPatch) SetOption1NonCompat(value patch.StringPatch) *MyUnionFieldPatch {
    x.Option1 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption1(value *patch.StringPatch) *MyUnionFieldPatch {
    x.Option1 = value
    return x
}

func (x *MyUnionFieldPatch) SetOption2NonCompat(value patch.I32Patch) *MyUnionFieldPatch {
    x.Option2 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption2(value *patch.I32Patch) *MyUnionFieldPatch {
    x.Option2 = value
    return x
}

func (x *MyUnionFieldPatch) SetOption3NonCompat(value InnerUnionPatch) *MyUnionFieldPatch {
    x.Option3 = &value
    return x
}

func (x *MyUnionFieldPatch) SetOption3(value *InnerUnionPatch) *MyUnionFieldPatch {
    x.Option3 = value
    return x
}

func (x *MyUnionFieldPatch) IsSetOption1() bool {
    return x.Option1 != nil
}

func (x *MyUnionFieldPatch) IsSetOption2() bool {
    return x.Option2 != nil
}

func (x *MyUnionFieldPatch) IsSetOption3() bool {
    return x.Option3 != nil
}

func (x *MyUnionFieldPatch) writeField1(p thrift.Protocol) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOption1NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField2(p thrift.Protocol) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOption2NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField3(p thrift.Protocol) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOption3NonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) readField1(p thrift.Protocol) error {  // Option1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption1NonCompat(result)
    return nil
}

func (x *MyUnionFieldPatch) readField2(p thrift.Protocol) error {  // Option2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption2NonCompat(result)
    return nil
}

func (x *MyUnionFieldPatch) readField3(p thrift.Protocol) error {  // Option3
    result := *NewInnerUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption3NonCompat(result)
    return nil
}

func (x *MyUnionFieldPatch) toString1() string {  // Option1
    return fmt.Sprintf("%v", x.GetOption1NonCompat())
}

func (x *MyUnionFieldPatch) toString2() string {  // Option2
    return fmt.Sprintf("%v", x.GetOption2NonCompat())
}

func (x *MyUnionFieldPatch) toString3() string {  // Option3
    return fmt.Sprintf("%v", x.GetOption3NonCompat())
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption1() instead.
var MyUnionFieldPatch_Option1_DEFAULT = NewMyUnionFieldPatch().GetOption1()

// Deprecated: Use NewMyUnionFieldPatch().GetOption1() instead.
func (x *MyUnionFieldPatch) DefaultGetOption1() *patch.StringPatch {
    if !x.IsSetOption1() {
        return patch.NewStringPatch()
    }
    return x.Option1
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption2() instead.
var MyUnionFieldPatch_Option2_DEFAULT = NewMyUnionFieldPatch().GetOption2()

// Deprecated: Use NewMyUnionFieldPatch().GetOption2() instead.
func (x *MyUnionFieldPatch) DefaultGetOption2() *patch.I32Patch {
    if !x.IsSetOption2() {
        return patch.NewI32Patch()
    }
    return x.Option2
}

// Deprecated: Use NewMyUnionFieldPatch().GetOption3() instead.
var MyUnionFieldPatch_Option3_DEFAULT = NewMyUnionFieldPatch().GetOption3()

// Deprecated: Use NewMyUnionFieldPatch().GetOption3() instead.
func (x *MyUnionFieldPatch) DefaultGetOption3() *InnerUnionPatch {
    if !x.IsSetOption3() {
        return NewInnerUnionPatch()
    }
    return x.Option3
}


// Deprecated: Use MyUnionFieldPatch.Set* methods instead or set the fields directly.
type MyUnionFieldPatchBuilder struct {
    obj *MyUnionFieldPatch
}

func NewMyUnionFieldPatchBuilder() *MyUnionFieldPatchBuilder {
    return &MyUnionFieldPatchBuilder{
        obj: NewMyUnionFieldPatch(),
    }
}

func (x *MyUnionFieldPatchBuilder) Option1(value *patch.StringPatch) *MyUnionFieldPatchBuilder {
    x.obj.Option1 = value
    return x
}

func (x *MyUnionFieldPatchBuilder) Option2(value *patch.I32Patch) *MyUnionFieldPatchBuilder {
    x.obj.Option2 = value
    return x
}

func (x *MyUnionFieldPatchBuilder) Option3(value *InnerUnionPatch) *MyUnionFieldPatchBuilder {
    x.obj.Option3 = value
    return x
}

func (x *MyUnionFieldPatchBuilder) Emit() *MyUnionFieldPatch {
    var objCopy MyUnionFieldPatch = *x.obj
    return &objCopy
}

func (x *MyUnionFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyUnionFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyUnionFieldPatch({")
    sb.WriteString(fmt.Sprintf("Option1:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Option2:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Option3:%s", x.toString3()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructPatch struct {
    Assign *MyStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructPatch{}

func NewMyStructPatch() *MyStructPatch {
    return (&MyStructPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewMyStructFieldPatch()).
        SetEnsureNonCompat(*NewMyStructEnsureStruct()).
        SetPatchNonCompat(*NewMyStructFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *MyStructPatch) GetAssignNonCompat() *MyStruct {
    return x.Assign
}

func (x *MyStructPatch) GetAssign() *MyStruct {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructPatch) GetClear() bool {
    return x.Clear
}

func (x *MyStructPatch) GetPatchPriorNonCompat() *MyStructFieldPatch {
    return x.PatchPrior
}

func (x *MyStructPatch) GetPatchPrior() *MyStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyStructPatch) GetEnsureNonCompat() *MyStructEnsureStruct {
    return x.Ensure
}

func (x *MyStructPatch) GetEnsure() *MyStructEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *MyStructPatch) GetPatchNonCompat() *MyStructFieldPatch {
    return x.Patch
}

func (x *MyStructPatch) GetPatch() *MyStructFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyStructPatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *MyStructPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *MyStructPatch) SetAssignNonCompat(value MyStruct) *MyStructPatch {
    x.Assign = &value
    return x
}

func (x *MyStructPatch) SetAssign(value *MyStruct) *MyStructPatch {
    x.Assign = value
    return x
}

func (x *MyStructPatch) SetClearNonCompat(value bool) *MyStructPatch {
    x.Clear = value
    return x
}

func (x *MyStructPatch) SetClear(value bool) *MyStructPatch {
    x.Clear = value
    return x
}

func (x *MyStructPatch) SetPatchPriorNonCompat(value MyStructFieldPatch) *MyStructPatch {
    x.PatchPrior = &value
    return x
}

func (x *MyStructPatch) SetPatchPrior(value *MyStructFieldPatch) *MyStructPatch {
    x.PatchPrior = value
    return x
}

func (x *MyStructPatch) SetEnsureNonCompat(value MyStructEnsureStruct) *MyStructPatch {
    x.Ensure = &value
    return x
}

func (x *MyStructPatch) SetEnsure(value *MyStructEnsureStruct) *MyStructPatch {
    x.Ensure = value
    return x
}

func (x *MyStructPatch) SetPatchNonCompat(value MyStructFieldPatch) *MyStructPatch {
    x.Patch = &value
    return x
}

func (x *MyStructPatch) SetPatch(value *MyStructFieldPatch) *MyStructPatch {
    x.Patch = value
    return x
}

func (x *MyStructPatch) SetRemoveNonCompat(value patch.FieldIdList) *MyStructPatch {
    x.Remove = value
    return x
}

func (x *MyStructPatch) SetRemove(value patch.FieldIdList) *MyStructPatch {
    x.Remove = value
    return x
}

func (x *MyStructPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyStructPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructPatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyStructPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewMyStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *MyStructPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyStructPatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyStructPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyStructPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *MyStructPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyStructPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewMyStructPatch().GetAssign() instead.
var MyStructPatch_Assign_DEFAULT = NewMyStructPatch().GetAssign()

// Deprecated: Use NewMyStructPatch().GetAssign() instead.
func (x *MyStructPatch) DefaultGetAssign() *MyStruct {
    if !x.IsSetAssign() {
        return NewMyStruct()
    }
    return x.Assign
}

// Deprecated: Use NewMyStructPatch().GetPatchPrior() instead.
var MyStructPatch_PatchPrior_DEFAULT = NewMyStructPatch().GetPatchPrior()

// Deprecated: Use NewMyStructPatch().GetPatchPrior() instead.
func (x *MyStructPatch) DefaultGetPatchPrior() *MyStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewMyStructFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewMyStructPatch().GetEnsure() instead.
var MyStructPatch_Ensure_DEFAULT = NewMyStructPatch().GetEnsure()

// Deprecated: Use NewMyStructPatch().GetEnsure() instead.
func (x *MyStructPatch) DefaultGetEnsure() *MyStructEnsureStruct {
    if !x.IsSetEnsure() {
        return NewMyStructEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewMyStructPatch().GetPatch() instead.
var MyStructPatch_Patch_DEFAULT = NewMyStructPatch().GetPatch()

// Deprecated: Use NewMyStructPatch().GetPatch() instead.
func (x *MyStructPatch) DefaultGetPatch() *MyStructFieldPatch {
    if !x.IsSetPatch() {
        return NewMyStructFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use MyStructPatch.Set* methods instead or set the fields directly.
type MyStructPatchBuilder struct {
    obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder {
    return &MyStructPatchBuilder{
        obj: NewMyStructPatch(),
    }
}

func (x *MyStructPatchBuilder) Assign(value *MyStruct) *MyStructPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructPatchBuilder) Clear(value bool) *MyStructPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructPatchBuilder) PatchPrior(value *MyStructFieldPatch) *MyStructPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyStructPatchBuilder) Ensure(value *MyStructEnsureStruct) *MyStructPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *MyStructPatchBuilder) Patch(value *MyStructFieldPatch) *MyStructPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyStructPatchBuilder) Remove(value patch.FieldIdList) *MyStructPatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyStructPatchBuilder) Emit() *MyStructPatch {
    var objCopy MyStructPatch = *x.obj
    return &objCopy
}

func (x *MyStructPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField10Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField10Patch{}

func NewMyStructField10Patch() *MyStructField10Patch {
    return (&MyStructField10Patch{}).
        SetClearNonCompat(false)
}

func (x *MyStructField10Patch) GetAssignNonCompat() *MyEnum {
    return x.Assign
}

func (x *MyStructField10Patch) GetAssign() MyEnum {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *MyStructField10Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField10Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField10Patch) SetAssignNonCompat(value MyEnum) *MyStructField10Patch {
    x.Assign = &value
    return x
}

func (x *MyStructField10Patch) SetAssign(value *MyEnum) *MyStructField10Patch {
    x.Assign = value
    return x
}

func (x *MyStructField10Patch) SetClearNonCompat(value bool) *MyStructField10Patch {
    x.Clear = value
    return x
}

func (x *MyStructField10Patch) SetClear(value bool) *MyStructField10Patch {
    x.Clear = value
    return x
}

func (x *MyStructField10Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField10Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssignNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) readField1(p thrift.Protocol) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField10Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField10Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.GetAssignNonCompat())
    }
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField10Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

// Deprecated: Use NewMyStructField10Patch().GetAssign() instead.
var MyStructField10Patch_Assign_DEFAULT = NewMyStructField10Patch().GetAssign()


// Deprecated: Use MyStructField10Patch.Set* methods instead or set the fields directly.
type MyStructField10PatchBuilder struct {
    obj *MyStructField10Patch
}

func NewMyStructField10PatchBuilder() *MyStructField10PatchBuilder {
    return &MyStructField10PatchBuilder{
        obj: NewMyStructField10Patch(),
    }
}

func (x *MyStructField10PatchBuilder) Assign(value *MyEnum) *MyStructField10PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField10PatchBuilder) Clear(value bool) *MyStructField10PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField10PatchBuilder) Emit() *MyStructField10Patch {
    var objCopy MyStructField10Patch = *x.obj
    return &objCopy
}

func (x *MyStructField10Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField10Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField10Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField10Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField23Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField23Patch{}

func NewMyStructField23Patch() *MyStructField23Patch {
    return (&MyStructField23Patch{}).
        SetClearNonCompat(false)
}

func (x *MyStructField23Patch) GetAssignNonCompat() *MyEnum {
    return x.Assign
}

func (x *MyStructField23Patch) GetAssign() MyEnum {
    if !x.IsSetAssign() {
        return 0
    }

    return *x.Assign
}

func (x *MyStructField23Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField23Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField23Patch) SetAssignNonCompat(value MyEnum) *MyStructField23Patch {
    x.Assign = &value
    return x
}

func (x *MyStructField23Patch) SetAssign(value *MyEnum) *MyStructField23Patch {
    x.Assign = value
    return x
}

func (x *MyStructField23Patch) SetClearNonCompat(value bool) *MyStructField23Patch {
    x.Clear = value
    return x
}

func (x *MyStructField23Patch) SetClear(value bool) *MyStructField23Patch {
    x.Clear = value
    return x
}

func (x *MyStructField23Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField23Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssignNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) readField1(p thrift.Protocol) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField23Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField23Patch) toString1() string {  // Assign
    if x.IsSetAssign() {
        return fmt.Sprintf("%v", *x.GetAssignNonCompat())
    }
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField23Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

// Deprecated: Use NewMyStructField23Patch().GetAssign() instead.
var MyStructField23Patch_Assign_DEFAULT = NewMyStructField23Patch().GetAssign()


// Deprecated: Use MyStructField23Patch.Set* methods instead or set the fields directly.
type MyStructField23PatchBuilder struct {
    obj *MyStructField23Patch
}

func NewMyStructField23PatchBuilder() *MyStructField23PatchBuilder {
    return &MyStructField23PatchBuilder{
        obj: NewMyStructField23Patch(),
    }
}

func (x *MyStructField23PatchBuilder) Assign(value *MyEnum) *MyStructField23PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField23PatchBuilder) Clear(value bool) *MyStructField23PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField23PatchBuilder) Emit() *MyStructField23Patch {
    var objCopy MyStructField23Patch = *x.obj
    return &objCopy
}

func (x *MyStructField23Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField23Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField23Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField23Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField26Patch struct {
    Assign []int16 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []int16 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int16 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField26Patch{}

func NewMyStructField26Patch() *MyStructField26Patch {
    return (&MyStructField26Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(nil).
        SetAppendNonCompat(nil)
}

func (x *MyStructField26Patch) GetAssignNonCompat() []int16 {
    return x.Assign
}

func (x *MyStructField26Patch) GetAssign() []int16 {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField26Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField26Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField26Patch) GetPrependNonCompat() []int16 {
    return x.Prepend
}

func (x *MyStructField26Patch) GetPrepend() []int16 {
    if !x.IsSetPrepend() {
        return nil
    }

    return x.Prepend
}

func (x *MyStructField26Patch) GetAppendNonCompat() []int16 {
    return x.Append
}

func (x *MyStructField26Patch) GetAppend() []int16 {
    if !x.IsSetAppend() {
        return nil
    }

    return x.Append
}

func (x *MyStructField26Patch) SetAssignNonCompat(value []int16) *MyStructField26Patch {
    x.Assign = value
    return x
}

func (x *MyStructField26Patch) SetAssign(value []int16) *MyStructField26Patch {
    x.Assign = value
    return x
}

func (x *MyStructField26Patch) SetClearNonCompat(value bool) *MyStructField26Patch {
    x.Clear = value
    return x
}

func (x *MyStructField26Patch) SetClear(value bool) *MyStructField26Patch {
    x.Clear = value
    return x
}

func (x *MyStructField26Patch) SetPrependNonCompat(value []int16) *MyStructField26Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField26Patch) SetPrepend(value []int16) *MyStructField26Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField26Patch) SetAppendNonCompat(value []int16) *MyStructField26Patch {
    x.Append = value
    return x
}

func (x *MyStructField26Patch) SetAppend(value []int16) *MyStructField26Patch {
    x.Append = value
    return x
}

func (x *MyStructField26Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField26Patch) IsSetPrepend() bool {
    return x.Prepend != nil
}

func (x *MyStructField26Patch) IsSetAppend() bool {
    return x.Append != nil
}

func (x *MyStructField26Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField8(p thrift.Protocol) error {  // Prepend
    if !x.IsSetPrepend() {
        return nil
    }

    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPrependNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField9(p thrift.Protocol) error {  // Append
    if !x.IsSetAppend() {
        return nil
    }

    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAppendNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField26Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField26Patch) readField8(p thrift.Protocol) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetPrependNonCompat(result)
    return nil
}

func (x *MyStructField26Patch) readField9(p thrift.Protocol) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAppendNonCompat(result)
    return nil
}

func (x *MyStructField26Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField26Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField26Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.GetPrependNonCompat())
}

func (x *MyStructField26Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.GetAppendNonCompat())
}


// Deprecated: Use MyStructField26Patch.Set* methods instead or set the fields directly.
type MyStructField26PatchBuilder struct {
    obj *MyStructField26Patch
}

func NewMyStructField26PatchBuilder() *MyStructField26PatchBuilder {
    return &MyStructField26PatchBuilder{
        obj: NewMyStructField26Patch(),
    }
}

func (x *MyStructField26PatchBuilder) Assign(value []int16) *MyStructField26PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField26PatchBuilder) Clear(value bool) *MyStructField26PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField26PatchBuilder) Prepend(value []int16) *MyStructField26PatchBuilder {
    x.obj.Prepend = value
    return x
}

func (x *MyStructField26PatchBuilder) Append(value []int16) *MyStructField26PatchBuilder {
    x.obj.Append = value
    return x
}

func (x *MyStructField26PatchBuilder) Emit() *MyStructField26Patch {
    var objCopy MyStructField26Patch = *x.obj
    return &objCopy
}

func (x *MyStructField26Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField26Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 8:  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField26Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField26Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField27Patch struct {
    Assign []string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Add []string `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField27Patch{}

func NewMyStructField27Patch() *MyStructField27Patch {
    return (&MyStructField27Patch{}).
        SetClearNonCompat(false).
        SetRemoveNonCompat(nil).
        SetAddNonCompat(nil)
}

func (x *MyStructField27Patch) GetAssignNonCompat() []string {
    return x.Assign
}

func (x *MyStructField27Patch) GetAssign() []string {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField27Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField27Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField27Patch) GetRemoveNonCompat() []string {
    return x.Remove
}

func (x *MyStructField27Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return nil
    }

    return x.Remove
}

func (x *MyStructField27Patch) GetAddNonCompat() []string {
    return x.Add
}

func (x *MyStructField27Patch) GetAdd() []string {
    if !x.IsSetAdd() {
        return nil
    }

    return x.Add
}

func (x *MyStructField27Patch) SetAssignNonCompat(value []string) *MyStructField27Patch {
    x.Assign = value
    return x
}

func (x *MyStructField27Patch) SetAssign(value []string) *MyStructField27Patch {
    x.Assign = value
    return x
}

func (x *MyStructField27Patch) SetClearNonCompat(value bool) *MyStructField27Patch {
    x.Clear = value
    return x
}

func (x *MyStructField27Patch) SetClear(value bool) *MyStructField27Patch {
    x.Clear = value
    return x
}

func (x *MyStructField27Patch) SetRemoveNonCompat(value []string) *MyStructField27Patch {
    x.Remove = value
    return x
}

func (x *MyStructField27Patch) SetRemove(value []string) *MyStructField27Patch {
    x.Remove = value
    return x
}

func (x *MyStructField27Patch) SetAddNonCompat(value []string) *MyStructField27Patch {
    x.Add = value
    return x
}

func (x *MyStructField27Patch) SetAdd(value []string) *MyStructField27Patch {
    x.Add = value
    return x
}

func (x *MyStructField27Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField27Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField27Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField27Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField8(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.SET, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAddNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField27Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField27Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyStructField27Patch) readField8(p thrift.Protocol) error {  // Add
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetAddNonCompat(result)
    return nil
}

func (x *MyStructField27Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField27Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField27Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

func (x *MyStructField27Patch) toString8() string {  // Add
    return fmt.Sprintf("%v", x.GetAddNonCompat())
}


// Deprecated: Use MyStructField27Patch.Set* methods instead or set the fields directly.
type MyStructField27PatchBuilder struct {
    obj *MyStructField27Patch
}

func NewMyStructField27PatchBuilder() *MyStructField27PatchBuilder {
    return &MyStructField27PatchBuilder{
        obj: NewMyStructField27Patch(),
    }
}

func (x *MyStructField27PatchBuilder) Assign(value []string) *MyStructField27PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField27PatchBuilder) Clear(value bool) *MyStructField27PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField27PatchBuilder) Remove(value []string) *MyStructField27PatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyStructField27PatchBuilder) Add(value []string) *MyStructField27PatchBuilder {
    x.obj.Add = value
    return x
}

func (x *MyStructField27PatchBuilder) Emit() *MyStructField27Patch {
    var objCopy MyStructField27Patch = *x.obj
    return &objCopy
}

func (x *MyStructField27Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField27Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField27Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField27Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Add:%s", x.toString8()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField28Patch struct {
    Assign map[string]string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.StringPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]string `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.StringPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]string `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField28Patch{}

func NewMyStructField28Patch() *MyStructField28Patch {
    return (&MyStructField28Patch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(nil).
        SetAddNonCompat(nil).
        SetPatchNonCompat(nil).
        SetRemoveNonCompat(nil).
        SetPutNonCompat(nil)
}

func (x *MyStructField28Patch) GetAssignNonCompat() map[string]string {
    return x.Assign
}

func (x *MyStructField28Patch) GetAssign() map[string]string {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField28Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField28Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField28Patch) GetPatchPriorNonCompat() map[string]*patch.StringPatch {
    return x.PatchPrior
}

func (x *MyStructField28Patch) GetPatchPrior() map[string]*patch.StringPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyStructField28Patch) GetAddNonCompat() map[string]string {
    return x.Add
}

func (x *MyStructField28Patch) GetAdd() map[string]string {
    if !x.IsSetAdd() {
        return nil
    }

    return x.Add
}

func (x *MyStructField28Patch) GetPatchNonCompat() map[string]*patch.StringPatch {
    return x.Patch
}

func (x *MyStructField28Patch) GetPatch() map[string]*patch.StringPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyStructField28Patch) GetRemoveNonCompat() []string {
    return x.Remove
}

func (x *MyStructField28Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return nil
    }

    return x.Remove
}

func (x *MyStructField28Patch) GetPutNonCompat() map[string]string {
    return x.Put
}

func (x *MyStructField28Patch) GetPut() map[string]string {
    if !x.IsSetPut() {
        return nil
    }

    return x.Put
}

func (x *MyStructField28Patch) SetAssignNonCompat(value map[string]string) *MyStructField28Patch {
    x.Assign = value
    return x
}

func (x *MyStructField28Patch) SetAssign(value map[string]string) *MyStructField28Patch {
    x.Assign = value
    return x
}

func (x *MyStructField28Patch) SetClearNonCompat(value bool) *MyStructField28Patch {
    x.Clear = value
    return x
}

func (x *MyStructField28Patch) SetClear(value bool) *MyStructField28Patch {
    x.Clear = value
    return x
}

func (x *MyStructField28Patch) SetPatchPriorNonCompat(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField28Patch) SetPatchPrior(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField28Patch) SetAddNonCompat(value map[string]string) *MyStructField28Patch {
    x.Add = value
    return x
}

func (x *MyStructField28Patch) SetAdd(value map[string]string) *MyStructField28Patch {
    x.Add = value
    return x
}

func (x *MyStructField28Patch) SetPatchNonCompat(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.Patch = value
    return x
}

func (x *MyStructField28Patch) SetPatch(value map[string]*patch.StringPatch) *MyStructField28Patch {
    x.Patch = value
    return x
}

func (x *MyStructField28Patch) SetRemoveNonCompat(value []string) *MyStructField28Patch {
    x.Remove = value
    return x
}

func (x *MyStructField28Patch) SetRemove(value []string) *MyStructField28Patch {
    x.Remove = value
    return x
}

func (x *MyStructField28Patch) SetPutNonCompat(value map[string]string) *MyStructField28Patch {
    x.Put = value
    return x
}

func (x *MyStructField28Patch) SetPut(value map[string]string) *MyStructField28Patch {
    x.Put = value
    return x
}

func (x *MyStructField28Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField28Patch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField28Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField28Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField28Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField28Patch) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField28Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAddNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPutNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAddNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPutNonCompat(result)
    return nil
}

func (x *MyStructField28Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField28Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField28Patch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyStructField28Patch) toString5() string {  // Add
    return fmt.Sprintf("%v", x.GetAddNonCompat())
}

func (x *MyStructField28Patch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyStructField28Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

func (x *MyStructField28Patch) toString9() string {  // Put
    return fmt.Sprintf("%v", x.GetPutNonCompat())
}


// Deprecated: Use MyStructField28Patch.Set* methods instead or set the fields directly.
type MyStructField28PatchBuilder struct {
    obj *MyStructField28Patch
}

func NewMyStructField28PatchBuilder() *MyStructField28PatchBuilder {
    return &MyStructField28PatchBuilder{
        obj: NewMyStructField28Patch(),
    }
}

func (x *MyStructField28PatchBuilder) Assign(value map[string]string) *MyStructField28PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField28PatchBuilder) Clear(value bool) *MyStructField28PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField28PatchBuilder) PatchPrior(value map[string]*patch.StringPatch) *MyStructField28PatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyStructField28PatchBuilder) Add(value map[string]string) *MyStructField28PatchBuilder {
    x.obj.Add = value
    return x
}

func (x *MyStructField28PatchBuilder) Patch(value map[string]*patch.StringPatch) *MyStructField28PatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyStructField28PatchBuilder) Remove(value []string) *MyStructField28PatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyStructField28PatchBuilder) Put(value map[string]string) *MyStructField28PatchBuilder {
    x.obj.Put = value
    return x
}

func (x *MyStructField28PatchBuilder) Emit() *MyStructField28Patch {
    var objCopy MyStructField28Patch = *x.obj
    return &objCopy
}

func (x *MyStructField28Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField28Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField28Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField28Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField29Patch struct {
    Assign []map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Prepend []map[string]int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []map[string]int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField29Patch{}

func NewMyStructField29Patch() *MyStructField29Patch {
    return (&MyStructField29Patch{}).
        SetClearNonCompat(false).
        SetPrependNonCompat(nil).
        SetAppendNonCompat(nil)
}

func (x *MyStructField29Patch) GetAssignNonCompat() []map[string]int32 {
    return x.Assign
}

func (x *MyStructField29Patch) GetAssign() []map[string]int32 {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField29Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField29Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField29Patch) GetPrependNonCompat() []map[string]int32 {
    return x.Prepend
}

func (x *MyStructField29Patch) GetPrepend() []map[string]int32 {
    if !x.IsSetPrepend() {
        return nil
    }

    return x.Prepend
}

func (x *MyStructField29Patch) GetAppendNonCompat() []map[string]int32 {
    return x.Append
}

func (x *MyStructField29Patch) GetAppend() []map[string]int32 {
    if !x.IsSetAppend() {
        return nil
    }

    return x.Append
}

func (x *MyStructField29Patch) SetAssignNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Assign = value
    return x
}

func (x *MyStructField29Patch) SetAssign(value []map[string]int32) *MyStructField29Patch {
    x.Assign = value
    return x
}

func (x *MyStructField29Patch) SetClearNonCompat(value bool) *MyStructField29Patch {
    x.Clear = value
    return x
}

func (x *MyStructField29Patch) SetClear(value bool) *MyStructField29Patch {
    x.Clear = value
    return x
}

func (x *MyStructField29Patch) SetPrependNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField29Patch) SetPrepend(value []map[string]int32) *MyStructField29Patch {
    x.Prepend = value
    return x
}

func (x *MyStructField29Patch) SetAppendNonCompat(value []map[string]int32) *MyStructField29Patch {
    x.Append = value
    return x
}

func (x *MyStructField29Patch) SetAppend(value []map[string]int32) *MyStructField29Patch {
    x.Append = value
    return x
}

func (x *MyStructField29Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField29Patch) IsSetPrepend() bool {
    return x.Prepend != nil
}

func (x *MyStructField29Patch) IsSetAppend() bool {
    return x.Append != nil
}

func (x *MyStructField29Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField8(p thrift.Protocol) error {  // Prepend
    if !x.IsSetPrepend() {
        return nil
    }

    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPrependNonCompat()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField9(p thrift.Protocol) error {  // Append
    if !x.IsSetAppend() {
        return nil
    }

    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAppendNonCompat()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField29Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField29Patch) readField8(p thrift.Protocol) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetPrependNonCompat(result)
    return nil
}

func (x *MyStructField29Patch) readField9(p thrift.Protocol) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAppendNonCompat(result)
    return nil
}

func (x *MyStructField29Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField29Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField29Patch) toString8() string {  // Prepend
    return fmt.Sprintf("%v", x.GetPrependNonCompat())
}

func (x *MyStructField29Patch) toString9() string {  // Append
    return fmt.Sprintf("%v", x.GetAppendNonCompat())
}


// Deprecated: Use MyStructField29Patch.Set* methods instead or set the fields directly.
type MyStructField29PatchBuilder struct {
    obj *MyStructField29Patch
}

func NewMyStructField29PatchBuilder() *MyStructField29PatchBuilder {
    return &MyStructField29PatchBuilder{
        obj: NewMyStructField29Patch(),
    }
}

func (x *MyStructField29PatchBuilder) Assign(value []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField29PatchBuilder) Clear(value bool) *MyStructField29PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField29PatchBuilder) Prepend(value []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Prepend = value
    return x
}

func (x *MyStructField29PatchBuilder) Append(value []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Append = value
    return x
}

func (x *MyStructField29PatchBuilder) Emit() *MyStructField29Patch {
    var objCopy MyStructField29Patch = *x.obj
    return &objCopy
}

func (x *MyStructField29Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField29Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 8:  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField29Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField29Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("Prepend:%s ", x.toString8()))
    sb.WriteString(fmt.Sprintf("Append:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField30Patch struct {
    Assign map[string]map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*MyStructField30Patch1 `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*MyStructField30Patch1 `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField30Patch{}

func NewMyStructField30Patch() *MyStructField30Patch {
    return (&MyStructField30Patch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(nil).
        SetAddNonCompat(nil).
        SetPatchNonCompat(nil).
        SetRemoveNonCompat(nil).
        SetPutNonCompat(nil)
}

func (x *MyStructField30Patch) GetAssignNonCompat() map[string]map[string]int32 {
    return x.Assign
}

func (x *MyStructField30Patch) GetAssign() map[string]map[string]int32 {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField30Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField30Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch) GetPatchPriorNonCompat() map[string]*MyStructField30Patch1 {
    return x.PatchPrior
}

func (x *MyStructField30Patch) GetPatchPrior() map[string]*MyStructField30Patch1 {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyStructField30Patch) GetAddNonCompat() map[string]map[string]int32 {
    return x.Add
}

func (x *MyStructField30Patch) GetAdd() map[string]map[string]int32 {
    if !x.IsSetAdd() {
        return nil
    }

    return x.Add
}

func (x *MyStructField30Patch) GetPatchNonCompat() map[string]*MyStructField30Patch1 {
    return x.Patch
}

func (x *MyStructField30Patch) GetPatch() map[string]*MyStructField30Patch1 {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyStructField30Patch) GetRemoveNonCompat() []string {
    return x.Remove
}

func (x *MyStructField30Patch) GetRemove() []string {
    if !x.IsSetRemove() {
        return nil
    }

    return x.Remove
}

func (x *MyStructField30Patch) GetPutNonCompat() map[string]map[string]int32 {
    return x.Put
}

func (x *MyStructField30Patch) GetPut() map[string]map[string]int32 {
    if !x.IsSetPut() {
        return nil
    }

    return x.Put
}

func (x *MyStructField30Patch) SetAssignNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch) SetAssign(value map[string]map[string]int32) *MyStructField30Patch {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch) SetClearNonCompat(value bool) *MyStructField30Patch {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch) SetClear(value bool) *MyStructField30Patch {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch) SetPatchPriorNonCompat(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch) SetPatchPrior(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch) SetAddNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Add = value
    return x
}

func (x *MyStructField30Patch) SetAdd(value map[string]map[string]int32) *MyStructField30Patch {
    x.Add = value
    return x
}

func (x *MyStructField30Patch) SetPatchNonCompat(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch) SetPatch(value map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch) SetRemoveNonCompat(value []string) *MyStructField30Patch {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch) SetRemove(value []string) *MyStructField30Patch {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch) SetPutNonCompat(value map[string]map[string]int32) *MyStructField30Patch {
    x.Put = value
    return x
}

func (x *MyStructField30Patch) SetPut(value map[string]map[string]int32) *MyStructField30Patch {
    x.Put = value
    return x
}

func (x *MyStructField30Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField30Patch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField30Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField30Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField30Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField30Patch) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField30Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAddNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPutNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAddNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPutNonCompat(result)
    return nil
}

func (x *MyStructField30Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField30Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField30Patch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyStructField30Patch) toString5() string {  // Add
    return fmt.Sprintf("%v", x.GetAddNonCompat())
}

func (x *MyStructField30Patch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyStructField30Patch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

func (x *MyStructField30Patch) toString9() string {  // Put
    return fmt.Sprintf("%v", x.GetPutNonCompat())
}


// Deprecated: Use MyStructField30Patch.Set* methods instead or set the fields directly.
type MyStructField30PatchBuilder struct {
    obj *MyStructField30Patch
}

func NewMyStructField30PatchBuilder() *MyStructField30PatchBuilder {
    return &MyStructField30PatchBuilder{
        obj: NewMyStructField30Patch(),
    }
}

func (x *MyStructField30PatchBuilder) Assign(value map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField30PatchBuilder) Clear(value bool) *MyStructField30PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField30PatchBuilder) PatchPrior(value map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyStructField30PatchBuilder) Add(value map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Add = value
    return x
}

func (x *MyStructField30PatchBuilder) Patch(value map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *MyStructField30PatchBuilder) Remove(value []string) *MyStructField30PatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *MyStructField30PatchBuilder) Put(value map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Put = value
    return x
}

func (x *MyStructField30PatchBuilder) Emit() *MyStructField30Patch {
    var objCopy MyStructField30Patch = *x.obj
    return &objCopy
}

func (x *MyStructField30Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField30Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField30Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField30Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructField30Patch1 struct {
    Assign map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.I32Patch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.I32Patch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField30Patch1{}

func NewMyStructField30Patch1() *MyStructField30Patch1 {
    return (&MyStructField30Patch1{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(nil).
        SetAddNonCompat(nil).
        SetPatchNonCompat(nil).
        SetRemoveNonCompat(nil).
        SetPutNonCompat(nil)
}

func (x *MyStructField30Patch1) GetAssignNonCompat() map[string]int32 {
    return x.Assign
}

func (x *MyStructField30Patch1) GetAssign() map[string]int32 {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *MyStructField30Patch1) GetClearNonCompat() bool {
    return x.Clear
}

func (x *MyStructField30Patch1) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch1) GetPatchPriorNonCompat() map[string]*patch.I32Patch {
    return x.PatchPrior
}

func (x *MyStructField30Patch1) GetPatchPrior() map[string]*patch.I32Patch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *MyStructField30Patch1) GetAddNonCompat() map[string]int32 {
    return x.Add
}

func (x *MyStructField30Patch1) GetAdd() map[string]int32 {
    if !x.IsSetAdd() {
        return nil
    }

    return x.Add
}

func (x *MyStructField30Patch1) GetPatchNonCompat() map[string]*patch.I32Patch {
    return x.Patch
}

func (x *MyStructField30Patch1) GetPatch() map[string]*patch.I32Patch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *MyStructField30Patch1) GetRemoveNonCompat() []string {
    return x.Remove
}

func (x *MyStructField30Patch1) GetRemove() []string {
    if !x.IsSetRemove() {
        return nil
    }

    return x.Remove
}

func (x *MyStructField30Patch1) GetPutNonCompat() map[string]int32 {
    return x.Put
}

func (x *MyStructField30Patch1) GetPut() map[string]int32 {
    if !x.IsSetPut() {
        return nil
    }

    return x.Put
}

func (x *MyStructField30Patch1) SetAssignNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch1) SetAssign(value map[string]int32) *MyStructField30Patch1 {
    x.Assign = value
    return x
}

func (x *MyStructField30Patch1) SetClearNonCompat(value bool) *MyStructField30Patch1 {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch1) SetClear(value bool) *MyStructField30Patch1 {
    x.Clear = value
    return x
}

func (x *MyStructField30Patch1) SetPatchPriorNonCompat(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch1) SetPatchPrior(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.PatchPrior = value
    return x
}

func (x *MyStructField30Patch1) SetAddNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Add = value
    return x
}

func (x *MyStructField30Patch1) SetAdd(value map[string]int32) *MyStructField30Patch1 {
    x.Add = value
    return x
}

func (x *MyStructField30Patch1) SetPatchNonCompat(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch1) SetPatch(value map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.Patch = value
    return x
}

func (x *MyStructField30Patch1) SetRemoveNonCompat(value []string) *MyStructField30Patch1 {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch1) SetRemove(value []string) *MyStructField30Patch1 {
    x.Remove = value
    return x
}

func (x *MyStructField30Patch1) SetPutNonCompat(value map[string]int32) *MyStructField30Patch1 {
    x.Put = value
    return x
}

func (x *MyStructField30Patch1) SetPut(value map[string]int32) *MyStructField30Patch1 {
    x.Put = value
    return x
}

func (x *MyStructField30Patch1) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *MyStructField30Patch1) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField30Patch1) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField30Patch1) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField30Patch1) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField30Patch1) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField30Patch1) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAddNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPutNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAddNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPutNonCompat(result)
    return nil
}

func (x *MyStructField30Patch1) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *MyStructField30Patch1) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *MyStructField30Patch1) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *MyStructField30Patch1) toString5() string {  // Add
    return fmt.Sprintf("%v", x.GetAddNonCompat())
}

func (x *MyStructField30Patch1) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *MyStructField30Patch1) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

func (x *MyStructField30Patch1) toString9() string {  // Put
    return fmt.Sprintf("%v", x.GetPutNonCompat())
}


// Deprecated: Use MyStructField30Patch1.Set* methods instead or set the fields directly.
type MyStructField30Patch1Builder struct {
    obj *MyStructField30Patch1
}

func NewMyStructField30Patch1Builder() *MyStructField30Patch1Builder {
    return &MyStructField30Patch1Builder{
        obj: NewMyStructField30Patch1(),
    }
}

func (x *MyStructField30Patch1Builder) Assign(value map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Assign = value
    return x
}

func (x *MyStructField30Patch1Builder) Clear(value bool) *MyStructField30Patch1Builder {
    x.obj.Clear = value
    return x
}

func (x *MyStructField30Patch1Builder) PatchPrior(value map[string]*patch.I32Patch) *MyStructField30Patch1Builder {
    x.obj.PatchPrior = value
    return x
}

func (x *MyStructField30Patch1Builder) Add(value map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Add = value
    return x
}

func (x *MyStructField30Patch1Builder) Patch(value map[string]*patch.I32Patch) *MyStructField30Patch1Builder {
    x.obj.Patch = value
    return x
}

func (x *MyStructField30Patch1Builder) Remove(value []string) *MyStructField30Patch1Builder {
    x.obj.Remove = value
    return x
}

func (x *MyStructField30Patch1Builder) Put(value map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Put = value
    return x
}

func (x *MyStructField30Patch1Builder) Emit() *MyStructField30Patch1 {
    var objCopy MyStructField30Patch1 = *x.obj
    return &objCopy
}

func (x *MyStructField30Patch1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField30Patch1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructField30Patch1) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructField30Patch1({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Add:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s ", x.toString7()))
    sb.WriteString(fmt.Sprintf("Put:%s", x.toString9()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructFieldPatch struct {
    StructWithCustomDefault *MyDataWithCustomDefaultPatch `thrift:"structWithCustomDefault,-32" json:"structWithCustomDefault" db:"structWithCustomDefault"`
    I32WithCustomDefault *patch.I32Patch `thrift:"i32WithCustomDefault,-31" json:"i32WithCustomDefault" db:"i32WithCustomDefault"`
    MapMap *MyStructField30Patch `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    ListMap *MyStructField29Patch `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    OptMapVal *MyStructField28Patch `thrift:"optMapVal,-28" json:"optMapVal" db:"optMapVal"`
    OptSetVal *MyStructField27Patch `thrift:"optSetVal,-27" json:"optSetVal" db:"optSetVal"`
    OptListVal *MyStructField26Patch `thrift:"optListVal,-26" json:"optListVal" db:"optListVal"`
    OptLateStructVal *LateDefStructPatch `thrift:"optLateStructVal,-25" json:"optLateStructVal" db:"optLateStructVal"`
    OptStructVal *MyDataPatch `thrift:"optStructVal,-24" json:"optStructVal" db:"optStructVal"`
    OptEnumVal *MyStructField23Patch `thrift:"optEnumVal,-23" json:"optEnumVal" db:"optEnumVal"`
    OptBinaryVal *patch.BinaryPatch `thrift:"optBinaryVal,-22" json:"optBinaryVal" db:"optBinaryVal"`
    OptStringVal *patch.StringPatch `thrift:"optStringVal,-21" json:"optStringVal" db:"optStringVal"`
    OptDoubleVal *patch.DoublePatch `thrift:"optDoubleVal,-20" json:"optDoubleVal" db:"optDoubleVal"`
    OptFloatVal *patch.FloatPatch `thrift:"optFloatVal,-19" json:"optFloatVal" db:"optFloatVal"`
    OptI64Val *patch.I64Patch `thrift:"optI64Val,-18" json:"optI64Val" db:"optI64Val"`
    OptI32Val *patch.I32Patch `thrift:"optI32Val,-17" json:"optI32Val" db:"optI32Val"`
    OptI16Val *patch.I16Patch `thrift:"optI16Val,-16" json:"optI16Val" db:"optI16Val"`
    OptByteVal *patch.BytePatch `thrift:"optByteVal,-15" json:"optByteVal" db:"optByteVal"`
    OptBoolVal *patch.BoolPatch `thrift:"optBoolVal,-14" json:"optBoolVal" db:"optBoolVal"`
    LateStructVal *LateDefStructPatch `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    UnionVal *MyUnionPatch `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    StructVal *MyDataPatch `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    EnumVal *MyStructField10Patch `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    BinaryVal *patch.BinaryPatch `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    StringVal *patch.StringPatch `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    DoubleVal *patch.DoublePatch `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    FloatVal *patch.FloatPatch `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    I64Val *patch.I64Patch `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    I32Val *patch.I32Patch `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I16Val *patch.I16Patch `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    ByteVal *patch.BytePatch `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    BoolVal *patch.BoolPatch `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    StructWithFieldCustomDefault *MyDataPatch `thrift:"structWithFieldCustomDefault,1" json:"structWithFieldCustomDefault" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructFieldPatch{}

func NewMyStructFieldPatch() *MyStructFieldPatch {
    return (&MyStructFieldPatch{}).
        SetStructWithCustomDefaultNonCompat(*NewMyDataWithCustomDefaultPatch()).
        SetI32WithCustomDefaultNonCompat(*patch.NewI32Patch()).
        SetMapMapNonCompat(*NewMyStructField30Patch()).
        SetListMapNonCompat(*NewMyStructField29Patch()).
        SetOptMapValNonCompat(*NewMyStructField28Patch()).
        SetOptSetValNonCompat(*NewMyStructField27Patch()).
        SetOptListValNonCompat(*NewMyStructField26Patch()).
        SetOptLateStructValNonCompat(*NewLateDefStructPatch()).
        SetOptStructValNonCompat(*NewMyDataPatch()).
        SetOptEnumValNonCompat(*NewMyStructField23Patch()).
        SetOptBinaryValNonCompat(*patch.NewBinaryPatch()).
        SetOptStringValNonCompat(*patch.NewStringPatch()).
        SetOptDoubleValNonCompat(*patch.NewDoublePatch()).
        SetOptFloatValNonCompat(*patch.NewFloatPatch()).
        SetOptI64ValNonCompat(*patch.NewI64Patch()).
        SetOptI32ValNonCompat(*patch.NewI32Patch()).
        SetOptI16ValNonCompat(*patch.NewI16Patch()).
        SetOptByteValNonCompat(*patch.NewBytePatch()).
        SetOptBoolValNonCompat(*patch.NewBoolPatch()).
        SetLateStructValNonCompat(*NewLateDefStructPatch()).
        SetUnionValNonCompat(*NewMyUnionPatch()).
        SetStructValNonCompat(*NewMyDataPatch()).
        SetEnumValNonCompat(*NewMyStructField10Patch()).
        SetBinaryValNonCompat(*patch.NewBinaryPatch()).
        SetStringValNonCompat(*patch.NewStringPatch()).
        SetDoubleValNonCompat(*patch.NewDoublePatch()).
        SetFloatValNonCompat(*patch.NewFloatPatch()).
        SetI64ValNonCompat(*patch.NewI64Patch()).
        SetI32ValNonCompat(*patch.NewI32Patch()).
        SetI16ValNonCompat(*patch.NewI16Patch()).
        SetByteValNonCompat(*patch.NewBytePatch()).
        SetBoolValNonCompat(*patch.NewBoolPatch()).
        SetStructWithFieldCustomDefaultNonCompat(*NewMyDataPatch())
}

func (x *MyStructFieldPatch) GetStructWithCustomDefaultNonCompat() *MyDataWithCustomDefaultPatch {
    return x.StructWithCustomDefault
}

func (x *MyStructFieldPatch) GetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStructFieldPatch) GetI32WithCustomDefaultNonCompat() *patch.I32Patch {
    return x.I32WithCustomDefault
}

func (x *MyStructFieldPatch) GetI32WithCustomDefault() *patch.I32Patch {
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    return x.I32WithCustomDefault
}

func (x *MyStructFieldPatch) GetMapMapNonCompat() *MyStructField30Patch {
    return x.MapMap
}

func (x *MyStructFieldPatch) GetMapMap() *MyStructField30Patch {
    if !x.IsSetMapMap() {
        return nil
    }

    return x.MapMap
}

func (x *MyStructFieldPatch) GetListMapNonCompat() *MyStructField29Patch {
    return x.ListMap
}

func (x *MyStructFieldPatch) GetListMap() *MyStructField29Patch {
    if !x.IsSetListMap() {
        return nil
    }

    return x.ListMap
}

func (x *MyStructFieldPatch) GetOptMapValNonCompat() *MyStructField28Patch {
    return x.OptMapVal
}

func (x *MyStructFieldPatch) GetOptMapVal() *MyStructField28Patch {
    if !x.IsSetOptMapVal() {
        return nil
    }

    return x.OptMapVal
}

func (x *MyStructFieldPatch) GetOptSetValNonCompat() *MyStructField27Patch {
    return x.OptSetVal
}

func (x *MyStructFieldPatch) GetOptSetVal() *MyStructField27Patch {
    if !x.IsSetOptSetVal() {
        return nil
    }

    return x.OptSetVal
}

func (x *MyStructFieldPatch) GetOptListValNonCompat() *MyStructField26Patch {
    return x.OptListVal
}

func (x *MyStructFieldPatch) GetOptListVal() *MyStructField26Patch {
    if !x.IsSetOptListVal() {
        return nil
    }

    return x.OptListVal
}

func (x *MyStructFieldPatch) GetOptLateStructValNonCompat() *LateDefStructPatch {
    return x.OptLateStructVal
}

func (x *MyStructFieldPatch) GetOptLateStructVal() *LateDefStructPatch {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStructFieldPatch) GetOptStructValNonCompat() *MyDataPatch {
    return x.OptStructVal
}

func (x *MyStructFieldPatch) GetOptStructVal() *MyDataPatch {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStructFieldPatch) GetOptEnumValNonCompat() *MyStructField23Patch {
    return x.OptEnumVal
}

func (x *MyStructFieldPatch) GetOptEnumVal() *MyStructField23Patch {
    if !x.IsSetOptEnumVal() {
        return nil
    }

    return x.OptEnumVal
}

func (x *MyStructFieldPatch) GetOptBinaryValNonCompat() *patch.BinaryPatch {
    return x.OptBinaryVal
}

func (x *MyStructFieldPatch) GetOptBinaryVal() *patch.BinaryPatch {
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    return x.OptBinaryVal
}

func (x *MyStructFieldPatch) GetOptStringValNonCompat() *patch.StringPatch {
    return x.OptStringVal
}

func (x *MyStructFieldPatch) GetOptStringVal() *patch.StringPatch {
    if !x.IsSetOptStringVal() {
        return nil
    }

    return x.OptStringVal
}

func (x *MyStructFieldPatch) GetOptDoubleValNonCompat() *patch.DoublePatch {
    return x.OptDoubleVal
}

func (x *MyStructFieldPatch) GetOptDoubleVal() *patch.DoublePatch {
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    return x.OptDoubleVal
}

func (x *MyStructFieldPatch) GetOptFloatValNonCompat() *patch.FloatPatch {
    return x.OptFloatVal
}

func (x *MyStructFieldPatch) GetOptFloatVal() *patch.FloatPatch {
    if !x.IsSetOptFloatVal() {
        return nil
    }

    return x.OptFloatVal
}

func (x *MyStructFieldPatch) GetOptI64ValNonCompat() *patch.I64Patch {
    return x.OptI64Val
}

func (x *MyStructFieldPatch) GetOptI64Val() *patch.I64Patch {
    if !x.IsSetOptI64Val() {
        return nil
    }

    return x.OptI64Val
}

func (x *MyStructFieldPatch) GetOptI32ValNonCompat() *patch.I32Patch {
    return x.OptI32Val
}

func (x *MyStructFieldPatch) GetOptI32Val() *patch.I32Patch {
    if !x.IsSetOptI32Val() {
        return nil
    }

    return x.OptI32Val
}

func (x *MyStructFieldPatch) GetOptI16ValNonCompat() *patch.I16Patch {
    return x.OptI16Val
}

func (x *MyStructFieldPatch) GetOptI16Val() *patch.I16Patch {
    if !x.IsSetOptI16Val() {
        return nil
    }

    return x.OptI16Val
}

func (x *MyStructFieldPatch) GetOptByteValNonCompat() *patch.BytePatch {
    return x.OptByteVal
}

func (x *MyStructFieldPatch) GetOptByteVal() *patch.BytePatch {
    if !x.IsSetOptByteVal() {
        return nil
    }

    return x.OptByteVal
}

func (x *MyStructFieldPatch) GetOptBoolValNonCompat() *patch.BoolPatch {
    return x.OptBoolVal
}

func (x *MyStructFieldPatch) GetOptBoolVal() *patch.BoolPatch {
    if !x.IsSetOptBoolVal() {
        return nil
    }

    return x.OptBoolVal
}

func (x *MyStructFieldPatch) GetLateStructValNonCompat() *LateDefStructPatch {
    return x.LateStructVal
}

func (x *MyStructFieldPatch) GetLateStructVal() *LateDefStructPatch {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStructFieldPatch) GetUnionValNonCompat() *MyUnionPatch {
    return x.UnionVal
}

func (x *MyStructFieldPatch) GetUnionVal() *MyUnionPatch {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStructFieldPatch) GetStructValNonCompat() *MyDataPatch {
    return x.StructVal
}

func (x *MyStructFieldPatch) GetStructVal() *MyDataPatch {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStructFieldPatch) GetEnumValNonCompat() *MyStructField10Patch {
    return x.EnumVal
}

func (x *MyStructFieldPatch) GetEnumVal() *MyStructField10Patch {
    if !x.IsSetEnumVal() {
        return nil
    }

    return x.EnumVal
}

func (x *MyStructFieldPatch) GetBinaryValNonCompat() *patch.BinaryPatch {
    return x.BinaryVal
}

func (x *MyStructFieldPatch) GetBinaryVal() *patch.BinaryPatch {
    if !x.IsSetBinaryVal() {
        return nil
    }

    return x.BinaryVal
}

func (x *MyStructFieldPatch) GetStringValNonCompat() *patch.StringPatch {
    return x.StringVal
}

func (x *MyStructFieldPatch) GetStringVal() *patch.StringPatch {
    if !x.IsSetStringVal() {
        return nil
    }

    return x.StringVal
}

func (x *MyStructFieldPatch) GetDoubleValNonCompat() *patch.DoublePatch {
    return x.DoubleVal
}

func (x *MyStructFieldPatch) GetDoubleVal() *patch.DoublePatch {
    if !x.IsSetDoubleVal() {
        return nil
    }

    return x.DoubleVal
}

func (x *MyStructFieldPatch) GetFloatValNonCompat() *patch.FloatPatch {
    return x.FloatVal
}

func (x *MyStructFieldPatch) GetFloatVal() *patch.FloatPatch {
    if !x.IsSetFloatVal() {
        return nil
    }

    return x.FloatVal
}

func (x *MyStructFieldPatch) GetI64ValNonCompat() *patch.I64Patch {
    return x.I64Val
}

func (x *MyStructFieldPatch) GetI64Val() *patch.I64Patch {
    if !x.IsSetI64Val() {
        return nil
    }

    return x.I64Val
}

func (x *MyStructFieldPatch) GetI32ValNonCompat() *patch.I32Patch {
    return x.I32Val
}

func (x *MyStructFieldPatch) GetI32Val() *patch.I32Patch {
    if !x.IsSetI32Val() {
        return nil
    }

    return x.I32Val
}

func (x *MyStructFieldPatch) GetI16ValNonCompat() *patch.I16Patch {
    return x.I16Val
}

func (x *MyStructFieldPatch) GetI16Val() *patch.I16Patch {
    if !x.IsSetI16Val() {
        return nil
    }

    return x.I16Val
}

func (x *MyStructFieldPatch) GetByteValNonCompat() *patch.BytePatch {
    return x.ByteVal
}

func (x *MyStructFieldPatch) GetByteVal() *patch.BytePatch {
    if !x.IsSetByteVal() {
        return nil
    }

    return x.ByteVal
}

func (x *MyStructFieldPatch) GetBoolValNonCompat() *patch.BoolPatch {
    return x.BoolVal
}

func (x *MyStructFieldPatch) GetBoolVal() *patch.BoolPatch {
    if !x.IsSetBoolVal() {
        return nil
    }

    return x.BoolVal
}

func (x *MyStructFieldPatch) GetStructWithFieldCustomDefaultNonCompat() *MyDataPatch {
    return x.StructWithFieldCustomDefault
}

func (x *MyStructFieldPatch) GetStructWithFieldCustomDefault() *MyDataPatch {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStructFieldPatch) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefaultPatch) *MyStructFieldPatch {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetStructWithCustomDefault(value *MyDataWithCustomDefaultPatch) *MyStructFieldPatch {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) SetI32WithCustomDefaultNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.I32WithCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetI32WithCustomDefault(value *patch.I32Patch) *MyStructFieldPatch {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) SetMapMapNonCompat(value MyStructField30Patch) *MyStructFieldPatch {
    x.MapMap = &value
    return x
}

func (x *MyStructFieldPatch) SetMapMap(value *MyStructField30Patch) *MyStructFieldPatch {
    x.MapMap = value
    return x
}

func (x *MyStructFieldPatch) SetListMapNonCompat(value MyStructField29Patch) *MyStructFieldPatch {
    x.ListMap = &value
    return x
}

func (x *MyStructFieldPatch) SetListMap(value *MyStructField29Patch) *MyStructFieldPatch {
    x.ListMap = value
    return x
}

func (x *MyStructFieldPatch) SetOptMapValNonCompat(value MyStructField28Patch) *MyStructFieldPatch {
    x.OptMapVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptMapVal(value *MyStructField28Patch) *MyStructFieldPatch {
    x.OptMapVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptSetValNonCompat(value MyStructField27Patch) *MyStructFieldPatch {
    x.OptSetVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptSetVal(value *MyStructField27Patch) *MyStructFieldPatch {
    x.OptSetVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptListValNonCompat(value MyStructField26Patch) *MyStructFieldPatch {
    x.OptListVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptListVal(value *MyStructField26Patch) *MyStructFieldPatch {
    x.OptListVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptLateStructValNonCompat(value LateDefStructPatch) *MyStructFieldPatch {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptLateStructVal(value *LateDefStructPatch) *MyStructFieldPatch {
    x.OptLateStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptStructValNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.OptStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptStructVal(value *MyDataPatch) *MyStructFieldPatch {
    x.OptStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptEnumValNonCompat(value MyStructField23Patch) *MyStructFieldPatch {
    x.OptEnumVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptEnumVal(value *MyStructField23Patch) *MyStructFieldPatch {
    x.OptEnumVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptBinaryValNonCompat(value patch.BinaryPatch) *MyStructFieldPatch {
    x.OptBinaryVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptBinaryVal(value *patch.BinaryPatch) *MyStructFieldPatch {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptStringValNonCompat(value patch.StringPatch) *MyStructFieldPatch {
    x.OptStringVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptStringVal(value *patch.StringPatch) *MyStructFieldPatch {
    x.OptStringVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptDoubleValNonCompat(value patch.DoublePatch) *MyStructFieldPatch {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptDoubleVal(value *patch.DoublePatch) *MyStructFieldPatch {
    x.OptDoubleVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptFloatValNonCompat(value patch.FloatPatch) *MyStructFieldPatch {
    x.OptFloatVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptFloatVal(value *patch.FloatPatch) *MyStructFieldPatch {
    x.OptFloatVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptI64ValNonCompat(value patch.I64Patch) *MyStructFieldPatch {
    x.OptI64Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI64Val(value *patch.I64Patch) *MyStructFieldPatch {
    x.OptI64Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptI32ValNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.OptI32Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI32Val(value *patch.I32Patch) *MyStructFieldPatch {
    x.OptI32Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptI16ValNonCompat(value patch.I16Patch) *MyStructFieldPatch {
    x.OptI16Val = &value
    return x
}

func (x *MyStructFieldPatch) SetOptI16Val(value *patch.I16Patch) *MyStructFieldPatch {
    x.OptI16Val = value
    return x
}

func (x *MyStructFieldPatch) SetOptByteValNonCompat(value patch.BytePatch) *MyStructFieldPatch {
    x.OptByteVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptByteVal(value *patch.BytePatch) *MyStructFieldPatch {
    x.OptByteVal = value
    return x
}

func (x *MyStructFieldPatch) SetOptBoolValNonCompat(value patch.BoolPatch) *MyStructFieldPatch {
    x.OptBoolVal = &value
    return x
}

func (x *MyStructFieldPatch) SetOptBoolVal(value *patch.BoolPatch) *MyStructFieldPatch {
    x.OptBoolVal = value
    return x
}

func (x *MyStructFieldPatch) SetLateStructValNonCompat(value LateDefStructPatch) *MyStructFieldPatch {
    x.LateStructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetLateStructVal(value *LateDefStructPatch) *MyStructFieldPatch {
    x.LateStructVal = value
    return x
}

func (x *MyStructFieldPatch) SetUnionValNonCompat(value MyUnionPatch) *MyStructFieldPatch {
    x.UnionVal = &value
    return x
}

func (x *MyStructFieldPatch) SetUnionVal(value *MyUnionPatch) *MyStructFieldPatch {
    x.UnionVal = value
    return x
}

func (x *MyStructFieldPatch) SetStructValNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.StructVal = &value
    return x
}

func (x *MyStructFieldPatch) SetStructVal(value *MyDataPatch) *MyStructFieldPatch {
    x.StructVal = value
    return x
}

func (x *MyStructFieldPatch) SetEnumValNonCompat(value MyStructField10Patch) *MyStructFieldPatch {
    x.EnumVal = &value
    return x
}

func (x *MyStructFieldPatch) SetEnumVal(value *MyStructField10Patch) *MyStructFieldPatch {
    x.EnumVal = value
    return x
}

func (x *MyStructFieldPatch) SetBinaryValNonCompat(value patch.BinaryPatch) *MyStructFieldPatch {
    x.BinaryVal = &value
    return x
}

func (x *MyStructFieldPatch) SetBinaryVal(value *patch.BinaryPatch) *MyStructFieldPatch {
    x.BinaryVal = value
    return x
}

func (x *MyStructFieldPatch) SetStringValNonCompat(value patch.StringPatch) *MyStructFieldPatch {
    x.StringVal = &value
    return x
}

func (x *MyStructFieldPatch) SetStringVal(value *patch.StringPatch) *MyStructFieldPatch {
    x.StringVal = value
    return x
}

func (x *MyStructFieldPatch) SetDoubleValNonCompat(value patch.DoublePatch) *MyStructFieldPatch {
    x.DoubleVal = &value
    return x
}

func (x *MyStructFieldPatch) SetDoubleVal(value *patch.DoublePatch) *MyStructFieldPatch {
    x.DoubleVal = value
    return x
}

func (x *MyStructFieldPatch) SetFloatValNonCompat(value patch.FloatPatch) *MyStructFieldPatch {
    x.FloatVal = &value
    return x
}

func (x *MyStructFieldPatch) SetFloatVal(value *patch.FloatPatch) *MyStructFieldPatch {
    x.FloatVal = value
    return x
}

func (x *MyStructFieldPatch) SetI64ValNonCompat(value patch.I64Patch) *MyStructFieldPatch {
    x.I64Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI64Val(value *patch.I64Patch) *MyStructFieldPatch {
    x.I64Val = value
    return x
}

func (x *MyStructFieldPatch) SetI32ValNonCompat(value patch.I32Patch) *MyStructFieldPatch {
    x.I32Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI32Val(value *patch.I32Patch) *MyStructFieldPatch {
    x.I32Val = value
    return x
}

func (x *MyStructFieldPatch) SetI16ValNonCompat(value patch.I16Patch) *MyStructFieldPatch {
    x.I16Val = &value
    return x
}

func (x *MyStructFieldPatch) SetI16Val(value *patch.I16Patch) *MyStructFieldPatch {
    x.I16Val = value
    return x
}

func (x *MyStructFieldPatch) SetByteValNonCompat(value patch.BytePatch) *MyStructFieldPatch {
    x.ByteVal = &value
    return x
}

func (x *MyStructFieldPatch) SetByteVal(value *patch.BytePatch) *MyStructFieldPatch {
    x.ByteVal = value
    return x
}

func (x *MyStructFieldPatch) SetBoolValNonCompat(value patch.BoolPatch) *MyStructFieldPatch {
    x.BoolVal = &value
    return x
}

func (x *MyStructFieldPatch) SetBoolVal(value *patch.BoolPatch) *MyStructFieldPatch {
    x.BoolVal = value
    return x
}

func (x *MyStructFieldPatch) SetStructWithFieldCustomDefaultNonCompat(value MyDataPatch) *MyStructFieldPatch {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStructFieldPatch) SetStructWithFieldCustomDefault(value *MyDataPatch) *MyStructFieldPatch {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructFieldPatch) IsSetStructWithCustomDefault() bool {
    return x.StructWithCustomDefault != nil
}

func (x *MyStructFieldPatch) IsSetI32WithCustomDefault() bool {
    return x.I32WithCustomDefault != nil
}

func (x *MyStructFieldPatch) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStructFieldPatch) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStructFieldPatch) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStructFieldPatch) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStructFieldPatch) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStructFieldPatch) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStructFieldPatch) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStructFieldPatch) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStructFieldPatch) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStructFieldPatch) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStructFieldPatch) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStructFieldPatch) IsSetEnumVal() bool {
    return x.EnumVal != nil
}

func (x *MyStructFieldPatch) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetStringVal() bool {
    return x.StringVal != nil
}

func (x *MyStructFieldPatch) IsSetDoubleVal() bool {
    return x.DoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetFloatVal() bool {
    return x.FloatVal != nil
}

func (x *MyStructFieldPatch) IsSetI64Val() bool {
    return x.I64Val != nil
}

func (x *MyStructFieldPatch) IsSetI32Val() bool {
    return x.I32Val != nil
}

func (x *MyStructFieldPatch) IsSetI16Val() bool {
    return x.I16Val != nil
}

func (x *MyStructFieldPatch) IsSetByteVal() bool {
    return x.ByteVal != nil
}

func (x *MyStructFieldPatch) IsSetBoolVal() bool {
    return x.BoolVal != nil
}

func (x *MyStructFieldPatch) IsSetStructWithFieldCustomDefault() bool {
    return x.StructWithFieldCustomDefault != nil
}

func (x *MyStructFieldPatch) writeField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.STRUCT, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI32WithCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.STRUCT, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapMapNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.STRUCT, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListMapNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.STRUCT, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptMapValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.STRUCT, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptSetValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.STRUCT, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptListValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.STRUCT, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptEnumValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRUCT, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBinaryValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRUCT, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptStringValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.STRUCT, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptDoubleValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.STRUCT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptFloatValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.STRUCT, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptI64ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.STRUCT, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptI32ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.STRUCT, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptI16ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.STRUCT, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptByteValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.STRUCT, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBoolValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnionValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_10(p thrift.Protocol) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.STRUCT, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRUCT, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_8(p thrift.Protocol) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRUCT, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.STRUCT, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_6(p thrift.Protocol) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.STRUCT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_5(p thrift.Protocol) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.STRUCT, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI64ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_4(p thrift.Protocol) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.STRUCT, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI32ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_3(p thrift.Protocol) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.STRUCT, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI16ValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_2(p thrift.Protocol) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.STRUCT, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_1(p thrift.Protocol) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithFieldCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) readField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefaultPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI32WithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_30(p thrift.Protocol) error {  // MapMap
    result := *NewMyStructField30Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetMapMapNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_29(p thrift.Protocol) error {  // ListMap
    result := *NewMyStructField29Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetListMapNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_28(p thrift.Protocol) error {  // OptMapVal
    result := *NewMyStructField28Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptMapValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_27(p thrift.Protocol) error {  // OptSetVal
    result := *NewMyStructField27Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptSetValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_26(p thrift.Protocol) error {  // OptListVal
    result := *NewMyStructField26Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptListValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_23(p thrift.Protocol) error {  // OptEnumVal
    result := *NewMyStructField23Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptEnumValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptBinaryValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_21(p thrift.Protocol) error {  // OptStringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStringValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptDoubleValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptFloatValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_18(p thrift.Protocol) error {  // OptI64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI64ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_17(p thrift.Protocol) error {  // OptI32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI32ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_16(p thrift.Protocol) error {  // OptI16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI16ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_15(p thrift.Protocol) error {  // OptByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptByteValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptBoolValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_10(p thrift.Protocol) error {  // EnumVal
    result := *NewMyStructField10Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnumValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_9(p thrift.Protocol) error {  // BinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBinaryValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_8(p thrift.Protocol) error {  // StringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStringValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_7(p thrift.Protocol) error {  // DoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetDoubleValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_6(p thrift.Protocol) error {  // FloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetFloatValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_5(p thrift.Protocol) error {  // I64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI64ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_4(p thrift.Protocol) error {  // I32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI32ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_3(p thrift.Protocol) error {  // I16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI16ValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_2(p thrift.Protocol) error {  // ByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetByteValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField_1(p thrift.Protocol) error {  // BoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBoolValNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) readField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithFieldCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructFieldPatch) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithCustomDefaultNonCompat())
}

func (x *MyStructFieldPatch) toString_31() string {  // I32WithCustomDefault
    return fmt.Sprintf("%v", x.GetI32WithCustomDefaultNonCompat())
}

func (x *MyStructFieldPatch) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.GetMapMapNonCompat())
}

func (x *MyStructFieldPatch) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.GetListMapNonCompat())
}

func (x *MyStructFieldPatch) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.GetOptMapValNonCompat())
}

func (x *MyStructFieldPatch) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.GetOptSetValNonCompat())
}

func (x *MyStructFieldPatch) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.GetOptListValNonCompat())
}

func (x *MyStructFieldPatch) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.GetOptLateStructValNonCompat())
}

func (x *MyStructFieldPatch) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.GetOptStructValNonCompat())
}

func (x *MyStructFieldPatch) toString_23() string {  // OptEnumVal
    return fmt.Sprintf("%v", x.GetOptEnumValNonCompat())
}

func (x *MyStructFieldPatch) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.GetOptBinaryValNonCompat())
}

func (x *MyStructFieldPatch) toString_21() string {  // OptStringVal
    return fmt.Sprintf("%v", x.GetOptStringValNonCompat())
}

func (x *MyStructFieldPatch) toString_20() string {  // OptDoubleVal
    return fmt.Sprintf("%v", x.GetOptDoubleValNonCompat())
}

func (x *MyStructFieldPatch) toString_19() string {  // OptFloatVal
    return fmt.Sprintf("%v", x.GetOptFloatValNonCompat())
}

func (x *MyStructFieldPatch) toString_18() string {  // OptI64Val
    return fmt.Sprintf("%v", x.GetOptI64ValNonCompat())
}

func (x *MyStructFieldPatch) toString_17() string {  // OptI32Val
    return fmt.Sprintf("%v", x.GetOptI32ValNonCompat())
}

func (x *MyStructFieldPatch) toString_16() string {  // OptI16Val
    return fmt.Sprintf("%v", x.GetOptI16ValNonCompat())
}

func (x *MyStructFieldPatch) toString_15() string {  // OptByteVal
    return fmt.Sprintf("%v", x.GetOptByteValNonCompat())
}

func (x *MyStructFieldPatch) toString_14() string {  // OptBoolVal
    return fmt.Sprintf("%v", x.GetOptBoolValNonCompat())
}

func (x *MyStructFieldPatch) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.GetLateStructValNonCompat())
}

func (x *MyStructFieldPatch) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.GetUnionValNonCompat())
}

func (x *MyStructFieldPatch) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.GetStructValNonCompat())
}

func (x *MyStructFieldPatch) toString_10() string {  // EnumVal
    return fmt.Sprintf("%v", x.GetEnumValNonCompat())
}

func (x *MyStructFieldPatch) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.GetBinaryValNonCompat())
}

func (x *MyStructFieldPatch) toString_8() string {  // StringVal
    return fmt.Sprintf("%v", x.GetStringValNonCompat())
}

func (x *MyStructFieldPatch) toString_7() string {  // DoubleVal
    return fmt.Sprintf("%v", x.GetDoubleValNonCompat())
}

func (x *MyStructFieldPatch) toString_6() string {  // FloatVal
    return fmt.Sprintf("%v", x.GetFloatValNonCompat())
}

func (x *MyStructFieldPatch) toString_5() string {  // I64Val
    return fmt.Sprintf("%v", x.GetI64ValNonCompat())
}

func (x *MyStructFieldPatch) toString_4() string {  // I32Val
    return fmt.Sprintf("%v", x.GetI32ValNonCompat())
}

func (x *MyStructFieldPatch) toString_3() string {  // I16Val
    return fmt.Sprintf("%v", x.GetI16ValNonCompat())
}

func (x *MyStructFieldPatch) toString_2() string {  // ByteVal
    return fmt.Sprintf("%v", x.GetByteValNonCompat())
}

func (x *MyStructFieldPatch) toString_1() string {  // BoolVal
    return fmt.Sprintf("%v", x.GetBoolValNonCompat())
}

func (x *MyStructFieldPatch) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithFieldCustomDefaultNonCompat())
}

// Deprecated: Use NewMyStructFieldPatch().GetStructWithCustomDefault() instead.
var MyStructFieldPatch_StructWithCustomDefault_DEFAULT = NewMyStructFieldPatch().GetStructWithCustomDefault()

// Deprecated: Use NewMyStructFieldPatch().GetStructWithCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefaultPatch {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefaultPatch()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStructFieldPatch().GetI32WithCustomDefault() instead.
var MyStructFieldPatch_I32WithCustomDefault_DEFAULT = NewMyStructFieldPatch().GetI32WithCustomDefault()

// Deprecated: Use NewMyStructFieldPatch().GetI32WithCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetI32WithCustomDefault() *patch.I32Patch {
    if !x.IsSetI32WithCustomDefault() {
        return patch.NewI32Patch()
    }
    return x.I32WithCustomDefault
}

// Deprecated: Use NewMyStructFieldPatch().GetMapMap() instead.
var MyStructFieldPatch_MapMap_DEFAULT = NewMyStructFieldPatch().GetMapMap()

// Deprecated: Use NewMyStructFieldPatch().GetMapMap() instead.
func (x *MyStructFieldPatch) DefaultGetMapMap() *MyStructField30Patch {
    if !x.IsSetMapMap() {
        return NewMyStructField30Patch()
    }
    return x.MapMap
}

// Deprecated: Use NewMyStructFieldPatch().GetListMap() instead.
var MyStructFieldPatch_ListMap_DEFAULT = NewMyStructFieldPatch().GetListMap()

// Deprecated: Use NewMyStructFieldPatch().GetListMap() instead.
func (x *MyStructFieldPatch) DefaultGetListMap() *MyStructField29Patch {
    if !x.IsSetListMap() {
        return NewMyStructField29Patch()
    }
    return x.ListMap
}

// Deprecated: Use NewMyStructFieldPatch().GetOptMapVal() instead.
var MyStructFieldPatch_OptMapVal_DEFAULT = NewMyStructFieldPatch().GetOptMapVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptMapVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptMapVal() *MyStructField28Patch {
    if !x.IsSetOptMapVal() {
        return NewMyStructField28Patch()
    }
    return x.OptMapVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptSetVal() instead.
var MyStructFieldPatch_OptSetVal_DEFAULT = NewMyStructFieldPatch().GetOptSetVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptSetVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptSetVal() *MyStructField27Patch {
    if !x.IsSetOptSetVal() {
        return NewMyStructField27Patch()
    }
    return x.OptSetVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptListVal() instead.
var MyStructFieldPatch_OptListVal_DEFAULT = NewMyStructFieldPatch().GetOptListVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptListVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptListVal() *MyStructField26Patch {
    if !x.IsSetOptListVal() {
        return NewMyStructField26Patch()
    }
    return x.OptListVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptLateStructVal() instead.
var MyStructFieldPatch_OptLateStructVal_DEFAULT = NewMyStructFieldPatch().GetOptLateStructVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptLateStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptLateStructVal() *LateDefStructPatch {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStructPatch()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptStructVal() instead.
var MyStructFieldPatch_OptStructVal_DEFAULT = NewMyStructFieldPatch().GetOptStructVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptStructVal() *MyDataPatch {
    if !x.IsSetOptStructVal() {
        return NewMyDataPatch()
    }
    return x.OptStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptEnumVal() instead.
var MyStructFieldPatch_OptEnumVal_DEFAULT = NewMyStructFieldPatch().GetOptEnumVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptEnumVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptEnumVal() *MyStructField23Patch {
    if !x.IsSetOptEnumVal() {
        return NewMyStructField23Patch()
    }
    return x.OptEnumVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptBinaryVal() instead.
var MyStructFieldPatch_OptBinaryVal_DEFAULT = NewMyStructFieldPatch().GetOptBinaryVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptBinaryVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptBinaryVal() *patch.BinaryPatch {
    if !x.IsSetOptBinaryVal() {
        return patch.NewBinaryPatch()
    }
    return x.OptBinaryVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptStringVal() instead.
var MyStructFieldPatch_OptStringVal_DEFAULT = NewMyStructFieldPatch().GetOptStringVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptStringVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptStringVal() *patch.StringPatch {
    if !x.IsSetOptStringVal() {
        return patch.NewStringPatch()
    }
    return x.OptStringVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptDoubleVal() instead.
var MyStructFieldPatch_OptDoubleVal_DEFAULT = NewMyStructFieldPatch().GetOptDoubleVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptDoubleVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptDoubleVal() *patch.DoublePatch {
    if !x.IsSetOptDoubleVal() {
        return patch.NewDoublePatch()
    }
    return x.OptDoubleVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptFloatVal() instead.
var MyStructFieldPatch_OptFloatVal_DEFAULT = NewMyStructFieldPatch().GetOptFloatVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptFloatVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptFloatVal() *patch.FloatPatch {
    if !x.IsSetOptFloatVal() {
        return patch.NewFloatPatch()
    }
    return x.OptFloatVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI64Val() instead.
var MyStructFieldPatch_OptI64Val_DEFAULT = NewMyStructFieldPatch().GetOptI64Val()

// Deprecated: Use NewMyStructFieldPatch().GetOptI64Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI64Val() *patch.I64Patch {
    if !x.IsSetOptI64Val() {
        return patch.NewI64Patch()
    }
    return x.OptI64Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI32Val() instead.
var MyStructFieldPatch_OptI32Val_DEFAULT = NewMyStructFieldPatch().GetOptI32Val()

// Deprecated: Use NewMyStructFieldPatch().GetOptI32Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI32Val() *patch.I32Patch {
    if !x.IsSetOptI32Val() {
        return patch.NewI32Patch()
    }
    return x.OptI32Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptI16Val() instead.
var MyStructFieldPatch_OptI16Val_DEFAULT = NewMyStructFieldPatch().GetOptI16Val()

// Deprecated: Use NewMyStructFieldPatch().GetOptI16Val() instead.
func (x *MyStructFieldPatch) DefaultGetOptI16Val() *patch.I16Patch {
    if !x.IsSetOptI16Val() {
        return patch.NewI16Patch()
    }
    return x.OptI16Val
}

// Deprecated: Use NewMyStructFieldPatch().GetOptByteVal() instead.
var MyStructFieldPatch_OptByteVal_DEFAULT = NewMyStructFieldPatch().GetOptByteVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptByteVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptByteVal() *patch.BytePatch {
    if !x.IsSetOptByteVal() {
        return patch.NewBytePatch()
    }
    return x.OptByteVal
}

// Deprecated: Use NewMyStructFieldPatch().GetOptBoolVal() instead.
var MyStructFieldPatch_OptBoolVal_DEFAULT = NewMyStructFieldPatch().GetOptBoolVal()

// Deprecated: Use NewMyStructFieldPatch().GetOptBoolVal() instead.
func (x *MyStructFieldPatch) DefaultGetOptBoolVal() *patch.BoolPatch {
    if !x.IsSetOptBoolVal() {
        return patch.NewBoolPatch()
    }
    return x.OptBoolVal
}

// Deprecated: Use NewMyStructFieldPatch().GetLateStructVal() instead.
var MyStructFieldPatch_LateStructVal_DEFAULT = NewMyStructFieldPatch().GetLateStructVal()

// Deprecated: Use NewMyStructFieldPatch().GetLateStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetLateStructVal() *LateDefStructPatch {
    if !x.IsSetLateStructVal() {
        return NewLateDefStructPatch()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetUnionVal() instead.
var MyStructFieldPatch_UnionVal_DEFAULT = NewMyStructFieldPatch().GetUnionVal()

// Deprecated: Use NewMyStructFieldPatch().GetUnionVal() instead.
func (x *MyStructFieldPatch) DefaultGetUnionVal() *MyUnionPatch {
    if !x.IsSetUnionVal() {
        return NewMyUnionPatch()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStructVal() instead.
var MyStructFieldPatch_StructVal_DEFAULT = NewMyStructFieldPatch().GetStructVal()

// Deprecated: Use NewMyStructFieldPatch().GetStructVal() instead.
func (x *MyStructFieldPatch) DefaultGetStructVal() *MyDataPatch {
    if !x.IsSetStructVal() {
        return NewMyDataPatch()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStructFieldPatch().GetEnumVal() instead.
var MyStructFieldPatch_EnumVal_DEFAULT = NewMyStructFieldPatch().GetEnumVal()

// Deprecated: Use NewMyStructFieldPatch().GetEnumVal() instead.
func (x *MyStructFieldPatch) DefaultGetEnumVal() *MyStructField10Patch {
    if !x.IsSetEnumVal() {
        return NewMyStructField10Patch()
    }
    return x.EnumVal
}

// Deprecated: Use NewMyStructFieldPatch().GetBinaryVal() instead.
var MyStructFieldPatch_BinaryVal_DEFAULT = NewMyStructFieldPatch().GetBinaryVal()

// Deprecated: Use NewMyStructFieldPatch().GetBinaryVal() instead.
func (x *MyStructFieldPatch) DefaultGetBinaryVal() *patch.BinaryPatch {
    if !x.IsSetBinaryVal() {
        return patch.NewBinaryPatch()
    }
    return x.BinaryVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStringVal() instead.
var MyStructFieldPatch_StringVal_DEFAULT = NewMyStructFieldPatch().GetStringVal()

// Deprecated: Use NewMyStructFieldPatch().GetStringVal() instead.
func (x *MyStructFieldPatch) DefaultGetStringVal() *patch.StringPatch {
    if !x.IsSetStringVal() {
        return patch.NewStringPatch()
    }
    return x.StringVal
}

// Deprecated: Use NewMyStructFieldPatch().GetDoubleVal() instead.
var MyStructFieldPatch_DoubleVal_DEFAULT = NewMyStructFieldPatch().GetDoubleVal()

// Deprecated: Use NewMyStructFieldPatch().GetDoubleVal() instead.
func (x *MyStructFieldPatch) DefaultGetDoubleVal() *patch.DoublePatch {
    if !x.IsSetDoubleVal() {
        return patch.NewDoublePatch()
    }
    return x.DoubleVal
}

// Deprecated: Use NewMyStructFieldPatch().GetFloatVal() instead.
var MyStructFieldPatch_FloatVal_DEFAULT = NewMyStructFieldPatch().GetFloatVal()

// Deprecated: Use NewMyStructFieldPatch().GetFloatVal() instead.
func (x *MyStructFieldPatch) DefaultGetFloatVal() *patch.FloatPatch {
    if !x.IsSetFloatVal() {
        return patch.NewFloatPatch()
    }
    return x.FloatVal
}

// Deprecated: Use NewMyStructFieldPatch().GetI64Val() instead.
var MyStructFieldPatch_I64Val_DEFAULT = NewMyStructFieldPatch().GetI64Val()

// Deprecated: Use NewMyStructFieldPatch().GetI64Val() instead.
func (x *MyStructFieldPatch) DefaultGetI64Val() *patch.I64Patch {
    if !x.IsSetI64Val() {
        return patch.NewI64Patch()
    }
    return x.I64Val
}

// Deprecated: Use NewMyStructFieldPatch().GetI32Val() instead.
var MyStructFieldPatch_I32Val_DEFAULT = NewMyStructFieldPatch().GetI32Val()

// Deprecated: Use NewMyStructFieldPatch().GetI32Val() instead.
func (x *MyStructFieldPatch) DefaultGetI32Val() *patch.I32Patch {
    if !x.IsSetI32Val() {
        return patch.NewI32Patch()
    }
    return x.I32Val
}

// Deprecated: Use NewMyStructFieldPatch().GetI16Val() instead.
var MyStructFieldPatch_I16Val_DEFAULT = NewMyStructFieldPatch().GetI16Val()

// Deprecated: Use NewMyStructFieldPatch().GetI16Val() instead.
func (x *MyStructFieldPatch) DefaultGetI16Val() *patch.I16Patch {
    if !x.IsSetI16Val() {
        return patch.NewI16Patch()
    }
    return x.I16Val
}

// Deprecated: Use NewMyStructFieldPatch().GetByteVal() instead.
var MyStructFieldPatch_ByteVal_DEFAULT = NewMyStructFieldPatch().GetByteVal()

// Deprecated: Use NewMyStructFieldPatch().GetByteVal() instead.
func (x *MyStructFieldPatch) DefaultGetByteVal() *patch.BytePatch {
    if !x.IsSetByteVal() {
        return patch.NewBytePatch()
    }
    return x.ByteVal
}

// Deprecated: Use NewMyStructFieldPatch().GetBoolVal() instead.
var MyStructFieldPatch_BoolVal_DEFAULT = NewMyStructFieldPatch().GetBoolVal()

// Deprecated: Use NewMyStructFieldPatch().GetBoolVal() instead.
func (x *MyStructFieldPatch) DefaultGetBoolVal() *patch.BoolPatch {
    if !x.IsSetBoolVal() {
        return patch.NewBoolPatch()
    }
    return x.BoolVal
}

// Deprecated: Use NewMyStructFieldPatch().GetStructWithFieldCustomDefault() instead.
var MyStructFieldPatch_StructWithFieldCustomDefault_DEFAULT = NewMyStructFieldPatch().GetStructWithFieldCustomDefault()

// Deprecated: Use NewMyStructFieldPatch().GetStructWithFieldCustomDefault() instead.
func (x *MyStructFieldPatch) DefaultGetStructWithFieldCustomDefault() *MyDataPatch {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyDataPatch()
    }
    return x.StructWithFieldCustomDefault
}


// Deprecated: Use MyStructFieldPatch.Set* methods instead or set the fields directly.
type MyStructFieldPatchBuilder struct {
    obj *MyStructFieldPatch
}

func NewMyStructFieldPatchBuilder() *MyStructFieldPatchBuilder {
    return &MyStructFieldPatchBuilder{
        obj: NewMyStructFieldPatch(),
    }
}

func (x *MyStructFieldPatchBuilder) StructWithCustomDefault(value *MyDataWithCustomDefaultPatch) *MyStructFieldPatchBuilder {
    x.obj.StructWithCustomDefault = value
    return x
}

func (x *MyStructFieldPatchBuilder) I32WithCustomDefault(value *patch.I32Patch) *MyStructFieldPatchBuilder {
    x.obj.I32WithCustomDefault = value
    return x
}

func (x *MyStructFieldPatchBuilder) MapMap(value *MyStructField30Patch) *MyStructFieldPatchBuilder {
    x.obj.MapMap = value
    return x
}

func (x *MyStructFieldPatchBuilder) ListMap(value *MyStructField29Patch) *MyStructFieldPatchBuilder {
    x.obj.ListMap = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptMapVal(value *MyStructField28Patch) *MyStructFieldPatchBuilder {
    x.obj.OptMapVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptSetVal(value *MyStructField27Patch) *MyStructFieldPatchBuilder {
    x.obj.OptSetVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptListVal(value *MyStructField26Patch) *MyStructFieldPatchBuilder {
    x.obj.OptListVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptLateStructVal(value *LateDefStructPatch) *MyStructFieldPatchBuilder {
    x.obj.OptLateStructVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptStructVal(value *MyDataPatch) *MyStructFieldPatchBuilder {
    x.obj.OptStructVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptEnumVal(value *MyStructField23Patch) *MyStructFieldPatchBuilder {
    x.obj.OptEnumVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptBinaryVal(value *patch.BinaryPatch) *MyStructFieldPatchBuilder {
    x.obj.OptBinaryVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptStringVal(value *patch.StringPatch) *MyStructFieldPatchBuilder {
    x.obj.OptStringVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptDoubleVal(value *patch.DoublePatch) *MyStructFieldPatchBuilder {
    x.obj.OptDoubleVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptFloatVal(value *patch.FloatPatch) *MyStructFieldPatchBuilder {
    x.obj.OptFloatVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptI64Val(value *patch.I64Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI64Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptI32Val(value *patch.I32Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI32Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptI16Val(value *patch.I16Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI16Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptByteVal(value *patch.BytePatch) *MyStructFieldPatchBuilder {
    x.obj.OptByteVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) OptBoolVal(value *patch.BoolPatch) *MyStructFieldPatchBuilder {
    x.obj.OptBoolVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) LateStructVal(value *LateDefStructPatch) *MyStructFieldPatchBuilder {
    x.obj.LateStructVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) UnionVal(value *MyUnionPatch) *MyStructFieldPatchBuilder {
    x.obj.UnionVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) StructVal(value *MyDataPatch) *MyStructFieldPatchBuilder {
    x.obj.StructVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) EnumVal(value *MyStructField10Patch) *MyStructFieldPatchBuilder {
    x.obj.EnumVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) BinaryVal(value *patch.BinaryPatch) *MyStructFieldPatchBuilder {
    x.obj.BinaryVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) StringVal(value *patch.StringPatch) *MyStructFieldPatchBuilder {
    x.obj.StringVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) DoubleVal(value *patch.DoublePatch) *MyStructFieldPatchBuilder {
    x.obj.DoubleVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) FloatVal(value *patch.FloatPatch) *MyStructFieldPatchBuilder {
    x.obj.FloatVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) I64Val(value *patch.I64Patch) *MyStructFieldPatchBuilder {
    x.obj.I64Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) I32Val(value *patch.I32Patch) *MyStructFieldPatchBuilder {
    x.obj.I32Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) I16Val(value *patch.I16Patch) *MyStructFieldPatchBuilder {
    x.obj.I16Val = value
    return x
}

func (x *MyStructFieldPatchBuilder) ByteVal(value *patch.BytePatch) *MyStructFieldPatchBuilder {
    x.obj.ByteVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) BoolVal(value *patch.BoolPatch) *MyStructFieldPatchBuilder {
    x.obj.BoolVal = value
    return x
}

func (x *MyStructFieldPatchBuilder) StructWithFieldCustomDefault(value *MyDataPatch) *MyStructFieldPatchBuilder {
    x.obj.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructFieldPatchBuilder) Emit() *MyStructFieldPatch {
    var objCopy MyStructFieldPatch = *x.obj
    return &objCopy
}

func (x *MyStructFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -32:  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case -31:  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case 1:  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructFieldPatch({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type MyStructEnsureStruct struct {
    StructWithCustomDefault *MyDataWithCustomDefault `thrift:"structWithCustomDefault,-32,optional" json:"structWithCustomDefault,omitempty" db:"structWithCustomDefault"`
    I32WithCustomDefault *int32 `thrift:"i32WithCustomDefault,-31,optional" json:"i32WithCustomDefault,omitempty" db:"i32WithCustomDefault"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30,optional" json:"mapMap,omitempty" db:"mapMap"`
    ListMap []map[string]int32 `thrift:"listMap,-29,optional" json:"listMap,omitempty" db:"listMap"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptByteVal *int8 `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13,optional" json:"lateStructVal,omitempty" db:"lateStructVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12,optional" json:"unionVal,omitempty" db:"unionVal"`
    StructVal *MyData `thrift:"structVal,-11,optional" json:"structVal,omitempty" db:"structVal"`
    EnumVal *MyEnum `thrift:"enumVal,-10,optional" json:"enumVal,omitempty" db:"enumVal"`
    BinaryVal []byte `thrift:"binaryVal,-9,optional" json:"binaryVal,omitempty" db:"binaryVal"`
    StringVal *string `thrift:"stringVal,-8,optional" json:"stringVal,omitempty" db:"stringVal"`
    DoubleVal *float64 `thrift:"doubleVal,-7,optional" json:"doubleVal,omitempty" db:"doubleVal"`
    FloatVal *float32 `thrift:"floatVal,-6,optional" json:"floatVal,omitempty" db:"floatVal"`
    I64Val *int64 `thrift:"i64Val,-5,optional" json:"i64Val,omitempty" db:"i64Val"`
    I32Val *int32 `thrift:"i32Val,-4,optional" json:"i32Val,omitempty" db:"i32Val"`
    I16Val *int16 `thrift:"i16Val,-3,optional" json:"i16Val,omitempty" db:"i16Val"`
    ByteVal *int8 `thrift:"byteVal,-2,optional" json:"byteVal,omitempty" db:"byteVal"`
    BoolVal *bool `thrift:"boolVal,-1,optional" json:"boolVal,omitempty" db:"boolVal"`
    StructWithFieldCustomDefault *MyData `thrift:"structWithFieldCustomDefault,1,optional" json:"structWithFieldCustomDefault,omitempty" db:"structWithFieldCustomDefault"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructEnsureStruct{}

func NewMyStructEnsureStruct() *MyStructEnsureStruct {
    return (&MyStructEnsureStruct{})
}

func (x *MyStructEnsureStruct) GetStructWithCustomDefaultNonCompat() *MyDataWithCustomDefault {
    return x.StructWithCustomDefault
}

func (x *MyStructEnsureStruct) GetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    return x.StructWithCustomDefault
}

func (x *MyStructEnsureStruct) GetI32WithCustomDefaultNonCompat() *int32 {
    return x.I32WithCustomDefault
}

func (x *MyStructEnsureStruct) GetI32WithCustomDefault() int32 {
    if !x.IsSetI32WithCustomDefault() {
        return 0
    }

    return *x.I32WithCustomDefault
}

func (x *MyStructEnsureStruct) GetMapMapNonCompat() map[string]map[string]int32 {
    return x.MapMap
}

func (x *MyStructEnsureStruct) GetMapMap() map[string]map[string]int32 {
    if !x.IsSetMapMap() {
        return nil
    }

    return x.MapMap
}

func (x *MyStructEnsureStruct) GetListMapNonCompat() []map[string]int32 {
    return x.ListMap
}

func (x *MyStructEnsureStruct) GetListMap() []map[string]int32 {
    if !x.IsSetListMap() {
        return nil
    }

    return x.ListMap
}

func (x *MyStructEnsureStruct) GetOptMapValNonCompat() map[string]string {
    return x.OptMapVal
}

func (x *MyStructEnsureStruct) GetOptMapVal() map[string]string {
    if !x.IsSetOptMapVal() {
        return nil
    }

    return x.OptMapVal
}

func (x *MyStructEnsureStruct) GetOptSetValNonCompat() []string {
    return x.OptSetVal
}

func (x *MyStructEnsureStruct) GetOptSetVal() []string {
    if !x.IsSetOptSetVal() {
        return nil
    }

    return x.OptSetVal
}

func (x *MyStructEnsureStruct) GetOptListValNonCompat() []int16 {
    return x.OptListVal
}

func (x *MyStructEnsureStruct) GetOptListVal() []int16 {
    if !x.IsSetOptListVal() {
        return nil
    }

    return x.OptListVal
}

func (x *MyStructEnsureStruct) GetOptLateStructValNonCompat() *LateDefStruct {
    return x.OptLateStructVal
}

func (x *MyStructEnsureStruct) GetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    return x.OptLateStructVal
}

func (x *MyStructEnsureStruct) GetOptStructValNonCompat() *MyData {
    return x.OptStructVal
}

func (x *MyStructEnsureStruct) GetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return nil
    }

    return x.OptStructVal
}

func (x *MyStructEnsureStruct) GetOptEnumValNonCompat() *MyEnum {
    return x.OptEnumVal
}

func (x *MyStructEnsureStruct) GetOptEnumVal() MyEnum {
    if !x.IsSetOptEnumVal() {
        return 0
    }

    return *x.OptEnumVal
}

func (x *MyStructEnsureStruct) GetOptBinaryValNonCompat() []byte {
    return x.OptBinaryVal
}

func (x *MyStructEnsureStruct) GetOptBinaryVal() []byte {
    if !x.IsSetOptBinaryVal() {
        return []byte("")
    }

    return x.OptBinaryVal
}

func (x *MyStructEnsureStruct) GetOptStringValNonCompat() *string {
    return x.OptStringVal
}

func (x *MyStructEnsureStruct) GetOptStringVal() string {
    if !x.IsSetOptStringVal() {
        return ""
    }

    return *x.OptStringVal
}

func (x *MyStructEnsureStruct) GetOptDoubleValNonCompat() *float64 {
    return x.OptDoubleVal
}

func (x *MyStructEnsureStruct) GetOptDoubleVal() float64 {
    if !x.IsSetOptDoubleVal() {
        return 0.0
    }

    return *x.OptDoubleVal
}

func (x *MyStructEnsureStruct) GetOptFloatValNonCompat() *float32 {
    return x.OptFloatVal
}

func (x *MyStructEnsureStruct) GetOptFloatVal() float32 {
    if !x.IsSetOptFloatVal() {
        return 0.0
    }

    return *x.OptFloatVal
}

func (x *MyStructEnsureStruct) GetOptI64ValNonCompat() *int64 {
    return x.OptI64Val
}

func (x *MyStructEnsureStruct) GetOptI64Val() int64 {
    if !x.IsSetOptI64Val() {
        return 0
    }

    return *x.OptI64Val
}

func (x *MyStructEnsureStruct) GetOptI32ValNonCompat() *int32 {
    return x.OptI32Val
}

func (x *MyStructEnsureStruct) GetOptI32Val() int32 {
    if !x.IsSetOptI32Val() {
        return 0
    }

    return *x.OptI32Val
}

func (x *MyStructEnsureStruct) GetOptI16ValNonCompat() *int16 {
    return x.OptI16Val
}

func (x *MyStructEnsureStruct) GetOptI16Val() int16 {
    if !x.IsSetOptI16Val() {
        return 0
    }

    return *x.OptI16Val
}

func (x *MyStructEnsureStruct) GetOptByteValNonCompat() *int8 {
    return x.OptByteVal
}

func (x *MyStructEnsureStruct) GetOptByteVal() int8 {
    if !x.IsSetOptByteVal() {
        return 0
    }

    return *x.OptByteVal
}

func (x *MyStructEnsureStruct) GetOptBoolValNonCompat() *bool {
    return x.OptBoolVal
}

func (x *MyStructEnsureStruct) GetOptBoolVal() bool {
    if !x.IsSetOptBoolVal() {
        return false
    }

    return *x.OptBoolVal
}

func (x *MyStructEnsureStruct) GetLateStructValNonCompat() *LateDefStruct {
    return x.LateStructVal
}

func (x *MyStructEnsureStruct) GetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return nil
    }

    return x.LateStructVal
}

func (x *MyStructEnsureStruct) GetUnionValNonCompat() *MyUnion {
    return x.UnionVal
}

func (x *MyStructEnsureStruct) GetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return nil
    }

    return x.UnionVal
}

func (x *MyStructEnsureStruct) GetStructValNonCompat() *MyData {
    return x.StructVal
}

func (x *MyStructEnsureStruct) GetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return nil
    }

    return x.StructVal
}

func (x *MyStructEnsureStruct) GetEnumValNonCompat() *MyEnum {
    return x.EnumVal
}

func (x *MyStructEnsureStruct) GetEnumVal() MyEnum {
    if !x.IsSetEnumVal() {
        return 0
    }

    return *x.EnumVal
}

func (x *MyStructEnsureStruct) GetBinaryValNonCompat() []byte {
    return x.BinaryVal
}

func (x *MyStructEnsureStruct) GetBinaryVal() []byte {
    if !x.IsSetBinaryVal() {
        return []byte("")
    }

    return x.BinaryVal
}

func (x *MyStructEnsureStruct) GetStringValNonCompat() *string {
    return x.StringVal
}

func (x *MyStructEnsureStruct) GetStringVal() string {
    if !x.IsSetStringVal() {
        return ""
    }

    return *x.StringVal
}

func (x *MyStructEnsureStruct) GetDoubleValNonCompat() *float64 {
    return x.DoubleVal
}

func (x *MyStructEnsureStruct) GetDoubleVal() float64 {
    if !x.IsSetDoubleVal() {
        return 0.0
    }

    return *x.DoubleVal
}

func (x *MyStructEnsureStruct) GetFloatValNonCompat() *float32 {
    return x.FloatVal
}

func (x *MyStructEnsureStruct) GetFloatVal() float32 {
    if !x.IsSetFloatVal() {
        return 0.0
    }

    return *x.FloatVal
}

func (x *MyStructEnsureStruct) GetI64ValNonCompat() *int64 {
    return x.I64Val
}

func (x *MyStructEnsureStruct) GetI64Val() int64 {
    if !x.IsSetI64Val() {
        return 0
    }

    return *x.I64Val
}

func (x *MyStructEnsureStruct) GetI32ValNonCompat() *int32 {
    return x.I32Val
}

func (x *MyStructEnsureStruct) GetI32Val() int32 {
    if !x.IsSetI32Val() {
        return 0
    }

    return *x.I32Val
}

func (x *MyStructEnsureStruct) GetI16ValNonCompat() *int16 {
    return x.I16Val
}

func (x *MyStructEnsureStruct) GetI16Val() int16 {
    if !x.IsSetI16Val() {
        return 0
    }

    return *x.I16Val
}

func (x *MyStructEnsureStruct) GetByteValNonCompat() *int8 {
    return x.ByteVal
}

func (x *MyStructEnsureStruct) GetByteVal() int8 {
    if !x.IsSetByteVal() {
        return 0
    }

    return *x.ByteVal
}

func (x *MyStructEnsureStruct) GetBoolValNonCompat() *bool {
    return x.BoolVal
}

func (x *MyStructEnsureStruct) GetBoolVal() bool {
    if !x.IsSetBoolVal() {
        return false
    }

    return *x.BoolVal
}

func (x *MyStructEnsureStruct) GetStructWithFieldCustomDefaultNonCompat() *MyData {
    return x.StructWithFieldCustomDefault
}

func (x *MyStructEnsureStruct) GetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    return x.StructWithFieldCustomDefault
}

func (x *MyStructEnsureStruct) SetStructWithCustomDefaultNonCompat(value MyDataWithCustomDefault) *MyStructEnsureStruct {
    x.StructWithCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithCustomDefault(value *MyDataWithCustomDefault) *MyStructEnsureStruct {
    x.StructWithCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) SetI32WithCustomDefaultNonCompat(value int32) *MyStructEnsureStruct {
    x.I32WithCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetI32WithCustomDefault(value *int32) *MyStructEnsureStruct {
    x.I32WithCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) SetMapMapNonCompat(value map[string]map[string]int32) *MyStructEnsureStruct {
    x.MapMap = value
    return x
}

func (x *MyStructEnsureStruct) SetMapMap(value map[string]map[string]int32) *MyStructEnsureStruct {
    x.MapMap = value
    return x
}

func (x *MyStructEnsureStruct) SetListMapNonCompat(value []map[string]int32) *MyStructEnsureStruct {
    x.ListMap = value
    return x
}

func (x *MyStructEnsureStruct) SetListMap(value []map[string]int32) *MyStructEnsureStruct {
    x.ListMap = value
    return x
}

func (x *MyStructEnsureStruct) SetOptMapValNonCompat(value map[string]string) *MyStructEnsureStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptMapVal(value map[string]string) *MyStructEnsureStruct {
    x.OptMapVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptSetValNonCompat(value []string) *MyStructEnsureStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptSetVal(value []string) *MyStructEnsureStruct {
    x.OptSetVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptListValNonCompat(value []int16) *MyStructEnsureStruct {
    x.OptListVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptListVal(value []int16) *MyStructEnsureStruct {
    x.OptListVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptLateStructValNonCompat(value LateDefStruct) *MyStructEnsureStruct {
    x.OptLateStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptLateStructVal(value *LateDefStruct) *MyStructEnsureStruct {
    x.OptLateStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptStructValNonCompat(value MyData) *MyStructEnsureStruct {
    x.OptStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptStructVal(value *MyData) *MyStructEnsureStruct {
    x.OptStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptEnumValNonCompat(value MyEnum) *MyStructEnsureStruct {
    x.OptEnumVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptEnumVal(value *MyEnum) *MyStructEnsureStruct {
    x.OptEnumVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBinaryValNonCompat(value []byte) *MyStructEnsureStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBinaryVal(value []byte) *MyStructEnsureStruct {
    x.OptBinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptStringValNonCompat(value string) *MyStructEnsureStruct {
    x.OptStringVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptStringVal(value *string) *MyStructEnsureStruct {
    x.OptStringVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptDoubleValNonCompat(value float64) *MyStructEnsureStruct {
    x.OptDoubleVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptDoubleVal(value *float64) *MyStructEnsureStruct {
    x.OptDoubleVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptFloatValNonCompat(value float32) *MyStructEnsureStruct {
    x.OptFloatVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptFloatVal(value *float32) *MyStructEnsureStruct {
    x.OptFloatVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI64ValNonCompat(value int64) *MyStructEnsureStruct {
    x.OptI64Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI64Val(value *int64) *MyStructEnsureStruct {
    x.OptI64Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI32ValNonCompat(value int32) *MyStructEnsureStruct {
    x.OptI32Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI32Val(value *int32) *MyStructEnsureStruct {
    x.OptI32Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptI16ValNonCompat(value int16) *MyStructEnsureStruct {
    x.OptI16Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptI16Val(value *int16) *MyStructEnsureStruct {
    x.OptI16Val = value
    return x
}

func (x *MyStructEnsureStruct) SetOptByteValNonCompat(value int8) *MyStructEnsureStruct {
    x.OptByteVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptByteVal(value *int8) *MyStructEnsureStruct {
    x.OptByteVal = value
    return x
}

func (x *MyStructEnsureStruct) SetOptBoolValNonCompat(value bool) *MyStructEnsureStruct {
    x.OptBoolVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetOptBoolVal(value *bool) *MyStructEnsureStruct {
    x.OptBoolVal = value
    return x
}

func (x *MyStructEnsureStruct) SetLateStructValNonCompat(value LateDefStruct) *MyStructEnsureStruct {
    x.LateStructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetLateStructVal(value *LateDefStruct) *MyStructEnsureStruct {
    x.LateStructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetUnionValNonCompat(value MyUnion) *MyStructEnsureStruct {
    x.UnionVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetUnionVal(value *MyUnion) *MyStructEnsureStruct {
    x.UnionVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStructValNonCompat(value MyData) *MyStructEnsureStruct {
    x.StructVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructVal(value *MyData) *MyStructEnsureStruct {
    x.StructVal = value
    return x
}

func (x *MyStructEnsureStruct) SetEnumValNonCompat(value MyEnum) *MyStructEnsureStruct {
    x.EnumVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetEnumVal(value *MyEnum) *MyStructEnsureStruct {
    x.EnumVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBinaryValNonCompat(value []byte) *MyStructEnsureStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBinaryVal(value []byte) *MyStructEnsureStruct {
    x.BinaryVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStringValNonCompat(value string) *MyStructEnsureStruct {
    x.StringVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetStringVal(value *string) *MyStructEnsureStruct {
    x.StringVal = value
    return x
}

func (x *MyStructEnsureStruct) SetDoubleValNonCompat(value float64) *MyStructEnsureStruct {
    x.DoubleVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetDoubleVal(value *float64) *MyStructEnsureStruct {
    x.DoubleVal = value
    return x
}

func (x *MyStructEnsureStruct) SetFloatValNonCompat(value float32) *MyStructEnsureStruct {
    x.FloatVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetFloatVal(value *float32) *MyStructEnsureStruct {
    x.FloatVal = value
    return x
}

func (x *MyStructEnsureStruct) SetI64ValNonCompat(value int64) *MyStructEnsureStruct {
    x.I64Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI64Val(value *int64) *MyStructEnsureStruct {
    x.I64Val = value
    return x
}

func (x *MyStructEnsureStruct) SetI32ValNonCompat(value int32) *MyStructEnsureStruct {
    x.I32Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI32Val(value *int32) *MyStructEnsureStruct {
    x.I32Val = value
    return x
}

func (x *MyStructEnsureStruct) SetI16ValNonCompat(value int16) *MyStructEnsureStruct {
    x.I16Val = &value
    return x
}

func (x *MyStructEnsureStruct) SetI16Val(value *int16) *MyStructEnsureStruct {
    x.I16Val = value
    return x
}

func (x *MyStructEnsureStruct) SetByteValNonCompat(value int8) *MyStructEnsureStruct {
    x.ByteVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetByteVal(value *int8) *MyStructEnsureStruct {
    x.ByteVal = value
    return x
}

func (x *MyStructEnsureStruct) SetBoolValNonCompat(value bool) *MyStructEnsureStruct {
    x.BoolVal = &value
    return x
}

func (x *MyStructEnsureStruct) SetBoolVal(value *bool) *MyStructEnsureStruct {
    x.BoolVal = value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithFieldCustomDefaultNonCompat(value MyData) *MyStructEnsureStruct {
    x.StructWithFieldCustomDefault = &value
    return x
}

func (x *MyStructEnsureStruct) SetStructWithFieldCustomDefault(value *MyData) *MyStructEnsureStruct {
    x.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructEnsureStruct) IsSetStructWithCustomDefault() bool {
    return x.StructWithCustomDefault != nil
}

func (x *MyStructEnsureStruct) IsSetI32WithCustomDefault() bool {
    return x.I32WithCustomDefault != nil
}

func (x *MyStructEnsureStruct) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStructEnsureStruct) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStructEnsureStruct) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStructEnsureStruct) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStructEnsureStruct) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStructEnsureStruct) IsSetEnumVal() bool {
    return x.EnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetStringVal() bool {
    return x.StringVal != nil
}

func (x *MyStructEnsureStruct) IsSetDoubleVal() bool {
    return x.DoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetFloatVal() bool {
    return x.FloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetI64Val() bool {
    return x.I64Val != nil
}

func (x *MyStructEnsureStruct) IsSetI32Val() bool {
    return x.I32Val != nil
}

func (x *MyStructEnsureStruct) IsSetI16Val() bool {
    return x.I16Val != nil
}

func (x *MyStructEnsureStruct) IsSetByteVal() bool {
    return x.ByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetBoolVal() bool {
    return x.BoolVal != nil
}

func (x *MyStructEnsureStruct) IsSetStructWithFieldCustomDefault() bool {
    return x.StructWithFieldCustomDefault != nil
}

func (x *MyStructEnsureStruct) writeField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    if !x.IsSetStructWithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithCustomDefault", thrift.STRUCT, -32); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    if !x.IsSetI32WithCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("i32WithCustomDefault", thrift.I32, -31); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI32WithCustomDefaultNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapMapNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListMapNonCompat()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptMapValNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptSetValNonCompat()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptListValNonCompat()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptEnumValNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRING, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBinaryValNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStringValNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptDoubleValNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptFloatValNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI64ValNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI32ValNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI16ValNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptByteValNonCompat()
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBoolValNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLateStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUnionValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructValNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_10(p thrift.Protocol) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnumValNonCompat()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRING, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryValNonCompat()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_8(p thrift.Protocol) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStringValNonCompat()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDoubleValNonCompat()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_6(p thrift.Protocol) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetFloatValNonCompat()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_5(p thrift.Protocol) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI64ValNonCompat()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_4(p thrift.Protocol) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI32ValNonCompat()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_3(p thrift.Protocol) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI16ValNonCompat()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_2(p thrift.Protocol) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetByteValNonCompat()
    if err := p.WriteByte(byte(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_1(p thrift.Protocol) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBoolValNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    if !x.IsSetStructWithFieldCustomDefault() {
        return nil
    }

    if err := p.WriteFieldBegin("structWithFieldCustomDefault", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStructWithFieldCustomDefaultNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) readField_32(p thrift.Protocol) error {  // StructWithCustomDefault
    result := *NewMyDataWithCustomDefault()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_31(p thrift.Protocol) error {  // I32WithCustomDefault
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32WithCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_30(p thrift.Protocol) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapMapNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_29(p thrift.Protocol) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListMapNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_28(p thrift.Protocol) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetOptMapValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_27(p thrift.Protocol) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetOptSetValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_26(p thrift.Protocol) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetOptListValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_23(p thrift.Protocol) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetOptEnumValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetOptBinaryValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_21(p thrift.Protocol) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOptStringValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetOptDoubleValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetOptFloatValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_18(p thrift.Protocol) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetOptI64ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_17(p thrift.Protocol) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOptI32ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_16(p thrift.Protocol) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetOptI16ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_15(p thrift.Protocol) error {  // OptByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.SetOptByteValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetOptBoolValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_10(p thrift.Protocol) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_9(p thrift.Protocol) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_8(p thrift.Protocol) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_7(p thrift.Protocol) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_6(p thrift.Protocol) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_5(p thrift.Protocol) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetI64ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_4(p thrift.Protocol) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_3(p thrift.Protocol) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetI16ValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_2(p thrift.Protocol) error {  // ByteVal
    resultByte, err := p.ReadByte()
result := int8(resultByte)
if err != nil {
    return err
}

    x.SetByteValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_1(p thrift.Protocol) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolValNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) readField1(p thrift.Protocol) error {  // StructWithFieldCustomDefault
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructWithFieldCustomDefaultNonCompat(result)
    return nil
}

func (x *MyStructEnsureStruct) toString_32() string {  // StructWithCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithCustomDefaultNonCompat())
}

func (x *MyStructEnsureStruct) toString_31() string {  // I32WithCustomDefault
    if x.IsSetI32WithCustomDefault() {
        return fmt.Sprintf("%v", *x.GetI32WithCustomDefaultNonCompat())
    }
    return fmt.Sprintf("%v", x.GetI32WithCustomDefaultNonCompat())
}

func (x *MyStructEnsureStruct) toString_30() string {  // MapMap
    return fmt.Sprintf("%v", x.GetMapMapNonCompat())
}

func (x *MyStructEnsureStruct) toString_29() string {  // ListMap
    return fmt.Sprintf("%v", x.GetListMapNonCompat())
}

func (x *MyStructEnsureStruct) toString_28() string {  // OptMapVal
    return fmt.Sprintf("%v", x.GetOptMapValNonCompat())
}

func (x *MyStructEnsureStruct) toString_27() string {  // OptSetVal
    return fmt.Sprintf("%v", x.GetOptSetValNonCompat())
}

func (x *MyStructEnsureStruct) toString_26() string {  // OptListVal
    return fmt.Sprintf("%v", x.GetOptListValNonCompat())
}

func (x *MyStructEnsureStruct) toString_25() string {  // OptLateStructVal
    return fmt.Sprintf("%v", x.GetOptLateStructValNonCompat())
}

func (x *MyStructEnsureStruct) toString_24() string {  // OptStructVal
    return fmt.Sprintf("%v", x.GetOptStructValNonCompat())
}

func (x *MyStructEnsureStruct) toString_23() string {  // OptEnumVal
    if x.IsSetOptEnumVal() {
        return fmt.Sprintf("%v", *x.GetOptEnumValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptEnumValNonCompat())
}

func (x *MyStructEnsureStruct) toString_22() string {  // OptBinaryVal
    return fmt.Sprintf("%v", x.GetOptBinaryValNonCompat())
}

func (x *MyStructEnsureStruct) toString_21() string {  // OptStringVal
    if x.IsSetOptStringVal() {
        return fmt.Sprintf("%v", *x.GetOptStringValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptStringValNonCompat())
}

func (x *MyStructEnsureStruct) toString_20() string {  // OptDoubleVal
    if x.IsSetOptDoubleVal() {
        return fmt.Sprintf("%v", *x.GetOptDoubleValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptDoubleValNonCompat())
}

func (x *MyStructEnsureStruct) toString_19() string {  // OptFloatVal
    if x.IsSetOptFloatVal() {
        return fmt.Sprintf("%v", *x.GetOptFloatValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptFloatValNonCompat())
}

func (x *MyStructEnsureStruct) toString_18() string {  // OptI64Val
    if x.IsSetOptI64Val() {
        return fmt.Sprintf("%v", *x.GetOptI64ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI64ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_17() string {  // OptI32Val
    if x.IsSetOptI32Val() {
        return fmt.Sprintf("%v", *x.GetOptI32ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI32ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_16() string {  // OptI16Val
    if x.IsSetOptI16Val() {
        return fmt.Sprintf("%v", *x.GetOptI16ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptI16ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_15() string {  // OptByteVal
    if x.IsSetOptByteVal() {
        return fmt.Sprintf("%v", *x.GetOptByteValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptByteValNonCompat())
}

func (x *MyStructEnsureStruct) toString_14() string {  // OptBoolVal
    if x.IsSetOptBoolVal() {
        return fmt.Sprintf("%v", *x.GetOptBoolValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetOptBoolValNonCompat())
}

func (x *MyStructEnsureStruct) toString_13() string {  // LateStructVal
    return fmt.Sprintf("%v", x.GetLateStructValNonCompat())
}

func (x *MyStructEnsureStruct) toString_12() string {  // UnionVal
    return fmt.Sprintf("%v", x.GetUnionValNonCompat())
}

func (x *MyStructEnsureStruct) toString_11() string {  // StructVal
    return fmt.Sprintf("%v", x.GetStructValNonCompat())
}

func (x *MyStructEnsureStruct) toString_10() string {  // EnumVal
    if x.IsSetEnumVal() {
        return fmt.Sprintf("%v", *x.GetEnumValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetEnumValNonCompat())
}

func (x *MyStructEnsureStruct) toString_9() string {  // BinaryVal
    return fmt.Sprintf("%v", x.GetBinaryValNonCompat())
}

func (x *MyStructEnsureStruct) toString_8() string {  // StringVal
    if x.IsSetStringVal() {
        return fmt.Sprintf("%v", *x.GetStringValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetStringValNonCompat())
}

func (x *MyStructEnsureStruct) toString_7() string {  // DoubleVal
    if x.IsSetDoubleVal() {
        return fmt.Sprintf("%v", *x.GetDoubleValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetDoubleValNonCompat())
}

func (x *MyStructEnsureStruct) toString_6() string {  // FloatVal
    if x.IsSetFloatVal() {
        return fmt.Sprintf("%v", *x.GetFloatValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetFloatValNonCompat())
}

func (x *MyStructEnsureStruct) toString_5() string {  // I64Val
    if x.IsSetI64Val() {
        return fmt.Sprintf("%v", *x.GetI64ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetI64ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_4() string {  // I32Val
    if x.IsSetI32Val() {
        return fmt.Sprintf("%v", *x.GetI32ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetI32ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_3() string {  // I16Val
    if x.IsSetI16Val() {
        return fmt.Sprintf("%v", *x.GetI16ValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetI16ValNonCompat())
}

func (x *MyStructEnsureStruct) toString_2() string {  // ByteVal
    if x.IsSetByteVal() {
        return fmt.Sprintf("%v", *x.GetByteValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetByteValNonCompat())
}

func (x *MyStructEnsureStruct) toString_1() string {  // BoolVal
    if x.IsSetBoolVal() {
        return fmt.Sprintf("%v", *x.GetBoolValNonCompat())
    }
    return fmt.Sprintf("%v", x.GetBoolValNonCompat())
}

func (x *MyStructEnsureStruct) toString1() string {  // StructWithFieldCustomDefault
    return fmt.Sprintf("%v", x.GetStructWithFieldCustomDefaultNonCompat())
}

// Deprecated: Use NewMyStructEnsureStruct().GetStructWithCustomDefault() instead.
var MyStructEnsureStruct_StructWithCustomDefault_DEFAULT = NewMyStructEnsureStruct().GetStructWithCustomDefault()

// Deprecated: Use NewMyStructEnsureStruct().GetStructWithCustomDefault() instead.
func (x *MyStructEnsureStruct) DefaultGetStructWithCustomDefault() *MyDataWithCustomDefault {
    if !x.IsSetStructWithCustomDefault() {
        return NewMyDataWithCustomDefault()
    }
    return x.StructWithCustomDefault
}

// Deprecated: Use NewMyStructEnsureStruct().GetI32WithCustomDefault() instead.
var MyStructEnsureStruct_I32WithCustomDefault_DEFAULT = NewMyStructEnsureStruct().GetI32WithCustomDefault()

// Deprecated: Use NewMyStructEnsureStruct().GetOptLateStructVal() instead.
var MyStructEnsureStruct_OptLateStructVal_DEFAULT = NewMyStructEnsureStruct().GetOptLateStructVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptLateStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetOptLateStructVal() *LateDefStruct {
    if !x.IsSetOptLateStructVal() {
        return NewLateDefStruct()
    }
    return x.OptLateStructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetOptStructVal() instead.
var MyStructEnsureStruct_OptStructVal_DEFAULT = NewMyStructEnsureStruct().GetOptStructVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetOptStructVal() *MyData {
    if !x.IsSetOptStructVal() {
        return NewMyData()
    }
    return x.OptStructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetOptEnumVal() instead.
var MyStructEnsureStruct_OptEnumVal_DEFAULT = NewMyStructEnsureStruct().GetOptEnumVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptStringVal() instead.
var MyStructEnsureStruct_OptStringVal_DEFAULT = NewMyStructEnsureStruct().GetOptStringVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptDoubleVal() instead.
var MyStructEnsureStruct_OptDoubleVal_DEFAULT = NewMyStructEnsureStruct().GetOptDoubleVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptFloatVal() instead.
var MyStructEnsureStruct_OptFloatVal_DEFAULT = NewMyStructEnsureStruct().GetOptFloatVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptI64Val() instead.
var MyStructEnsureStruct_OptI64Val_DEFAULT = NewMyStructEnsureStruct().GetOptI64Val()

// Deprecated: Use NewMyStructEnsureStruct().GetOptI32Val() instead.
var MyStructEnsureStruct_OptI32Val_DEFAULT = NewMyStructEnsureStruct().GetOptI32Val()

// Deprecated: Use NewMyStructEnsureStruct().GetOptI16Val() instead.
var MyStructEnsureStruct_OptI16Val_DEFAULT = NewMyStructEnsureStruct().GetOptI16Val()

// Deprecated: Use NewMyStructEnsureStruct().GetOptByteVal() instead.
var MyStructEnsureStruct_OptByteVal_DEFAULT = NewMyStructEnsureStruct().GetOptByteVal()

// Deprecated: Use NewMyStructEnsureStruct().GetOptBoolVal() instead.
var MyStructEnsureStruct_OptBoolVal_DEFAULT = NewMyStructEnsureStruct().GetOptBoolVal()

// Deprecated: Use NewMyStructEnsureStruct().GetLateStructVal() instead.
var MyStructEnsureStruct_LateStructVal_DEFAULT = NewMyStructEnsureStruct().GetLateStructVal()

// Deprecated: Use NewMyStructEnsureStruct().GetLateStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetLateStructVal() *LateDefStruct {
    if !x.IsSetLateStructVal() {
        return NewLateDefStruct()
    }
    return x.LateStructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetUnionVal() instead.
var MyStructEnsureStruct_UnionVal_DEFAULT = NewMyStructEnsureStruct().GetUnionVal()

// Deprecated: Use NewMyStructEnsureStruct().GetUnionVal() instead.
func (x *MyStructEnsureStruct) DefaultGetUnionVal() *MyUnion {
    if !x.IsSetUnionVal() {
        return NewMyUnion()
    }
    return x.UnionVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetStructVal() instead.
var MyStructEnsureStruct_StructVal_DEFAULT = NewMyStructEnsureStruct().GetStructVal()

// Deprecated: Use NewMyStructEnsureStruct().GetStructVal() instead.
func (x *MyStructEnsureStruct) DefaultGetStructVal() *MyData {
    if !x.IsSetStructVal() {
        return NewMyData()
    }
    return x.StructVal
}

// Deprecated: Use NewMyStructEnsureStruct().GetEnumVal() instead.
var MyStructEnsureStruct_EnumVal_DEFAULT = NewMyStructEnsureStruct().GetEnumVal()

// Deprecated: Use NewMyStructEnsureStruct().GetStringVal() instead.
var MyStructEnsureStruct_StringVal_DEFAULT = NewMyStructEnsureStruct().GetStringVal()

// Deprecated: Use NewMyStructEnsureStruct().GetDoubleVal() instead.
var MyStructEnsureStruct_DoubleVal_DEFAULT = NewMyStructEnsureStruct().GetDoubleVal()

// Deprecated: Use NewMyStructEnsureStruct().GetFloatVal() instead.
var MyStructEnsureStruct_FloatVal_DEFAULT = NewMyStructEnsureStruct().GetFloatVal()

// Deprecated: Use NewMyStructEnsureStruct().GetI64Val() instead.
var MyStructEnsureStruct_I64Val_DEFAULT = NewMyStructEnsureStruct().GetI64Val()

// Deprecated: Use NewMyStructEnsureStruct().GetI32Val() instead.
var MyStructEnsureStruct_I32Val_DEFAULT = NewMyStructEnsureStruct().GetI32Val()

// Deprecated: Use NewMyStructEnsureStruct().GetI16Val() instead.
var MyStructEnsureStruct_I16Val_DEFAULT = NewMyStructEnsureStruct().GetI16Val()

// Deprecated: Use NewMyStructEnsureStruct().GetByteVal() instead.
var MyStructEnsureStruct_ByteVal_DEFAULT = NewMyStructEnsureStruct().GetByteVal()

// Deprecated: Use NewMyStructEnsureStruct().GetBoolVal() instead.
var MyStructEnsureStruct_BoolVal_DEFAULT = NewMyStructEnsureStruct().GetBoolVal()

// Deprecated: Use NewMyStructEnsureStruct().GetStructWithFieldCustomDefault() instead.
var MyStructEnsureStruct_StructWithFieldCustomDefault_DEFAULT = NewMyStructEnsureStruct().GetStructWithFieldCustomDefault()

// Deprecated: Use NewMyStructEnsureStruct().GetStructWithFieldCustomDefault() instead.
func (x *MyStructEnsureStruct) DefaultGetStructWithFieldCustomDefault() *MyData {
    if !x.IsSetStructWithFieldCustomDefault() {
        return NewMyData()
    }
    return x.StructWithFieldCustomDefault
}


// Deprecated: Use MyStructEnsureStruct.Set* methods instead or set the fields directly.
type MyStructEnsureStructBuilder struct {
    obj *MyStructEnsureStruct
}

func NewMyStructEnsureStructBuilder() *MyStructEnsureStructBuilder {
    return &MyStructEnsureStructBuilder{
        obj: NewMyStructEnsureStruct(),
    }
}

func (x *MyStructEnsureStructBuilder) StructWithCustomDefault(value *MyDataWithCustomDefault) *MyStructEnsureStructBuilder {
    x.obj.StructWithCustomDefault = value
    return x
}

func (x *MyStructEnsureStructBuilder) I32WithCustomDefault(value *int32) *MyStructEnsureStructBuilder {
    x.obj.I32WithCustomDefault = value
    return x
}

func (x *MyStructEnsureStructBuilder) MapMap(value map[string]map[string]int32) *MyStructEnsureStructBuilder {
    x.obj.MapMap = value
    return x
}

func (x *MyStructEnsureStructBuilder) ListMap(value []map[string]int32) *MyStructEnsureStructBuilder {
    x.obj.ListMap = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptMapVal(value map[string]string) *MyStructEnsureStructBuilder {
    x.obj.OptMapVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptSetVal(value []string) *MyStructEnsureStructBuilder {
    x.obj.OptSetVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptListVal(value []int16) *MyStructEnsureStructBuilder {
    x.obj.OptListVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptLateStructVal(value *LateDefStruct) *MyStructEnsureStructBuilder {
    x.obj.OptLateStructVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptStructVal(value *MyData) *MyStructEnsureStructBuilder {
    x.obj.OptStructVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptEnumVal(value *MyEnum) *MyStructEnsureStructBuilder {
    x.obj.OptEnumVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptBinaryVal(value []byte) *MyStructEnsureStructBuilder {
    x.obj.OptBinaryVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptStringVal(value *string) *MyStructEnsureStructBuilder {
    x.obj.OptStringVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptDoubleVal(value *float64) *MyStructEnsureStructBuilder {
    x.obj.OptDoubleVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptFloatVal(value *float32) *MyStructEnsureStructBuilder {
    x.obj.OptFloatVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptI64Val(value *int64) *MyStructEnsureStructBuilder {
    x.obj.OptI64Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptI32Val(value *int32) *MyStructEnsureStructBuilder {
    x.obj.OptI32Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptI16Val(value *int16) *MyStructEnsureStructBuilder {
    x.obj.OptI16Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptByteVal(value *int8) *MyStructEnsureStructBuilder {
    x.obj.OptByteVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) OptBoolVal(value *bool) *MyStructEnsureStructBuilder {
    x.obj.OptBoolVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) LateStructVal(value *LateDefStruct) *MyStructEnsureStructBuilder {
    x.obj.LateStructVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) UnionVal(value *MyUnion) *MyStructEnsureStructBuilder {
    x.obj.UnionVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) StructVal(value *MyData) *MyStructEnsureStructBuilder {
    x.obj.StructVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) EnumVal(value *MyEnum) *MyStructEnsureStructBuilder {
    x.obj.EnumVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) BinaryVal(value []byte) *MyStructEnsureStructBuilder {
    x.obj.BinaryVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) StringVal(value *string) *MyStructEnsureStructBuilder {
    x.obj.StringVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) DoubleVal(value *float64) *MyStructEnsureStructBuilder {
    x.obj.DoubleVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) FloatVal(value *float32) *MyStructEnsureStructBuilder {
    x.obj.FloatVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) I64Val(value *int64) *MyStructEnsureStructBuilder {
    x.obj.I64Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) I32Val(value *int32) *MyStructEnsureStructBuilder {
    x.obj.I32Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) I16Val(value *int16) *MyStructEnsureStructBuilder {
    x.obj.I16Val = value
    return x
}

func (x *MyStructEnsureStructBuilder) ByteVal(value *int8) *MyStructEnsureStructBuilder {
    x.obj.ByteVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) BoolVal(value *bool) *MyStructEnsureStructBuilder {
    x.obj.BoolVal = value
    return x
}

func (x *MyStructEnsureStructBuilder) StructWithFieldCustomDefault(value *MyData) *MyStructEnsureStructBuilder {
    x.obj.StructWithFieldCustomDefault = value
    return x
}

func (x *MyStructEnsureStructBuilder) Emit() *MyStructEnsureStruct {
    var objCopy MyStructEnsureStruct = *x.obj
    return &objCopy
}

func (x *MyStructEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_32(p); err != nil {
        return err
    }

    if err := x.writeField_31(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -32:  // structWithCustomDefault
            if err := x.readField_32(p); err != nil {
                return err
            }
        case -31:  // i32WithCustomDefault
            if err := x.readField_31(p); err != nil {
                return err
            }
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case 1:  // structWithFieldCustomDefault
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *MyStructEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("MyStructEnsureStruct({")
    sb.WriteString(fmt.Sprintf("StructWithCustomDefault:%s ", x.toString_32()))
    sb.WriteString(fmt.Sprintf("I32WithCustomDefault:%s ", x.toString_31()))
    sb.WriteString(fmt.Sprintf("MapMap:%s ", x.toString_30()))
    sb.WriteString(fmt.Sprintf("ListMap:%s ", x.toString_29()))
    sb.WriteString(fmt.Sprintf("OptMapVal:%s ", x.toString_28()))
    sb.WriteString(fmt.Sprintf("OptSetVal:%s ", x.toString_27()))
    sb.WriteString(fmt.Sprintf("OptListVal:%s ", x.toString_26()))
    sb.WriteString(fmt.Sprintf("OptLateStructVal:%s ", x.toString_25()))
    sb.WriteString(fmt.Sprintf("OptStructVal:%s ", x.toString_24()))
    sb.WriteString(fmt.Sprintf("OptEnumVal:%s ", x.toString_23()))
    sb.WriteString(fmt.Sprintf("OptBinaryVal:%s ", x.toString_22()))
    sb.WriteString(fmt.Sprintf("OptStringVal:%s ", x.toString_21()))
    sb.WriteString(fmt.Sprintf("OptDoubleVal:%s ", x.toString_20()))
    sb.WriteString(fmt.Sprintf("OptFloatVal:%s ", x.toString_19()))
    sb.WriteString(fmt.Sprintf("OptI64Val:%s ", x.toString_18()))
    sb.WriteString(fmt.Sprintf("OptI32Val:%s ", x.toString_17()))
    sb.WriteString(fmt.Sprintf("OptI16Val:%s ", x.toString_16()))
    sb.WriteString(fmt.Sprintf("OptByteVal:%s ", x.toString_15()))
    sb.WriteString(fmt.Sprintf("OptBoolVal:%s ", x.toString_14()))
    sb.WriteString(fmt.Sprintf("LateStructVal:%s ", x.toString_13()))
    sb.WriteString(fmt.Sprintf("UnionVal:%s ", x.toString_12()))
    sb.WriteString(fmt.Sprintf("StructVal:%s ", x.toString_11()))
    sb.WriteString(fmt.Sprintf("EnumVal:%s ", x.toString_10()))
    sb.WriteString(fmt.Sprintf("BinaryVal:%s ", x.toString_9()))
    sb.WriteString(fmt.Sprintf("StringVal:%s ", x.toString_8()))
    sb.WriteString(fmt.Sprintf("DoubleVal:%s ", x.toString_7()))
    sb.WriteString(fmt.Sprintf("FloatVal:%s ", x.toString_6()))
    sb.WriteString(fmt.Sprintf("I64Val:%s ", x.toString_5()))
    sb.WriteString(fmt.Sprintf("I32Val:%s ", x.toString_4()))
    sb.WriteString(fmt.Sprintf("I16Val:%s ", x.toString_3()))
    sb.WriteString(fmt.Sprintf("ByteVal:%s ", x.toString_2()))
    sb.WriteString(fmt.Sprintf("BoolVal:%s ", x.toString_1()))
    sb.WriteString(fmt.Sprintf("StructWithFieldCustomDefault:%s", x.toString1()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructPatch struct {
    Assign *LateDefStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *LateDefStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *LateDefStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *LateDefStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructPatch{}

func NewLateDefStructPatch() *LateDefStructPatch {
    return (&LateDefStructPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewLateDefStructFieldPatch()).
        SetEnsureNonCompat(*NewLateDefStructEnsureStruct()).
        SetPatchNonCompat(*NewLateDefStructFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *LateDefStructPatch) GetAssignNonCompat() *LateDefStruct {
    return x.Assign
}

func (x *LateDefStructPatch) GetAssign() *LateDefStruct {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *LateDefStructPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *LateDefStructPatch) GetClear() bool {
    return x.Clear
}

func (x *LateDefStructPatch) GetPatchPriorNonCompat() *LateDefStructFieldPatch {
    return x.PatchPrior
}

func (x *LateDefStructPatch) GetPatchPrior() *LateDefStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *LateDefStructPatch) GetEnsureNonCompat() *LateDefStructEnsureStruct {
    return x.Ensure
}

func (x *LateDefStructPatch) GetEnsure() *LateDefStructEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *LateDefStructPatch) GetPatchNonCompat() *LateDefStructFieldPatch {
    return x.Patch
}

func (x *LateDefStructPatch) GetPatch() *LateDefStructFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *LateDefStructPatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *LateDefStructPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *LateDefStructPatch) SetAssignNonCompat(value LateDefStruct) *LateDefStructPatch {
    x.Assign = &value
    return x
}

func (x *LateDefStructPatch) SetAssign(value *LateDefStruct) *LateDefStructPatch {
    x.Assign = value
    return x
}

func (x *LateDefStructPatch) SetClearNonCompat(value bool) *LateDefStructPatch {
    x.Clear = value
    return x
}

func (x *LateDefStructPatch) SetClear(value bool) *LateDefStructPatch {
    x.Clear = value
    return x
}

func (x *LateDefStructPatch) SetPatchPriorNonCompat(value LateDefStructFieldPatch) *LateDefStructPatch {
    x.PatchPrior = &value
    return x
}

func (x *LateDefStructPatch) SetPatchPrior(value *LateDefStructFieldPatch) *LateDefStructPatch {
    x.PatchPrior = value
    return x
}

func (x *LateDefStructPatch) SetEnsureNonCompat(value LateDefStructEnsureStruct) *LateDefStructPatch {
    x.Ensure = &value
    return x
}

func (x *LateDefStructPatch) SetEnsure(value *LateDefStructEnsureStruct) *LateDefStructPatch {
    x.Ensure = value
    return x
}

func (x *LateDefStructPatch) SetPatchNonCompat(value LateDefStructFieldPatch) *LateDefStructPatch {
    x.Patch = &value
    return x
}

func (x *LateDefStructPatch) SetPatch(value *LateDefStructFieldPatch) *LateDefStructPatch {
    x.Patch = value
    return x
}

func (x *LateDefStructPatch) SetRemoveNonCompat(value patch.FieldIdList) *LateDefStructPatch {
    x.Remove = value
    return x
}

func (x *LateDefStructPatch) SetRemove(value patch.FieldIdList) *LateDefStructPatch {
    x.Remove = value
    return x
}

func (x *LateDefStructPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *LateDefStructPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *LateDefStructPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *LateDefStructPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *LateDefStructPatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *LateDefStructPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewLateDefStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *LateDefStructPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *LateDefStructPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *LateDefStructPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *LateDefStructPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *LateDefStructPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *LateDefStructPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewLateDefStructPatch().GetAssign() instead.
var LateDefStructPatch_Assign_DEFAULT = NewLateDefStructPatch().GetAssign()

// Deprecated: Use NewLateDefStructPatch().GetAssign() instead.
func (x *LateDefStructPatch) DefaultGetAssign() *LateDefStruct {
    if !x.IsSetAssign() {
        return NewLateDefStruct()
    }
    return x.Assign
}

// Deprecated: Use NewLateDefStructPatch().GetPatchPrior() instead.
var LateDefStructPatch_PatchPrior_DEFAULT = NewLateDefStructPatch().GetPatchPrior()

// Deprecated: Use NewLateDefStructPatch().GetPatchPrior() instead.
func (x *LateDefStructPatch) DefaultGetPatchPrior() *LateDefStructFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewLateDefStructFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewLateDefStructPatch().GetEnsure() instead.
var LateDefStructPatch_Ensure_DEFAULT = NewLateDefStructPatch().GetEnsure()

// Deprecated: Use NewLateDefStructPatch().GetEnsure() instead.
func (x *LateDefStructPatch) DefaultGetEnsure() *LateDefStructEnsureStruct {
    if !x.IsSetEnsure() {
        return NewLateDefStructEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewLateDefStructPatch().GetPatch() instead.
var LateDefStructPatch_Patch_DEFAULT = NewLateDefStructPatch().GetPatch()

// Deprecated: Use NewLateDefStructPatch().GetPatch() instead.
func (x *LateDefStructPatch) DefaultGetPatch() *LateDefStructFieldPatch {
    if !x.IsSetPatch() {
        return NewLateDefStructFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use LateDefStructPatch.Set* methods instead or set the fields directly.
type LateDefStructPatchBuilder struct {
    obj *LateDefStructPatch
}

func NewLateDefStructPatchBuilder() *LateDefStructPatchBuilder {
    return &LateDefStructPatchBuilder{
        obj: NewLateDefStructPatch(),
    }
}

func (x *LateDefStructPatchBuilder) Assign(value *LateDefStruct) *LateDefStructPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *LateDefStructPatchBuilder) Clear(value bool) *LateDefStructPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *LateDefStructPatchBuilder) PatchPrior(value *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *LateDefStructPatchBuilder) Ensure(value *LateDefStructEnsureStruct) *LateDefStructPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *LateDefStructPatchBuilder) Patch(value *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *LateDefStructPatchBuilder) Remove(value patch.FieldIdList) *LateDefStructPatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *LateDefStructPatchBuilder) Emit() *LateDefStructPatch {
    var objCopy LateDefStructPatch = *x.obj
    return &objCopy
}

func (x *LateDefStructPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructFieldPatch struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructFieldPatch{}

func NewLateDefStructFieldPatch() *LateDefStructFieldPatch {
    return (&LateDefStructFieldPatch{})
}


// Deprecated: Use LateDefStructFieldPatch.Set* methods instead or set the fields directly.
type LateDefStructFieldPatchBuilder struct {
    obj *LateDefStructFieldPatch
}

func NewLateDefStructFieldPatchBuilder() *LateDefStructFieldPatchBuilder {
    return &LateDefStructFieldPatchBuilder{
        obj: NewLateDefStructFieldPatch(),
    }
}

func (x *LateDefStructFieldPatchBuilder) Emit() *LateDefStructFieldPatch {
    var objCopy LateDefStructFieldPatch = *x.obj
    return &objCopy
}

func (x *LateDefStructFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructFieldPatch({")
    sb.WriteString("})")

    return sb.String()
}

type LateDefStructEnsureStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructEnsureStruct{}

func NewLateDefStructEnsureStruct() *LateDefStructEnsureStruct {
    return (&LateDefStructEnsureStruct{})
}


// Deprecated: Use LateDefStructEnsureStruct.Set* methods instead or set the fields directly.
type LateDefStructEnsureStructBuilder struct {
    obj *LateDefStructEnsureStruct
}

func NewLateDefStructEnsureStructBuilder() *LateDefStructEnsureStructBuilder {
    return &LateDefStructEnsureStructBuilder{
        obj: NewLateDefStructEnsureStruct(),
    }
}

func (x *LateDefStructEnsureStructBuilder) Emit() *LateDefStructEnsureStruct {
    var objCopy LateDefStructEnsureStruct = *x.obj
    return &objCopy
}

func (x *LateDefStructEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LateDefStructEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LateDefStructEnsureStruct({")
    sb.WriteString("})")

    return sb.String()
}

type RecursivePatch struct {
    Assign *Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *RecursiveFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *RecursiveEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *RecursiveFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursivePatch{}

func NewRecursivePatch() *RecursivePatch {
    return (&RecursivePatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewRecursiveFieldPatch()).
        SetEnsureNonCompat(*NewRecursiveEnsureStruct()).
        SetPatchNonCompat(*NewRecursiveFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *RecursivePatch) GetAssignNonCompat() *Recursive {
    return x.Assign
}

func (x *RecursivePatch) GetAssign() *Recursive {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *RecursivePatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *RecursivePatch) GetClear() bool {
    return x.Clear
}

func (x *RecursivePatch) GetPatchPriorNonCompat() *RecursiveFieldPatch {
    return x.PatchPrior
}

func (x *RecursivePatch) GetPatchPrior() *RecursiveFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *RecursivePatch) GetEnsureNonCompat() *RecursiveEnsureStruct {
    return x.Ensure
}

func (x *RecursivePatch) GetEnsure() *RecursiveEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *RecursivePatch) GetPatchNonCompat() *RecursiveFieldPatch {
    return x.Patch
}

func (x *RecursivePatch) GetPatch() *RecursiveFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *RecursivePatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *RecursivePatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *RecursivePatch) SetAssignNonCompat(value Recursive) *RecursivePatch {
    x.Assign = &value
    return x
}

func (x *RecursivePatch) SetAssign(value *Recursive) *RecursivePatch {
    x.Assign = value
    return x
}

func (x *RecursivePatch) SetClearNonCompat(value bool) *RecursivePatch {
    x.Clear = value
    return x
}

func (x *RecursivePatch) SetClear(value bool) *RecursivePatch {
    x.Clear = value
    return x
}

func (x *RecursivePatch) SetPatchPriorNonCompat(value RecursiveFieldPatch) *RecursivePatch {
    x.PatchPrior = &value
    return x
}

func (x *RecursivePatch) SetPatchPrior(value *RecursiveFieldPatch) *RecursivePatch {
    x.PatchPrior = value
    return x
}

func (x *RecursivePatch) SetEnsureNonCompat(value RecursiveEnsureStruct) *RecursivePatch {
    x.Ensure = &value
    return x
}

func (x *RecursivePatch) SetEnsure(value *RecursiveEnsureStruct) *RecursivePatch {
    x.Ensure = value
    return x
}

func (x *RecursivePatch) SetPatchNonCompat(value RecursiveFieldPatch) *RecursivePatch {
    x.Patch = &value
    return x
}

func (x *RecursivePatch) SetPatch(value *RecursiveFieldPatch) *RecursivePatch {
    x.Patch = value
    return x
}

func (x *RecursivePatch) SetRemoveNonCompat(value patch.FieldIdList) *RecursivePatch {
    x.Remove = value
    return x
}

func (x *RecursivePatch) SetRemove(value patch.FieldIdList) *RecursivePatch {
    x.Remove = value
    return x
}

func (x *RecursivePatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *RecursivePatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *RecursivePatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *RecursivePatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *RecursivePatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *RecursivePatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *RecursivePatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *RecursivePatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *RecursivePatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewRecursiveEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *RecursivePatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *RecursivePatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *RecursivePatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *RecursivePatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *RecursivePatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *RecursivePatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *RecursivePatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *RecursivePatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewRecursivePatch().GetAssign() instead.
var RecursivePatch_Assign_DEFAULT = NewRecursivePatch().GetAssign()

// Deprecated: Use NewRecursivePatch().GetAssign() instead.
func (x *RecursivePatch) DefaultGetAssign() *Recursive {
    if !x.IsSetAssign() {
        return NewRecursive()
    }
    return x.Assign
}

// Deprecated: Use NewRecursivePatch().GetPatchPrior() instead.
var RecursivePatch_PatchPrior_DEFAULT = NewRecursivePatch().GetPatchPrior()

// Deprecated: Use NewRecursivePatch().GetPatchPrior() instead.
func (x *RecursivePatch) DefaultGetPatchPrior() *RecursiveFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewRecursiveFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewRecursivePatch().GetEnsure() instead.
var RecursivePatch_Ensure_DEFAULT = NewRecursivePatch().GetEnsure()

// Deprecated: Use NewRecursivePatch().GetEnsure() instead.
func (x *RecursivePatch) DefaultGetEnsure() *RecursiveEnsureStruct {
    if !x.IsSetEnsure() {
        return NewRecursiveEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewRecursivePatch().GetPatch() instead.
var RecursivePatch_Patch_DEFAULT = NewRecursivePatch().GetPatch()

// Deprecated: Use NewRecursivePatch().GetPatch() instead.
func (x *RecursivePatch) DefaultGetPatch() *RecursiveFieldPatch {
    if !x.IsSetPatch() {
        return NewRecursiveFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use RecursivePatch.Set* methods instead or set the fields directly.
type RecursivePatchBuilder struct {
    obj *RecursivePatch
}

func NewRecursivePatchBuilder() *RecursivePatchBuilder {
    return &RecursivePatchBuilder{
        obj: NewRecursivePatch(),
    }
}

func (x *RecursivePatchBuilder) Assign(value *Recursive) *RecursivePatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *RecursivePatchBuilder) Clear(value bool) *RecursivePatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *RecursivePatchBuilder) PatchPrior(value *RecursiveFieldPatch) *RecursivePatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *RecursivePatchBuilder) Ensure(value *RecursiveEnsureStruct) *RecursivePatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *RecursivePatchBuilder) Patch(value *RecursiveFieldPatch) *RecursivePatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *RecursivePatchBuilder) Remove(value patch.FieldIdList) *RecursivePatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *RecursivePatchBuilder) Emit() *RecursivePatch {
    var objCopy RecursivePatch = *x.obj
    return &objCopy
}

func (x *RecursivePatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursivePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursivePatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursivePatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveField1Patch struct {
    Assign map[string]*Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveField1Patch{}

func NewRecursiveField1Patch() *RecursiveField1Patch {
    return (&RecursiveField1Patch{}).
        SetClearNonCompat(false)
}

func (x *RecursiveField1Patch) GetAssignNonCompat() map[string]*Recursive {
    return x.Assign
}

func (x *RecursiveField1Patch) GetAssign() map[string]*Recursive {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *RecursiveField1Patch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *RecursiveField1Patch) GetClear() bool {
    return x.Clear
}

func (x *RecursiveField1Patch) SetAssignNonCompat(value map[string]*Recursive) *RecursiveField1Patch {
    x.Assign = value
    return x
}

func (x *RecursiveField1Patch) SetAssign(value map[string]*Recursive) *RecursiveField1Patch {
    x.Assign = value
    return x
}

func (x *RecursiveField1Patch) SetClearNonCompat(value bool) *RecursiveField1Patch {
    x.Clear = value
    return x
}

func (x *RecursiveField1Patch) SetClear(value bool) *RecursiveField1Patch {
    x.Clear = value
    return x
}

func (x *RecursiveField1Patch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *RecursiveField1Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssignNonCompat(result)
    return nil
}

func (x *RecursiveField1Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *RecursiveField1Patch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *RecursiveField1Patch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}


// Deprecated: Use RecursiveField1Patch.Set* methods instead or set the fields directly.
type RecursiveField1PatchBuilder struct {
    obj *RecursiveField1Patch
}

func NewRecursiveField1PatchBuilder() *RecursiveField1PatchBuilder {
    return &RecursiveField1PatchBuilder{
        obj: NewRecursiveField1Patch(),
    }
}

func (x *RecursiveField1PatchBuilder) Assign(value map[string]*Recursive) *RecursiveField1PatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *RecursiveField1PatchBuilder) Clear(value bool) *RecursiveField1PatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *RecursiveField1PatchBuilder) Emit() *RecursiveField1Patch {
    var objCopy RecursiveField1Patch = *x.obj
    return &objCopy
}

func (x *RecursiveField1Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveField1Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveField1Patch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveField1Patch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveFieldPatch struct {
    Nodes *RecursiveField1Patch `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveFieldPatch{}

func NewRecursiveFieldPatch() *RecursiveFieldPatch {
    return (&RecursiveFieldPatch{}).
        SetNodesNonCompat(*NewRecursiveField1Patch())
}

func (x *RecursiveFieldPatch) GetNodesNonCompat() *RecursiveField1Patch {
    return x.Nodes
}

func (x *RecursiveFieldPatch) GetNodes() *RecursiveField1Patch {
    if !x.IsSetNodes() {
        return nil
    }

    return x.Nodes
}

func (x *RecursiveFieldPatch) SetNodesNonCompat(value RecursiveField1Patch) *RecursiveFieldPatch {
    x.Nodes = &value
    return x
}

func (x *RecursiveFieldPatch) SetNodes(value *RecursiveField1Patch) *RecursiveFieldPatch {
    x.Nodes = value
    return x
}

func (x *RecursiveFieldPatch) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *RecursiveFieldPatch) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNodesNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) readField_1(p thrift.Protocol) error {  // Nodes
    result := *NewRecursiveField1Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetNodesNonCompat(result)
    return nil
}

func (x *RecursiveFieldPatch) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.GetNodesNonCompat())
}

// Deprecated: Use NewRecursiveFieldPatch().GetNodes() instead.
var RecursiveFieldPatch_Nodes_DEFAULT = NewRecursiveFieldPatch().GetNodes()

// Deprecated: Use NewRecursiveFieldPatch().GetNodes() instead.
func (x *RecursiveFieldPatch) DefaultGetNodes() *RecursiveField1Patch {
    if !x.IsSetNodes() {
        return NewRecursiveField1Patch()
    }
    return x.Nodes
}


// Deprecated: Use RecursiveFieldPatch.Set* methods instead or set the fields directly.
type RecursiveFieldPatchBuilder struct {
    obj *RecursiveFieldPatch
}

func NewRecursiveFieldPatchBuilder() *RecursiveFieldPatchBuilder {
    return &RecursiveFieldPatchBuilder{
        obj: NewRecursiveFieldPatch(),
    }
}

func (x *RecursiveFieldPatchBuilder) Nodes(value *RecursiveField1Patch) *RecursiveFieldPatchBuilder {
    x.obj.Nodes = value
    return x
}

func (x *RecursiveFieldPatchBuilder) Emit() *RecursiveFieldPatch {
    var objCopy RecursiveFieldPatch = *x.obj
    return &objCopy
}

func (x *RecursiveFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveFieldPatch({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type RecursiveEnsureStruct struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1,optional" json:"nodes,omitempty" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveEnsureStruct{}

func NewRecursiveEnsureStruct() *RecursiveEnsureStruct {
    return (&RecursiveEnsureStruct{})
}

func (x *RecursiveEnsureStruct) GetNodesNonCompat() map[string]*Recursive {
    return x.Nodes
}

func (x *RecursiveEnsureStruct) GetNodes() map[string]*Recursive {
    if !x.IsSetNodes() {
        return nil
    }

    return x.Nodes
}

func (x *RecursiveEnsureStruct) SetNodesNonCompat(value map[string]*Recursive) *RecursiveEnsureStruct {
    x.Nodes = value
    return x
}

func (x *RecursiveEnsureStruct) SetNodes(value map[string]*Recursive) *RecursiveEnsureStruct {
    x.Nodes = value
    return x
}

func (x *RecursiveEnsureStruct) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *RecursiveEnsureStruct) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNodesNonCompat()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) readField_1(p thrift.Protocol) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetNodesNonCompat(result)
    return nil
}

func (x *RecursiveEnsureStruct) toString_1() string {  // Nodes
    return fmt.Sprintf("%v", x.GetNodesNonCompat())
}


// Deprecated: Use RecursiveEnsureStruct.Set* methods instead or set the fields directly.
type RecursiveEnsureStructBuilder struct {
    obj *RecursiveEnsureStruct
}

func NewRecursiveEnsureStructBuilder() *RecursiveEnsureStructBuilder {
    return &RecursiveEnsureStructBuilder{
        obj: NewRecursiveEnsureStruct(),
    }
}

func (x *RecursiveEnsureStructBuilder) Nodes(value map[string]*Recursive) *RecursiveEnsureStructBuilder {
    x.obj.Nodes = value
    return x
}

func (x *RecursiveEnsureStructBuilder) Emit() *RecursiveEnsureStruct {
    var objCopy RecursiveEnsureStruct = *x.obj
    return &objCopy
}

func (x *RecursiveEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *RecursiveEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("RecursiveEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Nodes:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type BarPatch struct {
    Assign *Bar `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *BarFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *BarEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *BarFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove patch.FieldIdList `thrift:"remove,7" json:"remove" db:"remove"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarPatch{}

func NewBarPatch() *BarPatch {
    return (&BarPatch{}).
        SetClearNonCompat(false).
        SetPatchPriorNonCompat(*NewBarFieldPatch()).
        SetEnsureNonCompat(*NewBarEnsureStruct()).
        SetPatchNonCompat(*NewBarFieldPatch()).
        SetRemoveNonCompat(patch.NewFieldIdList())
}

func (x *BarPatch) GetAssignNonCompat() *Bar {
    return x.Assign
}

func (x *BarPatch) GetAssign() *Bar {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *BarPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *BarPatch) GetClear() bool {
    return x.Clear
}

func (x *BarPatch) GetPatchPriorNonCompat() *BarFieldPatch {
    return x.PatchPrior
}

func (x *BarPatch) GetPatchPrior() *BarFieldPatch {
    if !x.IsSetPatchPrior() {
        return nil
    }

    return x.PatchPrior
}

func (x *BarPatch) GetEnsureNonCompat() *BarEnsureStruct {
    return x.Ensure
}

func (x *BarPatch) GetEnsure() *BarEnsureStruct {
    if !x.IsSetEnsure() {
        return nil
    }

    return x.Ensure
}

func (x *BarPatch) GetPatchNonCompat() *BarFieldPatch {
    return x.Patch
}

func (x *BarPatch) GetPatch() *BarFieldPatch {
    if !x.IsSetPatch() {
        return nil
    }

    return x.Patch
}

func (x *BarPatch) GetRemoveNonCompat() patch.FieldIdList {
    return x.Remove
}

func (x *BarPatch) GetRemove() patch.FieldIdList {
    if !x.IsSetRemove() {
        return patch.NewFieldIdList()
    }

    return x.Remove
}

func (x *BarPatch) SetAssignNonCompat(value Bar) *BarPatch {
    x.Assign = &value
    return x
}

func (x *BarPatch) SetAssign(value *Bar) *BarPatch {
    x.Assign = value
    return x
}

func (x *BarPatch) SetClearNonCompat(value bool) *BarPatch {
    x.Clear = value
    return x
}

func (x *BarPatch) SetClear(value bool) *BarPatch {
    x.Clear = value
    return x
}

func (x *BarPatch) SetPatchPriorNonCompat(value BarFieldPatch) *BarPatch {
    x.PatchPrior = &value
    return x
}

func (x *BarPatch) SetPatchPrior(value *BarFieldPatch) *BarPatch {
    x.PatchPrior = value
    return x
}

func (x *BarPatch) SetEnsureNonCompat(value BarEnsureStruct) *BarPatch {
    x.Ensure = &value
    return x
}

func (x *BarPatch) SetEnsure(value *BarEnsureStruct) *BarPatch {
    x.Ensure = value
    return x
}

func (x *BarPatch) SetPatchNonCompat(value BarFieldPatch) *BarPatch {
    x.Patch = &value
    return x
}

func (x *BarPatch) SetPatch(value *BarFieldPatch) *BarPatch {
    x.Patch = value
    return x
}

func (x *BarPatch) SetRemoveNonCompat(value patch.FieldIdList) *BarPatch {
    x.Remove = value
    return x
}

func (x *BarPatch) SetRemove(value patch.FieldIdList) *BarPatch {
    x.Remove = value
    return x
}

func (x *BarPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *BarPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *BarPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *BarPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *BarPatch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *BarPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPriorNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnsureNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemoveNonCompat()
    err := patch.WriteFieldIdList(item, p)
if err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *BarPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *BarPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPriorNonCompat(result)
    return nil
}

func (x *BarPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewBarEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsureNonCompat(result)
    return nil
}

func (x *BarPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchNonCompat(result)
    return nil
}

func (x *BarPatch) readField7(p thrift.Protocol) error {  // Remove
    result, err := patch.ReadFieldIdList(p)
if err != nil {
    return err
}

    x.SetRemoveNonCompat(result)
    return nil
}

func (x *BarPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *BarPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

func (x *BarPatch) toString3() string {  // PatchPrior
    return fmt.Sprintf("%v", x.GetPatchPriorNonCompat())
}

func (x *BarPatch) toString5() string {  // Ensure
    return fmt.Sprintf("%v", x.GetEnsureNonCompat())
}

func (x *BarPatch) toString6() string {  // Patch
    return fmt.Sprintf("%v", x.GetPatchNonCompat())
}

func (x *BarPatch) toString7() string {  // Remove
    return fmt.Sprintf("%v", x.GetRemoveNonCompat())
}

// Deprecated: Use NewBarPatch().GetAssign() instead.
var BarPatch_Assign_DEFAULT = NewBarPatch().GetAssign()

// Deprecated: Use NewBarPatch().GetAssign() instead.
func (x *BarPatch) DefaultGetAssign() *Bar {
    if !x.IsSetAssign() {
        return NewBar()
    }
    return x.Assign
}

// Deprecated: Use NewBarPatch().GetPatchPrior() instead.
var BarPatch_PatchPrior_DEFAULT = NewBarPatch().GetPatchPrior()

// Deprecated: Use NewBarPatch().GetPatchPrior() instead.
func (x *BarPatch) DefaultGetPatchPrior() *BarFieldPatch {
    if !x.IsSetPatchPrior() {
        return NewBarFieldPatch()
    }
    return x.PatchPrior
}

// Deprecated: Use NewBarPatch().GetEnsure() instead.
var BarPatch_Ensure_DEFAULT = NewBarPatch().GetEnsure()

// Deprecated: Use NewBarPatch().GetEnsure() instead.
func (x *BarPatch) DefaultGetEnsure() *BarEnsureStruct {
    if !x.IsSetEnsure() {
        return NewBarEnsureStruct()
    }
    return x.Ensure
}

// Deprecated: Use NewBarPatch().GetPatch() instead.
var BarPatch_Patch_DEFAULT = NewBarPatch().GetPatch()

// Deprecated: Use NewBarPatch().GetPatch() instead.
func (x *BarPatch) DefaultGetPatch() *BarFieldPatch {
    if !x.IsSetPatch() {
        return NewBarFieldPatch()
    }
    return x.Patch
}


// Deprecated: Use BarPatch.Set* methods instead or set the fields directly.
type BarPatchBuilder struct {
    obj *BarPatch
}

func NewBarPatchBuilder() *BarPatchBuilder {
    return &BarPatchBuilder{
        obj: NewBarPatch(),
    }
}

func (x *BarPatchBuilder) Assign(value *Bar) *BarPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *BarPatchBuilder) Clear(value bool) *BarPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *BarPatchBuilder) PatchPrior(value *BarFieldPatch) *BarPatchBuilder {
    x.obj.PatchPrior = value
    return x
}

func (x *BarPatchBuilder) Ensure(value *BarEnsureStruct) *BarPatchBuilder {
    x.obj.Ensure = value
    return x
}

func (x *BarPatchBuilder) Patch(value *BarFieldPatch) *BarPatchBuilder {
    x.obj.Patch = value
    return x
}

func (x *BarPatchBuilder) Remove(value patch.FieldIdList) *BarPatchBuilder {
    x.obj.Remove = value
    return x
}

func (x *BarPatchBuilder) Emit() *BarPatch {
    var objCopy BarPatch = *x.obj
    return &objCopy
}

func (x *BarPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s ", x.toString2()))
    sb.WriteString(fmt.Sprintf("PatchPrior:%s ", x.toString3()))
    sb.WriteString(fmt.Sprintf("Ensure:%s ", x.toString5()))
    sb.WriteString(fmt.Sprintf("Patch:%s ", x.toString6()))
    sb.WriteString(fmt.Sprintf("Remove:%s", x.toString7()))
    sb.WriteString("})")

    return sb.String()
}

type BarFieldPatch struct {
    Loop *LoopPatch `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarFieldPatch{}

func NewBarFieldPatch() *BarFieldPatch {
    return (&BarFieldPatch{}).
        SetLoopNonCompat(*NewLoopPatch())
}

func (x *BarFieldPatch) GetLoopNonCompat() *LoopPatch {
    return x.Loop
}

func (x *BarFieldPatch) GetLoop() *LoopPatch {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *BarFieldPatch) SetLoopNonCompat(value LoopPatch) *BarFieldPatch {
    x.Loop = &value
    return x
}

func (x *BarFieldPatch) SetLoop(value *LoopPatch) *BarFieldPatch {
    x.Loop = value
    return x
}

func (x *BarFieldPatch) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *BarFieldPatch) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLoopNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoopPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoopNonCompat(result)
    return nil
}

func (x *BarFieldPatch) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.GetLoopNonCompat())
}

// Deprecated: Use NewBarFieldPatch().GetLoop() instead.
var BarFieldPatch_Loop_DEFAULT = NewBarFieldPatch().GetLoop()

// Deprecated: Use NewBarFieldPatch().GetLoop() instead.
func (x *BarFieldPatch) DefaultGetLoop() *LoopPatch {
    if !x.IsSetLoop() {
        return NewLoopPatch()
    }
    return x.Loop
}


// Deprecated: Use BarFieldPatch.Set* methods instead or set the fields directly.
type BarFieldPatchBuilder struct {
    obj *BarFieldPatch
}

func NewBarFieldPatchBuilder() *BarFieldPatchBuilder {
    return &BarFieldPatchBuilder{
        obj: NewBarFieldPatch(),
    }
}

func (x *BarFieldPatchBuilder) Loop(value *LoopPatch) *BarFieldPatchBuilder {
    x.obj.Loop = value
    return x
}

func (x *BarFieldPatchBuilder) Emit() *BarFieldPatch {
    var objCopy BarFieldPatch = *x.obj
    return &objCopy
}

func (x *BarFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarFieldPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarFieldPatch({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type BarEnsureStruct struct {
    Loop *Loop `thrift:"loop,-1,optional" json:"loop,omitempty" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarEnsureStruct{}

func NewBarEnsureStruct() *BarEnsureStruct {
    return (&BarEnsureStruct{})
}

func (x *BarEnsureStruct) GetLoopNonCompat() *Loop {
    return x.Loop
}

func (x *BarEnsureStruct) GetLoop() *Loop {
    if !x.IsSetLoop() {
        return nil
    }

    return x.Loop
}

func (x *BarEnsureStruct) SetLoopNonCompat(value Loop) *BarEnsureStruct {
    x.Loop = &value
    return x
}

func (x *BarEnsureStruct) SetLoop(value *Loop) *BarEnsureStruct {
    x.Loop = value
    return x
}

func (x *BarEnsureStruct) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *BarEnsureStruct) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetLoopNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoopNonCompat(result)
    return nil
}

func (x *BarEnsureStruct) toString_1() string {  // Loop
    return fmt.Sprintf("%v", x.GetLoopNonCompat())
}

// Deprecated: Use NewBarEnsureStruct().GetLoop() instead.
var BarEnsureStruct_Loop_DEFAULT = NewBarEnsureStruct().GetLoop()

// Deprecated: Use NewBarEnsureStruct().GetLoop() instead.
func (x *BarEnsureStruct) DefaultGetLoop() *Loop {
    if !x.IsSetLoop() {
        return NewLoop()
    }
    return x.Loop
}


// Deprecated: Use BarEnsureStruct.Set* methods instead or set the fields directly.
type BarEnsureStructBuilder struct {
    obj *BarEnsureStruct
}

func NewBarEnsureStructBuilder() *BarEnsureStructBuilder {
    return &BarEnsureStructBuilder{
        obj: NewBarEnsureStruct(),
    }
}

func (x *BarEnsureStructBuilder) Loop(value *Loop) *BarEnsureStructBuilder {
    x.obj.Loop = value
    return x
}

func (x *BarEnsureStructBuilder) Emit() *BarEnsureStruct {
    var objCopy BarEnsureStruct = *x.obj
    return &objCopy
}

func (x *BarEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *BarEnsureStruct) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("BarEnsureStruct({")
    sb.WriteString(fmt.Sprintf("Loop:%s", x.toString_1()))
    sb.WriteString("})")

    return sb.String()
}

type LoopPatch struct {
    Assign *Loop `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LoopPatch{}

func NewLoopPatch() *LoopPatch {
    return (&LoopPatch{}).
        SetClearNonCompat(false)
}

func (x *LoopPatch) GetAssignNonCompat() *Loop {
    return x.Assign
}

func (x *LoopPatch) GetAssign() *Loop {
    if !x.IsSetAssign() {
        return nil
    }

    return x.Assign
}

func (x *LoopPatch) GetClearNonCompat() bool {
    return x.Clear
}

func (x *LoopPatch) GetClear() bool {
    return x.Clear
}

func (x *LoopPatch) SetAssignNonCompat(value Loop) *LoopPatch {
    x.Assign = &value
    return x
}

func (x *LoopPatch) SetAssign(value *Loop) *LoopPatch {
    x.Assign = value
    return x
}

func (x *LoopPatch) SetClearNonCompat(value bool) *LoopPatch {
    x.Clear = value
    return x
}

func (x *LoopPatch) SetClear(value bool) *LoopPatch {
    x.Clear = value
    return x
}

func (x *LoopPatch) IsSetAssign() bool {
    return x.Assign != nil
}

func (x *LoopPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssignNonCompat()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClearNonCompat()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssignNonCompat(result)
    return nil
}

func (x *LoopPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClearNonCompat(result)
    return nil
}

func (x *LoopPatch) toString1() string {  // Assign
    return fmt.Sprintf("%v", x.GetAssignNonCompat())
}

func (x *LoopPatch) toString2() string {  // Clear
    return fmt.Sprintf("%v", x.GetClearNonCompat())
}

// Deprecated: Use NewLoopPatch().GetAssign() instead.
var LoopPatch_Assign_DEFAULT = NewLoopPatch().GetAssign()

// Deprecated: Use NewLoopPatch().GetAssign() instead.
func (x *LoopPatch) DefaultGetAssign() *Loop {
    if !x.IsSetAssign() {
        return NewLoop()
    }
    return x.Assign
}


// Deprecated: Use LoopPatch.Set* methods instead or set the fields directly.
type LoopPatchBuilder struct {
    obj *LoopPatch
}

func NewLoopPatchBuilder() *LoopPatchBuilder {
    return &LoopPatchBuilder{
        obj: NewLoopPatch(),
    }
}

func (x *LoopPatchBuilder) Assign(value *Loop) *LoopPatchBuilder {
    x.obj.Assign = value
    return x
}

func (x *LoopPatchBuilder) Clear(value bool) *LoopPatchBuilder {
    x.obj.Clear = value
    return x
}

func (x *LoopPatchBuilder) Emit() *LoopPatch {
    var objCopy LoopPatch = *x.obj
    return &objCopy
}

func (x *LoopPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LoopPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

func (x *LoopPatch) String() string {
    if x == nil {
        return "<nil>"
    }

    var sb strings.Builder

    sb.WriteString("LoopPatch({")
    sb.WriteString(fmt.Sprintf("Assign:%s ", x.toString1()))
    sb.WriteString(fmt.Sprintf("Clear:%s", x.toString2()))
    sb.WriteString("})")

    return sb.String()
}

// RegisterTypes registers types found in this file that have a thrift_uri with the passed in registry.
func RegisterTypes(registry interface {
	  RegisterType(name string, initializer func() any)
}) {
    registry.RegisterType("test.dev/fixtures/patch/MyData", func() any { return NewMyData() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefault", func() any { return NewMyDataWithCustomDefault() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnion", func() any { return NewInnerUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnion", func() any { return NewMyUnion() })
    registry.RegisterType("test.dev/fixtures/patch/MyStruct", func() any { return NewMyStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStruct", func() any { return NewLateDefStruct() })
    registry.RegisterType("test.dev/fixtures/patch/Recursive", func() any { return NewRecursive() })
    registry.RegisterType("test.dev/fixtures/patch/Bar", func() any { return NewBar() })
    registry.RegisterType("test.dev/fixtures/patch/Loop", func() any { return NewLoop() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataPatch", func() any { return NewMyDataPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataFieldPatch", func() any { return NewMyDataFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataEnsureStruct", func() any { return NewMyDataEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultPatch", func() any { return NewMyDataWithCustomDefaultPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultFieldPatch", func() any { return NewMyDataWithCustomDefaultFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyDataWithCustomDefaultEnsureStruct", func() any { return NewMyDataWithCustomDefaultEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnionPatch", func() any { return NewInnerUnionPatch() })
    registry.RegisterType("test.dev/fixtures/patch/InnerUnionFieldPatch", func() any { return NewInnerUnionFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnionPatch", func() any { return NewMyUnionPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyUnionFieldPatch", func() any { return NewMyUnionFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructPatch", func() any { return NewMyStructPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField10Patch", func() any { return NewMyStructField10Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField23Patch", func() any { return NewMyStructField23Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField26Patch", func() any { return NewMyStructField26Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField27Patch", func() any { return NewMyStructField27Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField28Patch", func() any { return NewMyStructField28Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField29Patch", func() any { return NewMyStructField29Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField30Patch", func() any { return NewMyStructField30Patch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructField30Patch1", func() any { return NewMyStructField30Patch1() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructFieldPatch", func() any { return NewMyStructFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/MyStructEnsureStruct", func() any { return NewMyStructEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructPatch", func() any { return NewLateDefStructPatch() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructFieldPatch", func() any { return NewLateDefStructFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/LateDefStructEnsureStruct", func() any { return NewLateDefStructEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/RecursivePatch", func() any { return NewRecursivePatch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveField1Patch", func() any { return NewRecursiveField1Patch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveFieldPatch", func() any { return NewRecursiveFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/RecursiveEnsureStruct", func() any { return NewRecursiveEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/BarPatch", func() any { return NewBarPatch() })
    registry.RegisterType("test.dev/fixtures/patch/BarFieldPatch", func() any { return NewBarFieldPatch() })
    registry.RegisterType("test.dev/fixtures/patch/BarEnsureStruct", func() any { return NewBarEnsureStruct() })
    registry.RegisterType("test.dev/fixtures/patch/LoopPatch", func() any { return NewLoopPatch() })

    registry.RegisterType("test.dev/fixtures/patch/MyEnum", func() any { return MyEnum(0) })
}
