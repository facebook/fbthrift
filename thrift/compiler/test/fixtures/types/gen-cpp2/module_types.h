/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/compiler/test/fixtures/types/gen-cpp2/include_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct field;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldA;
struct MyIntField;
struct a;
struct b;
struct a;
struct b;
struct z;
struct n;
struct a;
struct b;
struct z;
struct n;
struct small;
struct big;
struct medium;
struct biggish;
struct tiny;
struct MyIntField;
struct MyStringField;
struct majorVer;
struct data;
struct bar;
struct binary_field;
struct list_field;
struct foo;
struct ForwardUsageStruct;
struct ForwardUsageByRef;
struct foo;
struct boolField;
struct MyBoolField;
struct MyIntField;
struct MyStringField;
struct MyStringField2;
struct MyBinaryField;
struct MyBinaryField2;
struct MyBinaryField3;
struct MyBinaryListField4;
struct MyMapEnumAndInt;
struct string_field;
struct i32_field;
struct aa_list;
struct aa_set;
struct aa_map;
struct aa_string;
struct not_a_container;
struct not_a_container;
struct i32_field;
struct IntTypedef_field;
struct UintTypedef_field;
struct __field;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_z
#define APACHE_THRIFT_ACCESSOR_z
APACHE_THRIFT_DEFINE_ACCESSOR(z);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_n
#define APACHE_THRIFT_ACCESSOR_n
APACHE_THRIFT_DEFINE_ACCESSOR(n);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_a
#define APACHE_THRIFT_ACCESSOR_a
APACHE_THRIFT_DEFINE_ACCESSOR(a);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_b
#define APACHE_THRIFT_ACCESSOR_b
APACHE_THRIFT_DEFINE_ACCESSOR(b);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_z
#define APACHE_THRIFT_ACCESSOR_z
APACHE_THRIFT_DEFINE_ACCESSOR(z);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_n
#define APACHE_THRIFT_ACCESSOR_n
APACHE_THRIFT_DEFINE_ACCESSOR(n);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small
#define APACHE_THRIFT_ACCESSOR_small
APACHE_THRIFT_DEFINE_ACCESSOR(small);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_big
#define APACHE_THRIFT_ACCESSOR_big
APACHE_THRIFT_DEFINE_ACCESSOR(big);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_medium
#define APACHE_THRIFT_ACCESSOR_medium
APACHE_THRIFT_DEFINE_ACCESSOR(medium);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_biggish
#define APACHE_THRIFT_ACCESSOR_biggish
APACHE_THRIFT_DEFINE_ACCESSOR(biggish);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_tiny
#define APACHE_THRIFT_ACCESSOR_tiny
APACHE_THRIFT_DEFINE_ACCESSOR(tiny);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_majorVer
#define APACHE_THRIFT_ACCESSOR_majorVer
APACHE_THRIFT_DEFINE_ACCESSOR(majorVer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data
#define APACHE_THRIFT_ACCESSOR_data
APACHE_THRIFT_DEFINE_ACCESSOR(data);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_bar
#define APACHE_THRIFT_ACCESSOR_bar
APACHE_THRIFT_DEFINE_ACCESSOR(bar);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binary_field
#define APACHE_THRIFT_ACCESSOR_binary_field
APACHE_THRIFT_DEFINE_ACCESSOR(binary_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_list_field
#define APACHE_THRIFT_ACCESSOR_list_field
APACHE_THRIFT_DEFINE_ACCESSOR(list_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_foo
#define APACHE_THRIFT_ACCESSOR_foo
APACHE_THRIFT_DEFINE_ACCESSOR(foo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ForwardUsageStruct
#define APACHE_THRIFT_ACCESSOR_ForwardUsageStruct
APACHE_THRIFT_DEFINE_ACCESSOR(ForwardUsageStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ForwardUsageByRef
#define APACHE_THRIFT_ACCESSOR_ForwardUsageByRef
APACHE_THRIFT_DEFINE_ACCESSOR(ForwardUsageByRef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_foo
#define APACHE_THRIFT_ACCESSOR_foo
APACHE_THRIFT_DEFINE_ACCESSOR(foo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolField
#define APACHE_THRIFT_ACCESSOR_boolField
APACHE_THRIFT_DEFINE_ACCESSOR(boolField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBoolField
#define APACHE_THRIFT_ACCESSOR_MyBoolField
APACHE_THRIFT_DEFINE_ACCESSOR(MyBoolField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField2
#define APACHE_THRIFT_ACCESSOR_MyStringField2
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBinaryField
#define APACHE_THRIFT_ACCESSOR_MyBinaryField
APACHE_THRIFT_DEFINE_ACCESSOR(MyBinaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBinaryField2
#define APACHE_THRIFT_ACCESSOR_MyBinaryField2
APACHE_THRIFT_DEFINE_ACCESSOR(MyBinaryField2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBinaryField3
#define APACHE_THRIFT_ACCESSOR_MyBinaryField3
APACHE_THRIFT_DEFINE_ACCESSOR(MyBinaryField3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBinaryListField4
#define APACHE_THRIFT_ACCESSOR_MyBinaryListField4
APACHE_THRIFT_DEFINE_ACCESSOR(MyBinaryListField4);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyMapEnumAndInt
#define APACHE_THRIFT_ACCESSOR_MyMapEnumAndInt
APACHE_THRIFT_DEFINE_ACCESSOR(MyMapEnumAndInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_string_field
#define APACHE_THRIFT_ACCESSOR_string_field
APACHE_THRIFT_DEFINE_ACCESSOR(string_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32_field
#define APACHE_THRIFT_ACCESSOR_i32_field
APACHE_THRIFT_DEFINE_ACCESSOR(i32_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_list
#define APACHE_THRIFT_ACCESSOR_aa_list
APACHE_THRIFT_DEFINE_ACCESSOR(aa_list);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_set
#define APACHE_THRIFT_ACCESSOR_aa_set
APACHE_THRIFT_DEFINE_ACCESSOR(aa_set);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_map
#define APACHE_THRIFT_ACCESSOR_aa_map
APACHE_THRIFT_DEFINE_ACCESSOR(aa_map);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_aa_string
#define APACHE_THRIFT_ACCESSOR_aa_string
APACHE_THRIFT_DEFINE_ACCESSOR(aa_string);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_not_a_container
#define APACHE_THRIFT_ACCESSOR_not_a_container
APACHE_THRIFT_DEFINE_ACCESSOR(not_a_container);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_not_a_container
#define APACHE_THRIFT_ACCESSOR_not_a_container
APACHE_THRIFT_DEFINE_ACCESSOR(not_a_container);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32_field
#define APACHE_THRIFT_ACCESSOR_i32_field
APACHE_THRIFT_DEFINE_ACCESSOR(i32_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_IntTypedef_field
#define APACHE_THRIFT_ACCESSOR_IntTypedef_field
APACHE_THRIFT_DEFINE_ACCESSOR(IntTypedef_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_UintTypedef_field
#define APACHE_THRIFT_ACCESSOR_UintTypedef_field
APACHE_THRIFT_DEFINE_ACCESSOR(UintTypedef_field);
#endif
#ifndef APACHE_THRIFT_ACCESSOR___field
#define APACHE_THRIFT_ACCESSOR___field
APACHE_THRIFT_DEFINE_ACCESSOR(__field);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace apache { namespace thrift { namespace fixtures { namespace types {

enum class has_bitwise_ops {
  none = 0,
  zero = 1,
  one = 2,
  two = 4,
  three = 8,
};


inline constexpr has_bitwise_ops operator&(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) & static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator&=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a & b;
}

inline constexpr has_bitwise_ops operator|(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) | static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator|=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a | b;
}

inline constexpr has_bitwise_ops operator^(has_bitwise_ops a, has_bitwise_ops b) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(static_cast<U>(a) ^ static_cast<U>(b));
}
inline constexpr has_bitwise_ops& operator^=(has_bitwise_ops& a, has_bitwise_ops b) {
  return a = a ^ b;
}

inline constexpr has_bitwise_ops operator~(has_bitwise_ops a) {
  using E = has_bitwise_ops;
  using U = std::underlying_type_t<E>;
  return static_cast<E>(~static_cast<U>(a));
}

enum is_unscoped : int {
  hello = 0,
  world = 1,
};




enum class MyForwardRefEnum {
  ZERO = 0,
  NONZERO = 12,
};




enum class MyEnumA {
  fieldA = 1,
  fieldB = 2,
  fieldC = 4,
};




}}}} // apache::thrift::fixtures::types

namespace std {
template<> struct hash<::apache::thrift::fixtures::types::has_bitwise_ops> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::has_bitwise_ops> {};
template<> struct hash<::apache::thrift::fixtures::types::is_unscoped> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::is_unscoped> {};
template<> struct hash<::apache::thrift::fixtures::types::MyForwardRefEnum> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::MyForwardRefEnum> {};
template<> struct hash<::apache::thrift::fixtures::types::MyEnumA> :
  ::apache::thrift::detail::enum_hash<::apache::thrift::fixtures::types::MyEnumA> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::apache::thrift::fixtures::types::has_bitwise_ops>;

template <> struct TEnumTraits<::apache::thrift::fixtures::types::has_bitwise_ops> {
  using type = ::apache::thrift::fixtures::types::has_bitwise_ops;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::none; }
  static constexpr type max() { return type::three; }
};


template <> struct TEnumDataStorage<::apache::thrift::fixtures::types::is_unscoped>;

template <> struct TEnumTraits<::apache::thrift::fixtures::types::is_unscoped> {
  using type = ::apache::thrift::fixtures::types::is_unscoped;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::hello; }
  static constexpr type max() { return type::world; }
};


template <> struct TEnumDataStorage<::apache::thrift::fixtures::types::MyForwardRefEnum>;

template <> struct TEnumTraits<::apache::thrift::fixtures::types::MyForwardRefEnum> {
  using type = ::apache::thrift::fixtures::types::MyForwardRefEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::ZERO; }
  static constexpr type max() { return type::NONZERO; }
};


template <> struct TEnumDataStorage<::apache::thrift::fixtures::types::MyEnumA>;

template <> struct TEnumTraits<::apache::thrift::fixtures::types::MyEnumA> {
  using type = ::apache::thrift::fixtures::types::MyEnumA;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::fieldA; }
  static constexpr type max() { return type::fieldC; }
};


}} // apache::thrift

namespace apache { namespace thrift { namespace fixtures { namespace types {

using _has_bitwise_ops_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<has_bitwise_ops>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _has_bitwise_ops_EnumMapFactory::ValuesToNamesMapType _has_bitwise_ops_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _has_bitwise_ops_EnumMapFactory::NamesToValuesMapType _has_bitwise_ops_NAMES_TO_VALUES;

using _is_unscoped_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<is_unscoped>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _is_unscoped_EnumMapFactory::ValuesToNamesMapType _is_unscoped_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _is_unscoped_EnumMapFactory::NamesToValuesMapType _is_unscoped_NAMES_TO_VALUES;

using _MyForwardRefEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyForwardRefEnum>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyForwardRefEnum_EnumMapFactory::ValuesToNamesMapType _MyForwardRefEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyForwardRefEnum_EnumMapFactory::NamesToValuesMapType _MyForwardRefEnum_NAMES_TO_VALUES;

using _MyEnumA_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnumA>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES;

}}}} // apache::thrift::fixtures::types

// END declare_enums
// BEGIN forward_declare
namespace apache { namespace thrift { namespace fixtures { namespace types {
class decorated_struct;
class ContainerStruct;
class CppTypeStruct;
class VirtualStruct;
class MyStructWithForwardRefEnum;
class TrivialNumeric;
class TrivialNestedWithDefault;
class ComplexString;
class ComplexNestedWithDefault;
class MinPadding;
class MyDataItem;
class MyStruct;
class Renaming;
class AnnotatedTypes;
class ForwardUsageStruct;
class ForwardUsageRoot;
class ForwardUsageByRef;
class NoexceptMoveEmpty;
class NoexceptMoveSimpleStruct;
class NoexceptMoveComplexStruct;
class NoExceptMoveUnion;
class AllocatorAware;
class AllocatorAware2;
class TypedefStruct;
class StructWithDoubleUnderscores;
}}}} // apache::thrift::fixtures::types
// END forward_declare
// BEGIN typedefs
namespace apache { namespace thrift { namespace fixtures { namespace types {
typedef ::std::string TBinary;
typedef ::std::int32_t IntTypedef;
typedef ::apache::thrift::fixtures::types::IntTypedef UintTypedef;

}}}} // apache::thrift::fixtures::types
// END typedefs
// BEGIN hash_and_equal_to
namespace std {

template<> struct hash<typename ::apache::thrift::fixtures::types::decorated_struct> {
  size_t operator()(const ::apache::thrift::fixtures::types::decorated_struct&) const;
};
template<> struct equal_to<typename ::apache::thrift::fixtures::types::decorated_struct> {
  bool operator()(const ::apache::thrift::fixtures::types::decorated_struct&,const ::apache::thrift::fixtures::types::decorated_struct&) const;
};
} // std
// END hash_and_equal_to
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class decorated_struct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = decorated_struct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  decorated_struct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  decorated_struct(apache::thrift::FragileConstructor, ::std::string field__arg);

  decorated_struct(decorated_struct&&) noexcept;

  decorated_struct(const decorated_struct& src);


  decorated_struct& operator=(decorated_struct&&) noexcept;
  decorated_struct& operator=(const decorated_struct& src);
  void __clear();
 private:
  ::std::string field;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool field;
  } __isset = {};

 public:

  bool operator==(const decorated_struct&) const;
  bool operator<(const decorated_struct&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_ref() const& {
    return {this->field, __isset.field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_ref() const&& {
    return {std::move(this->field), __isset.field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_ref() & {
    return {this->field, __isset.field};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_ref() && {
    return {std::move(this->field), __isset.field};
  }

  const ::std::string& get_field() const& {
    return field;
  }

  ::std::string get_field() && {
    return std::move(field);
  }

  template <typename T_decorated_struct_field_struct_setter = ::std::string>
  [[deprecated("Use `FOO.field_ref() = BAR;` instead of `FOO.set_field(BAR);`")]]
  ::std::string& set_field(T_decorated_struct_field_struct_setter&& field_) {
    field = std::forward<T_decorated_struct_field_struct_setter>(field_);
    __isset.field = true;
    return field;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<decorated_struct>;
  friend void swap(decorated_struct& a, decorated_struct& b);
};

template <class Protocol_>
uint32_t decorated_struct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ContainerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ContainerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ContainerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ContainerStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> fieldA__arg, std::list<::std::int32_t> fieldB__arg, std::deque<::std::int32_t> fieldC__arg, folly::fbvector<::std::int32_t> fieldD__arg, folly::small_vector<::std::int32_t> fieldE__arg, folly::sorted_vector_set<::std::int32_t> fieldF__arg, folly::sorted_vector_map<::std::int32_t, ::std::string> fieldG__arg, ::apache::thrift::fixtures::types::SomeMap fieldH__arg);

  ContainerStruct(ContainerStruct&&) noexcept;

  ContainerStruct(const ContainerStruct& src);


  ContainerStruct& operator=(ContainerStruct&&) noexcept;
  ContainerStruct& operator=(const ContainerStruct& src);
  void __clear();

  ~ContainerStruct();

 private:
  ::std::vector<::std::int32_t> fieldA;
 private:
  std::list<::std::int32_t> fieldB;
 private:
  std::deque<::std::int32_t> fieldC;
 private:
  folly::fbvector<::std::int32_t> fieldD;
 private:
  folly::small_vector<::std::int32_t> fieldE;
 private:
  folly::sorted_vector_set<::std::int32_t> fieldF;
 private:
  folly::sorted_vector_map<::std::int32_t, ::std::string> fieldG;
 private:
  ::apache::thrift::fixtures::types::SomeMap fieldH;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool fieldA;
    bool fieldB;
    bool fieldC;
    bool fieldD;
    bool fieldE;
    bool fieldF;
    bool fieldG;
    bool fieldH;
  } __isset = {};

 public:

  bool operator==(const ContainerStruct&) const;
  bool operator<(const ContainerStruct&) const;

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA_ref() const& {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA_ref() const&& {
    return {std::move(this->fieldA), __isset.fieldA};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA_ref() & {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA_ref() && {
    return {std::move(this->fieldA), __isset.fieldA};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB_ref() const& {
    return {this->fieldB, __isset.fieldB};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB_ref() const&& {
    return {std::move(this->fieldB), __isset.fieldB};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB_ref() & {
    return {this->fieldB, __isset.fieldB};
  }

  template <typename..., typename T = std::list<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB_ref() && {
    return {std::move(this->fieldB), __isset.fieldB};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC_ref() const& {
    return {this->fieldC, __isset.fieldC};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC_ref() const&& {
    return {std::move(this->fieldC), __isset.fieldC};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC_ref() & {
    return {this->fieldC, __isset.fieldC};
  }

  template <typename..., typename T = std::deque<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC_ref() && {
    return {std::move(this->fieldC), __isset.fieldC};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD_ref() const& {
    return {this->fieldD, __isset.fieldD};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD_ref() const&& {
    return {std::move(this->fieldD), __isset.fieldD};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD_ref() & {
    return {this->fieldD, __isset.fieldD};
  }

  template <typename..., typename T = folly::fbvector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD_ref() && {
    return {std::move(this->fieldD), __isset.fieldD};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE_ref() const& {
    return {this->fieldE, __isset.fieldE};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE_ref() const&& {
    return {std::move(this->fieldE), __isset.fieldE};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE_ref() & {
    return {this->fieldE, __isset.fieldE};
  }

  template <typename..., typename T = folly::small_vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE_ref() && {
    return {std::move(this->fieldE), __isset.fieldE};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF_ref() const& {
    return {this->fieldF, __isset.fieldF};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF_ref() const&& {
    return {std::move(this->fieldF), __isset.fieldF};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF_ref() & {
    return {this->fieldF, __isset.fieldF};
  }

  template <typename..., typename T = folly::sorted_vector_set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF_ref() && {
    return {std::move(this->fieldF), __isset.fieldF};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG_ref() const& {
    return {this->fieldG, __isset.fieldG};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG_ref() const&& {
    return {std::move(this->fieldG), __isset.fieldG};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG_ref() & {
    return {this->fieldG, __isset.fieldG};
  }

  template <typename..., typename T = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG_ref() && {
    return {std::move(this->fieldG), __isset.fieldG};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH_ref() const& {
    return {this->fieldH, __isset.fieldH};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH_ref() const&& {
    return {std::move(this->fieldH), __isset.fieldH};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH_ref() & {
    return {this->fieldH, __isset.fieldH};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH_ref() && {
    return {std::move(this->fieldH), __isset.fieldH};
  }
  const ::std::vector<::std::int32_t>& get_fieldA() const&;
  ::std::vector<::std::int32_t> get_fieldA() &&;

  template <typename T_ContainerStruct_fieldA_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  ::std::vector<::std::int32_t>& set_fieldA(T_ContainerStruct_fieldA_struct_setter&& fieldA_) {
    fieldA = std::forward<T_ContainerStruct_fieldA_struct_setter>(fieldA_);
    __isset.fieldA = true;
    return fieldA;
  }
  const std::list<::std::int32_t>& get_fieldB() const&;
  std::list<::std::int32_t> get_fieldB() &&;

  template <typename T_ContainerStruct_fieldB_struct_setter = std::list<::std::int32_t>>
  [[deprecated("Use `FOO.fieldB_ref() = BAR;` instead of `FOO.set_fieldB(BAR);`")]]
  std::list<::std::int32_t>& set_fieldB(T_ContainerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB = std::forward<T_ContainerStruct_fieldB_struct_setter>(fieldB_);
    __isset.fieldB = true;
    return fieldB;
  }
  const std::deque<::std::int32_t>& get_fieldC() const&;
  std::deque<::std::int32_t> get_fieldC() &&;

  template <typename T_ContainerStruct_fieldC_struct_setter = std::deque<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC_ref() = BAR;` instead of `FOO.set_fieldC(BAR);`")]]
  std::deque<::std::int32_t>& set_fieldC(T_ContainerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC = std::forward<T_ContainerStruct_fieldC_struct_setter>(fieldC_);
    __isset.fieldC = true;
    return fieldC;
  }
  const folly::fbvector<::std::int32_t>& get_fieldD() const&;
  folly::fbvector<::std::int32_t> get_fieldD() &&;

  template <typename T_ContainerStruct_fieldD_struct_setter = folly::fbvector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldD_ref() = BAR;` instead of `FOO.set_fieldD(BAR);`")]]
  folly::fbvector<::std::int32_t>& set_fieldD(T_ContainerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD = std::forward<T_ContainerStruct_fieldD_struct_setter>(fieldD_);
    __isset.fieldD = true;
    return fieldD;
  }
  const folly::small_vector<::std::int32_t>& get_fieldE() const&;
  folly::small_vector<::std::int32_t> get_fieldE() &&;

  template <typename T_ContainerStruct_fieldE_struct_setter = folly::small_vector<::std::int32_t>>
  [[deprecated("Use `FOO.fieldE_ref() = BAR;` instead of `FOO.set_fieldE(BAR);`")]]
  folly::small_vector<::std::int32_t>& set_fieldE(T_ContainerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE = std::forward<T_ContainerStruct_fieldE_struct_setter>(fieldE_);
    __isset.fieldE = true;
    return fieldE;
  }
  const folly::sorted_vector_set<::std::int32_t>& get_fieldF() const&;
  folly::sorted_vector_set<::std::int32_t> get_fieldF() &&;

  template <typename T_ContainerStruct_fieldF_struct_setter = folly::sorted_vector_set<::std::int32_t>>
  [[deprecated("Use `FOO.fieldF_ref() = BAR;` instead of `FOO.set_fieldF(BAR);`")]]
  folly::sorted_vector_set<::std::int32_t>& set_fieldF(T_ContainerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF = std::forward<T_ContainerStruct_fieldF_struct_setter>(fieldF_);
    __isset.fieldF = true;
    return fieldF;
  }
  const folly::sorted_vector_map<::std::int32_t, ::std::string>& get_fieldG() const&;
  folly::sorted_vector_map<::std::int32_t, ::std::string> get_fieldG() &&;

  template <typename T_ContainerStruct_fieldG_struct_setter = folly::sorted_vector_map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.fieldG_ref() = BAR;` instead of `FOO.set_fieldG(BAR);`")]]
  folly::sorted_vector_map<::std::int32_t, ::std::string>& set_fieldG(T_ContainerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG = std::forward<T_ContainerStruct_fieldG_struct_setter>(fieldG_);
    __isset.fieldG = true;
    return fieldG;
  }
  const ::apache::thrift::fixtures::types::SomeMap& get_fieldH() const&;
  ::apache::thrift::fixtures::types::SomeMap get_fieldH() &&;

  template <typename T_ContainerStruct_fieldH_struct_setter = ::apache::thrift::fixtures::types::SomeMap>
  [[deprecated("Use `FOO.fieldH_ref() = BAR;` instead of `FOO.set_fieldH(BAR);`")]]
  ::apache::thrift::fixtures::types::SomeMap& set_fieldH(T_ContainerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH = std::forward<T_ContainerStruct_fieldH_struct_setter>(fieldH_);
    __isset.fieldH = true;
    return fieldH;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ContainerStruct>;
  friend void swap(ContainerStruct& a, ContainerStruct& b);
};

template <class Protocol_>
uint32_t ContainerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class CppTypeStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = CppTypeStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  CppTypeStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  CppTypeStruct(apache::thrift::FragileConstructor, std::list<int32_t> fieldA__arg);

  CppTypeStruct(CppTypeStruct&&) noexcept;

  CppTypeStruct(const CppTypeStruct& src);


  CppTypeStruct& operator=(CppTypeStruct&&) noexcept;
  CppTypeStruct& operator=(const CppTypeStruct& src);
  void __clear();
 private:
  std::list<int32_t> fieldA;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool fieldA;
  } __isset = {};

 public:

  bool operator==(const CppTypeStruct&) const;
  bool operator<(const CppTypeStruct&) const;

  template <typename..., typename T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA_ref() const& {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA_ref() const&& {
    return {std::move(this->fieldA), __isset.fieldA};
  }

  template <typename..., typename T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA_ref() & {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = std::list<int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA_ref() && {
    return {std::move(this->fieldA), __isset.fieldA};
  }
  const std::list<int32_t>& get_fieldA() const&;
  std::list<int32_t> get_fieldA() &&;

  template <typename T_CppTypeStruct_fieldA_struct_setter = std::list<int32_t>>
  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  std::list<int32_t>& set_fieldA(T_CppTypeStruct_fieldA_struct_setter&& fieldA_) {
    fieldA = std::forward<T_CppTypeStruct_fieldA_struct_setter>(fieldA_);
    __isset.fieldA = true;
    return fieldA;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<CppTypeStruct>;
  friend void swap(CppTypeStruct& a, CppTypeStruct& b);
};

template <class Protocol_>
uint32_t CppTypeStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class VirtualStruct  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = VirtualStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  VirtualStruct() :
      MyIntField(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  VirtualStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg);

  VirtualStruct(VirtualStruct&&) noexcept;

  VirtualStruct(const VirtualStruct& src);


  VirtualStruct& operator=(VirtualStruct&&) noexcept;
  VirtualStruct& operator=(const VirtualStruct& src);
  void __clear();

  virtual ~VirtualStruct() {}

 private:
  ::std::int64_t MyIntField;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool MyIntField;
  } __isset = {};

 public:

  bool operator==(const VirtualStruct&) const;
  bool operator<(const VirtualStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  ::std::int64_t get_MyIntField() const {
    return MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField = MyIntField_;
    __isset.MyIntField = true;
    return MyIntField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<VirtualStruct>;
  friend void swap(VirtualStruct& a, VirtualStruct& b);
};

template <class Protocol_>
uint32_t VirtualStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStructWithForwardRefEnum final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStructWithForwardRefEnum;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructWithForwardRefEnum() :
      a( ::apache::thrift::fixtures::types::MyForwardRefEnum::NONZERO),
      b( ::apache::thrift::fixtures::types::MyForwardRefEnum::NONZERO) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructWithForwardRefEnum(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::MyForwardRefEnum a__arg, ::apache::thrift::fixtures::types::MyForwardRefEnum b__arg);

  MyStructWithForwardRefEnum(MyStructWithForwardRefEnum&&) noexcept;

  MyStructWithForwardRefEnum(const MyStructWithForwardRefEnum& src);


  MyStructWithForwardRefEnum& operator=(MyStructWithForwardRefEnum&&) noexcept;
  MyStructWithForwardRefEnum& operator=(const MyStructWithForwardRefEnum& src);
  void __clear();
 private:
  ::apache::thrift::fixtures::types::MyForwardRefEnum a;
 private:
  ::apache::thrift::fixtures::types::MyForwardRefEnum b;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
  } __isset = {};

 public:

  bool operator==(const MyStructWithForwardRefEnum&) const;
  bool operator<(const MyStructWithForwardRefEnum&) const;

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyForwardRefEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  ::apache::thrift::fixtures::types::MyForwardRefEnum get_a() const {
    return a;
  }

  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum& set_a(::apache::thrift::fixtures::types::MyForwardRefEnum a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  ::apache::thrift::fixtures::types::MyForwardRefEnum get_b() const {
    return b;
  }

  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  ::apache::thrift::fixtures::types::MyForwardRefEnum& set_b(::apache::thrift::fixtures::types::MyForwardRefEnum b_) {
    b = b_;
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructWithForwardRefEnum>;
  friend void swap(MyStructWithForwardRefEnum& a, MyStructWithForwardRefEnum& b);
};

template <class Protocol_>
uint32_t MyStructWithForwardRefEnum::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class TrivialNumeric final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = TrivialNumeric;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TrivialNumeric() :
      a(0),
      b(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialNumeric(apache::thrift::FragileConstructor, ::std::int32_t a__arg, bool b__arg);

  TrivialNumeric(TrivialNumeric&&) = default;

  TrivialNumeric(const TrivialNumeric&) = default;


  TrivialNumeric& operator=(TrivialNumeric&&) = default;

  TrivialNumeric& operator=(const TrivialNumeric&) = default;
  void __clear();
 private:
  ::std::int32_t a;
 private:
  bool b;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
  } __isset = {};

 public:

  bool operator==(const TrivialNumeric&) const;
  bool operator<(const TrivialNumeric&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  ::std::int32_t get_a() const {
    return a;
  }

  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::int32_t& set_a(::std::int32_t a_) {
    a = a_;
    __isset.a = true;
    return a;
  }

  bool get_b() const {
    return b;
  }

  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  bool& set_b(bool b_) {
    b = b_;
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialNumeric>;
  friend void swap(TrivialNumeric& a, TrivialNumeric& b);
};

template <class Protocol_>
uint32_t TrivialNumeric::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class TrivialNestedWithDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = TrivialNestedWithDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TrivialNestedWithDefault() :
      z(4),
      n(::apache::thrift::detail::make_constant< ::apache::thrift::fixtures::types::TrivialNumeric>(::apache::thrift::type_class::structure{}, ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::a>(3), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::b>(true))) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TrivialNestedWithDefault(apache::thrift::FragileConstructor, ::std::int32_t z__arg, ::apache::thrift::fixtures::types::TrivialNumeric n__arg);

  TrivialNestedWithDefault(TrivialNestedWithDefault&&) = default;

  TrivialNestedWithDefault(const TrivialNestedWithDefault&) = default;


  TrivialNestedWithDefault& operator=(TrivialNestedWithDefault&&) = default;

  TrivialNestedWithDefault& operator=(const TrivialNestedWithDefault&) = default;
  void __clear();
 private:
  ::std::int32_t z;
 private:
  ::apache::thrift::fixtures::types::TrivialNumeric n;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool z;
    bool n;
  } __isset = {};

 public:

  bool operator==(const TrivialNestedWithDefault&) const;
  bool operator<(const TrivialNestedWithDefault&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> z_ref() const& {
    return {this->z, __isset.z};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> z_ref() const&& {
    return {std::move(this->z), __isset.z};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> z_ref() & {
    return {this->z, __isset.z};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> z_ref() && {
    return {std::move(this->z), __isset.z};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> n_ref() const& {
    return {this->n, __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> n_ref() const&& {
    return {std::move(this->n), __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> n_ref() & {
    return {this->n, __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TrivialNumeric>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> n_ref() && {
    return {std::move(this->n), __isset.n};
  }

  ::std::int32_t get_z() const {
    return z;
  }

  [[deprecated("Use `FOO.z_ref() = BAR;` instead of `FOO.set_z(BAR);`")]]
  ::std::int32_t& set_z(::std::int32_t z_) {
    z = z_;
    __isset.z = true;
    return z;
  }
  const ::apache::thrift::fixtures::types::TrivialNumeric& get_n() const&;
  ::apache::thrift::fixtures::types::TrivialNumeric get_n() &&;

  template <typename T_TrivialNestedWithDefault_n_struct_setter = ::apache::thrift::fixtures::types::TrivialNumeric>
  [[deprecated("Use `FOO.n_ref() = BAR;` instead of `FOO.set_n(BAR);`")]]
  ::apache::thrift::fixtures::types::TrivialNumeric& set_n(T_TrivialNestedWithDefault_n_struct_setter&& n_) {
    n = std::forward<T_TrivialNestedWithDefault_n_struct_setter>(n_);
    __isset.n = true;
    return n;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TrivialNestedWithDefault>;
  friend void swap(TrivialNestedWithDefault& a, TrivialNestedWithDefault& b);
};

template <class Protocol_>
uint32_t TrivialNestedWithDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ComplexString final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ComplexString;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ComplexString() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexString(apache::thrift::FragileConstructor, ::std::string a__arg, ::std::map<::std::string, ::std::int32_t> b__arg);

  ComplexString(ComplexString&&) noexcept;

  ComplexString(const ComplexString& src);


  ComplexString& operator=(ComplexString&&) noexcept;
  ComplexString& operator=(const ComplexString& src);
  void __clear();
 private:
  ::std::string a;
 private:
  ::std::map<::std::string, ::std::int32_t> b;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool a;
    bool b;
  } __isset = {};

 public:

  bool operator==(const ComplexString&) const;
  bool operator<(const ComplexString&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> a_ref() const& {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> a_ref() const&& {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> a_ref() & {
    return {this->a, __isset.a};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> a_ref() && {
    return {std::move(this->a), __isset.a};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> b_ref() const& {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> b_ref() const&& {
    return {std::move(this->b), __isset.b};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> b_ref() & {
    return {this->b, __isset.b};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> b_ref() && {
    return {std::move(this->b), __isset.b};
  }

  const ::std::string& get_a() const& {
    return a;
  }

  ::std::string get_a() && {
    return std::move(a);
  }

  template <typename T_ComplexString_a_struct_setter = ::std::string>
  [[deprecated("Use `FOO.a_ref() = BAR;` instead of `FOO.set_a(BAR);`")]]
  ::std::string& set_a(T_ComplexString_a_struct_setter&& a_) {
    a = std::forward<T_ComplexString_a_struct_setter>(a_);
    __isset.a = true;
    return a;
  }
  const ::std::map<::std::string, ::std::int32_t>& get_b() const&;
  ::std::map<::std::string, ::std::int32_t> get_b() &&;

  template <typename T_ComplexString_b_struct_setter = ::std::map<::std::string, ::std::int32_t>>
  [[deprecated("Use `FOO.b_ref() = BAR;` instead of `FOO.set_b(BAR);`")]]
  ::std::map<::std::string, ::std::int32_t>& set_b(T_ComplexString_b_struct_setter&& b_) {
    b = std::forward<T_ComplexString_b_struct_setter>(b_);
    __isset.b = true;
    return b;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexString>;
  friend void swap(ComplexString& a, ComplexString& b);
};

template <class Protocol_>
uint32_t ComplexString::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ComplexNestedWithDefault final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ComplexNestedWithDefault;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ComplexNestedWithDefault() :
      z(apache::thrift::StringTraits<std::string>::fromStringLiteral("4")),
      n(::apache::thrift::detail::make_constant< ::apache::thrift::fixtures::types::ComplexString>(::apache::thrift::type_class::structure{}, ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::a>(apache::thrift::StringTraits<std::string>::fromStringLiteral("3")), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::b>(std::initializer_list<std::pair<const ::std::string, ::std::int32_t>>{{apache::thrift::StringTraits<std::string>::fromStringLiteral("a"), 3}}))) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexNestedWithDefault(apache::thrift::FragileConstructor, ::std::string z__arg, ::apache::thrift::fixtures::types::ComplexString n__arg);

  ComplexNestedWithDefault(ComplexNestedWithDefault&&) noexcept;

  ComplexNestedWithDefault(const ComplexNestedWithDefault& src);


  ComplexNestedWithDefault& operator=(ComplexNestedWithDefault&&) noexcept;
  ComplexNestedWithDefault& operator=(const ComplexNestedWithDefault& src);
  void __clear();
 private:
  ::std::string z;
 private:
  ::apache::thrift::fixtures::types::ComplexString n;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool z;
    bool n;
  } __isset = {};

 public:

  bool operator==(const ComplexNestedWithDefault&) const;
  bool operator<(const ComplexNestedWithDefault&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> z_ref() const& {
    return {this->z, __isset.z};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> z_ref() const&& {
    return {std::move(this->z), __isset.z};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> z_ref() & {
    return {this->z, __isset.z};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> z_ref() && {
    return {std::move(this->z), __isset.z};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> n_ref() const& {
    return {this->n, __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> n_ref() const&& {
    return {std::move(this->n), __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> n_ref() & {
    return {this->n, __isset.n};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ComplexString>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> n_ref() && {
    return {std::move(this->n), __isset.n};
  }

  const ::std::string& get_z() const& {
    return z;
  }

  ::std::string get_z() && {
    return std::move(z);
  }

  template <typename T_ComplexNestedWithDefault_z_struct_setter = ::std::string>
  [[deprecated("Use `FOO.z_ref() = BAR;` instead of `FOO.set_z(BAR);`")]]
  ::std::string& set_z(T_ComplexNestedWithDefault_z_struct_setter&& z_) {
    z = std::forward<T_ComplexNestedWithDefault_z_struct_setter>(z_);
    __isset.z = true;
    return z;
  }
  const ::apache::thrift::fixtures::types::ComplexString& get_n() const&;
  ::apache::thrift::fixtures::types::ComplexString get_n() &&;

  template <typename T_ComplexNestedWithDefault_n_struct_setter = ::apache::thrift::fixtures::types::ComplexString>
  [[deprecated("Use `FOO.n_ref() = BAR;` instead of `FOO.set_n(BAR);`")]]
  ::apache::thrift::fixtures::types::ComplexString& set_n(T_ComplexNestedWithDefault_n_struct_setter&& n_) {
    n = std::forward<T_ComplexNestedWithDefault_n_struct_setter>(n_);
    __isset.n = true;
    return n;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexNestedWithDefault>;
  friend void swap(ComplexNestedWithDefault& a, ComplexNestedWithDefault& b);
};

template <class Protocol_>
uint32_t ComplexNestedWithDefault::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MinPadding final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MinPadding;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MinPadding() :
      big(0),
      biggish(0),
      medium(0),
      small(0),
      tiny(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MinPadding(apache::thrift::FragileConstructor, ::std::int8_t small__arg, ::std::int64_t big__arg, ::std::int16_t medium__arg, ::std::int32_t biggish__arg, ::std::int8_t tiny__arg);

  MinPadding(MinPadding&&) noexcept;

  MinPadding(const MinPadding& src);


  MinPadding& operator=(MinPadding&&) noexcept;
  MinPadding& operator=(const MinPadding& src);
  void __clear();
 public:
  ::std::int64_t big;
 public:
  ::std::int32_t biggish;
 public:
  ::std::int16_t medium;
 public:
  ::std::int8_t small;
 public:
  ::std::int8_t tiny;

 private:

 public:

  bool operator==(const MinPadding&) const;
  bool operator<(const MinPadding&) const;

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> small_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->small};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> small_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->small)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> small_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->small};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> small_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->small)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> big_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->big};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> big_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->big)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> big_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->big};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> big_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->big)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> medium_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->medium};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> medium_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->medium)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> medium_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->medium};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> medium_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->medium)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> biggish_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->biggish};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> biggish_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->biggish)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> biggish_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->biggish};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> biggish_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->biggish)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> tiny_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->tiny};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> tiny_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->tiny)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> tiny_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->tiny};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> tiny_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->tiny)};
  }

  ::std::int8_t get_small() const {
    return small;
  }

  [[deprecated("Use `FOO.small_ref() = BAR;` instead of `FOO.set_small(BAR);`")]]
  ::std::int8_t& set_small(::std::int8_t small_) {
    small = small_;
    return small;
  }

  ::std::int64_t get_big() const {
    return big;
  }

  [[deprecated("Use `FOO.big_ref() = BAR;` instead of `FOO.set_big(BAR);`")]]
  ::std::int64_t& set_big(::std::int64_t big_) {
    big = big_;
    return big;
  }

  ::std::int16_t get_medium() const {
    return medium;
  }

  [[deprecated("Use `FOO.medium_ref() = BAR;` instead of `FOO.set_medium(BAR);`")]]
  ::std::int16_t& set_medium(::std::int16_t medium_) {
    medium = medium_;
    return medium;
  }

  ::std::int32_t get_biggish() const {
    return biggish;
  }

  [[deprecated("Use `FOO.biggish_ref() = BAR;` instead of `FOO.set_biggish(BAR);`")]]
  ::std::int32_t& set_biggish(::std::int32_t biggish_) {
    biggish = biggish_;
    return biggish;
  }

  ::std::int8_t get_tiny() const {
    return tiny;
  }

  [[deprecated("Use `FOO.tiny_ref() = BAR;` instead of `FOO.set_tiny(BAR);`")]]
  ::std::int8_t& set_tiny(::std::int8_t tiny_) {
    tiny = tiny_;
    return tiny;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MinPadding>;
  friend void swap(MinPadding& a, MinPadding& b);
};

template <class Protocol_>
uint32_t MinPadding::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;
  void __clear();

 public:

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
uint32_t MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct() :
      MyIntField(0),
      majorVer(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::std::int64_t majorVer__arg, ::apache::thrift::fixtures::types::MyDataItem data__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
  void __clear();
 private:
  ::std::int64_t MyIntField;
 private:
  ::std::string MyStringField;
 private:
  ::std::int64_t majorVer;
 private:
  ::apache::thrift::fixtures::types::MyDataItem data;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool MyIntField;
    bool MyStringField;
    bool majorVer;
    bool data;
  } __isset = {};

 public:

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField_ref() const& {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField_ref() const&& {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField_ref() & {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField_ref() && {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> majorVer_ref() const& {
    return {this->majorVer, __isset.majorVer};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> majorVer_ref() const&& {
    return {std::move(this->majorVer), __isset.majorVer};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> majorVer_ref() & {
    return {this->majorVer, __isset.majorVer};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> majorVer_ref() && {
    return {std::move(this->majorVer), __isset.majorVer};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data_ref() const& {
    return {this->data, __isset.data};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data_ref() const&& {
    return {std::move(this->data), __isset.data};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data_ref() & {
    return {this->data, __isset.data};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data_ref() && {
    return {std::move(this->data), __isset.data};
  }

  ::std::int64_t get_MyIntField() const {
    return MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField = MyIntField_;
    __isset.MyIntField = true;
    return MyIntField;
  }

  const ::std::string& get_MyStringField() const& {
    return MyStringField;
  }

  ::std::string get_MyStringField() && {
    return std::move(MyStringField);
  }

  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField_ref() = BAR;` instead of `FOO.set_MyStringField(BAR);`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    __isset.MyStringField = true;
    return MyStringField;
  }

  ::std::int64_t get_majorVer() const {
    return majorVer;
  }

  [[deprecated("Use `FOO.majorVer_ref() = BAR;` instead of `FOO.set_majorVer(BAR);`")]]
  ::std::int64_t& set_majorVer(::std::int64_t majorVer_) {
    majorVer = majorVer_;
    __isset.majorVer = true;
    return majorVer;
  }
  const ::apache::thrift::fixtures::types::MyDataItem& get_data() const&;
  ::apache::thrift::fixtures::types::MyDataItem get_data() &&;

  template <typename T_MyStruct_data_struct_setter = ::apache::thrift::fixtures::types::MyDataItem>
  [[deprecated("Use `FOO.data_ref() = BAR;` instead of `FOO.set_data(BAR);`")]]
  ::apache::thrift::fixtures::types::MyDataItem& set_data(T_MyStruct_data_struct_setter&& data_) {
    data = std::forward<T_MyStruct_data_struct_setter>(data_);
    __isset.data = true;
    return data;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class Renaming final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Renaming;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Renaming() :
      bar(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Renaming(apache::thrift::FragileConstructor, ::std::int64_t bar__arg);

  Renaming(Renaming&&) = default;

  Renaming(const Renaming&) = default;


  Renaming& operator=(Renaming&&) = default;

  Renaming& operator=(const Renaming&) = default;
  void __clear();
 private:
  ::std::int64_t bar;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool bar;
  } __isset = {};

 public:

  bool operator==(const Renaming&) const;
  bool operator<(const Renaming&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> bar_ref() const& {
    return {this->bar, __isset.bar};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> bar_ref() const&& {
    return {std::move(this->bar), __isset.bar};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> bar_ref() & {
    return {this->bar, __isset.bar};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> bar_ref() && {
    return {std::move(this->bar), __isset.bar};
  }

  ::std::int64_t get_bar() const {
    return bar;
  }

  [[deprecated("Use `FOO.bar_ref() = BAR;` instead of `FOO.set_bar(BAR);`")]]
  ::std::int64_t& set_bar(::std::int64_t bar_) {
    bar = bar_;
    __isset.bar = true;
    return bar;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Renaming>;
  friend void swap(Renaming& a, Renaming& b);
};

template <class Protocol_>
uint32_t Renaming::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class AnnotatedTypes final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = AnnotatedTypes;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  AnnotatedTypes() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AnnotatedTypes(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::TBinary binary_field__arg, ::apache::thrift::fixtures::types::SomeListOfTypeMap list_field__arg);

  AnnotatedTypes(AnnotatedTypes&&) noexcept;

  AnnotatedTypes(const AnnotatedTypes& src);


  AnnotatedTypes& operator=(AnnotatedTypes&&) noexcept;
  AnnotatedTypes& operator=(const AnnotatedTypes& src);
  void __clear();
 private:
  ::apache::thrift::fixtures::types::TBinary binary_field;
 private:
  ::apache::thrift::fixtures::types::SomeListOfTypeMap list_field;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool binary_field;
    bool list_field;
  } __isset = {};

 public:

  bool operator==(const AnnotatedTypes&) const;
  bool operator<(const AnnotatedTypes&) const;

  template <typename..., typename T = ::apache::thrift::fixtures::types::TBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binary_field_ref() const& {
    return {this->binary_field, __isset.binary_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binary_field_ref() const&& {
    return {std::move(this->binary_field), __isset.binary_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binary_field_ref() & {
    return {this->binary_field, __isset.binary_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::TBinary>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binary_field_ref() && {
    return {std::move(this->binary_field), __isset.binary_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeListOfTypeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> list_field_ref() const& {
    return {this->list_field, __isset.list_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeListOfTypeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> list_field_ref() const&& {
    return {std::move(this->list_field), __isset.list_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeListOfTypeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> list_field_ref() & {
    return {this->list_field, __isset.list_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::SomeListOfTypeMap>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> list_field_ref() && {
    return {std::move(this->list_field), __isset.list_field};
  }

  const ::apache::thrift::fixtures::types::TBinary& get_binary_field() const& {
    return binary_field;
  }

  ::apache::thrift::fixtures::types::TBinary get_binary_field() && {
    return std::move(binary_field);
  }

  template <typename T_AnnotatedTypes_binary_field_struct_setter = ::apache::thrift::fixtures::types::TBinary>
  [[deprecated("Use `FOO.binary_field_ref() = BAR;` instead of `FOO.set_binary_field(BAR);`")]]
  ::apache::thrift::fixtures::types::TBinary& set_binary_field(T_AnnotatedTypes_binary_field_struct_setter&& binary_field_) {
    binary_field = std::forward<T_AnnotatedTypes_binary_field_struct_setter>(binary_field_);
    __isset.binary_field = true;
    return binary_field;
  }
  const ::apache::thrift::fixtures::types::SomeListOfTypeMap& get_list_field() const&;
  ::apache::thrift::fixtures::types::SomeListOfTypeMap get_list_field() &&;

  template <typename T_AnnotatedTypes_list_field_struct_setter = ::apache::thrift::fixtures::types::SomeListOfTypeMap>
  [[deprecated("Use `FOO.list_field_ref() = BAR;` instead of `FOO.set_list_field(BAR);`")]]
  ::apache::thrift::fixtures::types::SomeListOfTypeMap& set_list_field(T_AnnotatedTypes_list_field_struct_setter&& list_field_) {
    list_field = std::forward<T_AnnotatedTypes_list_field_struct_setter>(list_field_);
    __isset.list_field = true;
    return list_field;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AnnotatedTypes>;
  friend void swap(AnnotatedTypes& a, AnnotatedTypes& b);
};

template <class Protocol_>
uint32_t AnnotatedTypes::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ForwardUsageStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ForwardUsageStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ForwardUsageStruct() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageStruct(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::ForwardUsageRoot foo__arg);

  ForwardUsageStruct(ForwardUsageStruct&&) noexcept;

  ForwardUsageStruct(const ForwardUsageStruct& src);


  ForwardUsageStruct& operator=(ForwardUsageStruct&&) noexcept;
  ForwardUsageStruct& operator=(const ForwardUsageStruct& src);
  void __clear();
 private:
  ::apache::thrift::fixtures::types::ForwardUsageRoot foo;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool foo;
  } __isset = {};

 public:

  bool operator==(const ForwardUsageStruct&) const;
  bool operator<(const ForwardUsageStruct&) const;

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> foo_ref() const& {
    return {this->foo, __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> foo_ref() const&& {
    return {std::move(this->foo), __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> foo_ref() & {
    return {this->foo, __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> foo_ref() && {
    return {std::move(this->foo), __isset.foo};
  }
  const ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() const&;
  ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() &;
  ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() && = delete;

  template <typename T_ForwardUsageStruct_foo_struct_setter = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  [[deprecated("Use `FOO.foo_ref() = BAR;` instead of `FOO.set_foo(BAR);`")]]
  ::apache::thrift::fixtures::types::ForwardUsageRoot& set_foo(T_ForwardUsageStruct_foo_struct_setter&& foo_) {
    foo = std::forward<T_ForwardUsageStruct_foo_struct_setter>(foo_);
    __isset.foo = true;
    return foo;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageStruct>;
  friend void swap(ForwardUsageStruct& a, ForwardUsageStruct& b);
};

template <class Protocol_>
uint32_t ForwardUsageStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ForwardUsageRoot final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ForwardUsageRoot;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ForwardUsageRoot() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageRoot(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::ForwardUsageStruct ForwardUsageStruct__arg, ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef> ForwardUsageByRef__arg);

  ForwardUsageRoot(ForwardUsageRoot&&) noexcept;
  ForwardUsageRoot(const ForwardUsageRoot& src);


  ForwardUsageRoot& operator=(ForwardUsageRoot&&) noexcept;
  ForwardUsageRoot& operator=(const ForwardUsageRoot& src);
  void __clear();
 private:
  ::apache::thrift::fixtures::types::ForwardUsageStruct ForwardUsageStruct;
 public:
  ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef> ForwardUsageByRef;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool ForwardUsageStruct;
  } __isset = {};

 public:

  bool operator==(const ForwardUsageRoot&) const;
  bool operator<(const ForwardUsageRoot&) const;

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ForwardUsageStruct_ref() const& {
    return {this->ForwardUsageStruct, __isset.ForwardUsageStruct};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ForwardUsageStruct_ref() const&& {
    return {std::move(this->ForwardUsageStruct), __isset.ForwardUsageStruct};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ForwardUsageStruct_ref() & {
    return {this->ForwardUsageStruct, __isset.ForwardUsageStruct};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ForwardUsageStruct_ref() && {
    return {std::move(this->ForwardUsageStruct), __isset.ForwardUsageStruct};
  }
  template <typename ..., typename T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE T& ForwardUsageByRef_ref() & { return ForwardUsageByRef; }

  template <typename ..., typename T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const T& ForwardUsageByRef_ref() const& { return ForwardUsageByRef; }

  template <typename ..., typename T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE T&& ForwardUsageByRef_ref() && { return std::move(ForwardUsageByRef); }

  template <typename ..., typename T = ::std::unique_ptr<::apache::thrift::fixtures::types::ForwardUsageByRef>>
  FOLLY_ERASE const T&& ForwardUsageByRef_ref() const&& { return std::move(ForwardUsageByRef); }
  const ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() const&;
  ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() &;
  ::apache::thrift::fixtures::types::ForwardUsageStruct* get_ForwardUsageStruct() && = delete;

  template <typename T_ForwardUsageRoot_ForwardUsageStruct_struct_setter = ::apache::thrift::fixtures::types::ForwardUsageStruct>
  [[deprecated("Use `FOO.ForwardUsageStruct_ref() = BAR;` instead of `FOO.set_ForwardUsageStruct(BAR);`")]]
  ::apache::thrift::fixtures::types::ForwardUsageStruct& set_ForwardUsageStruct(T_ForwardUsageRoot_ForwardUsageStruct_struct_setter&& ForwardUsageStruct_) {
    ForwardUsageStruct = std::forward<T_ForwardUsageRoot_ForwardUsageStruct_struct_setter>(ForwardUsageStruct_);
    __isset.ForwardUsageStruct = true;
    return ForwardUsageStruct;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageRoot>;
  friend void swap(ForwardUsageRoot& a, ForwardUsageRoot& b);
};

template <class Protocol_>
uint32_t ForwardUsageRoot::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ForwardUsageByRef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ForwardUsageByRef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ForwardUsageByRef() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ForwardUsageByRef(apache::thrift::FragileConstructor, ::apache::thrift::fixtures::types::ForwardUsageRoot foo__arg);

  ForwardUsageByRef(ForwardUsageByRef&&) noexcept;

  ForwardUsageByRef(const ForwardUsageByRef& src);


  ForwardUsageByRef& operator=(ForwardUsageByRef&&) noexcept;
  ForwardUsageByRef& operator=(const ForwardUsageByRef& src);
  void __clear();
 private:
  ::apache::thrift::fixtures::types::ForwardUsageRoot foo;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool foo;
  } __isset = {};

 public:

  bool operator==(const ForwardUsageByRef&) const;
  bool operator<(const ForwardUsageByRef&) const;

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> foo_ref() const& {
    return {this->foo, __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> foo_ref() const&& {
    return {std::move(this->foo), __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> foo_ref() & {
    return {this->foo, __isset.foo};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> foo_ref() && {
    return {std::move(this->foo), __isset.foo};
  }
  const ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() const&;
  ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() &;
  ::apache::thrift::fixtures::types::ForwardUsageRoot* get_foo() && = delete;

  template <typename T_ForwardUsageByRef_foo_struct_setter = ::apache::thrift::fixtures::types::ForwardUsageRoot>
  [[deprecated("Use `FOO.foo_ref() = BAR;` instead of `FOO.set_foo(BAR);`")]]
  ::apache::thrift::fixtures::types::ForwardUsageRoot& set_foo(T_ForwardUsageByRef_foo_struct_setter&& foo_) {
    foo = std::forward<T_ForwardUsageByRef_foo_struct_setter>(foo_);
    __isset.foo = true;
    return foo;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ForwardUsageByRef>;
  friend void swap(ForwardUsageByRef& a, ForwardUsageByRef& b);
};

template <class Protocol_>
uint32_t ForwardUsageByRef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NoexceptMoveEmpty final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NoexceptMoveEmpty;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  NoexceptMoveEmpty() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NoexceptMoveEmpty(apache::thrift::FragileConstructor);

  NoexceptMoveEmpty(NoexceptMoveEmpty&&) = default;

  NoexceptMoveEmpty(const NoexceptMoveEmpty&) = default;


  NoexceptMoveEmpty& operator=(NoexceptMoveEmpty&&) = default;

  NoexceptMoveEmpty& operator=(const NoexceptMoveEmpty&) = default;
  void __clear();

 public:

  bool operator==(const NoexceptMoveEmpty&) const;
  bool operator<(const NoexceptMoveEmpty&) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NoexceptMoveEmpty>;
  friend void swap(NoexceptMoveEmpty& a, NoexceptMoveEmpty& b);
};

template <class Protocol_>
uint32_t NoexceptMoveEmpty::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NoexceptMoveSimpleStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NoexceptMoveSimpleStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  NoexceptMoveSimpleStruct() :
      boolField(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NoexceptMoveSimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t boolField__arg);

  NoexceptMoveSimpleStruct(NoexceptMoveSimpleStruct&&) = default;

  NoexceptMoveSimpleStruct(const NoexceptMoveSimpleStruct&) = default;


  NoexceptMoveSimpleStruct& operator=(NoexceptMoveSimpleStruct&&) = default;

  NoexceptMoveSimpleStruct& operator=(const NoexceptMoveSimpleStruct&) = default;
  void __clear();
 private:
  ::std::int64_t boolField;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool boolField;
  } __isset = {};

 public:

  bool operator==(const NoexceptMoveSimpleStruct&) const;
  bool operator<(const NoexceptMoveSimpleStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolField_ref() const& {
    return {this->boolField, __isset.boolField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolField_ref() const&& {
    return {std::move(this->boolField), __isset.boolField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolField_ref() & {
    return {this->boolField, __isset.boolField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolField_ref() && {
    return {std::move(this->boolField), __isset.boolField};
  }

  ::std::int64_t get_boolField() const {
    return boolField;
  }

  [[deprecated("Use `FOO.boolField_ref() = BAR;` instead of `FOO.set_boolField(BAR);`")]]
  ::std::int64_t& set_boolField(::std::int64_t boolField_) {
    boolField = boolField_;
    __isset.boolField = true;
    return boolField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NoexceptMoveSimpleStruct>;
  friend void swap(NoexceptMoveSimpleStruct& a, NoexceptMoveSimpleStruct& b);
};

template <class Protocol_>
uint32_t NoexceptMoveSimpleStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NoexceptMoveComplexStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NoexceptMoveComplexStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  NoexceptMoveComplexStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NoexceptMoveComplexStruct(apache::thrift::FragileConstructor, bool MyBoolField__arg, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::std::string MyStringField2__arg, ::std::string MyBinaryField__arg, ::std::string MyBinaryField2__arg, ::std::string MyBinaryField3__arg, ::std::vector<::std::string> MyBinaryListField4__arg, ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string> MyMapEnumAndInt__arg);

  NoexceptMoveComplexStruct(NoexceptMoveComplexStruct&&) noexcept;

  NoexceptMoveComplexStruct(const NoexceptMoveComplexStruct& src);


  NoexceptMoveComplexStruct& operator=(NoexceptMoveComplexStruct&&) noexcept;
  NoexceptMoveComplexStruct& operator=(const NoexceptMoveComplexStruct& src);
  void __clear();

  ~NoexceptMoveComplexStruct();

 private:
  bool MyBoolField;
 private:
  ::std::int64_t MyIntField;
 private:
  ::std::string MyStringField;
 private:
  ::std::string MyStringField2;
 private:
  ::std::string MyBinaryField;
 private:
  ::std::string MyBinaryField2;
 public:
  ::std::string MyBinaryField3;
 private:
  ::std::vector<::std::string> MyBinaryListField4;
 private:
  ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string> MyMapEnumAndInt;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool MyBoolField;
    bool MyIntField;
    bool MyStringField;
    bool MyStringField2;
    bool MyBinaryField;
    bool MyBinaryField2;
    bool MyBinaryListField4;
    bool MyMapEnumAndInt;
  } __isset = {};

 public:

  bool operator==(const NoexceptMoveComplexStruct&) const;
  bool operator<(const NoexceptMoveComplexStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyBoolField_ref() const& {
    return {this->MyBoolField, __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyBoolField_ref() const&& {
    return {std::move(this->MyBoolField), __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyBoolField_ref() & {
    return {this->MyBoolField, __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyBoolField_ref() && {
    return {std::move(this->MyBoolField), __isset.MyBoolField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField_ref() const& {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField_ref() const&& {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField_ref() & {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField_ref() && {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField2_ref() const& {
    return {this->MyStringField2, __isset.MyStringField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField2_ref() const&& {
    return {std::move(this->MyStringField2), __isset.MyStringField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField2_ref() & {
    return {this->MyStringField2, __isset.MyStringField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField2_ref() && {
    return {std::move(this->MyStringField2), __isset.MyStringField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyBinaryField_ref() const& {
    return {this->MyBinaryField, __isset.MyBinaryField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyBinaryField_ref() const&& {
    return {std::move(this->MyBinaryField), __isset.MyBinaryField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyBinaryField_ref() & {
    return {this->MyBinaryField, __isset.MyBinaryField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyBinaryField_ref() && {
    return {std::move(this->MyBinaryField), __isset.MyBinaryField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> MyBinaryField2_ref() const& {
    return {this->MyBinaryField2, __isset.MyBinaryField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> MyBinaryField2_ref() const&& {
    return {std::move(this->MyBinaryField2), __isset.MyBinaryField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> MyBinaryField2_ref() & {
    return {this->MyBinaryField2, __isset.MyBinaryField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> MyBinaryField2_ref() && {
    return {std::move(this->MyBinaryField2), __isset.MyBinaryField2};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> MyBinaryField3_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->MyBinaryField3};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> MyBinaryField3_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->MyBinaryField3)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> MyBinaryField3_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->MyBinaryField3};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> MyBinaryField3_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->MyBinaryField3)};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyBinaryListField4_ref() const& {
    return {this->MyBinaryListField4, __isset.MyBinaryListField4};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyBinaryListField4_ref() const&& {
    return {std::move(this->MyBinaryListField4), __isset.MyBinaryListField4};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyBinaryListField4_ref() & {
    return {this->MyBinaryListField4, __isset.MyBinaryListField4};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyBinaryListField4_ref() && {
    return {std::move(this->MyBinaryListField4), __isset.MyBinaryListField4};
  }

  template <typename..., typename T = ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyMapEnumAndInt_ref() const& {
    return {this->MyMapEnumAndInt, __isset.MyMapEnumAndInt};
  }

  template <typename..., typename T = ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyMapEnumAndInt_ref() const&& {
    return {std::move(this->MyMapEnumAndInt), __isset.MyMapEnumAndInt};
  }

  template <typename..., typename T = ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyMapEnumAndInt_ref() & {
    return {this->MyMapEnumAndInt, __isset.MyMapEnumAndInt};
  }

  template <typename..., typename T = ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyMapEnumAndInt_ref() && {
    return {std::move(this->MyMapEnumAndInt), __isset.MyMapEnumAndInt};
  }

  bool get_MyBoolField() const {
    return MyBoolField;
  }

  [[deprecated("Use `FOO.MyBoolField_ref() = BAR;` instead of `FOO.set_MyBoolField(BAR);`")]]
  bool& set_MyBoolField(bool MyBoolField_) {
    MyBoolField = MyBoolField_;
    __isset.MyBoolField = true;
    return MyBoolField;
  }

  ::std::int64_t get_MyIntField() const {
    return MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField = MyIntField_;
    __isset.MyIntField = true;
    return MyIntField;
  }

  const ::std::string& get_MyStringField() const& {
    return MyStringField;
  }

  ::std::string get_MyStringField() && {
    return std::move(MyStringField);
  }

  template <typename T_NoexceptMoveComplexStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField_ref() = BAR;` instead of `FOO.set_MyStringField(BAR);`")]]
  ::std::string& set_MyStringField(T_NoexceptMoveComplexStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField = std::forward<T_NoexceptMoveComplexStruct_MyStringField_struct_setter>(MyStringField_);
    __isset.MyStringField = true;
    return MyStringField;
  }

  const ::std::string& get_MyStringField2() const& {
    return MyStringField2;
  }

  ::std::string get_MyStringField2() && {
    return std::move(MyStringField2);
  }

  template <typename T_NoexceptMoveComplexStruct_MyStringField2_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField2_ref() = BAR;` instead of `FOO.set_MyStringField2(BAR);`")]]
  ::std::string& set_MyStringField2(T_NoexceptMoveComplexStruct_MyStringField2_struct_setter&& MyStringField2_) {
    MyStringField2 = std::forward<T_NoexceptMoveComplexStruct_MyStringField2_struct_setter>(MyStringField2_);
    __isset.MyStringField2 = true;
    return MyStringField2;
  }

  const ::std::string& get_MyBinaryField() const& {
    return MyBinaryField;
  }

  ::std::string get_MyBinaryField() && {
    return std::move(MyBinaryField);
  }

  template <typename T_NoexceptMoveComplexStruct_MyBinaryField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyBinaryField_ref() = BAR;` instead of `FOO.set_MyBinaryField(BAR);`")]]
  ::std::string& set_MyBinaryField(T_NoexceptMoveComplexStruct_MyBinaryField_struct_setter&& MyBinaryField_) {
    MyBinaryField = std::forward<T_NoexceptMoveComplexStruct_MyBinaryField_struct_setter>(MyBinaryField_);
    __isset.MyBinaryField = true;
    return MyBinaryField;
  }

  const ::std::string* get_MyBinaryField2() const& {
    return MyBinaryField2_ref() ? std::addressof(MyBinaryField2) : nullptr;
  }

  ::std::string* get_MyBinaryField2() & {
    return MyBinaryField2_ref() ? std::addressof(MyBinaryField2) : nullptr;
  }
  ::std::string* get_MyBinaryField2() && = delete;

  template <typename T_NoexceptMoveComplexStruct_MyBinaryField2_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyBinaryField2_ref() = BAR;` instead of `FOO.set_MyBinaryField2(BAR);`")]]
  ::std::string& set_MyBinaryField2(T_NoexceptMoveComplexStruct_MyBinaryField2_struct_setter&& MyBinaryField2_) {
    MyBinaryField2 = std::forward<T_NoexceptMoveComplexStruct_MyBinaryField2_struct_setter>(MyBinaryField2_);
    __isset.MyBinaryField2 = true;
    return MyBinaryField2;
  }

  const ::std::string& get_MyBinaryField3() const& {
    return MyBinaryField3;
  }

  ::std::string get_MyBinaryField3() && {
    return std::move(MyBinaryField3);
  }

  template <typename T_NoexceptMoveComplexStruct_MyBinaryField3_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyBinaryField3_ref() = BAR;` instead of `FOO.set_MyBinaryField3(BAR);`")]]
  ::std::string& set_MyBinaryField3(T_NoexceptMoveComplexStruct_MyBinaryField3_struct_setter&& MyBinaryField3_) {
    MyBinaryField3 = std::forward<T_NoexceptMoveComplexStruct_MyBinaryField3_struct_setter>(MyBinaryField3_);
    return MyBinaryField3;
  }
  const ::std::vector<::std::string>& get_MyBinaryListField4() const&;
  ::std::vector<::std::string> get_MyBinaryListField4() &&;

  template <typename T_NoexceptMoveComplexStruct_MyBinaryListField4_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.MyBinaryListField4_ref() = BAR;` instead of `FOO.set_MyBinaryListField4(BAR);`")]]
  ::std::vector<::std::string>& set_MyBinaryListField4(T_NoexceptMoveComplexStruct_MyBinaryListField4_struct_setter&& MyBinaryListField4_) {
    MyBinaryListField4 = std::forward<T_NoexceptMoveComplexStruct_MyBinaryListField4_struct_setter>(MyBinaryListField4_);
    __isset.MyBinaryListField4 = true;
    return MyBinaryListField4;
  }
  const ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>& get_MyMapEnumAndInt() const&;
  ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string> get_MyMapEnumAndInt() &&;

  template <typename T_NoexceptMoveComplexStruct_MyMapEnumAndInt_struct_setter = ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>>
  [[deprecated("Use `FOO.MyMapEnumAndInt_ref() = BAR;` instead of `FOO.set_MyMapEnumAndInt(BAR);`")]]
  ::std::map<::apache::thrift::fixtures::types::MyEnumA, ::std::string>& set_MyMapEnumAndInt(T_NoexceptMoveComplexStruct_MyMapEnumAndInt_struct_setter&& MyMapEnumAndInt_) {
    MyMapEnumAndInt = std::forward<T_NoexceptMoveComplexStruct_MyMapEnumAndInt_struct_setter>(MyMapEnumAndInt_);
    __isset.MyMapEnumAndInt = true;
    return MyMapEnumAndInt;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NoexceptMoveComplexStruct>;
  friend void swap(NoexceptMoveComplexStruct& a, NoexceptMoveComplexStruct& b);
};

template <class Protocol_>
uint32_t NoexceptMoveComplexStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NoExceptMoveUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NoExceptMoveUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    string_field = 1,
    i32_field = 2,
  } ;

  NoExceptMoveUnion()
      : type_(Type::__EMPTY__) {}

  NoExceptMoveUnion(NoExceptMoveUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::string_field:
      {
        set_string_field(std::move(rhs.value_.string_field));
        break;
      }
      case Type::i32_field:
      {
        set_i32_field(std::move(rhs.value_.i32_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  NoExceptMoveUnion(const NoExceptMoveUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::string_field:
      {
        set_string_field(rhs.value_.string_field);
        break;
      }
      case Type::i32_field:
      {
        set_i32_field(rhs.value_.i32_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  NoExceptMoveUnion& operator=(NoExceptMoveUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::string_field:
      {
        set_string_field(std::move(rhs.value_.string_field));
        break;
      }
      case Type::i32_field:
      {
        set_i32_field(std::move(rhs.value_.i32_field));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  NoExceptMoveUnion& operator=(const NoExceptMoveUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::string_field:
      {
        set_string_field(rhs.value_.string_field);
        break;
      }
      case Type::i32_field:
      {
        set_i32_field(rhs.value_.i32_field);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~NoExceptMoveUnion() {
    __clear();
  }
  union storage_type {
    ::std::string string_field;
    ::std::int32_t i32_field;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const NoExceptMoveUnion&) const;
  bool operator<(const NoExceptMoveUnion&) const;

  ::std::string& set_string_field(::std::string const &t) {
    __clear();
    type_ = Type::string_field;
    ::new (std::addressof(value_.string_field)) ::std::string(t);
    return value_.string_field;
  }

  ::std::string& set_string_field(::std::string&& t) {
    __clear();
    type_ = Type::string_field;
    ::new (std::addressof(value_.string_field)) ::std::string(std::move(t));
    return value_.string_field;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_string_field(T&&... t) {
    __clear();
    type_ = Type::string_field;
    ::new (std::addressof(value_.string_field)) ::std::string(std::forward<T>(t)...);
    return value_.string_field;
  }

  ::std::int32_t& set_i32_field(::std::int32_t t = ::std::int32_t()) {
    __clear();
    type_ = Type::i32_field;
    ::new (std::addressof(value_.i32_field)) ::std::int32_t(t);
    return value_.i32_field;
  }

  ::std::string const& get_string_field() const {
    if (type_ != Type::string_field) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.string_field;
  }

  ::std::int32_t const& get_i32_field() const {
    if (type_ != Type::i32_field) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.i32_field;
  }

  ::std::string& mutable_string_field() {
    assert(type_ == Type::string_field);
    return value_.string_field;
  }

  ::std::int32_t& mutable_i32_field() {
    assert(type_ == Type::i32_field);
    return value_.i32_field;
  }

  ::std::string move_string_field() {
    assert(type_ == Type::string_field);
    return std::move(value_.string_field);
  }

  ::std::int32_t move_i32_field() {
    assert(type_ == Type::i32_field);
    return std::move(value_.i32_field);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> string_field_ref() const& {
    return {value_.string_field, type_, string_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> string_field_ref() const&& {
    return {std::move(value_.string_field), type_, string_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> string_field_ref() & {
    return {value_.string_field, type_, string_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> string_field_ref() && {
    return {std::move(value_.string_field), type_, string_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> i32_field_ref() const& {
    return {value_.i32_field, type_, i32_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> i32_field_ref() const&& {
    return {std::move(value_.i32_field), type_, i32_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> i32_field_ref() & {
    return {value_.i32_field, type_, i32_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> i32_field_ref() && {
    return {std::move(value_.i32_field), type_, i32_field, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NoExceptMoveUnion>;
  friend void swap(NoExceptMoveUnion& a, NoExceptMoveUnion& b);
};

template <class Protocol_>
uint32_t NoExceptMoveUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class AllocatorAware final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = AllocatorAware;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;

 public:
  using allocator_type = some_allocator;
  allocator_type get_allocator() const {
    return __fbthrift_alloc;
  }
 private:
  FOLLY_ATTR_NO_UNIQUE_ADDRESS allocator_type __fbthrift_alloc;

 public:

  AllocatorAware();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AllocatorAware(apache::thrift::FragileConstructor, ::std::vector<::std::int32_t> aa_list__arg, ::std::set<::std::int32_t> aa_set__arg, ::std::map<::std::int32_t, ::std::int32_t> aa_map__arg, ::std::string aa_string__arg, ::std::int32_t not_a_container__arg);

  AllocatorAware(AllocatorAware&&) noexcept;

  AllocatorAware(const AllocatorAware& src);

  explicit AllocatorAware(const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    aa_list(alloc),
    aa_set(alloc),
    aa_map(alloc),
    aa_string(alloc),
    not_a_container() {}

  explicit AllocatorAware(const AllocatorAware& other, const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    aa_list(other.aa_list, alloc),
    aa_set(other.aa_set, alloc),
    aa_map(other.aa_map, alloc),
    aa_string(other.aa_string, alloc),
    not_a_container(other.not_a_container),
    __isset(other.__isset) {}

  explicit AllocatorAware(AllocatorAware&& other, const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    aa_list(std::move(other.aa_list), alloc),
    aa_set(std::move(other.aa_set), alloc),
    aa_map(std::move(other.aa_map), alloc),
    aa_string(std::move(other.aa_string), alloc),
    not_a_container(std::move(other.not_a_container)),
    __isset(other.__isset) {}

  AllocatorAware& operator=(AllocatorAware&&) noexcept;
  AllocatorAware& operator=(const AllocatorAware& src);
  void __clear();

  ~AllocatorAware();

 private:
  ::std::vector<::std::int32_t> aa_list;
 private:
  ::std::set<::std::int32_t> aa_set;
 private:
  ::std::map<::std::int32_t, ::std::int32_t> aa_map;
 private:
  ::std::string aa_string;
 private:
  ::std::int32_t not_a_container;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool aa_list;
    bool aa_set;
    bool aa_map;
    bool aa_string;
    bool not_a_container;
  } __isset = {};

 public:

  bool operator==(const AllocatorAware&) const;
  bool operator<(const AllocatorAware&) const;

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> aa_list_ref() const& {
    return {this->aa_list, __isset.aa_list};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> aa_list_ref() const&& {
    return {std::move(this->aa_list), __isset.aa_list};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> aa_list_ref() & {
    return {this->aa_list, __isset.aa_list};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> aa_list_ref() && {
    return {std::move(this->aa_list), __isset.aa_list};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> aa_set_ref() const& {
    return {this->aa_set, __isset.aa_set};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> aa_set_ref() const&& {
    return {std::move(this->aa_set), __isset.aa_set};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> aa_set_ref() & {
    return {this->aa_set, __isset.aa_set};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> aa_set_ref() && {
    return {std::move(this->aa_set), __isset.aa_set};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> aa_map_ref() const& {
    return {this->aa_map, __isset.aa_map};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> aa_map_ref() const&& {
    return {std::move(this->aa_map), __isset.aa_map};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> aa_map_ref() & {
    return {this->aa_map, __isset.aa_map};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> aa_map_ref() && {
    return {std::move(this->aa_map), __isset.aa_map};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> aa_string_ref() const& {
    return {this->aa_string, __isset.aa_string};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> aa_string_ref() const&& {
    return {std::move(this->aa_string), __isset.aa_string};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> aa_string_ref() & {
    return {this->aa_string, __isset.aa_string};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> aa_string_ref() && {
    return {std::move(this->aa_string), __isset.aa_string};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> not_a_container_ref() const& {
    return {this->not_a_container, __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> not_a_container_ref() const&& {
    return {std::move(this->not_a_container), __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> not_a_container_ref() & {
    return {this->not_a_container, __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> not_a_container_ref() && {
    return {std::move(this->not_a_container), __isset.not_a_container};
  }
  const ::std::vector<::std::int32_t>& get_aa_list() const&;
  ::std::vector<::std::int32_t> get_aa_list() &&;

  template <typename T_AllocatorAware_aa_list_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.aa_list_ref() = BAR;` instead of `FOO.set_aa_list(BAR);`")]]
  ::std::vector<::std::int32_t>& set_aa_list(T_AllocatorAware_aa_list_struct_setter&& aa_list_) {
    aa_list = std::forward<T_AllocatorAware_aa_list_struct_setter>(aa_list_);
    __isset.aa_list = true;
    return aa_list;
  }
  const ::std::set<::std::int32_t>& get_aa_set() const&;
  ::std::set<::std::int32_t> get_aa_set() &&;

  template <typename T_AllocatorAware_aa_set_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.aa_set_ref() = BAR;` instead of `FOO.set_aa_set(BAR);`")]]
  ::std::set<::std::int32_t>& set_aa_set(T_AllocatorAware_aa_set_struct_setter&& aa_set_) {
    aa_set = std::forward<T_AllocatorAware_aa_set_struct_setter>(aa_set_);
    __isset.aa_set = true;
    return aa_set;
  }
  const ::std::map<::std::int32_t, ::std::int32_t>& get_aa_map() const&;
  ::std::map<::std::int32_t, ::std::int32_t> get_aa_map() &&;

  template <typename T_AllocatorAware_aa_map_struct_setter = ::std::map<::std::int32_t, ::std::int32_t>>
  [[deprecated("Use `FOO.aa_map_ref() = BAR;` instead of `FOO.set_aa_map(BAR);`")]]
  ::std::map<::std::int32_t, ::std::int32_t>& set_aa_map(T_AllocatorAware_aa_map_struct_setter&& aa_map_) {
    aa_map = std::forward<T_AllocatorAware_aa_map_struct_setter>(aa_map_);
    __isset.aa_map = true;
    return aa_map;
  }

  const ::std::string& get_aa_string() const& {
    return aa_string;
  }

  ::std::string get_aa_string() && {
    return std::move(aa_string);
  }

  template <typename T_AllocatorAware_aa_string_struct_setter = ::std::string>
  [[deprecated("Use `FOO.aa_string_ref() = BAR;` instead of `FOO.set_aa_string(BAR);`")]]
  ::std::string& set_aa_string(T_AllocatorAware_aa_string_struct_setter&& aa_string_) {
    aa_string = std::forward<T_AllocatorAware_aa_string_struct_setter>(aa_string_);
    __isset.aa_string = true;
    return aa_string;
  }

  ::std::int32_t get_not_a_container() const {
    return not_a_container;
  }

  [[deprecated("Use `FOO.not_a_container_ref() = BAR;` instead of `FOO.set_not_a_container(BAR);`")]]
  ::std::int32_t& set_not_a_container(::std::int32_t not_a_container_) {
    not_a_container = not_a_container_;
    __isset.not_a_container = true;
    return not_a_container;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AllocatorAware>;
  friend void swap(AllocatorAware& a, AllocatorAware& b);
};

template <class Protocol_>
uint32_t AllocatorAware::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class AllocatorAware2 final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = AllocatorAware2;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;

 public:
  using allocator_type = some_allocator;
  allocator_type get_allocator() const {
    return __fbthrift_alloc;
  }
 private:
  FOLLY_ATTR_NO_UNIQUE_ADDRESS allocator_type __fbthrift_alloc;

 public:

  AllocatorAware2() :
      not_a_container(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  AllocatorAware2(apache::thrift::FragileConstructor, ::std::int32_t not_a_container__arg);

  AllocatorAware2(AllocatorAware2&&) noexcept;

  AllocatorAware2(const AllocatorAware2& src);

  explicit AllocatorAware2(const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    not_a_container() {}

  explicit AllocatorAware2(const AllocatorAware2& other, const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    not_a_container(other.not_a_container),
    __isset(other.__isset) {}

  explicit AllocatorAware2(AllocatorAware2&& other, const allocator_type& alloc) noexcept :
    __fbthrift_alloc(alloc),
    not_a_container(std::move(other.not_a_container)),
    __isset(other.__isset) {}

  AllocatorAware2& operator=(AllocatorAware2&&) noexcept;
  AllocatorAware2& operator=(const AllocatorAware2& src);
  void __clear();
 private:
  ::std::int32_t not_a_container;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool not_a_container;
  } __isset = {};

 public:

  bool operator==(const AllocatorAware2&) const;
  bool operator<(const AllocatorAware2&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> not_a_container_ref() const& {
    return {this->not_a_container, __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> not_a_container_ref() const&& {
    return {std::move(this->not_a_container), __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> not_a_container_ref() & {
    return {this->not_a_container, __isset.not_a_container};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> not_a_container_ref() && {
    return {std::move(this->not_a_container), __isset.not_a_container};
  }

  ::std::int32_t get_not_a_container() const {
    return not_a_container;
  }

  [[deprecated("Use `FOO.not_a_container_ref() = BAR;` instead of `FOO.set_not_a_container(BAR);`")]]
  ::std::int32_t& set_not_a_container(::std::int32_t not_a_container_) {
    not_a_container = not_a_container_;
    __isset.not_a_container = true;
    return not_a_container;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<AllocatorAware2>;
  friend void swap(AllocatorAware2& a, AllocatorAware2& b);
};

template <class Protocol_>
uint32_t AllocatorAware2::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class TypedefStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = TypedefStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TypedefStruct() :
      i32_field(0),
      IntTypedef_field(0),
      UintTypedef_field(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypedefStruct(apache::thrift::FragileConstructor, ::std::int32_t i32_field__arg, ::apache::thrift::fixtures::types::IntTypedef IntTypedef_field__arg, std::uint32_t UintTypedef_field__arg);

  TypedefStruct(TypedefStruct&&) noexcept;

  TypedefStruct(const TypedefStruct& src);


  TypedefStruct& operator=(TypedefStruct&&) noexcept;
  TypedefStruct& operator=(const TypedefStruct& src);
  void __clear();
 private:
  ::std::int32_t i32_field;
 private:
  ::apache::thrift::fixtures::types::IntTypedef IntTypedef_field;
 private:
  std::uint32_t UintTypedef_field;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool i32_field;
    bool IntTypedef_field;
    bool UintTypedef_field;
  } __isset = {};

 public:

  bool operator==(const TypedefStruct&) const;
  bool operator<(const TypedefStruct&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32_field_ref() const& {
    return {this->i32_field, __isset.i32_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32_field_ref() const&& {
    return {std::move(this->i32_field), __isset.i32_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32_field_ref() & {
    return {this->i32_field, __isset.i32_field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32_field_ref() && {
    return {std::move(this->i32_field), __isset.i32_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> IntTypedef_field_ref() const& {
    return {this->IntTypedef_field, __isset.IntTypedef_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> IntTypedef_field_ref() const&& {
    return {std::move(this->IntTypedef_field), __isset.IntTypedef_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> IntTypedef_field_ref() & {
    return {this->IntTypedef_field, __isset.IntTypedef_field};
  }

  template <typename..., typename T = ::apache::thrift::fixtures::types::IntTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> IntTypedef_field_ref() && {
    return {std::move(this->IntTypedef_field), __isset.IntTypedef_field};
  }

  template <typename..., typename T = std::uint32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> UintTypedef_field_ref() const& {
    return {this->UintTypedef_field, __isset.UintTypedef_field};
  }

  template <typename..., typename T = std::uint32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> UintTypedef_field_ref() const&& {
    return {std::move(this->UintTypedef_field), __isset.UintTypedef_field};
  }

  template <typename..., typename T = std::uint32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> UintTypedef_field_ref() & {
    return {this->UintTypedef_field, __isset.UintTypedef_field};
  }

  template <typename..., typename T = std::uint32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> UintTypedef_field_ref() && {
    return {std::move(this->UintTypedef_field), __isset.UintTypedef_field};
  }

  ::std::int32_t get_i32_field() const {
    return i32_field;
  }

  [[deprecated("Use `FOO.i32_field_ref() = BAR;` instead of `FOO.set_i32_field(BAR);`")]]
  ::std::int32_t& set_i32_field(::std::int32_t i32_field_) {
    i32_field = i32_field_;
    __isset.i32_field = true;
    return i32_field;
  }

  ::apache::thrift::fixtures::types::IntTypedef get_IntTypedef_field() const {
    return IntTypedef_field;
  }

  [[deprecated("Use `FOO.IntTypedef_field_ref() = BAR;` instead of `FOO.set_IntTypedef_field(BAR);`")]]
  ::apache::thrift::fixtures::types::IntTypedef& set_IntTypedef_field(::apache::thrift::fixtures::types::IntTypedef IntTypedef_field_) {
    IntTypedef_field = IntTypedef_field_;
    __isset.IntTypedef_field = true;
    return IntTypedef_field;
  }

  std::uint32_t get_UintTypedef_field() const {
    return UintTypedef_field;
  }

  [[deprecated("Use `FOO.UintTypedef_field_ref() = BAR;` instead of `FOO.set_UintTypedef_field(BAR);`")]]
  std::uint32_t& set_UintTypedef_field(std::uint32_t UintTypedef_field_) {
    UintTypedef_field = UintTypedef_field_;
    __isset.UintTypedef_field = true;
    return UintTypedef_field;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypedefStruct>;
  friend void swap(TypedefStruct& a, TypedefStruct& b);
};

template <class Protocol_>
uint32_t TypedefStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
namespace apache { namespace thrift { namespace fixtures { namespace types {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class StructWithDoubleUnderscores final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = StructWithDoubleUnderscores;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithDoubleUnderscores() :
      __field(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithDoubleUnderscores(apache::thrift::FragileConstructor, ::std::int32_t __field__arg);

  StructWithDoubleUnderscores(StructWithDoubleUnderscores&&) = default;

  StructWithDoubleUnderscores(const StructWithDoubleUnderscores&) = default;


  StructWithDoubleUnderscores& operator=(StructWithDoubleUnderscores&&) = default;

  StructWithDoubleUnderscores& operator=(const StructWithDoubleUnderscores&) = default;
  void __clear();
 private:
  ::std::int32_t __field;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool __field;
  } __isset = {};

 public:

  bool operator==(const StructWithDoubleUnderscores&) const;
  bool operator<(const StructWithDoubleUnderscores&) const;

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> __field_ref() const& {
    return {this->__field, __isset.__field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> __field_ref() const&& {
    return {std::move(this->__field), __isset.__field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> __field_ref() & {
    return {this->__field, __isset.__field};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> __field_ref() && {
    return {std::move(this->__field), __isset.__field};
  }

  ::std::int32_t get___field() const {
    return __field;
  }

  [[deprecated("Use `FOO.__field_ref() = BAR;` instead of `FOO.set___field(BAR);`")]]
  ::std::int32_t& set___field(::std::int32_t __field_) {
    __field = __field_;
    __isset.__field = true;
    return __field;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithDoubleUnderscores>;
  friend void swap(StructWithDoubleUnderscores& a, StructWithDoubleUnderscores& b);
};

template <class Protocol_>
uint32_t StructWithDoubleUnderscores::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

}}}} // apache::thrift::fixtures::types
THRIFT_IGNORE_ISSET_USE_WARNING_END

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::apache::thrift::fixtures::types::NoExceptMoveUnion::Type>;

template <> struct TEnumTraits<::apache::thrift::fixtures::types::NoExceptMoveUnion::Type> {
  using type = ::apache::thrift::fixtures::types::NoExceptMoveUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};
}} // apache::thrift
