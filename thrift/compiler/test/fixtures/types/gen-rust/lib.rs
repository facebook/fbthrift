// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

#![recursion_limit = "100000000"]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies)]

pub use self::errors::*;
pub use self::types::*;

/// Thrift type definitions for `module`.
pub mod types {
    #![allow(clippy::redundant_closure)]


    pub type TBinary = ::std::vec::Vec<::std::primitive::u8>;

    pub type IntTypedef = ::std::primitive::i32;

    pub type UintTypedef = crate::types::IntTypedef;

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct decorated_struct {
        pub field: ::std::string::String,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ContainerStruct {
        pub fieldA: ::std::vec::Vec<::std::primitive::i32>,
        pub fieldB: ::std::vec::Vec<::std::primitive::i32>,
        pub fieldC: ::std::vec::Vec<::std::primitive::i32>,
        pub fieldD: ::std::vec::Vec<::std::primitive::i32>,
        pub fieldE: ::std::vec::Vec<::std::primitive::i32>,
        pub fieldF: ::sorted_vector_map::SortedVectorSet<::std::primitive::i32>,
        pub fieldG: ::sorted_vector_map::SortedVectorMap<::std::primitive::i32, ::std::string::String>,
        pub fieldH: include::types::SomeMap,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct CppTypeStruct {
        pub fieldA: ::std::vec::Vec<::std::primitive::i32>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct VirtualStruct {
        pub MyIntField: ::std::primitive::i64,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyStructWithForwardRefEnum {
        pub a: crate::types::MyForwardRefEnum,
        pub b: crate::types::MyForwardRefEnum,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct TrivialNumeric {
        pub a: ::std::primitive::i32,
        pub b: ::std::primitive::bool,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct TrivialNestedWithDefault {
        pub z: ::std::primitive::i32,
        pub n: crate::types::TrivialNumeric,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ComplexString {
        pub a: ::std::string::String,
        pub b: ::std::collections::BTreeMap<::std::string::String, ::std::primitive::i32>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ComplexNestedWithDefault {
        pub z: ::std::string::String,
        pub n: crate::types::ComplexString,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MinPadding {
        pub small: ::std::primitive::i8,
        pub big: ::std::primitive::i64,
        pub medium: ::std::primitive::i16,
        pub biggish: ::std::primitive::i32,
        pub tiny: ::std::primitive::i8,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct MyStruct {
        pub MyIntField: ::std::primitive::i64,
        pub MyStringField: ::std::string::String,
        pub majorVer: ::std::primitive::i64,
        pub data: crate::types::MyDataItem,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct MyDataItem {
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Renaming {
        pub foo: ::std::primitive::i64,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct AnnotatedTypes {
        pub binary_field: crate::types::TBinary,
        pub list_field: include::types::SomeListOfTypeMap,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageRoot {
        pub ForwardUsageStruct: ::std::option::Option<crate::types::ForwardUsageStruct>,
        pub ForwardUsageByRef: ::std::option::Option<crate::types::ForwardUsageByRef>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageStruct {
        pub foo: ::std::option::Option<crate::types::ForwardUsageRoot>,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct ForwardUsageByRef {
        pub foo: ::std::option::Option<crate::types::ForwardUsageRoot>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct NoexceptMoveEmpty {
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct NoexceptMoveSimpleStruct {
        pub boolField: ::std::primitive::i64,
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct NoexceptMoveComplexStruct {
        pub MyBoolField: ::std::primitive::bool,
        pub MyIntField: ::std::primitive::i64,
        pub MyStringField: ::std::string::String,
        pub MyStringField2: ::std::string::String,
        pub MyBinaryField: ::std::vec::Vec<::std::primitive::u8>,
        pub MyBinaryField2: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
        pub MyBinaryField3: ::std::vec::Vec<::std::primitive::u8>,
        pub MyBinaryListField4: ::std::vec::Vec<::std::vec::Vec<::std::primitive::u8>>,
        pub MyMapEnumAndInt: ::std::collections::BTreeMap<crate::types::MyEnumA, ::std::string::String>,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub enum NoExceptMoveUnion {
        string_field(::std::string::String),
        i32_field(::std::primitive::i32),
        UnknownField(::std::primitive::i32),
    }

    #[derive(Clone, Debug, PartialEq)]
    pub struct AllocatorAware {
        pub aa_list: ::std::vec::Vec<::std::primitive::i32>,
        pub aa_set: ::std::collections::BTreeSet<::std::primitive::i32>,
        pub aa_map: ::std::collections::BTreeMap<::std::primitive::i32, ::std::primitive::i32>,
        pub aa_string: ::std::string::String,
        pub not_a_container: ::std::primitive::i32,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct AllocatorAware2 {
        pub not_a_container: ::std::primitive::i32,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct TypedefStruct {
        pub i32_field: ::std::primitive::i32,
        pub IntTypedef_field: crate::types::IntTypedef,
        pub UintTypedef_field: crate::types::UintTypedef,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct StructWithDoubleUnderscores {
        pub __field: ::std::primitive::i32,
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct has_bitwise_ops(pub ::std::primitive::i32);

    impl has_bitwise_ops {
        pub const none: Self = has_bitwise_ops(0i32);
        pub const zero: Self = has_bitwise_ops(1i32);
        pub const one: Self = has_bitwise_ops(2i32);
        pub const two: Self = has_bitwise_ops(4i32);
        pub const three: Self = has_bitwise_ops(8i32);
    }

    impl ::fbthrift::ThriftEnum for has_bitwise_ops {
        fn enumerate() -> &'static [(has_bitwise_ops, &'static str)] {
            &[
                (has_bitwise_ops::none, "none"),
                (has_bitwise_ops::zero, "zero"),
                (has_bitwise_ops::one, "one"),
                (has_bitwise_ops::two, "two"),
                (has_bitwise_ops::three, "three"),
            ]
        }

        fn variants() -> &'static [&'static str] {
            &[
                "none",
                "zero",
                "one",
                "two",
                "three",
            ]
        }

        fn variant_values() -> &'static [has_bitwise_ops] {
            &[
                has_bitwise_ops::none,
                has_bitwise_ops::zero,
                has_bitwise_ops::one,
                has_bitwise_ops::two,
                has_bitwise_ops::three,
            ]
        }
    }

    impl ::std::default::Default for has_bitwise_ops {
        fn default() -> Self {
            has_bitwise_ops(::fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> ::std::convert::From<&'a has_bitwise_ops> for ::std::primitive::i32 {
        #[inline]
        fn from(x: &'a has_bitwise_ops) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<has_bitwise_ops> for ::std::primitive::i32 {
        #[inline]
        fn from(x: has_bitwise_ops) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<::std::primitive::i32> for has_bitwise_ops {
        #[inline]
        fn from(x: ::std::primitive::i32) -> Self {
            Self(x)
        }
    }

    impl ::std::fmt::Display for has_bitwise_ops {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("none", 0),
                ("zero", 1),
                ("one", 2),
                ("two", 4),
                ("three", 8),
            ];
            ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
        }
    }

    impl ::std::fmt::Debug for has_bitwise_ops {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(fmt, "has_bitwise_ops::{}", self)
        }
    }

    impl ::std::str::FromStr for has_bitwise_ops {
        type Err = ::anyhow::Error;

        fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
            static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("none", 0),
                ("one", 2),
                ("three", 8),
                ("two", 4),
                ("zero", 1),
            ];
            ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "has_bitwise_ops").map(has_bitwise_ops)
        }
    }

    impl ::fbthrift::GetTType for has_bitwise_ops {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
    }

    impl<P> ::fbthrift::Serialize<P> for has_bitwise_ops
    where
        P: ::fbthrift::ProtocolWriter,
    {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for has_bitwise_ops
    where
        P: ::fbthrift::ProtocolReader,
    {
        #[inline]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::std::result::Result::Ok(has_bitwise_ops::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct is_unscoped(pub ::std::primitive::i32);

    impl is_unscoped {
        pub const hello: Self = is_unscoped(0i32);
        pub const world: Self = is_unscoped(1i32);
    }

    impl ::fbthrift::ThriftEnum for is_unscoped {
        fn enumerate() -> &'static [(is_unscoped, &'static str)] {
            &[
                (is_unscoped::hello, "hello"),
                (is_unscoped::world, "world"),
            ]
        }

        fn variants() -> &'static [&'static str] {
            &[
                "hello",
                "world",
            ]
        }

        fn variant_values() -> &'static [is_unscoped] {
            &[
                is_unscoped::hello,
                is_unscoped::world,
            ]
        }
    }

    impl ::std::default::Default for is_unscoped {
        fn default() -> Self {
            is_unscoped(::fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> ::std::convert::From<&'a is_unscoped> for ::std::primitive::i32 {
        #[inline]
        fn from(x: &'a is_unscoped) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<is_unscoped> for ::std::primitive::i32 {
        #[inline]
        fn from(x: is_unscoped) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<::std::primitive::i32> for is_unscoped {
        #[inline]
        fn from(x: ::std::primitive::i32) -> Self {
            Self(x)
        }
    }

    impl ::std::fmt::Display for is_unscoped {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("hello", 0),
                ("world", 1),
            ];
            ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
        }
    }

    impl ::std::fmt::Debug for is_unscoped {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(fmt, "is_unscoped::{}", self)
        }
    }

    impl ::std::str::FromStr for is_unscoped {
        type Err = ::anyhow::Error;

        fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
            static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("hello", 0),
                ("world", 1),
            ];
            ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "is_unscoped").map(is_unscoped)
        }
    }

    impl ::fbthrift::GetTType for is_unscoped {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
    }

    impl<P> ::fbthrift::Serialize<P> for is_unscoped
    where
        P: ::fbthrift::ProtocolWriter,
    {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for is_unscoped
    where
        P: ::fbthrift::ProtocolReader,
    {
        #[inline]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::std::result::Result::Ok(is_unscoped::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct MyForwardRefEnum(pub ::std::primitive::i32);

    impl MyForwardRefEnum {
        pub const ZERO: Self = MyForwardRefEnum(0i32);
        pub const NONZERO: Self = MyForwardRefEnum(12i32);
    }

    impl ::fbthrift::ThriftEnum for MyForwardRefEnum {
        fn enumerate() -> &'static [(MyForwardRefEnum, &'static str)] {
            &[
                (MyForwardRefEnum::ZERO, "ZERO"),
                (MyForwardRefEnum::NONZERO, "NONZERO"),
            ]
        }

        fn variants() -> &'static [&'static str] {
            &[
                "ZERO",
                "NONZERO",
            ]
        }

        fn variant_values() -> &'static [MyForwardRefEnum] {
            &[
                MyForwardRefEnum::ZERO,
                MyForwardRefEnum::NONZERO,
            ]
        }
    }

    impl ::std::default::Default for MyForwardRefEnum {
        fn default() -> Self {
            MyForwardRefEnum(::fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> ::std::convert::From<&'a MyForwardRefEnum> for ::std::primitive::i32 {
        #[inline]
        fn from(x: &'a MyForwardRefEnum) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<MyForwardRefEnum> for ::std::primitive::i32 {
        #[inline]
        fn from(x: MyForwardRefEnum) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<::std::primitive::i32> for MyForwardRefEnum {
        #[inline]
        fn from(x: ::std::primitive::i32) -> Self {
            Self(x)
        }
    }

    impl ::std::fmt::Display for MyForwardRefEnum {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("ZERO", 0),
                ("NONZERO", 12),
            ];
            ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
        }
    }

    impl ::std::fmt::Debug for MyForwardRefEnum {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(fmt, "MyForwardRefEnum::{}", self)
        }
    }

    impl ::std::str::FromStr for MyForwardRefEnum {
        type Err = ::anyhow::Error;

        fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
            static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("NONZERO", 12),
                ("ZERO", 0),
            ];
            ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "MyForwardRefEnum").map(MyForwardRefEnum)
        }
    }

    impl ::fbthrift::GetTType for MyForwardRefEnum {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
    }

    impl<P> ::fbthrift::Serialize<P> for MyForwardRefEnum
    where
        P: ::fbthrift::ProtocolWriter,
    {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for MyForwardRefEnum
    where
        P: ::fbthrift::ProtocolReader,
    {
        #[inline]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::std::result::Result::Ok(MyForwardRefEnum::from(p.read_i32()?))
        }
    }

    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct MyEnumA(pub ::std::primitive::i32);

    impl MyEnumA {
        pub const fieldA: Self = MyEnumA(1i32);
        pub const fieldB: Self = MyEnumA(2i32);
        pub const fieldC: Self = MyEnumA(4i32);
    }

    impl ::fbthrift::ThriftEnum for MyEnumA {
        fn enumerate() -> &'static [(MyEnumA, &'static str)] {
            &[
                (MyEnumA::fieldA, "fieldA"),
                (MyEnumA::fieldB, "fieldB"),
                (MyEnumA::fieldC, "fieldC"),
            ]
        }

        fn variants() -> &'static [&'static str] {
            &[
                "fieldA",
                "fieldB",
                "fieldC",
            ]
        }

        fn variant_values() -> &'static [MyEnumA] {
            &[
                MyEnumA::fieldA,
                MyEnumA::fieldB,
                MyEnumA::fieldC,
            ]
        }
    }

    impl ::std::default::Default for MyEnumA {
        fn default() -> Self {
            MyEnumA(::fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> ::std::convert::From<&'a MyEnumA> for ::std::primitive::i32 {
        #[inline]
        fn from(x: &'a MyEnumA) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<MyEnumA> for ::std::primitive::i32 {
        #[inline]
        fn from(x: MyEnumA) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<::std::primitive::i32> for MyEnumA {
        #[inline]
        fn from(x: ::std::primitive::i32) -> Self {
            Self(x)
        }
    }

    impl ::std::fmt::Display for MyEnumA {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("fieldA", 1),
                ("fieldB", 2),
                ("fieldC", 4),
            ];
            ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
        }
    }

    impl ::std::fmt::Debug for MyEnumA {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(fmt, "MyEnumA::{}", self)
        }
    }

    impl ::std::str::FromStr for MyEnumA {
        type Err = ::anyhow::Error;

        fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
            static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("fieldA", 1),
                ("fieldB", 2),
                ("fieldC", 4),
            ];
            ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "MyEnumA").map(MyEnumA)
        }
    }

    impl ::fbthrift::GetTType for MyEnumA {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
    }

    impl<P> ::fbthrift::Serialize<P> for MyEnumA
    where
        P: ::fbthrift::ProtocolWriter,
    {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for MyEnumA
    where
        P: ::fbthrift::ProtocolReader,
    {
        #[inline]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::std::result::Result::Ok(MyEnumA::from(p.read_i32()?))
        }
    }




    impl ::std::default::Default for self::decorated_struct {
        fn default() -> Self {
            Self {
                field: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::decorated_struct {}
    unsafe impl ::std::marker::Sync for self::decorated_struct {}

    impl ::fbthrift::GetTType for self::decorated_struct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::decorated_struct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("decorated_struct");
            p.write_field_begin("field", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::decorated_struct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("field", ::fbthrift::TType::String, 1),
            ];
            let mut field_field = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                field: field_field.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::ContainerStruct {
        fn default() -> Self {
            Self {
                fieldA: ::std::default::Default::default(),
                fieldB: ::std::default::Default::default(),
                fieldC: ::std::default::Default::default(),
                fieldD: ::std::default::Default::default(),
                fieldE: ::std::default::Default::default(),
                fieldF: ::std::default::Default::default(),
                fieldG: ::std::default::Default::default(),
                fieldH: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ContainerStruct {}
    unsafe impl ::std::marker::Sync for self::ContainerStruct {}

    impl ::fbthrift::GetTType for self::ContainerStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ContainerStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ContainerStruct");
            p.write_field_begin("fieldA", ::fbthrift::TType::List, 12);
            ::fbthrift::Serialize::write(&self.fieldA, p);
            p.write_field_end();
            p.write_field_begin("fieldB", ::fbthrift::TType::List, 2);
            ::fbthrift::Serialize::write(&self.fieldB, p);
            p.write_field_end();
            p.write_field_begin("fieldC", ::fbthrift::TType::List, 3);
            ::fbthrift::Serialize::write(&self.fieldC, p);
            p.write_field_end();
            p.write_field_begin("fieldD", ::fbthrift::TType::List, 4);
            ::fbthrift::Serialize::write(&self.fieldD, p);
            p.write_field_end();
            p.write_field_begin("fieldE", ::fbthrift::TType::List, 5);
            ::fbthrift::Serialize::write(&self.fieldE, p);
            p.write_field_end();
            p.write_field_begin("fieldF", ::fbthrift::TType::Set, 6);
            super::r#impl::write(&self.fieldF, p);
            p.write_field_end();
            p.write_field_begin("fieldG", ::fbthrift::TType::Map, 7);
            super::r#impl::write(&self.fieldG, p);
            p.write_field_end();
            p.write_field_begin("fieldH", ::fbthrift::TType::Map, 8);
            ::fbthrift::Serialize::write(&self.fieldH, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ContainerStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("fieldA", ::fbthrift::TType::List, 12),
                ::fbthrift::Field::new("fieldB", ::fbthrift::TType::List, 2),
                ::fbthrift::Field::new("fieldC", ::fbthrift::TType::List, 3),
                ::fbthrift::Field::new("fieldD", ::fbthrift::TType::List, 4),
                ::fbthrift::Field::new("fieldE", ::fbthrift::TType::List, 5),
                ::fbthrift::Field::new("fieldF", ::fbthrift::TType::Set, 6),
                ::fbthrift::Field::new("fieldG", ::fbthrift::TType::Map, 7),
                ::fbthrift::Field::new("fieldH", ::fbthrift::TType::Map, 8),
            ];
            let mut field_fieldA = ::std::option::Option::None;
            let mut field_fieldB = ::std::option::Option::None;
            let mut field_fieldC = ::std::option::Option::None;
            let mut field_fieldD = ::std::option::Option::None;
            let mut field_fieldE = ::std::option::Option::None;
            let mut field_fieldF = ::std::option::Option::None;
            let mut field_fieldG = ::std::option::Option::None;
            let mut field_fieldH = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::List, 12) => field_fieldA = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 2) => field_fieldB = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 3) => field_fieldC = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 4) => field_fieldD = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 5) => field_fieldE = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Set, 6) => field_fieldF = ::std::option::Option::Some(super::r#impl::read(p)?),
                    (::fbthrift::TType::Map, 7) => field_fieldG = ::std::option::Option::Some(super::r#impl::read(p)?),
                    (::fbthrift::TType::Map, 8) => field_fieldH = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                fieldA: field_fieldA.unwrap_or_default(),
                fieldB: field_fieldB.unwrap_or_default(),
                fieldC: field_fieldC.unwrap_or_default(),
                fieldD: field_fieldD.unwrap_or_default(),
                fieldE: field_fieldE.unwrap_or_default(),
                fieldF: field_fieldF.unwrap_or_default(),
                fieldG: field_fieldG.unwrap_or_default(),
                fieldH: field_fieldH.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::CppTypeStruct {
        fn default() -> Self {
            Self {
                fieldA: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::CppTypeStruct {}
    unsafe impl ::std::marker::Sync for self::CppTypeStruct {}

    impl ::fbthrift::GetTType for self::CppTypeStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::CppTypeStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("CppTypeStruct");
            p.write_field_begin("fieldA", ::fbthrift::TType::List, 1);
            ::fbthrift::Serialize::write(&self.fieldA, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::CppTypeStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("fieldA", ::fbthrift::TType::List, 1),
            ];
            let mut field_fieldA = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::List, 1) => field_fieldA = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                fieldA: field_fieldA.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::VirtualStruct {
        fn default() -> Self {
            Self {
                MyIntField: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::VirtualStruct {}
    unsafe impl ::std::marker::Sync for self::VirtualStruct {}

    impl ::fbthrift::GetTType for self::VirtualStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::VirtualStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("VirtualStruct");
            p.write_field_begin("MyIntField", ::fbthrift::TType::I64, 1);
            ::fbthrift::Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::VirtualStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("MyIntField", ::fbthrift::TType::I64, 1),
            ];
            let mut field_MyIntField = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I64, 1) => field_MyIntField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                MyIntField: field_MyIntField.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::MyStructWithForwardRefEnum {
        fn default() -> Self {
            Self {
                a: crate::types::MyForwardRefEnum::NONZERO,
                b: crate::types::MyForwardRefEnum::NONZERO,
            }
        }
    }

    unsafe impl ::std::marker::Send for self::MyStructWithForwardRefEnum {}
    unsafe impl ::std::marker::Sync for self::MyStructWithForwardRefEnum {}

    impl ::fbthrift::GetTType for self::MyStructWithForwardRefEnum {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::MyStructWithForwardRefEnum
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStructWithForwardRefEnum");
            p.write_field_begin("a", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", ::fbthrift::TType::I32, 2);
            ::fbthrift::Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::MyStructWithForwardRefEnum
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("a", ::fbthrift::TType::I32, 1),
                ::fbthrift::Field::new("b", ::fbthrift::TType::I32, 2),
            ];
            let mut field_a = ::std::option::Option::None;
            let mut field_b = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_a = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 2) => field_b = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                a: field_a.unwrap_or_else(|| crate::types::MyForwardRefEnum::NONZERO),
                b: field_b.unwrap_or_else(|| crate::types::MyForwardRefEnum::NONZERO),
            })
        }
    }


    impl ::std::default::Default for self::TrivialNumeric {
        fn default() -> Self {
            Self {
                a: ::std::default::Default::default(),
                b: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::TrivialNumeric {}
    unsafe impl ::std::marker::Sync for self::TrivialNumeric {}

    impl ::fbthrift::GetTType for self::TrivialNumeric {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::TrivialNumeric
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("TrivialNumeric");
            p.write_field_begin("a", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", ::fbthrift::TType::Bool, 2);
            ::fbthrift::Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::TrivialNumeric
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("a", ::fbthrift::TType::I32, 1),
                ::fbthrift::Field::new("b", ::fbthrift::TType::Bool, 2),
            ];
            let mut field_a = ::std::option::Option::None;
            let mut field_b = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_a = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Bool, 2) => field_b = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                a: field_a.unwrap_or_default(),
                b: field_b.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::TrivialNestedWithDefault {
        fn default() -> Self {
            Self {
                z: 4,
                n: crate::types::TrivialNumeric {
                    a: 3,
                    b: true,
                },
            }
        }
    }

    unsafe impl ::std::marker::Send for self::TrivialNestedWithDefault {}
    unsafe impl ::std::marker::Sync for self::TrivialNestedWithDefault {}

    impl ::fbthrift::GetTType for self::TrivialNestedWithDefault {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::TrivialNestedWithDefault
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("TrivialNestedWithDefault");
            p.write_field_begin("z", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.z, p);
            p.write_field_end();
            p.write_field_begin("n", ::fbthrift::TType::Struct, 2);
            ::fbthrift::Serialize::write(&self.n, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::TrivialNestedWithDefault
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("n", ::fbthrift::TType::Struct, 2),
                ::fbthrift::Field::new("z", ::fbthrift::TType::I32, 1),
            ];
            let mut field_z = ::std::option::Option::None;
            let mut field_n = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_z = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Struct, 2) => field_n = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                z: field_z.unwrap_or_else(|| 4),
                n: field_n.unwrap_or_else(|| crate::types::TrivialNumeric {
                    a: 3,
                    b: true,
                }),
            })
        }
    }


    impl ::std::default::Default for self::ComplexString {
        fn default() -> Self {
            Self {
                a: ::std::default::Default::default(),
                b: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ComplexString {}
    unsafe impl ::std::marker::Sync for self::ComplexString {}

    impl ::fbthrift::GetTType for self::ComplexString {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ComplexString
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexString");
            p.write_field_begin("a", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.a, p);
            p.write_field_end();
            p.write_field_begin("b", ::fbthrift::TType::Map, 2);
            ::fbthrift::Serialize::write(&self.b, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ComplexString
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("a", ::fbthrift::TType::String, 1),
                ::fbthrift::Field::new("b", ::fbthrift::TType::Map, 2),
            ];
            let mut field_a = ::std::option::Option::None;
            let mut field_b = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_a = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Map, 2) => field_b = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                a: field_a.unwrap_or_default(),
                b: field_b.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::ComplexNestedWithDefault {
        fn default() -> Self {
            Self {
                z: "4".to_owned(),
                n: crate::types::ComplexString {
                    a: "3".to_owned(),
                    b: {
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert("a".to_owned(), 3);
                        map
                    },
                },
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ComplexNestedWithDefault {}
    unsafe impl ::std::marker::Sync for self::ComplexNestedWithDefault {}

    impl ::fbthrift::GetTType for self::ComplexNestedWithDefault {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ComplexNestedWithDefault
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ComplexNestedWithDefault");
            p.write_field_begin("z", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.z, p);
            p.write_field_end();
            p.write_field_begin("n", ::fbthrift::TType::Struct, 2);
            ::fbthrift::Serialize::write(&self.n, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ComplexNestedWithDefault
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("n", ::fbthrift::TType::Struct, 2),
                ::fbthrift::Field::new("z", ::fbthrift::TType::String, 1),
            ];
            let mut field_z = ::std::option::Option::None;
            let mut field_n = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_z = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Struct, 2) => field_n = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                z: field_z.unwrap_or_else(|| "4".to_owned()),
                n: field_n.unwrap_or_else(|| crate::types::ComplexString {
                    a: "3".to_owned(),
                    b: {
                        let mut map = ::std::collections::BTreeMap::new();
                        map.insert("a".to_owned(), 3);
                        map
                    },
                }),
            })
        }
    }


    impl ::std::default::Default for self::MinPadding {
        fn default() -> Self {
            Self {
                small: ::std::default::Default::default(),
                big: ::std::default::Default::default(),
                medium: ::std::default::Default::default(),
                biggish: ::std::default::Default::default(),
                tiny: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::MinPadding {}
    unsafe impl ::std::marker::Sync for self::MinPadding {}

    impl ::fbthrift::GetTType for self::MinPadding {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::MinPadding
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MinPadding");
            p.write_field_begin("small", ::fbthrift::TType::Byte, 1);
            ::fbthrift::Serialize::write(&self.small, p);
            p.write_field_end();
            p.write_field_begin("big", ::fbthrift::TType::I64, 2);
            ::fbthrift::Serialize::write(&self.big, p);
            p.write_field_end();
            p.write_field_begin("medium", ::fbthrift::TType::I16, 3);
            ::fbthrift::Serialize::write(&self.medium, p);
            p.write_field_end();
            p.write_field_begin("biggish", ::fbthrift::TType::I32, 4);
            ::fbthrift::Serialize::write(&self.biggish, p);
            p.write_field_end();
            p.write_field_begin("tiny", ::fbthrift::TType::Byte, 5);
            ::fbthrift::Serialize::write(&self.tiny, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::MinPadding
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("big", ::fbthrift::TType::I64, 2),
                ::fbthrift::Field::new("biggish", ::fbthrift::TType::I32, 4),
                ::fbthrift::Field::new("medium", ::fbthrift::TType::I16, 3),
                ::fbthrift::Field::new("small", ::fbthrift::TType::Byte, 1),
                ::fbthrift::Field::new("tiny", ::fbthrift::TType::Byte, 5),
            ];
            let mut field_small = ::std::option::Option::None;
            let mut field_big = ::std::option::Option::None;
            let mut field_medium = ::std::option::Option::None;
            let mut field_biggish = ::std::option::Option::None;
            let mut field_tiny = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Byte, 1) => field_small = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I64, 2) => field_big = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I16, 3) => field_medium = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 4) => field_biggish = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Byte, 5) => field_tiny = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                small: field_small.unwrap_or_default(),
                big: field_big.unwrap_or_default(),
                medium: field_medium.unwrap_or_default(),
                biggish: field_biggish.unwrap_or_default(),
                tiny: field_tiny.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::MyStruct {
        fn default() -> Self {
            Self {
                MyIntField: ::std::default::Default::default(),
                MyStringField: ::std::default::Default::default(),
                majorVer: ::std::default::Default::default(),
                data: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::MyStruct {}
    unsafe impl ::std::marker::Sync for self::MyStruct {}

    impl ::fbthrift::GetTType for self::MyStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::MyStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyStruct");
            p.write_field_begin("MyIntField", ::fbthrift::TType::I64, 1);
            ::fbthrift::Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField", ::fbthrift::TType::String, 2);
            ::fbthrift::Serialize::write(&self.MyStringField, p);
            p.write_field_end();
            p.write_field_begin("majorVer", ::fbthrift::TType::I64, 3);
            ::fbthrift::Serialize::write(&self.majorVer, p);
            p.write_field_end();
            p.write_field_begin("data", ::fbthrift::TType::Struct, 4);
            ::fbthrift::Serialize::write(&self.data, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::MyStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("MyIntField", ::fbthrift::TType::I64, 1),
                ::fbthrift::Field::new("MyStringField", ::fbthrift::TType::String, 2),
                ::fbthrift::Field::new("data", ::fbthrift::TType::Struct, 4),
                ::fbthrift::Field::new("majorVer", ::fbthrift::TType::I64, 3),
            ];
            let mut field_MyIntField = ::std::option::Option::None;
            let mut field_MyStringField = ::std::option::Option::None;
            let mut field_majorVer = ::std::option::Option::None;
            let mut field_data = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I64, 1) => field_MyIntField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 2) => field_MyStringField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I64, 3) => field_majorVer = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Struct, 4) => field_data = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                MyIntField: field_MyIntField.unwrap_or_default(),
                MyStringField: field_MyStringField.unwrap_or_default(),
                majorVer: field_majorVer.unwrap_or_default(),
                data: field_data.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::MyDataItem {
        fn default() -> Self {
            Self {
            }
        }
    }

    unsafe impl ::std::marker::Send for self::MyDataItem {}
    unsafe impl ::std::marker::Sync for self::MyDataItem {}

    impl ::fbthrift::GetTType for self::MyDataItem {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::MyDataItem
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("MyDataItem");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::MyDataItem
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }


    impl ::std::default::Default for self::Renaming {
        fn default() -> Self {
            Self {
                foo: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::Renaming {}
    unsafe impl ::std::marker::Sync for self::Renaming {}

    impl ::fbthrift::GetTType for self::Renaming {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::Renaming
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Renaming");
            p.write_field_begin("foo", ::fbthrift::TType::I64, 1);
            ::fbthrift::Serialize::write(&self.foo, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::Renaming
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("foo", ::fbthrift::TType::I64, 1),
            ];
            let mut field_foo = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I64, 1) => field_foo = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                foo: field_foo.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::AnnotatedTypes {
        fn default() -> Self {
            Self {
                binary_field: ::std::default::Default::default(),
                list_field: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::AnnotatedTypes {}
    unsafe impl ::std::marker::Sync for self::AnnotatedTypes {}

    impl ::fbthrift::GetTType for self::AnnotatedTypes {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::AnnotatedTypes
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("AnnotatedTypes");
            p.write_field_begin("binary_field", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.binary_field, p);
            p.write_field_end();
            p.write_field_begin("list_field", ::fbthrift::TType::List, 2);
            ::fbthrift::Serialize::write(&self.list_field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::AnnotatedTypes
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("binary_field", ::fbthrift::TType::String, 1),
                ::fbthrift::Field::new("list_field", ::fbthrift::TType::List, 2),
            ];
            let mut field_binary_field = ::std::option::Option::None;
            let mut field_list_field = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_binary_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 2) => field_list_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                binary_field: field_binary_field.unwrap_or_default(),
                list_field: field_list_field.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::ForwardUsageRoot {
        fn default() -> Self {
            Self {
                ForwardUsageStruct: ::std::option::Option::None,
                ForwardUsageByRef: ::std::option::Option::None,
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ForwardUsageRoot {}
    unsafe impl ::std::marker::Sync for self::ForwardUsageRoot {}

    impl ::fbthrift::GetTType for self::ForwardUsageRoot {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ForwardUsageRoot
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageRoot");
            if let ::std::option::Option::Some(some) = &self.ForwardUsageStruct {
                p.write_field_begin("ForwardUsageStruct", ::fbthrift::TType::Struct, 1);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            if let ::std::option::Option::Some(some) = &self.ForwardUsageByRef {
                p.write_field_begin("ForwardUsageByRef", ::fbthrift::TType::Struct, 2);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ForwardUsageRoot
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("ForwardUsageByRef", ::fbthrift::TType::Struct, 2),
                ::fbthrift::Field::new("ForwardUsageStruct", ::fbthrift::TType::Struct, 1),
            ];
            let mut field_ForwardUsageStruct = ::std::option::Option::None;
            let mut field_ForwardUsageByRef = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Struct, 1) => field_ForwardUsageStruct = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Struct, 2) => field_ForwardUsageByRef = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                ForwardUsageStruct: field_ForwardUsageStruct,
                ForwardUsageByRef: field_ForwardUsageByRef,
            })
        }
    }


    impl ::std::default::Default for self::ForwardUsageStruct {
        fn default() -> Self {
            Self {
                foo: ::std::option::Option::None,
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ForwardUsageStruct {}
    unsafe impl ::std::marker::Sync for self::ForwardUsageStruct {}

    impl ::fbthrift::GetTType for self::ForwardUsageStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ForwardUsageStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageStruct");
            if let ::std::option::Option::Some(some) = &self.foo {
                p.write_field_begin("foo", ::fbthrift::TType::Struct, 1);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ForwardUsageStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("foo", ::fbthrift::TType::Struct, 1),
            ];
            let mut field_foo = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Struct, 1) => field_foo = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                foo: field_foo,
            })
        }
    }


    impl ::std::default::Default for self::ForwardUsageByRef {
        fn default() -> Self {
            Self {
                foo: ::std::option::Option::None,
            }
        }
    }

    unsafe impl ::std::marker::Send for self::ForwardUsageByRef {}
    unsafe impl ::std::marker::Sync for self::ForwardUsageByRef {}

    impl ::fbthrift::GetTType for self::ForwardUsageByRef {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::ForwardUsageByRef
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("ForwardUsageByRef");
            if let ::std::option::Option::Some(some) = &self.foo {
                p.write_field_begin("foo", ::fbthrift::TType::Struct, 1);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::ForwardUsageByRef
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("foo", ::fbthrift::TType::Struct, 1),
            ];
            let mut field_foo = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Struct, 1) => field_foo = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                foo: field_foo,
            })
        }
    }


    impl ::std::default::Default for self::NoexceptMoveEmpty {
        fn default() -> Self {
            Self {
            }
        }
    }

    unsafe impl ::std::marker::Send for self::NoexceptMoveEmpty {}
    unsafe impl ::std::marker::Sync for self::NoexceptMoveEmpty {}

    impl ::fbthrift::GetTType for self::NoexceptMoveEmpty {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::NoexceptMoveEmpty
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveEmpty");
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::NoexceptMoveEmpty
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
            ];
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
            })
        }
    }


    impl ::std::default::Default for self::NoexceptMoveSimpleStruct {
        fn default() -> Self {
            Self {
                boolField: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::NoexceptMoveSimpleStruct {}
    unsafe impl ::std::marker::Sync for self::NoexceptMoveSimpleStruct {}

    impl ::fbthrift::GetTType for self::NoexceptMoveSimpleStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::NoexceptMoveSimpleStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveSimpleStruct");
            p.write_field_begin("boolField", ::fbthrift::TType::I64, 1);
            ::fbthrift::Serialize::write(&self.boolField, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::NoexceptMoveSimpleStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("boolField", ::fbthrift::TType::I64, 1),
            ];
            let mut field_boolField = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I64, 1) => field_boolField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                boolField: field_boolField.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::NoexceptMoveComplexStruct {
        fn default() -> Self {
            Self {
                MyBoolField: ::std::default::Default::default(),
                MyIntField: 12,
                MyStringField: "test".to_owned(),
                MyStringField2: ::std::default::Default::default(),
                MyBinaryField: ::std::default::Default::default(),
                MyBinaryField2: ::std::option::Option::None,
                MyBinaryField3: ::std::default::Default::default(),
                MyBinaryListField4: ::std::default::Default::default(),
                MyMapEnumAndInt: {
                    let mut map = ::std::collections::BTreeMap::new();
                    map.insert(crate::types::MyEnumA::fieldA, "fieldA".to_owned());
                    map.insert(crate::types::MyEnumA::fieldC, "fieldC".to_owned());
                    map
                },
            }
        }
    }

    unsafe impl ::std::marker::Send for self::NoexceptMoveComplexStruct {}
    unsafe impl ::std::marker::Sync for self::NoexceptMoveComplexStruct {}

    impl ::fbthrift::GetTType for self::NoexceptMoveComplexStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::NoexceptMoveComplexStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoexceptMoveComplexStruct");
            p.write_field_begin("MyBoolField", ::fbthrift::TType::Bool, 1);
            ::fbthrift::Serialize::write(&self.MyBoolField, p);
            p.write_field_end();
            p.write_field_begin("MyIntField", ::fbthrift::TType::I64, 2);
            ::fbthrift::Serialize::write(&self.MyIntField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField", ::fbthrift::TType::String, 3);
            ::fbthrift::Serialize::write(&self.MyStringField, p);
            p.write_field_end();
            p.write_field_begin("MyStringField2", ::fbthrift::TType::String, 4);
            ::fbthrift::Serialize::write(&self.MyStringField2, p);
            p.write_field_end();
            p.write_field_begin("MyBinaryField", ::fbthrift::TType::String, 5);
            ::fbthrift::Serialize::write(&self.MyBinaryField, p);
            p.write_field_end();
            if let ::std::option::Option::Some(some) = &self.MyBinaryField2 {
                p.write_field_begin("MyBinaryField2", ::fbthrift::TType::String, 6);
                ::fbthrift::Serialize::write(some, p);
                p.write_field_end();
            }
            p.write_field_begin("MyBinaryField3", ::fbthrift::TType::String, 7);
            ::fbthrift::Serialize::write(&self.MyBinaryField3, p);
            p.write_field_end();
            p.write_field_begin("MyBinaryListField4", ::fbthrift::TType::List, 8);
            ::fbthrift::Serialize::write(&self.MyBinaryListField4, p);
            p.write_field_end();
            p.write_field_begin("MyMapEnumAndInt", ::fbthrift::TType::Map, 9);
            ::fbthrift::Serialize::write(&self.MyMapEnumAndInt, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::NoexceptMoveComplexStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("MyBinaryField", ::fbthrift::TType::String, 5),
                ::fbthrift::Field::new("MyBinaryField2", ::fbthrift::TType::String, 6),
                ::fbthrift::Field::new("MyBinaryField3", ::fbthrift::TType::String, 7),
                ::fbthrift::Field::new("MyBinaryListField4", ::fbthrift::TType::List, 8),
                ::fbthrift::Field::new("MyBoolField", ::fbthrift::TType::Bool, 1),
                ::fbthrift::Field::new("MyIntField", ::fbthrift::TType::I64, 2),
                ::fbthrift::Field::new("MyMapEnumAndInt", ::fbthrift::TType::Map, 9),
                ::fbthrift::Field::new("MyStringField", ::fbthrift::TType::String, 3),
                ::fbthrift::Field::new("MyStringField2", ::fbthrift::TType::String, 4),
            ];
            let mut field_MyBoolField = ::std::option::Option::None;
            let mut field_MyIntField = ::std::option::Option::None;
            let mut field_MyStringField = ::std::option::Option::None;
            let mut field_MyStringField2 = ::std::option::Option::None;
            let mut field_MyBinaryField = ::std::option::Option::None;
            let mut field_MyBinaryField2 = ::std::option::Option::None;
            let mut field_MyBinaryField3 = ::std::option::Option::None;
            let mut field_MyBinaryListField4 = ::std::option::Option::None;
            let mut field_MyMapEnumAndInt = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Bool, 1) => field_MyBoolField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I64, 2) => field_MyIntField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 3) => field_MyStringField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 4) => field_MyStringField2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 5) => field_MyBinaryField = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 6) => field_MyBinaryField2 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 7) => field_MyBinaryField3 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::List, 8) => field_MyBinaryListField4 = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Map, 9) => field_MyMapEnumAndInt = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                MyBoolField: field_MyBoolField.unwrap_or_default(),
                MyIntField: field_MyIntField.unwrap_or_else(|| 12),
                MyStringField: field_MyStringField.unwrap_or_else(|| "test".to_owned()),
                MyStringField2: field_MyStringField2.unwrap_or_default(),
                MyBinaryField: field_MyBinaryField.unwrap_or_default(),
                MyBinaryField2: field_MyBinaryField2,
                MyBinaryField3: field_MyBinaryField3.unwrap_or_default(),
                MyBinaryListField4: field_MyBinaryListField4.unwrap_or_default(),
                MyMapEnumAndInt: field_MyMapEnumAndInt.unwrap_or_else(|| {
                    let mut map = ::std::collections::BTreeMap::new();
                    map.insert(crate::types::MyEnumA::fieldA, "fieldA".to_owned());
                    map.insert(crate::types::MyEnumA::fieldC, "fieldC".to_owned());
                    map
                }),
            })
        }
    }



    impl ::std::default::Default for NoExceptMoveUnion {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl ::fbthrift::GetTType for NoExceptMoveUnion {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for NoExceptMoveUnion
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("NoExceptMoveUnion");
            match self {
                NoExceptMoveUnion::string_field(inner) => {
                    p.write_field_begin("string_field", ::fbthrift::TType::String, 1);
                    ::fbthrift::Serialize::write(inner, p);
                    p.write_field_end();
                }
                NoExceptMoveUnion::i32_field(inner) => {
                    p.write_field_begin("i32_field", ::fbthrift::TType::I32, 2);
                    ::fbthrift::Serialize::write(inner, p);
                    p.write_field_end();
                }
                NoExceptMoveUnion::UnknownField(_) => {}
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for NoExceptMoveUnion
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("i32_field", ::fbthrift::TType::I32, 2),
                ::fbthrift::Field::new("string_field", ::fbthrift::TType::String, 1),
            ];
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = ::std::option::Option::None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32, once) {
                    (::fbthrift::TType::Stop, _, _) => break,
                    (::fbthrift::TType::String, 1, false) => {
                        once = true;
                        alt = ::std::option::Option::Some(NoExceptMoveUnion::string_field(::fbthrift::Deserialize::read(p)?));
                    }
                    (::fbthrift::TType::I32, 2, false) => {
                        once = true;
                        alt = ::std::option::Option::Some(NoExceptMoveUnion::i32_field(::fbthrift::Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "NoExceptMoveUnion",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(alt.unwrap_or_default())
        }
    }

    impl ::std::default::Default for self::AllocatorAware {
        fn default() -> Self {
            Self {
                aa_list: ::std::default::Default::default(),
                aa_set: ::std::default::Default::default(),
                aa_map: ::std::default::Default::default(),
                aa_string: ::std::default::Default::default(),
                not_a_container: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::AllocatorAware {}
    unsafe impl ::std::marker::Sync for self::AllocatorAware {}

    impl ::fbthrift::GetTType for self::AllocatorAware {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::AllocatorAware
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("AllocatorAware");
            p.write_field_begin("aa_list", ::fbthrift::TType::List, 1);
            ::fbthrift::Serialize::write(&self.aa_list, p);
            p.write_field_end();
            p.write_field_begin("aa_set", ::fbthrift::TType::Set, 2);
            ::fbthrift::Serialize::write(&self.aa_set, p);
            p.write_field_end();
            p.write_field_begin("aa_map", ::fbthrift::TType::Map, 3);
            ::fbthrift::Serialize::write(&self.aa_map, p);
            p.write_field_end();
            p.write_field_begin("aa_string", ::fbthrift::TType::String, 4);
            ::fbthrift::Serialize::write(&self.aa_string, p);
            p.write_field_end();
            p.write_field_begin("not_a_container", ::fbthrift::TType::I32, 5);
            ::fbthrift::Serialize::write(&self.not_a_container, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::AllocatorAware
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("aa_list", ::fbthrift::TType::List, 1),
                ::fbthrift::Field::new("aa_map", ::fbthrift::TType::Map, 3),
                ::fbthrift::Field::new("aa_set", ::fbthrift::TType::Set, 2),
                ::fbthrift::Field::new("aa_string", ::fbthrift::TType::String, 4),
                ::fbthrift::Field::new("not_a_container", ::fbthrift::TType::I32, 5),
            ];
            let mut field_aa_list = ::std::option::Option::None;
            let mut field_aa_set = ::std::option::Option::None;
            let mut field_aa_map = ::std::option::Option::None;
            let mut field_aa_string = ::std::option::Option::None;
            let mut field_not_a_container = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::List, 1) => field_aa_list = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Set, 2) => field_aa_set = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Map, 3) => field_aa_map = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 4) => field_aa_string = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 5) => field_not_a_container = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                aa_list: field_aa_list.unwrap_or_default(),
                aa_set: field_aa_set.unwrap_or_default(),
                aa_map: field_aa_map.unwrap_or_default(),
                aa_string: field_aa_string.unwrap_or_default(),
                not_a_container: field_not_a_container.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::AllocatorAware2 {
        fn default() -> Self {
            Self {
                not_a_container: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::AllocatorAware2 {}
    unsafe impl ::std::marker::Sync for self::AllocatorAware2 {}

    impl ::fbthrift::GetTType for self::AllocatorAware2 {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::AllocatorAware2
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("AllocatorAware2");
            p.write_field_begin("not_a_container", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.not_a_container, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::AllocatorAware2
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("not_a_container", ::fbthrift::TType::I32, 1),
            ];
            let mut field_not_a_container = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_not_a_container = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                not_a_container: field_not_a_container.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::TypedefStruct {
        fn default() -> Self {
            Self {
                i32_field: ::std::default::Default::default(),
                IntTypedef_field: ::std::default::Default::default(),
                UintTypedef_field: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::TypedefStruct {}
    unsafe impl ::std::marker::Sync for self::TypedefStruct {}

    impl ::fbthrift::GetTType for self::TypedefStruct {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::TypedefStruct
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("TypedefStruct");
            p.write_field_begin("i32_field", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.i32_field, p);
            p.write_field_end();
            p.write_field_begin("IntTypedef_field", ::fbthrift::TType::I32, 2);
            ::fbthrift::Serialize::write(&self.IntTypedef_field, p);
            p.write_field_end();
            p.write_field_begin("UintTypedef_field", ::fbthrift::TType::I32, 3);
            ::fbthrift::Serialize::write(&self.UintTypedef_field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::TypedefStruct
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("IntTypedef_field", ::fbthrift::TType::I32, 2),
                ::fbthrift::Field::new("UintTypedef_field", ::fbthrift::TType::I32, 3),
                ::fbthrift::Field::new("i32_field", ::fbthrift::TType::I32, 1),
            ];
            let mut field_i32_field = ::std::option::Option::None;
            let mut field_IntTypedef_field = ::std::option::Option::None;
            let mut field_UintTypedef_field = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_i32_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 2) => field_IntTypedef_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::I32, 3) => field_UintTypedef_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                i32_field: field_i32_field.unwrap_or_default(),
                IntTypedef_field: field_IntTypedef_field.unwrap_or_default(),
                UintTypedef_field: field_UintTypedef_field.unwrap_or_default(),
            })
        }
    }


    impl ::std::default::Default for self::StructWithDoubleUnderscores {
        fn default() -> Self {
            Self {
                __field: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::StructWithDoubleUnderscores {}
    unsafe impl ::std::marker::Sync for self::StructWithDoubleUnderscores {}

    impl ::fbthrift::GetTType for self::StructWithDoubleUnderscores {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::StructWithDoubleUnderscores
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("StructWithDoubleUnderscores");
            p.write_field_begin("__field", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.__field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::StructWithDoubleUnderscores
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("__field", ::fbthrift::TType::I32, 1),
            ];
            let mut field___field = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field___field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                __field: field___field.unwrap_or_default(),
            })
        }
    }

}

#[doc(hidden)]
pub mod dependencies {
    pub use include as include;
}

pub mod services {
    pub mod some_service {

        #[derive(Clone, Debug)]
        pub enum BounceMapExn {
            Success(include::types::SomeMap),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for BounceMapExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                BounceMapExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for BounceMapExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for BounceMapExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("BounceMap");
                match self {
                    BounceMapExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Map,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BounceMapExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for BounceMapExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Map, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::Map, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(BounceMapExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "BounceMapExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "BounceMapExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum BinaryKeyedMapExn {
            Success(::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for BinaryKeyedMapExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                BinaryKeyedMapExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for BinaryKeyedMapExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for BinaryKeyedMapExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("BinaryKeyedMap");
                match self {
                    BinaryKeyedMapExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Map,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BinaryKeyedMapExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for BinaryKeyedMapExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Map, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::Map, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(BinaryKeyedMapExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "BinaryKeyedMapExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "BinaryKeyedMapExn"),
                    )
                    .into(),
                )
            }
        }
    }
}

/// Client implementation for each service in `module`.
pub mod client {

    pub struct SomeServiceImpl<P, T> {
        transport: T,
        _phantom: ::std::marker::PhantomData<fn() -> P>,
    }

    impl<P, T> SomeServiceImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    pub trait SomeService: ::std::marker::Send {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + ::std::marker::Send + 'static>>;
        fn binary_keyed_map(
            &self,
            arg_r: &[::std::primitive::i64],
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::errors::some_service::BinaryKeyedMapError>> + ::std::marker::Send + 'static>>;
    }

    impl<P, T> SomeService for SomeServiceImpl<P, T>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
    {        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::{ProtocolWriter as _};
            use ::futures::future::{FutureExt as _, TryFutureExt as _};
            const_cstr! {
                SERVICE_NAME = "SomeService";
                METHOD_NAME = "SomeService.bounce_map";
            }
            let request = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "bounce_map",
                ::fbthrift::MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_m", ::fbthrift::TType::Map, 1i16);
                    ::fbthrift::Serialize::write(&arg_m, p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(SERVICE_NAME, METHOD_NAME, request)
                .map_err(::std::convert::From::from)
                .and_then(|reply| {
                    let de = P::deserializer(reply);
                    (move |mut p: P::Deserializer| {
                        use ::fbthrift::{ProtocolReader as _};
                        let (_, message_type, _) = match p.read_message_begin(|_| ()) {
                            Ok(res) => res,
                            Err(e) => return ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ::std::result::Result::Err(e.into())
                                    )
                                )
                        };
                        match message_type {
                            ::fbthrift::MessageType::Reply => {
                                let exn: ::tokio_shim::task::JoinHandle<(Result<crate::services::some_service::BounceMapExn, _>, _)> = ::tokio_shim::task::spawn_blocking(move || {
                                  (::fbthrift::Deserialize::read(&mut p), p)
                                });
                                ::futures::future::Either::Right(exn.then(
                                    |exn| {
                                        let result = (move || {
                                            let (exn, mut p) = match exn {
                                                Ok(res) => res,
                                                Err(e) => {
                                                    // spawn_blocking threads can't be cancelled, so any
                                                    // error is a panic. This shouldn't happen, but we propagate if it does
                                                    ::std::panic::resume_unwind(e.into_panic())
                                                }
                                            };
                                            let exn = exn?;
                                            let result = match exn {
                                                crate::services::some_service::BounceMapExn::Success(x) => ::std::result::Result::Ok(x),
                                                crate::services::some_service::BounceMapExn::ApplicationException(ae) => {
                                                    ::std::result::Result::Err(crate::errors::some_service::BounceMapError::ApplicationException(ae))
                                                }
                                            };
                                            p.read_message_end()?;
                                            result
                                        })();
                                        ::futures::future::ready(result)
                                    }
                                ))
                            }
                            ::fbthrift::MessageType::Exception => {
                                let ae: ::std::result::Result<::fbthrift::ApplicationException, _> = ::fbthrift::Deserialize::read(&mut p);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ae.map_err(|e| e.into()).and_then(|ae| {
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                              ::std::result::Result::Err(crate::errors::some_service::BounceMapError::ApplicationException(ae))
                                          }
                                        )
                                        })
                                    )
                                )
                            }
                            ::fbthrift::MessageType::Call | ::fbthrift::MessageType::Oneway | ::fbthrift::MessageType::InvalidMessageType => {
                                let err = ::anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                            ::std::result::Result::Err(crate::errors::some_service::BounceMapError::ThriftError(err))
                                          }
                                        )
                                    )
                                )
                            }
                        }
                    })(de)
                })
                .boxed()
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[::std::primitive::i64],
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::errors::some_service::BinaryKeyedMapError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::{ProtocolWriter as _};
            use ::futures::future::{FutureExt as _, TryFutureExt as _};
            const_cstr! {
                SERVICE_NAME = "SomeService";
                METHOD_NAME = "SomeService.binary_keyed_map";
            }
            let request = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "binary_keyed_map",
                ::fbthrift::MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_r", ::fbthrift::TType::List, 1i16);
                    ::fbthrift::Serialize::write(&arg_r, p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(SERVICE_NAME, METHOD_NAME, request)
                .map_err(::std::convert::From::from)
                .and_then(|reply| {
                    let de = P::deserializer(reply);
                    (move |mut p: P::Deserializer| {
                        use ::fbthrift::{ProtocolReader as _};
                        let (_, message_type, _) = match p.read_message_begin(|_| ()) {
                            Ok(res) => res,
                            Err(e) => return ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ::std::result::Result::Err(e.into())
                                    )
                                )
                        };
                        match message_type {
                            ::fbthrift::MessageType::Reply => {
                                let exn: ::tokio_shim::task::JoinHandle<(Result<crate::services::some_service::BinaryKeyedMapExn, _>, _)> = ::tokio_shim::task::spawn_blocking(move || {
                                  (::fbthrift::Deserialize::read(&mut p), p)
                                });
                                ::futures::future::Either::Right(exn.then(
                                    |exn| {
                                        let result = (move || {
                                            let (exn, mut p) = match exn {
                                                Ok(res) => res,
                                                Err(e) => {
                                                    // spawn_blocking threads can't be cancelled, so any
                                                    // error is a panic. This shouldn't happen, but we propagate if it does
                                                    ::std::panic::resume_unwind(e.into_panic())
                                                }
                                            };
                                            let exn = exn?;
                                            let result = match exn {
                                                crate::services::some_service::BinaryKeyedMapExn::Success(x) => ::std::result::Result::Ok(x),
                                                crate::services::some_service::BinaryKeyedMapExn::ApplicationException(ae) => {
                                                    ::std::result::Result::Err(crate::errors::some_service::BinaryKeyedMapError::ApplicationException(ae))
                                                }
                                            };
                                            p.read_message_end()?;
                                            result
                                        })();
                                        ::futures::future::ready(result)
                                    }
                                ))
                            }
                            ::fbthrift::MessageType::Exception => {
                                let ae: ::std::result::Result<::fbthrift::ApplicationException, _> = ::fbthrift::Deserialize::read(&mut p);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ae.map_err(|e| e.into()).and_then(|ae| {
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                              ::std::result::Result::Err(crate::errors::some_service::BinaryKeyedMapError::ApplicationException(ae))
                                          }
                                        )
                                        })
                                    )
                                )
                            }
                            ::fbthrift::MessageType::Call | ::fbthrift::MessageType::Oneway | ::fbthrift::MessageType::InvalidMessageType => {
                                let err = ::anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                            ::std::result::Result::Err(crate::errors::some_service::BinaryKeyedMapError::ThriftError(err))
                                          }
                                        )
                                    )
                                )
                            }
                        }
                    })(de)
                })
                .boxed()
        }
    }

    impl<'a, T> SomeService for T
    where
        T: ::std::convert::AsRef<dyn SomeService + 'a>,
        T: ::std::marker::Send,
    {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + ::std::marker::Send + 'static>> {
            self.as_ref().bounce_map(
                arg_m,
            )
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[::std::primitive::i64],
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::errors::some_service::BinaryKeyedMapError>> + ::std::marker::Send + 'static>> {
            self.as_ref().binary_keyed_map(
                arg_r,
            )
        }
    }

    #[derive(Clone)]
    pub struct make_SomeService;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// # const _: &str = stringify! {
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = <dyn BuckGraphService>::new(protocol, transport);
    /// # };
    /// ```
    impl dyn SomeService {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> ::std::sync::Arc<impl SomeService + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
        {
            let _ = protocol;
            ::std::sync::Arc::new(SomeServiceImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ::fbthrift::ClientFactory for make_SomeService {
        type Api = dyn SomeService + ::std::marker::Send + ::std::marker::Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> ::std::sync::Arc<Self::Api>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport + ::std::marker::Sync,
            P::Deserializer: ::std::marker::Send,
        {
            <dyn SomeService>::new(protocol, transport)
        }
    }
}

/// Server definitions for `module`.
pub mod server {
    #[::async_trait::async_trait]
    pub trait SomeService: ::std::marker::Send + ::std::marker::Sync + 'static {
        async fn bounce_map(
            &self,
            _m: include::types::SomeMap,
        ) -> ::std::result::Result<include::types::SomeMap, crate::services::some_service::BounceMapExn> {
            ::std::result::Result::Err(crate::services::some_service::BounceMapExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "SomeService",
                    "bounce_map",
                ),
            ))
        }
        async fn binary_keyed_map(
            &self,
            _r: ::std::vec::Vec<::std::primitive::i64>,
        ) -> ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::services::some_service::BinaryKeyedMapExn> {
            ::std::result::Result::Err(crate::services::some_service::BinaryKeyedMapExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "SomeService",
                    "binary_keyed_map",
                ),
            ))
        }
    }

    /// Processor for SomeService's methods.
    #[derive(Clone, Debug)]
    pub struct SomeServiceProcessor<P, H, R> {
        service: H,
        supa: ::fbthrift::NullServiceProcessor<P, R>,
        _phantom: ::std::marker::PhantomData<(P, H, R)>,
    }

    impl<P, H, R> SomeServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: SomeService,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Sync,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: ::fbthrift::NullServiceProcessor::new(),
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_bounce_map<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            req_ctxt: &R,
            seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::ProtocolReader as _;

            const_cstr! {
                SERVICE_NAME = "SomeService";
                METHOD_NAME = "SomeService.bounce_map";
            }
            let mut ctx_stack = req_ctxt.get_context_stack(
                &SERVICE_NAME,
                &METHOD_NAME,
            )?;
            ::fbthrift::ContextStack::pre_read(&mut ctx_stack)?;

            static ARGS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("m", ::fbthrift::TType::Map, 1),
            ];
            let mut field_m = ::std::option::Option::None;

            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::Map, 1) => field_m = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::fbthrift::ContextStack::post_read(&mut ctx_stack, 0)?;
            let res = self.service.bounce_map(
                field_m.ok_or_else(|| {
                    ::fbthrift::ApplicationException::missing_arg(
                        "bounce_map",
                        "m",
                    )
                })?,
            ).await;
            let res = match res {
                ::std::result::Result::Ok(res) => {
                    crate::services::some_service::BounceMapExn::Success(res)
                }
                ::std::result::Result::Err(crate::services::some_service::BounceMapExn::ApplicationException(aexn)) => {
                    req_ctxt.set_user_exception_header(::fbthrift::help::type_name_of_val(&aexn), &format!("{:?}", aexn))?;
                    return ::std::result::Result::Err(aexn.into())
                }
                ::std::result::Result::Err(crate::services::some_service::BounceMapExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "bounce_map",
                    )
                }
            };
            ::fbthrift::ContextStack::pre_write(&mut ctx_stack)?;
            let res = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "bounce_map",
                ::fbthrift::MessageType::Reply,
                seqid,
                |p| ::fbthrift::Serialize::write(&res, p),
            ));
            ::fbthrift::ContextStack::post_write(&mut ctx_stack, 0)?;
            ::std::result::Result::Ok(res)
        }

        async fn handle_binary_keyed_map<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            req_ctxt: &R,
            seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::ProtocolReader as _;

            const_cstr! {
                SERVICE_NAME = "SomeService";
                METHOD_NAME = "SomeService.binary_keyed_map";
            }
            let mut ctx_stack = req_ctxt.get_context_stack(
                &SERVICE_NAME,
                &METHOD_NAME,
            )?;
            ::fbthrift::ContextStack::pre_read(&mut ctx_stack)?;

            static ARGS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("r", ::fbthrift::TType::List, 1),
            ];
            let mut field_r = ::std::option::Option::None;

            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::List, 1) => field_r = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::fbthrift::ContextStack::post_read(&mut ctx_stack, 0)?;
            let res = self.service.binary_keyed_map(
                field_r.ok_or_else(|| {
                    ::fbthrift::ApplicationException::missing_arg(
                        "binary_keyed_map",
                        "r",
                    )
                })?,
            ).await;
            let res = match res {
                ::std::result::Result::Ok(res) => {
                    crate::services::some_service::BinaryKeyedMapExn::Success(res)
                }
                ::std::result::Result::Err(crate::services::some_service::BinaryKeyedMapExn::ApplicationException(aexn)) => {
                    req_ctxt.set_user_exception_header(::fbthrift::help::type_name_of_val(&aexn), &format!("{:?}", aexn))?;
                    return ::std::result::Result::Err(aexn.into())
                }
                ::std::result::Result::Err(crate::services::some_service::BinaryKeyedMapExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "binary_keyed_map",
                    )
                }
            };
            ::fbthrift::ContextStack::pre_write(&mut ctx_stack)?;
            let res = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "binary_keyed_map",
                ::fbthrift::MessageType::Reply,
                seqid,
                |p| ::fbthrift::Serialize::write(&res, p),
            ));
            ::fbthrift::ContextStack::post_write(&mut ctx_stack, 0)?;
            ::std::result::Result::Ok(res)
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ServiceProcessor<P> for SomeServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: SomeService,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[::std::primitive::u8]) -> ::std::result::Result<::std::primitive::usize, ::fbthrift::ApplicationException> {
            match name {
                b"bounce_map" => ::std::result::Result::Ok(0usize),
                b"binary_keyed_map" => ::std::result::Result::Ok(1usize),
                _ => ::std::result::Result::Err(::fbthrift::ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: ::std::primitive::usize,
            _p: &mut P::Deserializer,
            _r: &R,
            _seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_bounce_map(_p, _r, _seqid).await,
                1usize => self.handle_binary_keyed_map(_p, _r, _seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "SomeServiceProcessor",
                    bad
                ),
            }
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ThriftService<P::Frame> for SomeServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        P::Frame: ::std::marker::Send + 'static,
        H: SomeService,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ::fbthrift::ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::fbthrift::{BufExt as _, ProtocolReader as _, ServiceProcessor as _};
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != ::fbthrift::MessageType::Call {
                return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                ::std::result::Result::Ok(idx) => idx,
                ::std::result::Result::Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                ::std::result::Result::Ok(bytes) => ::std::result::Result::Ok(bytes),
                ::std::result::Result::Err(err) => match err.downcast_ref::<::fbthrift::ProtocolError>() {
                    ::std::option::Option::Some(::fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = ::fbthrift::serialize!(P, |p| {
                            ::fbthrift::protocol::write_message(
                                p,
                                "SomeServiceProcessor",
                                ::fbthrift::MessageType::Exception,
                                seqid,
                                |p| ::fbthrift::Serialize::write(&ae, p),
                            )
                        });
                        ::std::result::Result::Ok(res)
                    }
                    _ => ::std::result::Result::Err(err),
                },
            }
        }
    }

    /// Construct a new instance of a SomeService service.
    ///
    /// This is called when a new instance of a Thrift service Processor
    /// is needed for a particular Thrift protocol.
    pub fn make_SomeService_server<F, H, R>(
        proto: ::fbthrift::ProtocolID,
        handler: H,
    ) -> ::std::result::Result<::std::boxed::Box<dyn ::fbthrift::ThriftService<F, Handler = H, RequestContext = R> + ::std::marker::Send + 'static>, ::fbthrift::ApplicationException>
    where
        F: ::fbthrift::Framing + ::std::marker::Send + ::std::marker::Sync + 'static,
        H: SomeService,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        match proto {
            ::fbthrift::ProtocolID::BinaryProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(SomeServiceProcessor::<::fbthrift::BinaryProtocol<F>, H, R>::new(handler)))
            }
            ::fbthrift::ProtocolID::CompactProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(SomeServiceProcessor::<::fbthrift::CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => ::std::result::Result::Err(::fbthrift::ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
/// ```thrift
/// service MyService {
///     FunctionResponse myFunction(
///         1: FunctionRequest request,
///     ) throws {
///         1: StorageException s,
///         2: NotFoundException n,
///     ),
///
///     // other functions
/// }
/// ```
///
/// we would end up with this mock object under crate::mock::MyService:
///
/// ```
/// # const _: &str = stringify! {
/// impl crate::client::MyService for MyService<'mock> {...}
///
/// pub struct MyService<'mock> {
///     pub myFunction: myFunction<'mock>,
///     // ...
/// }
///
/// impl dyn crate::client::MyService {
///     pub fn mock<'mock>() -> MyService<'mock>;
/// }
///
/// impl myFunction<'mock> {
///     // directly return the given success response
///     pub fn ret(&self, value: FunctionResponse);
///
///     // invoke closure to compute success response
///     pub fn mock(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///     );
///
///     // invoke closure to compute response
///     pub fn mock_result(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> Result<FunctionResponse, crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock,
///     );
///
///     // return one of the function's declared exceptions
///     pub fn throw<E>(&self, exception: E)
///     where
///         E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
/// }
///
/// impl From<StorageException> for MyFunctionExn {...}
/// impl From<NotFoundException> for MyFunctionExn {...}
/// # };
/// ```
///
/// The intended usage from a test would be:
///
/// ```
/// # const _: &str = stringify! {
/// use std::sync::Arc;
/// use thrift_if::client::MyService;
///
/// #[test]
/// fn test_my_client() {
///     let mock = Arc::new(<dyn MyService>::mock());
///
///     // directly return a success response
///     let resp = FunctionResponse {...};
///     mock.myFunction.ret(resp);
///
///     // or give a closure to compute the success response
///     mock.myFunction.mock(|request| FunctionResponse {...});
///
///     // or throw one of the function's exceptions
///     mock.myFunction.throw(StorageException::ItFailed);
///
///     // or compute a Result (useful if your exceptions aren't Clone)
///     mock.myFunction.mock_result(|request| Err(...));
///
///     let out = do_the_thing(mock).wait().unwrap();
///     assert!(out.what_i_expected());
/// }
///
/// fn do_the_thing(
///     client: Arc<dyn MyService + Send + Sync + 'static>,
/// ) -> impl Future<Item = Out> {...}
/// # };
/// ```
pub mod mock {
    pub struct SomeService<'mock> {
        pub bounce_map: r#impl::some_service::bounce_map<'mock>,
        pub binary_keyed_map: r#impl::some_service::binary_keyed_map<'mock>,
        _marker: ::std::marker::PhantomData<&'mock ()>,
    }

    impl dyn super::client::SomeService {
        pub fn mock<'mock>() -> SomeService<'mock> {
            SomeService {
                bounce_map: r#impl::some_service::bounce_map::unimplemented(),
                binary_keyed_map: r#impl::some_service::binary_keyed_map::unimplemented(),
                _marker: ::std::marker::PhantomData,
            }
        }
    }

    #[::async_trait::async_trait]
    impl<'mock> super::client::SomeService for SomeService<'mock> {
        fn bounce_map(
            &self,
            arg_m: &include::types::SomeMap,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.bounce_map.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(include::types::SomeMap) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_m.clone())))
        }
        fn binary_keyed_map(
            &self,
            arg_r: &[::std::primitive::i64],
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::errors::some_service::BinaryKeyedMapError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.binary_keyed_map.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::vec::Vec<::std::primitive::i64>) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_r.to_owned())))
        }
    }

    mod r#impl {
        pub mod some_service {

            pub struct bounce_map<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(include::types::SomeMap) -> ::std::result::Result<
                        include::types::SomeMap,
                        crate::errors::some_service::BounceMapError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> bounce_map<'mock> {
                pub fn unimplemented() -> Self {
                    bounce_map {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: include::types::SomeMap| panic!(
                            "{}::{} is not mocked",
                            "SomeService",
                            "bounce_map",
                        ))),
                    }
                }

                pub fn ret(&self, value: include::types::SomeMap) {
                    self.mock(move |_: include::types::SomeMap| value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(include::types::SomeMap) -> include::types::SomeMap + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |m| ::std::result::Result::Ok(mock(m)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(include::types::SomeMap) -> ::std::result::Result<include::types::SomeMap, crate::errors::some_service::BounceMapError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |m| mock(m));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::some_service::BounceMapError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: include::types::SomeMap| ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct binary_keyed_map<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::vec::Vec<::std::primitive::i64>) -> ::std::result::Result<
                        ::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>,
                        crate::errors::some_service::BinaryKeyedMapError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> binary_keyed_map<'mock> {
                pub fn unimplemented() -> Self {
                    binary_keyed_map {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::vec::Vec<::std::primitive::i64>| panic!(
                            "{}::{} is not mocked",
                            "SomeService",
                            "binary_keyed_map",
                        ))),
                    }
                }

                pub fn ret(&self, value: ::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>) {
                    self.mock(move |_: ::std::vec::Vec<::std::primitive::i64>| value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::vec::Vec<::std::primitive::i64>) -> ::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |r| ::std::result::Result::Ok(mock(r)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::vec::Vec<::std::primitive::i64>) -> ::std::result::Result<::std::collections::BTreeMap<crate::types::TBinary, ::std::primitive::i64>, crate::errors::some_service::BinaryKeyedMapError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |r| mock(r));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::some_service::BinaryKeyedMapError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::vec::Vec<::std::primitive::i64>| ::std::result::Result::Err(exception.clone().into()));
                }
            }
        }
    }
}

/// Error return types.
pub mod errors {
    /// Errors for SomeService functions.
    pub mod some_service {

        pub type BounceMapError = ::fbthrift::NonthrowingFunctionError;

        pub type BinaryKeyedMapError = ::fbthrift::NonthrowingFunctionError;

    }

}

mod r#impl {
    use ref_cast::RefCast;

    #[derive(RefCast)]
    #[repr(transparent)]
    pub(crate) struct LocalImpl<T>(T);

    #[allow(unused)]
    pub(crate) fn write<T, P>(value: &T, p: &mut P)
    where
        LocalImpl<T>: ::fbthrift::Serialize<P>,
        P: ::fbthrift::ProtocolWriter,
    {
        ::fbthrift::Serialize::write(LocalImpl::ref_cast(value), p);
    }

    #[allow(unused)]
    pub(crate) fn read<T, P>(p: &mut P) -> ::anyhow::Result<T>
    where
        LocalImpl<T>: ::fbthrift::Deserialize<P>,
        P: ::fbthrift::ProtocolReader,
    {
        let value: LocalImpl<T> = ::fbthrift::Deserialize::read(p)?;
        ::std::result::Result::Ok(value.0)
    }

    impl<P> ::fbthrift::Serialize<P> for LocalImpl<::sorted_vector_map::SortedVectorMap<::std::primitive::i32, ::std::string::String>>
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_map_begin(
                <::std::primitive::i32 as ::fbthrift::GetTType>::TTYPE,
                <::std::string::String as ::fbthrift::GetTType>::TTYPE,
                self.0.len(),
            );
            for (k, v) in &self.0 {
                p.write_map_key_begin();
                ::fbthrift::Serialize::write(k, p);
                p.write_map_value_begin();
                ::fbthrift::Serialize::write(v, p);
            }
            p.write_map_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for LocalImpl<::sorted_vector_map::SortedVectorMap<::std::primitive::i32, ::std::string::String>>
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            let (_key_ty, _val_ty, len) = p.read_map_begin()?;
            let mut map = <::sorted_vector_map::SortedVectorMap<::std::primitive::i32, ::std::string::String>>::with_capacity(len.unwrap_or_default());

            if let Some(0) = len {
                return Ok(LocalImpl(map));
            }

            let mut idx = 0;
            loop {
                let more = p.read_map_key_begin()?;
                if !more {
                    break;
                }
                let k: ::std::primitive::i32 = ::fbthrift::Deserialize::read(p)?;
                p.read_map_value_begin()?;
                let v: ::std::string::String = ::fbthrift::Deserialize::read(p)?;
                p.read_map_value_end()?;
                map.insert(k, v);

                idx += 1;
                if ::fbthrift::protocol::should_break(len, more, idx) {
                    break;
                }
            }
            p.read_map_end()?;
            ::std::result::Result::Ok(LocalImpl(map))
        }
    }

    impl<P> ::fbthrift::Serialize<P> for LocalImpl<::sorted_vector_map::SortedVectorSet<::std::primitive::i32>>
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_set_begin(
                <::std::primitive::i32 as ::fbthrift::GetTType>::TTYPE,
                self.0.len(),
            );
            for v in &self.0 {
                p.write_set_value_begin();
                ::fbthrift::Serialize::write(v, p);
            }
            p.write_set_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for LocalImpl<::sorted_vector_map::SortedVectorSet<::std::primitive::i32>>
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            let (_elem_ty, len) = p.read_set_begin()?;
            let mut set = <::sorted_vector_map::SortedVectorSet<::std::primitive::i32>>::with_capacity(len.unwrap_or_default());

            if let Some(0) = len {
                return Ok(LocalImpl(set));
            }

            let mut idx = 0;
            loop {
                let more = p.read_set_value_begin()?;
                if !more {
                    break;
                }
                let v: ::std::primitive::i32 = ::fbthrift::Deserialize::read(p)?;
                p.read_set_value_end()?;
                set.insert(v);

                idx += 1;
                if ::fbthrift::protocol::should_break(len, more, idx) {
                    break;
                }
            }
            p.read_set_end()?;
            ::std::result::Result::Ok(LocalImpl(set))
        }
    }
}
