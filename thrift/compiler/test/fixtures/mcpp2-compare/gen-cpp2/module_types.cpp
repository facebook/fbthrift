/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/mcpp2-compare/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::MyEnumA>::size;
folly::Range<::some::valid::ns::MyEnumA const*> const TEnumTraits<::some::valid::ns::MyEnumA>::values = folly::range(TEnumDataStorage<::some::valid::ns::MyEnumA>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::MyEnumA>::names = folly::range(TEnumDataStorage<::some::valid::ns::MyEnumA>::names);

char const* TEnumTraits<::some::valid::ns::MyEnumA>::findName(type value) {
  using factory = ::some::valid::ns::_MyEnumA_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::MyEnumA>::findValue(char const* name, type* out) {
  using factory = ::some::valid::ns::_MyEnumA_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace some { namespace valid { namespace ns {
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES = _MyEnumA_EnumMapFactory::makeValuesToNamesMap();
const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES = _MyEnumA_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING

}}} // some::valid::ns

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::AnnotatedEnum>::size;
folly::Range<::some::valid::ns::AnnotatedEnum const*> const TEnumTraits<::some::valid::ns::AnnotatedEnum>::values = folly::range(TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::AnnotatedEnum>::names = folly::range(TEnumDataStorage<::some::valid::ns::AnnotatedEnum>::names);

char const* TEnumTraits<::some::valid::ns::AnnotatedEnum>::findName(type value) {
  using factory = ::some::valid::ns::_AnnotatedEnum_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::AnnotatedEnum>::findValue(char const* name, type* out) {
  using factory = ::some::valid::ns::_AnnotatedEnum_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace some { namespace valid { namespace ns {
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _AnnotatedEnum_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum_VALUES_TO_NAMES = _AnnotatedEnum_EnumMapFactory::makeValuesToNamesMap();
const _AnnotatedEnum_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum_NAMES_TO_VALUES = _AnnotatedEnum_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING

}}} // some::valid::ns

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::AnnotatedEnum2>::size;
folly::Range<::some::valid::ns::AnnotatedEnum2 const*> const TEnumTraits<::some::valid::ns::AnnotatedEnum2>::values = folly::range(TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::AnnotatedEnum2>::names = folly::range(TEnumDataStorage<::some::valid::ns::AnnotatedEnum2>::names);

char const* TEnumTraits<::some::valid::ns::AnnotatedEnum2>::findName(type value) {
  using factory = ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::AnnotatedEnum2>::findValue(char const* name, type* out) {
  using factory = ::some::valid::ns::_AnnotatedEnum2_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace some { namespace valid { namespace ns {
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _AnnotatedEnum2_EnumMapFactory::ValuesToNamesMapType _AnnotatedEnum2_VALUES_TO_NAMES = _AnnotatedEnum2_EnumMapFactory::makeValuesToNamesMap();
const _AnnotatedEnum2_EnumMapFactory::NamesToValuesMapType _AnnotatedEnum2_NAMES_TO_VALUES = _AnnotatedEnum2_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING

}}} // some::valid::ns

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::MyEnumB>::size;
folly::Range<::some::valid::ns::MyEnumB const*> const TEnumTraits<::some::valid::ns::MyEnumB>::values = folly::range(TEnumDataStorage<::some::valid::ns::MyEnumB>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::MyEnumB>::names = folly::range(TEnumDataStorage<::some::valid::ns::MyEnumB>::names);

char const* TEnumTraits<::some::valid::ns::MyEnumB>::findName(type value) {
  using factory = ::some::valid::ns::_MyEnumB_EnumMapFactory;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::MyEnumB>::findValue(char const* name, type* out) {
  using factory = ::some::valid::ns::_MyEnumB_EnumMapFactory;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}

}} // apache::thrift

namespace some { namespace valid { namespace ns {
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _MyEnumB_EnumMapFactory::ValuesToNamesMapType _MyEnumB_VALUES_TO_NAMES = _MyEnumB_EnumMapFactory::makeValuesToNamesMap();
const _MyEnumB_EnumMapFactory::NamesToValuesMapType _MyEnumB_NAMES_TO_VALUES = _MyEnumB_EnumMapFactory::makeNamesToValuesMap();
FOLLY_POP_WARNING

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::Empty>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::Empty>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Empty::Empty(apache::thrift::FragileConstructor) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void Empty::__clear() {
  // clear all fields
}

bool Empty::operator==(const Empty& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return true;
}

bool Empty::operator<(const Empty& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return false;
}


void swap(Empty& a, Empty& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template void Empty::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Empty::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void Empty::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::ASimpleStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::ASimpleStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ASimpleStruct::ASimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t boolField__arg) :
    boolField(std::move(boolField__arg)) {
  __isset.boolField = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void ASimpleStruct::__clear() {
  // clear all fields
  this->boolField = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ASimpleStruct::operator==(const ASimpleStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.boolField_ref() == rhs.boolField_ref())) {
    return false;
  }
  return true;
}


void swap(ASimpleStruct& a, ASimpleStruct& b) {
  using ::std::swap;
  swap(a.boolField_ref().value(), b.boolField_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ASimpleStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ASimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void ASimpleStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ASimpleStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ASimpleStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ASimpleStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::ASimpleStructNoexcept>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::ASimpleStructNoexcept>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ASimpleStructNoexcept::ASimpleStructNoexcept(apache::thrift::FragileConstructor, ::std::int64_t boolField__arg) :
    boolField(std::move(boolField__arg)) {
  __isset.boolField = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void ASimpleStructNoexcept::__clear() {
  // clear all fields
  this->boolField = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ASimpleStructNoexcept::operator==(const ASimpleStructNoexcept& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.boolField_ref() == rhs.boolField_ref())) {
    return false;
  }
  return true;
}

bool ASimpleStructNoexcept::operator<(const ASimpleStructNoexcept& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.boolField_ref() == rhs.boolField_ref())) {
    return lhs.boolField_ref() < rhs.boolField_ref();
  }
  return false;
}


void swap(ASimpleStructNoexcept& a, ASimpleStructNoexcept& b) {
  using ::std::swap;
  swap(a.boolField_ref().value(), b.boolField_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ASimpleStructNoexcept::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ASimpleStructNoexcept::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ASimpleStructNoexcept::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ASimpleStructNoexcept::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ASimpleStructNoexcept::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ASimpleStructNoexcept::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ASimpleStructNoexcept::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ASimpleStructNoexcept::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void ASimpleStructNoexcept::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ASimpleStructNoexcept::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ASimpleStructNoexcept::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ASimpleStructNoexcept::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct::MyStruct() :
      MyBoolField(0),
      MyIntField(12LL),
      MyStringField(apache::thrift::StringTraits<std::string>::fromStringLiteral("test")),
      MyMapEnumAndInt(std::initializer_list<std::pair<const ::some::valid::ns::MyEnumA, ::std::string>>{{ ::some::valid::ns::MyEnumA::fieldA, apache::thrift::StringTraits<std::string>::fromStringLiteral("fieldA")},
  { ::some::valid::ns::MyEnumA::fieldC, apache::thrift::StringTraits<std::string>::fromStringLiteral("fieldC")},
  {static_cast< ::some::valid::ns::MyEnumA>(9), apache::thrift::StringTraits<std::string>::fromStringLiteral("nothing")}}) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

MyStruct::~MyStruct() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct::MyStruct(MyStruct&& other) noexcept  :
    MyBoolField(std::move(other.MyBoolField)),
    MyIntField(std::move(other.MyIntField)),
    MyStringField(std::move(other.MyStringField)),
    MyStringField2(std::move(other.MyStringField2)),
    MyBinaryField(std::move(other.MyBinaryField)),
    MyBinaryField2(std::move(other.MyBinaryField2)),
    MyBinaryField3(std::move(other.MyBinaryField3)),
    MyBinaryListField4(std::move(other.MyBinaryListField4)),
    MyMapEnumAndInt(std::move(other.MyMapEnumAndInt)),
    __isset(other.__isset) {}
MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->MyBoolField = std::move(other.MyBoolField);
    this->MyIntField = std::move(other.MyIntField);
    this->MyStringField = std::move(other.MyStringField);
    this->MyStringField2 = std::move(other.MyStringField2);
    this->MyBinaryField = std::move(other.MyBinaryField);
    this->MyBinaryField2 = std::move(other.MyBinaryField2);
    this->MyBinaryField3 = std::move(other.MyBinaryField3);
    this->MyBinaryListField4 = std::move(other.MyBinaryListField4);
    this->MyMapEnumAndInt = std::move(other.MyMapEnumAndInt);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyStruct::MyStruct(apache::thrift::FragileConstructor, bool MyBoolField__arg, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::std::string MyStringField2__arg, ::std::string MyBinaryField__arg, ::std::string MyBinaryField2__arg, ::std::string MyBinaryField3__arg, ::std::vector<::std::string> MyBinaryListField4__arg, ::std::map<::some::valid::ns::MyEnumA, ::std::string> MyMapEnumAndInt__arg) :
    MyBoolField(std::move(MyBoolField__arg)),
    MyIntField(std::move(MyIntField__arg)),
    MyStringField(std::move(MyStringField__arg)),
    MyStringField2(std::move(MyStringField2__arg)),
    MyBinaryField(std::move(MyBinaryField__arg)),
    MyBinaryField2(std::move(MyBinaryField2__arg)),
    MyBinaryField3(std::move(MyBinaryField3__arg)),
    MyBinaryListField4(std::move(MyBinaryListField4__arg)),
    MyMapEnumAndInt(std::move(MyMapEnumAndInt__arg)) {
  __isset.MyBoolField = true;
  __isset.MyIntField = true;
  __isset.MyStringField = true;
  __isset.MyStringField2 = true;
  __isset.MyBinaryField = true;
  __isset.MyBinaryField2 = true;
  __isset.MyBinaryListField4 = true;
  __isset.MyMapEnumAndInt = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void MyStruct::__clear() {
  // clear all fields
  this->MyBoolField = 0;
  this->MyIntField = 12LL;
  this->MyStringField = apache::thrift::StringTraits<std::string>::fromStringLiteral("test");
  this->MyStringField2 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->MyBinaryField = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->MyBinaryField2 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->MyBinaryField3 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->MyBinaryListField4.clear();
  this->MyMapEnumAndInt.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool MyStruct::operator==(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.MyBoolField_ref() == rhs.MyBoolField_ref())) {
    return false;
  }
  if (!(lhs.MyIntField_ref() == rhs.MyIntField_ref())) {
    return false;
  }
  if (!(lhs.MyStringField_ref() == rhs.MyStringField_ref())) {
    return false;
  }
  if (!(lhs.MyStringField2_ref() == rhs.MyStringField2_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField, rhs.MyBinaryField)) {
    return false;
  }
  if (lhs.MyBinaryField2_ref().has_value() != rhs.MyBinaryField2_ref().has_value() || (lhs.MyBinaryField2_ref().has_value() && !apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField2, rhs.MyBinaryField2))) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField3, rhs.MyBinaryField3)) {
    return false;
  }
  if (!(lhs.MyBinaryListField4_ref() == rhs.MyBinaryListField4_ref())) {
    return false;
  }
  if (!(lhs.MyMapEnumAndInt_ref() == rhs.MyMapEnumAndInt_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.MyBoolField_ref() == rhs.MyBoolField_ref())) {
    return lhs.MyBoolField_ref() < rhs.MyBoolField_ref();
  }
  if (!(lhs.MyIntField_ref() == rhs.MyIntField_ref())) {
    return lhs.MyIntField_ref() < rhs.MyIntField_ref();
  }
  if (!(lhs.MyStringField_ref() == rhs.MyStringField_ref())) {
    return lhs.MyStringField_ref() < rhs.MyStringField_ref();
  }
  if (!(lhs.MyStringField2_ref() == rhs.MyStringField2_ref())) {
    return lhs.MyStringField2_ref() < rhs.MyStringField2_ref();
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField, rhs.MyBinaryField)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.MyBinaryField, rhs.MyBinaryField);
  }
  if (lhs.MyBinaryField2_ref().has_value() != rhs.MyBinaryField2_ref().has_value() || (lhs.MyBinaryField2_ref().has_value() && !apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField2, rhs.MyBinaryField2))) {
    return !lhs.MyBinaryField2_ref().has_value() || (rhs.MyBinaryField2_ref().has_value() && apache::thrift::StringTraits<std::string>::isLess(lhs.MyBinaryField2, rhs.MyBinaryField2));
  }
  if (!apache::thrift::StringTraits<std::string>::isEqual(lhs.MyBinaryField3, rhs.MyBinaryField3)) {
    return apache::thrift::StringTraits<std::string>::isLess(lhs.MyBinaryField3, rhs.MyBinaryField3);
  }
  if (!(lhs.MyBinaryListField4_ref() == rhs.MyBinaryListField4_ref())) {
    return lhs.MyBinaryListField4_ref() < rhs.MyBinaryListField4_ref();
  }
  if (!(lhs.MyMapEnumAndInt_ref() == rhs.MyMapEnumAndInt_ref())) {
    return lhs.MyMapEnumAndInt_ref() < rhs.MyMapEnumAndInt_ref();
  }
  return false;
}

const ::std::vector<::std::string>& MyStruct::get_MyBinaryListField4() const& {
  return MyBinaryListField4;
}

::std::vector<::std::string> MyStruct::get_MyBinaryListField4() && {
  return std::move(MyBinaryListField4);
}

const ::std::map<::some::valid::ns::MyEnumA, ::std::string>& MyStruct::get_MyMapEnumAndInt() const& {
  return MyMapEnumAndInt;
}

::std::map<::some::valid::ns::MyEnumA, ::std::string> MyStruct::get_MyMapEnumAndInt() && {
  return std::move(MyMapEnumAndInt);
}


void swap(MyStruct& a, MyStruct& b) {
  using ::std::swap;
  swap(a.MyBoolField_ref().value(), b.MyBoolField_ref().value());
  swap(a.MyIntField_ref().value(), b.MyIntField_ref().value());
  swap(a.MyStringField_ref().value(), b.MyStringField_ref().value());
  swap(a.MyStringField2_ref().value(), b.MyStringField2_ref().value());
  swap(a.MyBinaryField_ref().value(), b.MyBinaryField_ref().value());
  swap(a.MyBinaryField2_ref().value_unchecked(), b.MyBinaryField2_ref().value_unchecked());
  swap(a.MyBinaryField3_ref().value(), b.MyBinaryField3_ref().value());
  swap(a.MyBinaryListField4_ref().value(), b.MyBinaryListField4_ref().value());
  swap(a.MyMapEnumAndInt_ref().value(), b.MyMapEnumAndInt_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::SimpleUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::SimpleUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::SimpleUnion::Type>::size;
folly::Range<::some::valid::ns::SimpleUnion::Type const*> const TEnumTraits<::some::valid::ns::SimpleUnion::Type>::values = folly::range(TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::SimpleUnion::Type>::names = folly::range(TEnumDataStorage<::some::valid::ns::SimpleUnion::Type>::names);

char const* TEnumTraits<::some::valid::ns::SimpleUnion::Type>::findName(type value) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::SimpleUnion::Type>;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::SimpleUnion::Type>::findValue(char const* name, type* out) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::SimpleUnion::Type>;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}
}} // apache::thrift
namespace some { namespace valid { namespace ns {

void SimpleUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
      destruct(value_.intValue);
      break;
    case Type::stringValue:
      destruct(value_.stringValue);
      break;
    default:
      assert(false);
      break;
  }
  type_ = Type::__EMPTY__;
}

bool SimpleUnion::operator==(const SimpleUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
      return value_.intValue == rhs.value_.intValue;
    case Type::stringValue:
      return value_.stringValue == rhs.value_.stringValue;
    default:
      return true;
  }
}

bool SimpleUnion::operator<(const SimpleUnion& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::intValue:
      return lhs.value_.intValue < rhs.value_.intValue;
    case Type::stringValue:
      return lhs.value_.stringValue < rhs.value_.stringValue;
    default:
      return false;
  }
}

void swap(SimpleUnion& a, SimpleUnion& b) {
  SimpleUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void SimpleUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void SimpleUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void SimpleUnion::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t SimpleUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t SimpleUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t SimpleUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::ComplexUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::ComplexUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::ComplexUnion::Type>::size;
folly::Range<::some::valid::ns::ComplexUnion::Type const*> const TEnumTraits<::some::valid::ns::ComplexUnion::Type>::values = folly::range(TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::ComplexUnion::Type>::names = folly::range(TEnumDataStorage<::some::valid::ns::ComplexUnion::Type>::names);

char const* TEnumTraits<::some::valid::ns::ComplexUnion::Type>::findName(type value) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::ComplexUnion::Type>;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::ComplexUnion::Type>::findValue(char const* name, type* out) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::ComplexUnion::Type>;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}
}} // apache::thrift
namespace some { namespace valid { namespace ns {

void ComplexUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::intValue:
      destruct(value_.intValue);
      break;
    case Type::opt_intValue:
      destruct(value_.opt_intValue);
      break;
    case Type::stringValue:
      destruct(value_.stringValue);
      break;
    case Type::opt_stringValue:
      destruct(value_.opt_stringValue);
      break;
    case Type::intValue2:
      destruct(value_.intValue2);
      break;
    case Type::intValue3:
      destruct(value_.intValue3);
      break;
    case Type::doubelValue:
      destruct(value_.doubelValue);
      break;
    case Type::boolValue:
      destruct(value_.boolValue);
      break;
    case Type::union_list:
      destruct(value_.union_list);
      break;
    case Type::union_set:
      destruct(value_.union_set);
      break;
    case Type::union_map:
      destruct(value_.union_map);
      break;
    case Type::opt_union_map:
      destruct(value_.opt_union_map);
      break;
    case Type::enum_field:
      destruct(value_.enum_field);
      break;
    case Type::enum_container:
      destruct(value_.enum_container);
      break;
    case Type::a_struct:
      destruct(value_.a_struct);
      break;
    case Type::a_set_struct:
      destruct(value_.a_set_struct);
      break;
    case Type::a_union:
      destruct(value_.a_union);
      break;
    case Type::opt_a_union:
      destruct(value_.opt_a_union);
      break;
    case Type::a_union_list:
      destruct(value_.a_union_list);
      break;
    case Type::a_union_typedef:
      destruct(value_.a_union_typedef);
      break;
    case Type::a_union_typedef_list:
      destruct(value_.a_union_typedef_list);
      break;
    case Type::MyBinaryField:
      destruct(value_.MyBinaryField);
      break;
    case Type::MyBinaryField2:
      destruct(value_.MyBinaryField2);
      break;
    case Type::MyBinaryListField4:
      destruct(value_.MyBinaryListField4);
      break;
    case Type::ref_field:
      destruct(value_.ref_field);
      break;
    case Type::ref_field2:
      destruct(value_.ref_field2);
      break;
    case Type::excp_field:
      destruct(value_.excp_field);
      break;
    default:
      assert(false);
      break;
  }
  type_ = Type::__EMPTY__;
}

bool ComplexUnion::operator==(const ComplexUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::intValue:
      return value_.intValue == rhs.value_.intValue;
    case Type::opt_intValue:
      return value_.opt_intValue == rhs.value_.opt_intValue;
    case Type::stringValue:
      return value_.stringValue == rhs.value_.stringValue;
    case Type::opt_stringValue:
      return value_.opt_stringValue == rhs.value_.opt_stringValue;
    case Type::intValue2:
      return value_.intValue2 == rhs.value_.intValue2;
    case Type::intValue3:
      return value_.intValue3 == rhs.value_.intValue3;
    case Type::doubelValue:
      return value_.doubelValue == rhs.value_.doubelValue;
    case Type::boolValue:
      return value_.boolValue == rhs.value_.boolValue;
    case Type::union_list:
      return value_.union_list == rhs.value_.union_list;
    case Type::union_set:
      return value_.union_set == rhs.value_.union_set;
    case Type::union_map:
      return value_.union_map == rhs.value_.union_map;
    case Type::opt_union_map:
      return value_.opt_union_map == rhs.value_.opt_union_map;
    case Type::enum_field:
      return value_.enum_field == rhs.value_.enum_field;
    case Type::enum_container:
      return value_.enum_container == rhs.value_.enum_container;
    case Type::a_struct:
      return value_.a_struct == rhs.value_.a_struct;
    case Type::a_set_struct:
      return value_.a_set_struct == rhs.value_.a_set_struct;
    case Type::a_union:
      return value_.a_union == rhs.value_.a_union;
    case Type::opt_a_union:
      return value_.opt_a_union == rhs.value_.opt_a_union;
    case Type::a_union_list:
      return value_.a_union_list == rhs.value_.a_union_list;
    case Type::a_union_typedef:
      return value_.a_union_typedef == rhs.value_.a_union_typedef;
    case Type::a_union_typedef_list:
      return value_.a_union_typedef_list == rhs.value_.a_union_typedef_list;
    case Type::MyBinaryField:
      return apache::thrift::StringTraits<std::string>::isEqual(
          value_.MyBinaryField,
          rhs.value_.MyBinaryField);
    case Type::MyBinaryField2:
      return apache::thrift::StringTraits<std::string>::isEqual(
          value_.MyBinaryField2,
          rhs.value_.MyBinaryField2);
    case Type::MyBinaryListField4:
      return value_.MyBinaryListField4 == rhs.value_.MyBinaryListField4;
    case Type::ref_field:
      return *value_.ref_field == *rhs.value_.ref_field;
    case Type::ref_field2:
      return *value_.ref_field2 == *rhs.value_.ref_field2;
    case Type::excp_field:
      return value_.excp_field == rhs.value_.excp_field;
    default:
      return true;
  }
}

bool ComplexUnion::operator<(const ComplexUnion& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::intValue:
      return lhs.value_.intValue < rhs.value_.intValue;
    case Type::opt_intValue:
      return lhs.value_.opt_intValue < rhs.value_.opt_intValue;
    case Type::stringValue:
      return lhs.value_.stringValue < rhs.value_.stringValue;
    case Type::opt_stringValue:
      return lhs.value_.opt_stringValue < rhs.value_.opt_stringValue;
    case Type::intValue2:
      return lhs.value_.intValue2 < rhs.value_.intValue2;
    case Type::intValue3:
      return lhs.value_.intValue3 < rhs.value_.intValue3;
    case Type::doubelValue:
      return lhs.value_.doubelValue < rhs.value_.doubelValue;
    case Type::boolValue:
      return lhs.value_.boolValue < rhs.value_.boolValue;
    case Type::union_list:
      return lhs.value_.union_list < rhs.value_.union_list;
    case Type::union_set:
      return lhs.value_.union_set < rhs.value_.union_set;
    case Type::union_map:
      return lhs.value_.union_map < rhs.value_.union_map;
    case Type::opt_union_map:
      return lhs.value_.opt_union_map < rhs.value_.opt_union_map;
    case Type::enum_field:
      return lhs.value_.enum_field < rhs.value_.enum_field;
    case Type::enum_container:
      return lhs.value_.enum_container < rhs.value_.enum_container;
    case Type::a_struct:
      return lhs.value_.a_struct < rhs.value_.a_struct;
    case Type::a_set_struct:
      return lhs.value_.a_set_struct < rhs.value_.a_set_struct;
    case Type::a_union:
      return lhs.value_.a_union < rhs.value_.a_union;
    case Type::opt_a_union:
      return lhs.value_.opt_a_union < rhs.value_.opt_a_union;
    case Type::a_union_list:
      return lhs.value_.a_union_list < rhs.value_.a_union_list;
    case Type::a_union_typedef:
      return lhs.value_.a_union_typedef < rhs.value_.a_union_typedef;
    case Type::a_union_typedef_list:
      return lhs.value_.a_union_typedef_list < rhs.value_.a_union_typedef_list;
    case Type::MyBinaryField:
    return !apache::thrift::StringTraits<std::string>::isEqual(value_.MyBinaryField, rhs.value_.MyBinaryField) &&
      apache::thrift::StringTraits<std::string>::isLess(value_.MyBinaryField, rhs.value_.MyBinaryField);
    case Type::MyBinaryField2:
    return !apache::thrift::StringTraits<std::string>::isEqual(value_.MyBinaryField2, rhs.value_.MyBinaryField2) &&
      apache::thrift::StringTraits<std::string>::isLess(value_.MyBinaryField2, rhs.value_.MyBinaryField2);
    case Type::MyBinaryListField4:
      return lhs.value_.MyBinaryListField4 < rhs.value_.MyBinaryListField4;
    case Type::ref_field:
      return lhs.value_.ref_field < rhs.value_.ref_field;
    case Type::ref_field2:
      return lhs.value_.ref_field2 < rhs.value_.ref_field2;
    case Type::excp_field:
      return lhs.value_.excp_field < rhs.value_.excp_field;
    default:
      return false;
  }
}

::std::unique_ptr<::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field(::some::valid::ns::MyStruct const &t) {
  __clear();
  type_ = Type::ref_field;
  ::new (std::addressof(value_.ref_field)) ::std::unique_ptr<::some::valid::ns::MyStruct>(new ::std::unique_ptr<::some::valid::ns::MyStruct>::element_type(t));
  return value_.ref_field;
}

::std::unique_ptr<::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field(::some::valid::ns::MyStruct&& t) {
  __clear();
  type_ = Type::ref_field;
  ::new (std::addressof(value_.ref_field)) ::std::unique_ptr<::some::valid::ns::MyStruct>(new ::std::unique_ptr<::some::valid::ns::MyStruct>::element_type(std::move(t)));
  return value_.ref_field;
}

::std::shared_ptr<const ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field2(::some::valid::ns::MyStruct const &t) {
  __clear();
  type_ = Type::ref_field2;
  ::new (std::addressof(value_.ref_field2)) ::std::shared_ptr<const ::some::valid::ns::MyStruct>(new ::std::shared_ptr<const ::some::valid::ns::MyStruct>::element_type(t));
  return value_.ref_field2;
}

::std::shared_ptr<const ::some::valid::ns::MyStruct>& ComplexUnion::set_ref_field2(::some::valid::ns::MyStruct&& t) {
  __clear();
  type_ = Type::ref_field2;
  ::new (std::addressof(value_.ref_field2)) ::std::shared_ptr<const ::some::valid::ns::MyStruct>(new ::std::shared_ptr<const ::some::valid::ns::MyStruct>::element_type(std::move(t)));
  return value_.ref_field2;
}

void swap(ComplexUnion& a, ComplexUnion& b) {
  ComplexUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void ComplexUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComplexUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void ComplexUnion::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ComplexUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ComplexUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::SimpleUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::SimpleUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::SimpleUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::SimpleUnion>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::SimpleUnion>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::SimpleUnion>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        ComplexUnion,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::AnException>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::AnException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnException::AnException(const AnException&) = default;
AnException& AnException::operator=(const AnException&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnException::AnException() :
      code(0),
      req_code(0),
      exception_list(std::initializer_list<::std::int32_t>{1,
  2,
  3}),
      enum_field(static_cast< ::some::valid::ns::MyEnumA>(0)) {
}

AnException::AnException(std::string __message) : AnException() {
  message2 = std::move(__message);
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

AnException::~AnException() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnException::AnException(AnException&& other) noexcept  :
    code(std::move(other.code)),
    req_code(std::move(other.req_code)),
    message2(std::move(other.message2)),
    req_message(std::move(other.req_message)),
    exception_list(std::move(other.exception_list)),
    exception_set(std::move(other.exception_set)),
    exception_map(std::move(other.exception_map)),
    req_exception_map(std::move(other.req_exception_map)),
    enum_field(std::move(other.enum_field)),
    enum_container(std::move(other.enum_container)),
    a_struct(std::move(other.a_struct)),
    a_set_struct(std::move(other.a_set_struct)),
    a_union_list(std::move(other.a_union_list)),
    union_typedef(std::move(other.union_typedef)),
    a_union_typedef_list(std::move(other.a_union_typedef_list)),
    __isset(other.__isset) {}
AnException& AnException::operator=(FOLLY_MAYBE_UNUSED AnException&& other) noexcept {
    this->code = std::move(other.code);
    this->req_code = std::move(other.req_code);
    this->message2 = std::move(other.message2);
    this->req_message = std::move(other.req_message);
    this->exception_list = std::move(other.exception_list);
    this->exception_set = std::move(other.exception_set);
    this->exception_map = std::move(other.exception_map);
    this->req_exception_map = std::move(other.req_exception_map);
    this->enum_field = std::move(other.enum_field);
    this->enum_container = std::move(other.enum_container);
    this->a_struct = std::move(other.a_struct);
    this->a_set_struct = std::move(other.a_set_struct);
    this->a_union_list = std::move(other.a_union_list);
    this->union_typedef = std::move(other.union_typedef);
    this->a_union_typedef_list = std::move(other.a_union_typedef_list);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnException::AnException(apache::thrift::FragileConstructor, ::std::int32_t code__arg, ::std::int32_t req_code__arg, ::std::string message2__arg, ::std::string req_message__arg, ::std::vector<::std::int32_t> exception_list__arg, ::std::set<::std::int64_t> exception_set__arg, ::std::map<::std::string, ::std::int32_t> exception_map__arg, ::std::map<::std::string, ::std::int32_t> req_exception_map__arg, ::some::valid::ns::MyEnumA enum_field__arg, ::std::vector<::some::valid::ns::MyEnumA> enum_container__arg, ::some::valid::ns::MyStruct a_struct__arg, ::std::set<::some::valid::ns::MyStruct> a_set_struct__arg, ::std::vector<::some::valid::ns::SimpleUnion> a_union_list__arg, ::some::valid::ns::unionTypeDef union_typedef__arg, ::std::vector<::some::valid::ns::unionTypeDef> a_union_typedef_list__arg) :
    code(std::move(code__arg)),
    req_code(std::move(req_code__arg)),
    message2(std::move(message2__arg)),
    req_message(std::move(req_message__arg)),
    exception_list(std::move(exception_list__arg)),
    exception_set(std::move(exception_set__arg)),
    exception_map(std::move(exception_map__arg)),
    req_exception_map(std::move(req_exception_map__arg)),
    enum_field(std::move(enum_field__arg)),
    enum_container(std::move(enum_container__arg)),
    a_struct(std::move(a_struct__arg)),
    a_set_struct(std::move(a_set_struct__arg)),
    a_union_list(std::move(a_union_list__arg)),
    union_typedef(std::move(union_typedef__arg)),
    a_union_typedef_list(std::move(a_union_typedef_list__arg)) {
  __isset.code = true;
  __isset.message2 = true;
  __isset.exception_list = true;
  __isset.exception_set = true;
  __isset.exception_map = true;
  __isset.enum_field = true;
  __isset.enum_container = true;
  __isset.a_struct = true;
  __isset.a_set_struct = true;
  __isset.a_union_list = true;
  __isset.union_typedef = true;
  __isset.a_union_typedef_list = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void AnException::__clear() {
  // clear all fields
  this->code = 0;
  this->req_code = 0;
  this->message2 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->req_message = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->exception_list.clear();
  this->exception_set.clear();
  this->exception_map.clear();
  this->req_exception_map.clear();
  this->enum_field = static_cast< ::some::valid::ns::MyEnumA>(0);
  this->enum_container.clear();
  this->a_struct.__clear();
  this->a_set_struct.clear();
  this->a_union_list.clear();
  this->union_typedef.clear();
  this->a_union_typedef_list.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool AnException::operator==(const AnException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.code_ref() == rhs.code_ref())) {
    return false;
  }
  if (!(lhs.req_code_ref() == rhs.req_code_ref())) {
    return false;
  }
  if (!(lhs.message2_ref() == rhs.message2_ref())) {
    return false;
  }
  if (!(lhs.req_message_ref() == rhs.req_message_ref())) {
    return false;
  }
  if (!(lhs.exception_list_ref() == rhs.exception_list_ref())) {
    return false;
  }
  if (!(lhs.exception_set_ref() == rhs.exception_set_ref())) {
    return false;
  }
  if (!(lhs.exception_map_ref() == rhs.exception_map_ref())) {
    return false;
  }
  if (!(lhs.req_exception_map_ref() == rhs.req_exception_map_ref())) {
    return false;
  }
  if (!(lhs.enum_field_ref() == rhs.enum_field_ref())) {
    return false;
  }
  if (!(lhs.enum_container_ref() == rhs.enum_container_ref())) {
    return false;
  }
  if (!(lhs.a_struct_ref() == rhs.a_struct_ref())) {
    return false;
  }
  if (!(lhs.a_set_struct_ref() == rhs.a_set_struct_ref())) {
    return false;
  }
  if (!(lhs.a_union_list_ref() == rhs.a_union_list_ref())) {
    return false;
  }
  if (!(lhs.union_typedef_ref() == rhs.union_typedef_ref())) {
    return false;
  }
  if (!(lhs.a_union_typedef_list_ref() == rhs.a_union_typedef_list_ref())) {
    return false;
  }
  return true;
}

bool AnException::operator<(const AnException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.code_ref() == rhs.code_ref())) {
    return lhs.code_ref() < rhs.code_ref();
  }
  if (!(lhs.req_code_ref() == rhs.req_code_ref())) {
    return lhs.req_code_ref() < rhs.req_code_ref();
  }
  if (!(lhs.message2_ref() == rhs.message2_ref())) {
    return lhs.message2_ref() < rhs.message2_ref();
  }
  if (!(lhs.req_message_ref() == rhs.req_message_ref())) {
    return lhs.req_message_ref() < rhs.req_message_ref();
  }
  if (!(lhs.exception_list_ref() == rhs.exception_list_ref())) {
    return lhs.exception_list_ref() < rhs.exception_list_ref();
  }
  if (!(lhs.exception_set_ref() == rhs.exception_set_ref())) {
    return lhs.exception_set_ref() < rhs.exception_set_ref();
  }
  if (!(lhs.exception_map_ref() == rhs.exception_map_ref())) {
    return lhs.exception_map_ref() < rhs.exception_map_ref();
  }
  if (!(lhs.req_exception_map_ref() == rhs.req_exception_map_ref())) {
    return lhs.req_exception_map_ref() < rhs.req_exception_map_ref();
  }
  if (!(lhs.enum_field_ref() == rhs.enum_field_ref())) {
    return lhs.enum_field_ref() < rhs.enum_field_ref();
  }
  if (!(lhs.enum_container_ref() == rhs.enum_container_ref())) {
    return lhs.enum_container_ref() < rhs.enum_container_ref();
  }
  if (!(lhs.a_struct_ref() == rhs.a_struct_ref())) {
    return lhs.a_struct_ref() < rhs.a_struct_ref();
  }
  if (!(lhs.a_set_struct_ref() == rhs.a_set_struct_ref())) {
    return lhs.a_set_struct_ref() < rhs.a_set_struct_ref();
  }
  if (!(lhs.a_union_list_ref() == rhs.a_union_list_ref())) {
    return lhs.a_union_list_ref() < rhs.a_union_list_ref();
  }
  if (!(lhs.union_typedef_ref() == rhs.union_typedef_ref())) {
    return lhs.union_typedef_ref() < rhs.union_typedef_ref();
  }
  if (!(lhs.a_union_typedef_list_ref() == rhs.a_union_typedef_list_ref())) {
    return lhs.a_union_typedef_list_ref() < rhs.a_union_typedef_list_ref();
  }
  return false;
}

const ::std::vector<::std::int32_t>& AnException::get_exception_list() const& {
  return exception_list;
}

::std::vector<::std::int32_t> AnException::get_exception_list() && {
  return std::move(exception_list);
}

const ::std::set<::std::int64_t>& AnException::get_exception_set() const& {
  return exception_set;
}

::std::set<::std::int64_t> AnException::get_exception_set() && {
  return std::move(exception_set);
}

const ::std::map<::std::string, ::std::int32_t>& AnException::get_exception_map() const& {
  return exception_map;
}

::std::map<::std::string, ::std::int32_t> AnException::get_exception_map() && {
  return std::move(exception_map);
}

const ::std::map<::std::string, ::std::int32_t>& AnException::get_req_exception_map() const& {
  return req_exception_map;
}

::std::map<::std::string, ::std::int32_t> AnException::get_req_exception_map() && {
  return std::move(req_exception_map);
}

const ::std::vector<::some::valid::ns::MyEnumA>& AnException::get_enum_container() const& {
  return enum_container;
}

::std::vector<::some::valid::ns::MyEnumA> AnException::get_enum_container() && {
  return std::move(enum_container);
}

const ::some::valid::ns::MyStruct& AnException::get_a_struct() const& {
  return a_struct;
}

::some::valid::ns::MyStruct AnException::get_a_struct() && {
  return std::move(a_struct);
}

const ::std::set<::some::valid::ns::MyStruct>& AnException::get_a_set_struct() const& {
  return a_set_struct;
}

::std::set<::some::valid::ns::MyStruct> AnException::get_a_set_struct() && {
  return std::move(a_set_struct);
}

const ::std::vector<::some::valid::ns::SimpleUnion>& AnException::get_a_union_list() const& {
  return a_union_list;
}

::std::vector<::some::valid::ns::SimpleUnion> AnException::get_a_union_list() && {
  return std::move(a_union_list);
}

const ::some::valid::ns::unionTypeDef& AnException::get_union_typedef() const& {
  return union_typedef;
}

::some::valid::ns::unionTypeDef AnException::get_union_typedef() && {
  return std::move(union_typedef);
}

const ::std::vector<::some::valid::ns::unionTypeDef>& AnException::get_a_union_typedef_list() const& {
  return a_union_typedef_list;
}

::std::vector<::some::valid::ns::unionTypeDef> AnException::get_a_union_typedef_list() && {
  return std::move(a_union_typedef_list);
}


void swap(AnException& a, AnException& b) {
  using ::std::swap;
  swap(a.code_ref().value(), b.code_ref().value());
  swap(a.req_code_ref().value(), b.req_code_ref().value());
  swap(a.message2_ref().value(), b.message2_ref().value());
  swap(a.req_message_ref().value(), b.req_message_ref().value());
  swap(a.exception_list_ref().value(), b.exception_list_ref().value());
  swap(a.exception_set_ref().value(), b.exception_set_ref().value());
  swap(a.exception_map_ref().value(), b.exception_map_ref().value());
  swap(a.req_exception_map_ref().value(), b.req_exception_map_ref().value());
  swap(a.enum_field_ref().value(), b.enum_field_ref().value());
  swap(a.enum_container_ref().value(), b.enum_container_ref().value());
  swap(a.a_struct_ref().value(), b.a_struct_ref().value());
  swap(a.a_set_struct_ref().value(), b.a_set_struct_ref().value());
  swap(a.a_union_list_ref().value(), b.a_union_list_ref().value());
  swap(a.union_typedef_ref().value(), b.union_typedef_ref().value());
  swap(a.a_union_typedef_list_ref().value(), b.a_union_typedef_list_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void AnException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AnException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void AnException::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnException,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnException,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnException,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::SimpleUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnException,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnException,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnException,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnException,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::SimpleUnion>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnException,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of nimble option");

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::AnotherException>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::AnotherException>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnotherException::AnotherException(const AnotherException&) = default;
AnotherException& AnotherException::operator=(const AnotherException&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnotherException::AnotherException() :
      code(0),
      req_code(0) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

AnotherException::~AnotherException() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnotherException::AnotherException(AnotherException&& other) noexcept  :
    code(std::move(other.code)),
    req_code(std::move(other.req_code)),
    message(std::move(other.message)),
    __isset(other.__isset) {}
AnotherException& AnotherException::operator=(FOLLY_MAYBE_UNUSED AnotherException&& other) noexcept {
    this->code = std::move(other.code);
    this->req_code = std::move(other.req_code);
    this->message = std::move(other.message);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnotherException::AnotherException(apache::thrift::FragileConstructor, ::std::int32_t code__arg, ::std::int32_t req_code__arg, ::std::string message__arg) :
    code(std::move(code__arg)),
    req_code(std::move(req_code__arg)),
    message(std::move(message__arg)) {
  __isset.code = true;
  __isset.message = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void AnotherException::__clear() {
  // clear all fields
  this->code = 0;
  this->req_code = 0;
  this->message = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool AnotherException::operator==(const AnotherException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.code_ref() == rhs.code_ref())) {
    return false;
  }
  if (!(lhs.req_code_ref() == rhs.req_code_ref())) {
    return false;
  }
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return false;
  }
  return true;
}

bool AnotherException::operator<(const AnotherException& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.code_ref() == rhs.code_ref())) {
    return lhs.code_ref() < rhs.code_ref();
  }
  if (!(lhs.req_code_ref() == rhs.req_code_ref())) {
    return lhs.req_code_ref() < rhs.req_code_ref();
  }
  if (!(lhs.message_ref() == rhs.message_ref())) {
    return lhs.message_ref() < rhs.message_ref();
  }
  return false;
}


void swap(AnotherException& a, AnotherException& b) {
  using ::std::swap;
  swap(a.code_ref().value(), b.code_ref().value());
  swap(a.req_code_ref().value(), b.req_code_ref().value());
  swap(a.message_ref().value(), b.message_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void AnotherException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AnotherException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void AnotherException::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnotherException::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnotherException::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnotherException::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::containerStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::containerStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
containerStruct::containerStruct() :
      fieldA(0),
      req_fieldA(0),
      opt_fieldA(0),
      fieldC(std::initializer_list<::std::int32_t>{1,
  2,
  3,
  4}),
      req_fieldC(std::initializer_list<::std::int32_t>{1,
  2,
  3,
  4}),
      opt_fieldC(std::initializer_list<::std::int32_t>{1,
  2,
  3,
  4}),
      fieldE(apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring")),
      req_fieldE(apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring")),
      opt_fieldE(apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring")),
      fieldF(std::initializer_list<::std::vector<::std::int32_t>>{std::initializer_list<::std::int32_t>{1,
  3,
  5,
  7,
  9},
  std::initializer_list<::std::int32_t>{2,
  4,
  8,
  10,
  12}}),
      fieldI(true),
      fieldJ(std::initializer_list<std::pair<const ::std::string, ::std::vector<::std::int32_t>>>{{apache::thrift::StringTraits<std::string>::fromStringLiteral("subfieldA"), std::initializer_list<::std::int32_t>{1,
  4,
  8,
  12}},
  {apache::thrift::StringTraits<std::string>::fromStringLiteral("subfieldB"), std::initializer_list<::std::int32_t>{2,
  5,
  9,
  13}}}),
      fieldN(0),
      fieldQ(static_cast< ::some::valid::ns::MyEnumA>(0)),
      fieldR( ::some::valid::ns::MyEnumA::fieldB),
      req_fieldR( ::some::valid::ns::MyEnumA::fieldB),
      opt_fieldR( ::some::valid::ns::MyEnumA::fieldB),
      fieldS( ::some::valid::ns::MyEnumA::fieldB),
      fieldU(std::initializer_list<::some::valid::ns::MyEnumA>{ ::some::valid::ns::MyEnumA::fieldC,
   ::some::valid::ns::MyEnumA::fieldB,
   ::some::valid::ns::MyEnumA::fieldA}),
      fieldAC( ::some::valid::ns::MyEnumB::AField),
      fieldAD(static_cast< ::a::different::ns::AnEnum>(0)) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

containerStruct::~containerStruct() {}


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
containerStruct::containerStruct(apache::thrift::FragileConstructor, bool fieldA__arg, bool req_fieldA__arg, bool opt_fieldA__arg, ::std::map<::std::string, bool> fieldB__arg, ::std::map<::std::string, bool> req_fieldB__arg, ::std::map<::std::string, bool> opt_fieldB__arg, ::std::set<::std::int32_t> fieldC__arg, ::std::set<::std::int32_t> req_fieldC__arg, ::std::set<::std::int32_t> opt_fieldC__arg, ::std::string fieldD__arg, ::std::string fieldE__arg, ::std::string req_fieldE__arg, ::std::string opt_fieldE__arg, ::std::vector<::std::vector<::std::int32_t>> fieldF__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> fieldG__arg, ::std::vector<::std::set<::std::int32_t>> fieldH__arg, bool fieldI__arg, ::std::map<::std::string, ::std::vector<::std::int32_t>> fieldJ__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> fieldK__arg, ::std::set<::std::set<::std::set<bool>>> fieldL__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> fieldM__arg, ::some::valid::ns::simpleTypeDef fieldN__arg, ::some::valid::ns::complexStructTypeDef fieldO__arg, ::std::vector<::some::valid::ns::mostComplexTypeDef> fieldP__arg, ::some::valid::ns::MyEnumA fieldQ__arg, ::some::valid::ns::MyEnumA fieldR__arg, ::some::valid::ns::MyEnumA req_fieldR__arg, ::some::valid::ns::MyEnumA opt_fieldR__arg, ::some::valid::ns::MyEnumA fieldS__arg, ::std::vector<::some::valid::ns::MyEnumA> fieldT__arg, ::std::vector<::some::valid::ns::MyEnumA> fieldU__arg, ::some::valid::ns::MyStruct fieldV__arg, ::some::valid::ns::MyStruct req_fieldV__arg, ::some::valid::ns::MyStruct opt_fieldV__arg, ::std::set<::some::valid::ns::MyStruct> fieldW__arg, ::some::valid::ns::ComplexUnion fieldX__arg, ::some::valid::ns::ComplexUnion req_fieldX__arg, ::some::valid::ns::ComplexUnion opt_fieldX__arg, ::std::vector<::some::valid::ns::ComplexUnion> fieldY__arg, ::some::valid::ns::unionTypeDef fieldZ__arg, ::std::vector<::some::valid::ns::unionTypeDef> fieldAA__arg, ::std::map<::some::valid::ns::IndirectionB, ::some::valid::ns::IndirectionC> fieldAB__arg, ::some::valid::ns::MyEnumB fieldAC__arg, ::a::different::ns::AnEnum fieldAD__arg, ::std::map<::std::string, ::std::int32_t> fieldAE__arg, ::some::valid::ns::IndirectionD fieldSD__arg) :
    fieldA(std::move(fieldA__arg)),
    req_fieldA(std::move(req_fieldA__arg)),
    opt_fieldA(std::move(opt_fieldA__arg)),
    fieldB(std::move(fieldB__arg)),
    req_fieldB(std::move(req_fieldB__arg)),
    opt_fieldB(std::move(opt_fieldB__arg)),
    fieldC(std::move(fieldC__arg)),
    req_fieldC(std::move(req_fieldC__arg)),
    opt_fieldC(std::move(opt_fieldC__arg)),
    fieldD(std::move(fieldD__arg)),
    fieldE(std::move(fieldE__arg)),
    req_fieldE(std::move(req_fieldE__arg)),
    opt_fieldE(std::move(opt_fieldE__arg)),
    fieldF(std::move(fieldF__arg)),
    fieldG(std::move(fieldG__arg)),
    fieldH(std::move(fieldH__arg)),
    fieldI(std::move(fieldI__arg)),
    fieldJ(std::move(fieldJ__arg)),
    fieldK(std::move(fieldK__arg)),
    fieldL(std::move(fieldL__arg)),
    fieldM(std::move(fieldM__arg)),
    fieldN(std::move(fieldN__arg)),
    fieldO(std::move(fieldO__arg)),
    fieldP(std::move(fieldP__arg)),
    fieldQ(std::move(fieldQ__arg)),
    fieldR(std::move(fieldR__arg)),
    req_fieldR(std::move(req_fieldR__arg)),
    opt_fieldR(std::move(opt_fieldR__arg)),
    fieldS(std::move(fieldS__arg)),
    fieldT(std::move(fieldT__arg)),
    fieldU(std::move(fieldU__arg)),
    fieldV(std::move(fieldV__arg)),
    req_fieldV(std::move(req_fieldV__arg)),
    opt_fieldV(std::move(opt_fieldV__arg)),
    fieldW(std::move(fieldW__arg)),
    fieldX(std::move(fieldX__arg)),
    req_fieldX(std::move(req_fieldX__arg)),
    opt_fieldX(std::move(opt_fieldX__arg)),
    fieldY(std::move(fieldY__arg)),
    fieldZ(std::move(fieldZ__arg)),
    fieldAA(std::move(fieldAA__arg)),
    fieldAB(std::move(fieldAB__arg)),
    fieldAC(std::move(fieldAC__arg)),
    fieldAD(std::move(fieldAD__arg)),
    fieldAE(std::move(fieldAE__arg)),
    fieldSD(std::move(fieldSD__arg)) {
  __isset.fieldA = true;
  __isset.opt_fieldA = true;
  __isset.fieldB = true;
  __isset.opt_fieldB = true;
  __isset.fieldC = true;
  __isset.opt_fieldC = true;
  __isset.fieldD = true;
  __isset.fieldE = true;
  __isset.opt_fieldE = true;
  __isset.fieldF = true;
  __isset.fieldG = true;
  __isset.fieldH = true;
  __isset.fieldI = true;
  __isset.fieldJ = true;
  __isset.fieldK = true;
  __isset.fieldL = true;
  __isset.fieldM = true;
  __isset.fieldN = true;
  __isset.fieldO = true;
  __isset.fieldP = true;
  __isset.fieldQ = true;
  __isset.fieldR = true;
  __isset.opt_fieldR = true;
  __isset.fieldS = true;
  __isset.fieldT = true;
  __isset.fieldU = true;
  __isset.fieldV = true;
  __isset.opt_fieldV = true;
  __isset.fieldW = true;
  __isset.fieldX = true;
  __isset.opt_fieldX = true;
  __isset.fieldY = true;
  __isset.fieldZ = true;
  __isset.fieldAA = true;
  __isset.fieldAB = true;
  __isset.fieldAC = true;
  __isset.fieldAD = true;
  __isset.fieldAE = true;
  __isset.fieldSD = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void containerStruct::__clear() {
  // clear all fields
  this->fieldA = 0;
  this->req_fieldA = 0;
  this->opt_fieldA = 0;
  this->fieldB.clear();
  this->req_fieldB.clear();
  this->opt_fieldB.clear();
  this->fieldC.clear();
  this->req_fieldC.clear();
  this->opt_fieldC.clear();
  this->fieldD = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->fieldE = apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring");
  this->req_fieldE = apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring");
  this->opt_fieldE = apache::thrift::StringTraits<std::string>::fromStringLiteral("somestring");
  this->fieldF.clear();
  this->fieldG.clear();
  this->fieldH.clear();
  this->fieldI = true;
  this->fieldJ.clear();
  this->fieldK.clear();
  this->fieldL.clear();
  this->fieldM.clear();
  this->fieldN = 0;
  this->fieldO.clear();
  this->fieldP.clear();
  this->fieldQ = static_cast< ::some::valid::ns::MyEnumA>(0);
  this->fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  this->req_fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  this->opt_fieldR =  ::some::valid::ns::MyEnumA::fieldB;
  this->fieldS =  ::some::valid::ns::MyEnumA::fieldB;
  this->fieldT.clear();
  this->fieldU.clear();
  this->fieldV.__clear();
  this->req_fieldV.__clear();
  this->opt_fieldV.__clear();
  this->fieldW.clear();
  this->fieldX.__clear();
  this->req_fieldX.__clear();
  this->opt_fieldX.__clear();
  this->fieldY.clear();
  this->fieldZ.clear();
  this->fieldAA.clear();
  this->fieldAB.clear();
  this->fieldAC =  ::some::valid::ns::MyEnumB::AField;
  this->fieldAD = static_cast< ::a::different::ns::AnEnum>(0);
  this->fieldAE.clear();
  ::apache::thrift::apply_indirection(this->fieldSD) = apache::thrift::StringTraits<::folly::remove_cvref_t<::folly::invoke_result_t<::apache::thrift::detail::apply_indirection_fn, FooBar const&>>>::fromStringLiteral("");
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool containerStruct::operator==(const containerStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.fieldA_ref() == rhs.fieldA_ref())) {
    return false;
  }
  if (!(lhs.req_fieldA_ref() == rhs.req_fieldA_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldA_ref() == rhs.opt_fieldA_ref())) {
    return false;
  }
  if (!(lhs.fieldB_ref() == rhs.fieldB_ref())) {
    return false;
  }
  if (!(lhs.req_fieldB_ref() == rhs.req_fieldB_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldB_ref() == rhs.opt_fieldB_ref())) {
    return false;
  }
  if (!(lhs.fieldC_ref() == rhs.fieldC_ref())) {
    return false;
  }
  if (!(lhs.req_fieldC_ref() == rhs.req_fieldC_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldC_ref() == rhs.opt_fieldC_ref())) {
    return false;
  }
  if (!(lhs.fieldD_ref() == rhs.fieldD_ref())) {
    return false;
  }
  if (!(lhs.fieldE_ref() == rhs.fieldE_ref())) {
    return false;
  }
  if (!(lhs.req_fieldE_ref() == rhs.req_fieldE_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldE_ref() == rhs.opt_fieldE_ref())) {
    return false;
  }
  if (!(lhs.fieldF_ref() == rhs.fieldF_ref())) {
    return false;
  }
  if (!(lhs.fieldG_ref() == rhs.fieldG_ref())) {
    return false;
  }
  if (!(lhs.fieldH_ref() == rhs.fieldH_ref())) {
    return false;
  }
  if (!(lhs.fieldI_ref() == rhs.fieldI_ref())) {
    return false;
  }
  if (!(lhs.fieldJ_ref() == rhs.fieldJ_ref())) {
    return false;
  }
  if (!(lhs.fieldK_ref() == rhs.fieldK_ref())) {
    return false;
  }
  if (!(lhs.fieldL_ref() == rhs.fieldL_ref())) {
    return false;
  }
  if (!(lhs.fieldM_ref() == rhs.fieldM_ref())) {
    return false;
  }
  if (!(lhs.fieldN_ref() == rhs.fieldN_ref())) {
    return false;
  }
  if (!(lhs.fieldO_ref() == rhs.fieldO_ref())) {
    return false;
  }
  if (!(lhs.fieldP_ref() == rhs.fieldP_ref())) {
    return false;
  }
  if (!(lhs.fieldQ_ref() == rhs.fieldQ_ref())) {
    return false;
  }
  if (!(lhs.fieldR_ref() == rhs.fieldR_ref())) {
    return false;
  }
  if (!(lhs.req_fieldR_ref() == rhs.req_fieldR_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldR_ref() == rhs.opt_fieldR_ref())) {
    return false;
  }
  if (!(lhs.fieldS_ref() == rhs.fieldS_ref())) {
    return false;
  }
  if (!(lhs.fieldT_ref() == rhs.fieldT_ref())) {
    return false;
  }
  if (!(lhs.fieldU_ref() == rhs.fieldU_ref())) {
    return false;
  }
  if (!(lhs.fieldV_ref() == rhs.fieldV_ref())) {
    return false;
  }
  if (!(lhs.req_fieldV_ref() == rhs.req_fieldV_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldV_ref() == rhs.opt_fieldV_ref())) {
    return false;
  }
  if (!(lhs.fieldW_ref() == rhs.fieldW_ref())) {
    return false;
  }
  if (!(lhs.fieldX_ref() == rhs.fieldX_ref())) {
    return false;
  }
  if (!(lhs.req_fieldX_ref() == rhs.req_fieldX_ref())) {
    return false;
  }
  if (!(lhs.opt_fieldX_ref() == rhs.opt_fieldX_ref())) {
    return false;
  }
  if (!(lhs.fieldY_ref() == rhs.fieldY_ref())) {
    return false;
  }
  if (!(lhs.fieldZ_ref() == rhs.fieldZ_ref())) {
    return false;
  }
  if (!(lhs.fieldAA_ref() == rhs.fieldAA_ref())) {
    return false;
  }
  if (!(lhs.fieldAB_ref() == rhs.fieldAB_ref())) {
    return false;
  }
  if (!(lhs.fieldAC_ref() == rhs.fieldAC_ref())) {
    return false;
  }
  if (!(lhs.fieldAD_ref() == rhs.fieldAD_ref())) {
    return false;
  }
  if (!(lhs.fieldAE_ref() == rhs.fieldAE_ref())) {
    return false;
  }
  if (!(lhs.fieldSD_ref() == rhs.fieldSD_ref())) {
    return false;
  }
  return true;
}

bool containerStruct::operator<(const containerStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.fieldA_ref() == rhs.fieldA_ref())) {
    return lhs.fieldA_ref() < rhs.fieldA_ref();
  }
  if (!(lhs.req_fieldA_ref() == rhs.req_fieldA_ref())) {
    return lhs.req_fieldA_ref() < rhs.req_fieldA_ref();
  }
  if (!(lhs.opt_fieldA_ref() == rhs.opt_fieldA_ref())) {
    return lhs.opt_fieldA_ref() < rhs.opt_fieldA_ref();
  }
  if (!(lhs.fieldB_ref() == rhs.fieldB_ref())) {
    return lhs.fieldB_ref() < rhs.fieldB_ref();
  }
  if (!(lhs.req_fieldB_ref() == rhs.req_fieldB_ref())) {
    return lhs.req_fieldB_ref() < rhs.req_fieldB_ref();
  }
  if (!(lhs.opt_fieldB_ref() == rhs.opt_fieldB_ref())) {
    return lhs.opt_fieldB_ref() < rhs.opt_fieldB_ref();
  }
  if (!(lhs.fieldC_ref() == rhs.fieldC_ref())) {
    return lhs.fieldC_ref() < rhs.fieldC_ref();
  }
  if (!(lhs.req_fieldC_ref() == rhs.req_fieldC_ref())) {
    return lhs.req_fieldC_ref() < rhs.req_fieldC_ref();
  }
  if (!(lhs.opt_fieldC_ref() == rhs.opt_fieldC_ref())) {
    return lhs.opt_fieldC_ref() < rhs.opt_fieldC_ref();
  }
  if (!(lhs.fieldD_ref() == rhs.fieldD_ref())) {
    return lhs.fieldD_ref() < rhs.fieldD_ref();
  }
  if (!(lhs.fieldE_ref() == rhs.fieldE_ref())) {
    return lhs.fieldE_ref() < rhs.fieldE_ref();
  }
  if (!(lhs.req_fieldE_ref() == rhs.req_fieldE_ref())) {
    return lhs.req_fieldE_ref() < rhs.req_fieldE_ref();
  }
  if (!(lhs.opt_fieldE_ref() == rhs.opt_fieldE_ref())) {
    return lhs.opt_fieldE_ref() < rhs.opt_fieldE_ref();
  }
  if (!(lhs.fieldF_ref() == rhs.fieldF_ref())) {
    return lhs.fieldF_ref() < rhs.fieldF_ref();
  }
  if (!(lhs.fieldG_ref() == rhs.fieldG_ref())) {
    return lhs.fieldG_ref() < rhs.fieldG_ref();
  }
  if (!(lhs.fieldH_ref() == rhs.fieldH_ref())) {
    return lhs.fieldH_ref() < rhs.fieldH_ref();
  }
  if (!(lhs.fieldI_ref() == rhs.fieldI_ref())) {
    return lhs.fieldI_ref() < rhs.fieldI_ref();
  }
  if (!(lhs.fieldJ_ref() == rhs.fieldJ_ref())) {
    return lhs.fieldJ_ref() < rhs.fieldJ_ref();
  }
  if (!(lhs.fieldK_ref() == rhs.fieldK_ref())) {
    return lhs.fieldK_ref() < rhs.fieldK_ref();
  }
  if (!(lhs.fieldL_ref() == rhs.fieldL_ref())) {
    return lhs.fieldL_ref() < rhs.fieldL_ref();
  }
  if (!(lhs.fieldM_ref() == rhs.fieldM_ref())) {
    return lhs.fieldM_ref() < rhs.fieldM_ref();
  }
  if (!(lhs.fieldN_ref() == rhs.fieldN_ref())) {
    return lhs.fieldN_ref() < rhs.fieldN_ref();
  }
  if (!(lhs.fieldO_ref() == rhs.fieldO_ref())) {
    return lhs.fieldO_ref() < rhs.fieldO_ref();
  }
  if (!(lhs.fieldP_ref() == rhs.fieldP_ref())) {
    return lhs.fieldP_ref() < rhs.fieldP_ref();
  }
  if (!(lhs.fieldQ_ref() == rhs.fieldQ_ref())) {
    return lhs.fieldQ_ref() < rhs.fieldQ_ref();
  }
  if (!(lhs.fieldR_ref() == rhs.fieldR_ref())) {
    return lhs.fieldR_ref() < rhs.fieldR_ref();
  }
  if (!(lhs.req_fieldR_ref() == rhs.req_fieldR_ref())) {
    return lhs.req_fieldR_ref() < rhs.req_fieldR_ref();
  }
  if (!(lhs.opt_fieldR_ref() == rhs.opt_fieldR_ref())) {
    return lhs.opt_fieldR_ref() < rhs.opt_fieldR_ref();
  }
  if (!(lhs.fieldS_ref() == rhs.fieldS_ref())) {
    return lhs.fieldS_ref() < rhs.fieldS_ref();
  }
  if (!(lhs.fieldT_ref() == rhs.fieldT_ref())) {
    return lhs.fieldT_ref() < rhs.fieldT_ref();
  }
  if (!(lhs.fieldU_ref() == rhs.fieldU_ref())) {
    return lhs.fieldU_ref() < rhs.fieldU_ref();
  }
  if (!(lhs.fieldV_ref() == rhs.fieldV_ref())) {
    return lhs.fieldV_ref() < rhs.fieldV_ref();
  }
  if (!(lhs.req_fieldV_ref() == rhs.req_fieldV_ref())) {
    return lhs.req_fieldV_ref() < rhs.req_fieldV_ref();
  }
  if (!(lhs.opt_fieldV_ref() == rhs.opt_fieldV_ref())) {
    return lhs.opt_fieldV_ref() < rhs.opt_fieldV_ref();
  }
  if (!(lhs.fieldW_ref() == rhs.fieldW_ref())) {
    return lhs.fieldW_ref() < rhs.fieldW_ref();
  }
  if (!(lhs.fieldX_ref() == rhs.fieldX_ref())) {
    return lhs.fieldX_ref() < rhs.fieldX_ref();
  }
  if (!(lhs.req_fieldX_ref() == rhs.req_fieldX_ref())) {
    return lhs.req_fieldX_ref() < rhs.req_fieldX_ref();
  }
  if (!(lhs.opt_fieldX_ref() == rhs.opt_fieldX_ref())) {
    return lhs.opt_fieldX_ref() < rhs.opt_fieldX_ref();
  }
  if (!(lhs.fieldY_ref() == rhs.fieldY_ref())) {
    return lhs.fieldY_ref() < rhs.fieldY_ref();
  }
  if (!(lhs.fieldZ_ref() == rhs.fieldZ_ref())) {
    return lhs.fieldZ_ref() < rhs.fieldZ_ref();
  }
  if (!(lhs.fieldAA_ref() == rhs.fieldAA_ref())) {
    return lhs.fieldAA_ref() < rhs.fieldAA_ref();
  }
  if (!(lhs.fieldAB_ref() == rhs.fieldAB_ref())) {
    return lhs.fieldAB_ref() < rhs.fieldAB_ref();
  }
  if (!(lhs.fieldAC_ref() == rhs.fieldAC_ref())) {
    return lhs.fieldAC_ref() < rhs.fieldAC_ref();
  }
  if (!(lhs.fieldAD_ref() == rhs.fieldAD_ref())) {
    return lhs.fieldAD_ref() < rhs.fieldAD_ref();
  }
  if (!(lhs.fieldAE_ref() == rhs.fieldAE_ref())) {
    return lhs.fieldAE_ref() < rhs.fieldAE_ref();
  }
  if (!(lhs.fieldSD_ref() == rhs.fieldSD_ref())) {
    return lhs.fieldSD_ref() < rhs.fieldSD_ref();
  }
  return false;
}

const ::std::map<::std::string, bool>& containerStruct::get_fieldB() const& {
  return fieldB;
}

::std::map<::std::string, bool> containerStruct::get_fieldB() && {
  return std::move(fieldB);
}

const ::std::map<::std::string, bool>& containerStruct::get_req_fieldB() const& {
  return req_fieldB;
}

::std::map<::std::string, bool> containerStruct::get_req_fieldB() && {
  return std::move(req_fieldB);
}

const ::std::map<::std::string, bool>* containerStruct::get_opt_fieldB() const& {
  return opt_fieldB_ref().has_value() ? std::addressof(opt_fieldB) : nullptr;
}

::std::map<::std::string, bool>* containerStruct::get_opt_fieldB() & {
  return opt_fieldB_ref().has_value() ? std::addressof(opt_fieldB) : nullptr;
}

const ::std::set<::std::int32_t>& containerStruct::get_fieldC() const& {
  return fieldC;
}

::std::set<::std::int32_t> containerStruct::get_fieldC() && {
  return std::move(fieldC);
}

const ::std::set<::std::int32_t>& containerStruct::get_req_fieldC() const& {
  return req_fieldC;
}

::std::set<::std::int32_t> containerStruct::get_req_fieldC() && {
  return std::move(req_fieldC);
}

const ::std::set<::std::int32_t>* containerStruct::get_opt_fieldC() const& {
  return opt_fieldC_ref().has_value() ? std::addressof(opt_fieldC) : nullptr;
}

::std::set<::std::int32_t>* containerStruct::get_opt_fieldC() & {
  return opt_fieldC_ref().has_value() ? std::addressof(opt_fieldC) : nullptr;
}

const ::std::vector<::std::vector<::std::int32_t>>& containerStruct::get_fieldF() const& {
  return fieldF;
}

::std::vector<::std::vector<::std::int32_t>> containerStruct::get_fieldF() && {
  return std::move(fieldF);
}

const ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>& containerStruct::get_fieldG() const& {
  return fieldG;
}

::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> containerStruct::get_fieldG() && {
  return std::move(fieldG);
}

const ::std::vector<::std::set<::std::int32_t>>& containerStruct::get_fieldH() const& {
  return fieldH;
}

::std::vector<::std::set<::std::int32_t>> containerStruct::get_fieldH() && {
  return std::move(fieldH);
}

const ::std::map<::std::string, ::std::vector<::std::int32_t>>& containerStruct::get_fieldJ() const& {
  return fieldJ;
}

::std::map<::std::string, ::std::vector<::std::int32_t>> containerStruct::get_fieldJ() && {
  return std::move(fieldJ);
}

const ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>& containerStruct::get_fieldK() const& {
  return fieldK;
}

::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> containerStruct::get_fieldK() && {
  return std::move(fieldK);
}

const ::std::set<::std::set<::std::set<bool>>>& containerStruct::get_fieldL() const& {
  return fieldL;
}

::std::set<::std::set<::std::set<bool>>> containerStruct::get_fieldL() && {
  return std::move(fieldL);
}

const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& containerStruct::get_fieldM() const& {
  return fieldM;
}

::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> containerStruct::get_fieldM() && {
  return std::move(fieldM);
}

const ::some::valid::ns::complexStructTypeDef& containerStruct::get_fieldO() const& {
  return fieldO;
}

::some::valid::ns::complexStructTypeDef containerStruct::get_fieldO() && {
  return std::move(fieldO);
}

const ::std::vector<::some::valid::ns::mostComplexTypeDef>& containerStruct::get_fieldP() const& {
  return fieldP;
}

::std::vector<::some::valid::ns::mostComplexTypeDef> containerStruct::get_fieldP() && {
  return std::move(fieldP);
}

const ::std::vector<::some::valid::ns::MyEnumA>& containerStruct::get_fieldT() const& {
  return fieldT;
}

::std::vector<::some::valid::ns::MyEnumA> containerStruct::get_fieldT() && {
  return std::move(fieldT);
}

const ::std::vector<::some::valid::ns::MyEnumA>& containerStruct::get_fieldU() const& {
  return fieldU;
}

::std::vector<::some::valid::ns::MyEnumA> containerStruct::get_fieldU() && {
  return std::move(fieldU);
}

const ::some::valid::ns::MyStruct& containerStruct::get_fieldV() const& {
  return fieldV;
}

::some::valid::ns::MyStruct containerStruct::get_fieldV() && {
  return std::move(fieldV);
}

const ::some::valid::ns::MyStruct& containerStruct::get_req_fieldV() const& {
  return req_fieldV;
}

::some::valid::ns::MyStruct containerStruct::get_req_fieldV() && {
  return std::move(req_fieldV);
}

const ::some::valid::ns::MyStruct* containerStruct::get_opt_fieldV() const& {
  return opt_fieldV_ref().has_value() ? std::addressof(opt_fieldV) : nullptr;
}

::some::valid::ns::MyStruct* containerStruct::get_opt_fieldV() & {
  return opt_fieldV_ref().has_value() ? std::addressof(opt_fieldV) : nullptr;
}

const ::std::set<::some::valid::ns::MyStruct>& containerStruct::get_fieldW() const& {
  return fieldW;
}

::std::set<::some::valid::ns::MyStruct> containerStruct::get_fieldW() && {
  return std::move(fieldW);
}

const ::some::valid::ns::ComplexUnion& containerStruct::get_fieldX() const& {
  return fieldX;
}

::some::valid::ns::ComplexUnion containerStruct::get_fieldX() && {
  return std::move(fieldX);
}

const ::some::valid::ns::ComplexUnion& containerStruct::get_req_fieldX() const& {
  return req_fieldX;
}

::some::valid::ns::ComplexUnion containerStruct::get_req_fieldX() && {
  return std::move(req_fieldX);
}

const ::some::valid::ns::ComplexUnion* containerStruct::get_opt_fieldX() const& {
  return opt_fieldX_ref().has_value() ? std::addressof(opt_fieldX) : nullptr;
}

::some::valid::ns::ComplexUnion* containerStruct::get_opt_fieldX() & {
  return opt_fieldX_ref().has_value() ? std::addressof(opt_fieldX) : nullptr;
}

const ::std::vector<::some::valid::ns::ComplexUnion>& containerStruct::get_fieldY() const& {
  return fieldY;
}

::std::vector<::some::valid::ns::ComplexUnion> containerStruct::get_fieldY() && {
  return std::move(fieldY);
}

const ::some::valid::ns::unionTypeDef& containerStruct::get_fieldZ() const& {
  return fieldZ;
}

::some::valid::ns::unionTypeDef containerStruct::get_fieldZ() && {
  return std::move(fieldZ);
}

const ::std::vector<::some::valid::ns::unionTypeDef>& containerStruct::get_fieldAA() const& {
  return fieldAA;
}

::std::vector<::some::valid::ns::unionTypeDef> containerStruct::get_fieldAA() && {
  return std::move(fieldAA);
}

const ::std::map<::some::valid::ns::IndirectionB, ::some::valid::ns::IndirectionC>& containerStruct::get_fieldAB() const& {
  return fieldAB;
}

::std::map<::some::valid::ns::IndirectionB, ::some::valid::ns::IndirectionC> containerStruct::get_fieldAB() && {
  return std::move(fieldAB);
}

const ::std::map<::std::string, ::std::int32_t>& containerStruct::get_fieldAE() const& {
  return fieldAE;
}

::std::map<::std::string, ::std::int32_t> containerStruct::get_fieldAE() && {
  return std::move(fieldAE);
}


void swap(containerStruct& a, containerStruct& b) {
  using ::std::swap;
  swap(a.fieldA_ref().value(), b.fieldA_ref().value());
  swap(a.req_fieldA_ref().value(), b.req_fieldA_ref().value());
  swap(a.opt_fieldA_ref().value_unchecked(), b.opt_fieldA_ref().value_unchecked());
  swap(a.fieldB_ref().value(), b.fieldB_ref().value());
  swap(a.req_fieldB_ref().value(), b.req_fieldB_ref().value());
  swap(a.opt_fieldB_ref().value_unchecked(), b.opt_fieldB_ref().value_unchecked());
  swap(a.fieldC_ref().value(), b.fieldC_ref().value());
  swap(a.req_fieldC_ref().value(), b.req_fieldC_ref().value());
  swap(a.opt_fieldC_ref().value_unchecked(), b.opt_fieldC_ref().value_unchecked());
  swap(a.fieldD_ref().value(), b.fieldD_ref().value());
  swap(a.fieldE_ref().value(), b.fieldE_ref().value());
  swap(a.req_fieldE_ref().value(), b.req_fieldE_ref().value());
  swap(a.opt_fieldE_ref().value_unchecked(), b.opt_fieldE_ref().value_unchecked());
  swap(a.fieldF_ref().value(), b.fieldF_ref().value());
  swap(a.fieldG_ref().value(), b.fieldG_ref().value());
  swap(a.fieldH_ref().value(), b.fieldH_ref().value());
  swap(a.fieldI_ref().value(), b.fieldI_ref().value());
  swap(a.fieldJ_ref().value(), b.fieldJ_ref().value());
  swap(a.fieldK_ref().value(), b.fieldK_ref().value());
  swap(a.fieldL_ref().value(), b.fieldL_ref().value());
  swap(a.fieldM_ref().value(), b.fieldM_ref().value());
  swap(a.fieldN_ref().value(), b.fieldN_ref().value());
  swap(a.fieldO_ref().value(), b.fieldO_ref().value());
  swap(a.fieldP_ref().value(), b.fieldP_ref().value());
  swap(a.fieldQ_ref().value(), b.fieldQ_ref().value());
  swap(a.fieldR_ref().value(), b.fieldR_ref().value());
  swap(a.req_fieldR_ref().value(), b.req_fieldR_ref().value());
  swap(a.opt_fieldR_ref().value_unchecked(), b.opt_fieldR_ref().value_unchecked());
  swap(a.fieldS_ref().value(), b.fieldS_ref().value());
  swap(a.fieldT_ref().value(), b.fieldT_ref().value());
  swap(a.fieldU_ref().value(), b.fieldU_ref().value());
  swap(a.fieldV_ref().value(), b.fieldV_ref().value());
  swap(a.req_fieldV_ref().value(), b.req_fieldV_ref().value());
  swap(a.opt_fieldV_ref().value_unchecked(), b.opt_fieldV_ref().value_unchecked());
  swap(a.fieldW_ref().value(), b.fieldW_ref().value());
  swap(a.fieldX_ref().value(), b.fieldX_ref().value());
  swap(a.req_fieldX_ref().value(), b.req_fieldX_ref().value());
  swap(a.opt_fieldX_ref().value_unchecked(), b.opt_fieldX_ref().value_unchecked());
  swap(a.fieldY_ref().value(), b.fieldY_ref().value());
  swap(a.fieldZ_ref().value(), b.fieldZ_ref().value());
  swap(a.fieldAA_ref().value(), b.fieldAA_ref().value());
  swap(a.fieldAB_ref().value(), b.fieldAB_ref().value());
  swap(a.fieldAC_ref().value(), b.fieldAC_ref().value());
  swap(a.fieldAD_ref().value(), b.fieldAD_ref().value());
  swap(a.fieldAE_ref().value(), b.fieldAE_ref().value());
  swap(a.fieldSD_ref().value(), b.fieldSD_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void containerStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void containerStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void containerStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t containerStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t containerStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t containerStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,
        ::some::valid::ns::complexStructTypeDef>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::ComplexUnion>>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        containerStruct,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>>,
        ::some::valid::ns::complexStructTypeDef>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::MyStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>,
        ::std::set<::some::valid::ns::MyStruct>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::variant,
        ::some::valid::ns::ComplexUnion>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>,
        ::std::vector<::some::valid::ns::ComplexUnion>>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        containerStruct,
        ::apache::thrift::type_class::set<::apache::thrift::type_class::variant>,
        ::some::valid::ns::unionTypeDef>,
    "inconsistent use of nimble option");

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::MyIncludedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::MyIncludedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

MyIncludedStruct::MyIncludedStruct(const MyIncludedStruct& srcObj) {
  MyIncludedInt = srcObj.MyIncludedInt;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.MyIncludedInt = srcObj.__isset.MyIncludedInt;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  MyIncludedStruct = srcObj.MyIncludedStruct;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.MyIncludedStruct = srcObj.__isset.MyIncludedStruct;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  ARefField = ::apache::thrift::detail::st::copy_field<
        ::apache::thrift::type_class::structure>(srcObj.ARefField);
  ARequiredField = srcObj.ARequiredField;
}

MyIncludedStruct& MyIncludedStruct::operator=(const MyIncludedStruct& src) {
  MyIncludedStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyIncludedStruct::MyIncludedStruct(MyIncludedStruct&& other) noexcept  :
    MyIncludedInt(std::move(other.MyIncludedInt)),
    MyIncludedStruct(std::move(other.MyIncludedStruct)),
    ARefField(std::move(other.ARefField)),
    ARequiredField(std::move(other.ARequiredField)),
    __isset(other.__isset) {}
MyIncludedStruct& MyIncludedStruct::operator=(FOLLY_MAYBE_UNUSED MyIncludedStruct&& other) noexcept {
    this->MyIncludedInt = std::move(other.MyIncludedInt);
    this->MyIncludedStruct = std::move(other.MyIncludedStruct);
    this->ARefField = std::move(other.ARefField);
    this->ARequiredField = std::move(other.ARequiredField);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
MyIncludedStruct::MyIncludedStruct(apache::thrift::FragileConstructor, ::a::different::ns::IncludedInt64 MyIncludedInt__arg, ::some::valid::ns::AStruct MyIncludedStruct__arg, ::std::unique_ptr<::some::valid::ns::AStruct> ARefField__arg, ::some::valid::ns::AStruct ARequiredField__arg) :
    MyIncludedInt(std::move(MyIncludedInt__arg)),
    MyIncludedStruct(std::move(MyIncludedStruct__arg)),
    ARefField(std::move(ARefField__arg)),
    ARequiredField(std::move(ARequiredField__arg)) {
  __isset.MyIncludedInt = true;
  __isset.MyIncludedStruct = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void MyIncludedStruct::__clear() {
  // clear all fields
  this->MyIncludedInt = 42LL;
  this->MyIncludedStruct.__clear();
  if (this->ARefField) this->ARefField->__clear();
  this->ARequiredField.__clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool MyIncludedStruct::operator==(const MyIncludedStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.MyIncludedInt_ref() == rhs.MyIncludedInt_ref())) {
    return false;
  }
  if (!(lhs.MyIncludedStruct_ref() == rhs.MyIncludedStruct_ref())) {
    return false;
  }
  if ((lhs.ARefField == nullptr) != (rhs.ARefField == nullptr) || (lhs.ARefField != nullptr && lhs.ARefField != rhs.ARefField && !(*lhs.ARefField == *rhs.ARefField))) {
    return false;
  }
  if (!(lhs.ARequiredField_ref() == rhs.ARequiredField_ref())) {
    return false;
  }
  return true;
}

bool MyIncludedStruct::operator<(const MyIncludedStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.MyIncludedInt_ref() == rhs.MyIncludedInt_ref())) {
    return lhs.MyIncludedInt_ref() < rhs.MyIncludedInt_ref();
  }
  if (!(lhs.MyIncludedStruct_ref() == rhs.MyIncludedStruct_ref())) {
    return lhs.MyIncludedStruct_ref() < rhs.MyIncludedStruct_ref();
  }
  if ((lhs.ARefField == nullptr) != (rhs.ARefField == nullptr) || (lhs.ARefField != nullptr && lhs.ARefField != rhs.ARefField && !(*lhs.ARefField == *rhs.ARefField))) {
    return lhs.ARefField == nullptr || (rhs.ARefField != nullptr && *lhs.ARefField < *rhs.ARefField);
  }
  if (!(lhs.ARequiredField_ref() == rhs.ARequiredField_ref())) {
    return lhs.ARequiredField_ref() < rhs.ARequiredField_ref();
  }
  return false;
}

const ::some::valid::ns::AStruct& MyIncludedStruct::get_MyIncludedStruct() const& {
  return MyIncludedStruct;
}

::some::valid::ns::AStruct MyIncludedStruct::get_MyIncludedStruct() && {
  return std::move(MyIncludedStruct);
}

const ::some::valid::ns::AStruct& MyIncludedStruct::get_ARequiredField() const& {
  return ARequiredField;
}

::some::valid::ns::AStruct MyIncludedStruct::get_ARequiredField() && {
  return std::move(ARequiredField);
}


void swap(MyIncludedStruct& a, MyIncludedStruct& b) {
  using ::std::swap;
  swap(a.MyIncludedInt_ref().value(), b.MyIncludedInt_ref().value());
  swap(a.MyIncludedStruct_ref().value(), b.MyIncludedStruct_ref().value());
  swap(a.ARefField, b.ARefField);
  swap(a.ARequiredField_ref().value(), b.ARequiredField_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void MyIncludedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyIncludedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void MyIncludedStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t MyIncludedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t MyIncludedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t MyIncludedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        MyIncludedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::AStruct>,
    "inconsistent use of nimble option");

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::AnnotatedStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::AnnotatedStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnnotatedStruct::AnnotatedStruct() :
      cpp_unique_ref(std::make_unique<::some::valid::ns::containerStruct>()),
      cpp2_unique_ref(std::make_unique<::some::valid::ns::containerStruct>()),
      container_with_ref(std::make_unique<::std::map<::std::int32_t, ::std::vector<::std::string>>>()),
      req_cpp_unique_ref(std::make_unique<::some::valid::ns::containerStruct>()),
      req_cpp2_unique_ref(std::make_unique<::some::valid::ns::containerStruct>()),
      req_container_with_ref(std::make_unique<::std::vector<::std::string>>()),
      ref_type_unique(std::make_unique<::some::valid::ns::containerStruct>()),
      ref_type_shared(std::make_shared<::some::valid::ns::containerStruct>()),
      ref_type_const(std::make_shared<::std::map<::std::int32_t, ::std::vector<::std::string>>>()),
      req_ref_type_shared(std::make_shared<::some::valid::ns::containerStruct>()),
      req_ref_type_const(std::make_shared<::some::valid::ns::containerStruct>()),
      req_ref_type_unique(std::make_unique<::std::vector<::std::string>>()),
      base_type(0),
      indirection_a(0),
      iobuf_type_val(apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("value")),
      iobuf_ptr_val(apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("value2")),
      struct_struct(::apache::thrift::detail::make_constant< ::some::valid::ns::containerStruct>(::apache::thrift::type_class::structure{}, ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::fieldD>(apache::thrift::StringTraits<std::string>::fromStringLiteral("some string")), ::apache::thrift::detail::wrap_struct_argument<::apache::thrift::tag::fieldI>(false))) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

AnnotatedStruct::~AnnotatedStruct() {}


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AnnotatedStruct::AnnotatedStruct(apache::thrift::FragileConstructor, ::some::valid::ns::containerStruct no_annotation__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> cpp_unique_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> cpp2_unique_ref__arg, ::std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::std::string>>> container_with_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> req_cpp_unique_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> req_cpp2_unique_ref__arg, ::std::unique_ptr<::std::vector<::std::string>> req_container_with_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> opt_cpp_unique_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> opt_cpp2_unique_ref__arg, ::std::unique_ptr<::std::set<::std::int32_t>> opt_container_with_ref__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> ref_type_unique__arg, ::std::shared_ptr<::some::valid::ns::containerStruct> ref_type_shared__arg, ::std::shared_ptr<const ::std::map<::std::int32_t, ::std::vector<::std::string>>> ref_type_const__arg, ::std::shared_ptr<::some::valid::ns::containerStruct> req_ref_type_shared__arg, ::std::shared_ptr<const ::some::valid::ns::containerStruct> req_ref_type_const__arg, ::std::unique_ptr<::std::vector<::std::string>> req_ref_type_unique__arg, ::std::shared_ptr<const ::some::valid::ns::containerStruct> opt_ref_type_const__arg, ::std::unique_ptr<::some::valid::ns::containerStruct> opt_ref_type_unique__arg, ::std::shared_ptr<::std::set<::std::int32_t>> opt_ref_type_shared__arg, ::some::valid::ns::CppFakeI32 base_type__arg, ::some::valid::ns::FollySmallVectorI64 list_type__arg, ::some::valid::ns::SortedVectorSetString set_type__arg, ::some::valid::ns::FakeMap map_type__arg, ::some::valid::ns::UnorderedMapStruct map_struct_type__arg, ::some::valid::ns::IOBuf iobuf_type__arg, ::some::valid::ns::IOBufPtr iobuf_ptr__arg, std::list<::std::int32_t> list_i32_template__arg, std::deque<::std::string> list_string_template__arg, folly::sorted_vector_set<::std::string> set_template__arg, folly::sorted_vector_map<::std::int64_t, ::std::string> map_template__arg, ::some::valid::ns::std_list typedef_list_template__arg, ::some::valid::ns::std_deque typedef_deque_template__arg, ::some::valid::ns::folly_set typedef_set_template__arg, ::some::valid::ns::folly_map typedef_map_template__arg, ::some::valid::ns::IndirectionA indirection_a__arg, ::std::vector<::some::valid::ns::IndirectionB> indirection_b__arg, ::std::set<::some::valid::ns::IndirectionC> indirection_c__arg, ::some::valid::ns::IOBuf iobuf_type_val__arg, ::some::valid::ns::IOBufPtr iobuf_ptr_val__arg, ::some::valid::ns::containerStruct struct_struct__arg) :
    no_annotation(std::move(no_annotation__arg)),
    cpp_unique_ref(std::move(cpp_unique_ref__arg)),
    cpp2_unique_ref(std::move(cpp2_unique_ref__arg)),
    container_with_ref(std::move(container_with_ref__arg)),
    req_cpp_unique_ref(std::move(req_cpp_unique_ref__arg)),
    req_cpp2_unique_ref(std::move(req_cpp2_unique_ref__arg)),
    req_container_with_ref(std::move(req_container_with_ref__arg)),
    opt_cpp_unique_ref(std::move(opt_cpp_unique_ref__arg)),
    opt_cpp2_unique_ref(std::move(opt_cpp2_unique_ref__arg)),
    opt_container_with_ref(std::move(opt_container_with_ref__arg)),
    ref_type_unique(std::move(ref_type_unique__arg)),
    ref_type_shared(std::move(ref_type_shared__arg)),
    ref_type_const(std::move(ref_type_const__arg)),
    req_ref_type_shared(std::move(req_ref_type_shared__arg)),
    req_ref_type_const(std::move(req_ref_type_const__arg)),
    req_ref_type_unique(std::move(req_ref_type_unique__arg)),
    opt_ref_type_const(std::move(opt_ref_type_const__arg)),
    opt_ref_type_unique(std::move(opt_ref_type_unique__arg)),
    opt_ref_type_shared(std::move(opt_ref_type_shared__arg)),
    base_type(std::move(base_type__arg)),
    list_type(std::move(list_type__arg)),
    set_type(std::move(set_type__arg)),
    map_type(std::move(map_type__arg)),
    map_struct_type(std::move(map_struct_type__arg)),
    iobuf_type(std::move(iobuf_type__arg)),
    iobuf_ptr(std::move(iobuf_ptr__arg)),
    list_i32_template(std::move(list_i32_template__arg)),
    list_string_template(std::move(list_string_template__arg)),
    set_template(std::move(set_template__arg)),
    map_template(std::move(map_template__arg)),
    typedef_list_template(std::move(typedef_list_template__arg)),
    typedef_deque_template(std::move(typedef_deque_template__arg)),
    typedef_set_template(std::move(typedef_set_template__arg)),
    typedef_map_template(std::move(typedef_map_template__arg)),
    indirection_a(std::move(indirection_a__arg)),
    indirection_b(std::move(indirection_b__arg)),
    indirection_c(std::move(indirection_c__arg)),
    iobuf_type_val(std::move(iobuf_type_val__arg)),
    iobuf_ptr_val(std::move(iobuf_ptr_val__arg)),
    struct_struct(std::move(struct_struct__arg)) {
  __isset.no_annotation = true;
  __isset.base_type = true;
  __isset.list_type = true;
  __isset.set_type = true;
  __isset.map_type = true;
  __isset.map_struct_type = true;
  __isset.iobuf_type = true;
  __isset.iobuf_ptr = true;
  __isset.list_i32_template = true;
  __isset.list_string_template = true;
  __isset.set_template = true;
  __isset.map_template = true;
  __isset.typedef_list_template = true;
  __isset.typedef_deque_template = true;
  __isset.typedef_set_template = true;
  __isset.typedef_map_template = true;
  __isset.indirection_a = true;
  __isset.indirection_b = true;
  __isset.indirection_c = true;
  __isset.iobuf_type_val = true;
  __isset.iobuf_ptr_val = true;
  __isset.struct_struct = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void AnnotatedStruct::__clear() {
  // clear all fields
  this->no_annotation.__clear();
  if (this->cpp_unique_ref) this->cpp_unique_ref->__clear();
  if (this->cpp2_unique_ref) this->cpp2_unique_ref->__clear();
  this->container_with_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::map<::std::int32_t, ::std::vector<::std::string>>>>();
  if (this->req_cpp_unique_ref) this->req_cpp_unique_ref->__clear();
  if (this->req_cpp2_unique_ref) this->req_cpp2_unique_ref->__clear();
  this->req_container_with_ref = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::string>>>();
  this->opt_cpp_unique_ref.reset();
  this->opt_cpp2_unique_ref.reset();
  this->opt_container_with_ref.reset();
  if (this->ref_type_unique) this->ref_type_unique->__clear();
  if (this->ref_type_shared) this->ref_type_shared->__clear();
  this->ref_type_const = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::std::map<::std::int32_t, ::std::vector<::std::string>>>>();
  if (this->req_ref_type_shared) this->req_ref_type_shared->__clear();
  if (this->req_ref_type_const) this->req_ref_type_const.reset(new typename decltype(this->req_ref_type_const)::element_type());
  this->req_ref_type_unique = ::apache::thrift::detail::make_mutable_smart_ptr<::std::unique_ptr<::std::vector<::std::string>>>();
  this->opt_ref_type_const.reset();
  this->opt_ref_type_unique.reset();
  this->opt_ref_type_shared.reset();
  this->base_type = 0;
  this->list_type.clear();
  this->set_type.clear();
  this->map_type.clear();
  this->map_struct_type.clear();
  this->iobuf_type = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("");
  this->iobuf_ptr = apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("");
  this->list_i32_template.clear();
  this->list_string_template.clear();
  this->set_template.clear();
  this->map_template.clear();
  this->typedef_list_template.clear();
  this->typedef_deque_template.clear();
  this->typedef_set_template.clear();
  this->typedef_map_template.clear();
  ::apache::thrift::apply_indirection(this->indirection_a) = 0;
  this->indirection_b.clear();
  this->indirection_c.clear();
  this->iobuf_type_val = apache::thrift::StringTraits<folly::IOBuf>::fromStringLiteral("value");
  this->iobuf_ptr_val = apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::fromStringLiteral("value2");
  this->struct_struct.__clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool AnnotatedStruct::operator==(const AnnotatedStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.no_annotation_ref() == rhs.no_annotation_ref())) {
    return false;
  }
  if ((lhs.cpp_unique_ref == nullptr) != (rhs.cpp_unique_ref == nullptr) || (lhs.cpp_unique_ref != nullptr && lhs.cpp_unique_ref != rhs.cpp_unique_ref && !(*lhs.cpp_unique_ref == *rhs.cpp_unique_ref))) {
    return false;
  }
  if ((lhs.cpp2_unique_ref == nullptr) != (rhs.cpp2_unique_ref == nullptr) || (lhs.cpp2_unique_ref != nullptr && lhs.cpp2_unique_ref != rhs.cpp2_unique_ref && !(*lhs.cpp2_unique_ref == *rhs.cpp2_unique_ref))) {
    return false;
  }
  if ((lhs.container_with_ref == nullptr) != (rhs.container_with_ref == nullptr) || (lhs.container_with_ref != nullptr && lhs.container_with_ref != rhs.container_with_ref && !(*lhs.container_with_ref == *rhs.container_with_ref))) {
    return false;
  }
  if ((lhs.req_cpp_unique_ref == nullptr) != (rhs.req_cpp_unique_ref == nullptr) || (lhs.req_cpp_unique_ref != nullptr && lhs.req_cpp_unique_ref != rhs.req_cpp_unique_ref && !(*lhs.req_cpp_unique_ref == *rhs.req_cpp_unique_ref))) {
    return false;
  }
  if ((lhs.req_cpp2_unique_ref == nullptr) != (rhs.req_cpp2_unique_ref == nullptr) || (lhs.req_cpp2_unique_ref != nullptr && lhs.req_cpp2_unique_ref != rhs.req_cpp2_unique_ref && !(*lhs.req_cpp2_unique_ref == *rhs.req_cpp2_unique_ref))) {
    return false;
  }
  if ((lhs.req_container_with_ref == nullptr) != (rhs.req_container_with_ref == nullptr) || (lhs.req_container_with_ref != nullptr && lhs.req_container_with_ref != rhs.req_container_with_ref && !(*lhs.req_container_with_ref == *rhs.req_container_with_ref))) {
    return false;
  }
  if ((lhs.opt_cpp_unique_ref == nullptr) != (rhs.opt_cpp_unique_ref == nullptr) || (lhs.opt_cpp_unique_ref != nullptr && lhs.opt_cpp_unique_ref != rhs.opt_cpp_unique_ref && !(*lhs.opt_cpp_unique_ref == *rhs.opt_cpp_unique_ref))) {
    return false;
  }
  if ((lhs.opt_cpp2_unique_ref == nullptr) != (rhs.opt_cpp2_unique_ref == nullptr) || (lhs.opt_cpp2_unique_ref != nullptr && lhs.opt_cpp2_unique_ref != rhs.opt_cpp2_unique_ref && !(*lhs.opt_cpp2_unique_ref == *rhs.opt_cpp2_unique_ref))) {
    return false;
  }
  if ((lhs.opt_container_with_ref == nullptr) != (rhs.opt_container_with_ref == nullptr) || (lhs.opt_container_with_ref != nullptr && lhs.opt_container_with_ref != rhs.opt_container_with_ref && !(*lhs.opt_container_with_ref == *rhs.opt_container_with_ref))) {
    return false;
  }
  if ((lhs.ref_type_unique == nullptr) != (rhs.ref_type_unique == nullptr) || (lhs.ref_type_unique != nullptr && lhs.ref_type_unique != rhs.ref_type_unique && !(*lhs.ref_type_unique == *rhs.ref_type_unique))) {
    return false;
  }
  if ((lhs.ref_type_shared == nullptr) != (rhs.ref_type_shared == nullptr) || (lhs.ref_type_shared != nullptr && lhs.ref_type_shared != rhs.ref_type_shared && !(*lhs.ref_type_shared == *rhs.ref_type_shared))) {
    return false;
  }
  if ((lhs.ref_type_const == nullptr) != (rhs.ref_type_const == nullptr) || (lhs.ref_type_const != nullptr && lhs.ref_type_const != rhs.ref_type_const && !(*lhs.ref_type_const == *rhs.ref_type_const))) {
    return false;
  }
  if ((lhs.req_ref_type_shared == nullptr) != (rhs.req_ref_type_shared == nullptr) || (lhs.req_ref_type_shared != nullptr && lhs.req_ref_type_shared != rhs.req_ref_type_shared && !(*lhs.req_ref_type_shared == *rhs.req_ref_type_shared))) {
    return false;
  }
  if ((lhs.req_ref_type_const == nullptr) != (rhs.req_ref_type_const == nullptr) || (lhs.req_ref_type_const != nullptr && lhs.req_ref_type_const != rhs.req_ref_type_const && !(*lhs.req_ref_type_const == *rhs.req_ref_type_const))) {
    return false;
  }
  if ((lhs.req_ref_type_unique == nullptr) != (rhs.req_ref_type_unique == nullptr) || (lhs.req_ref_type_unique != nullptr && lhs.req_ref_type_unique != rhs.req_ref_type_unique && !(*lhs.req_ref_type_unique == *rhs.req_ref_type_unique))) {
    return false;
  }
  if ((lhs.opt_ref_type_const == nullptr) != (rhs.opt_ref_type_const == nullptr) || (lhs.opt_ref_type_const != nullptr && lhs.opt_ref_type_const != rhs.opt_ref_type_const && !(*lhs.opt_ref_type_const == *rhs.opt_ref_type_const))) {
    return false;
  }
  if ((lhs.opt_ref_type_unique == nullptr) != (rhs.opt_ref_type_unique == nullptr) || (lhs.opt_ref_type_unique != nullptr && lhs.opt_ref_type_unique != rhs.opt_ref_type_unique && !(*lhs.opt_ref_type_unique == *rhs.opt_ref_type_unique))) {
    return false;
  }
  if ((lhs.opt_ref_type_shared == nullptr) != (rhs.opt_ref_type_shared == nullptr) || (lhs.opt_ref_type_shared != nullptr && lhs.opt_ref_type_shared != rhs.opt_ref_type_shared && !(*lhs.opt_ref_type_shared == *rhs.opt_ref_type_shared))) {
    return false;
  }
  if (!(lhs.base_type_ref() == rhs.base_type_ref())) {
    return false;
  }
  if (!(lhs.list_type_ref() == rhs.list_type_ref())) {
    return false;
  }
  if (!(lhs.set_type_ref() == rhs.set_type_ref())) {
    return false;
  }
  if (!(lhs.map_type_ref() == rhs.map_type_ref())) {
    return false;
  }
  if (!(lhs.map_struct_type_ref() == rhs.map_struct_type_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.iobuf_type, rhs.iobuf_type)) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(lhs.iobuf_ptr, rhs.iobuf_ptr)) {
    return false;
  }
  if (!(lhs.list_i32_template_ref() == rhs.list_i32_template_ref())) {
    return false;
  }
  if (!(lhs.list_string_template_ref() == rhs.list_string_template_ref())) {
    return false;
  }
  if (!(lhs.set_template_ref() == rhs.set_template_ref())) {
    return false;
  }
  if (!(lhs.map_template_ref() == rhs.map_template_ref())) {
    return false;
  }
  if (!(lhs.typedef_list_template_ref() == rhs.typedef_list_template_ref())) {
    return false;
  }
  if (!(lhs.typedef_deque_template_ref() == rhs.typedef_deque_template_ref())) {
    return false;
  }
  if (!(lhs.typedef_set_template_ref() == rhs.typedef_set_template_ref())) {
    return false;
  }
  if (!(lhs.typedef_map_template_ref() == rhs.typedef_map_template_ref())) {
    return false;
  }
  if (!(lhs.indirection_a_ref() == rhs.indirection_a_ref())) {
    return false;
  }
  if (!(lhs.indirection_b_ref() == rhs.indirection_b_ref())) {
    return false;
  }
  if (!(lhs.indirection_c_ref() == rhs.indirection_c_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<folly::IOBuf>::isEqual(lhs.iobuf_type_val, rhs.iobuf_type_val)) {
    return false;
  }
  if (!apache::thrift::StringTraits<std::unique_ptr<folly::IOBuf>>::isEqual(lhs.iobuf_ptr_val, rhs.iobuf_ptr_val)) {
    return false;
  }
  if (!(lhs.struct_struct_ref() == rhs.struct_struct_ref())) {
    return false;
  }
  return true;
}

const ::some::valid::ns::containerStruct& AnnotatedStruct::get_no_annotation() const& {
  return no_annotation;
}

::some::valid::ns::containerStruct AnnotatedStruct::get_no_annotation() && {
  return std::move(no_annotation);
}

const ::some::valid::ns::FollySmallVectorI64& AnnotatedStruct::get_list_type() const& {
  return list_type;
}

::some::valid::ns::FollySmallVectorI64 AnnotatedStruct::get_list_type() && {
  return std::move(list_type);
}

const ::some::valid::ns::SortedVectorSetString& AnnotatedStruct::get_set_type() const& {
  return set_type;
}

::some::valid::ns::SortedVectorSetString AnnotatedStruct::get_set_type() && {
  return std::move(set_type);
}

const ::some::valid::ns::FakeMap& AnnotatedStruct::get_map_type() const& {
  return map_type;
}

::some::valid::ns::FakeMap AnnotatedStruct::get_map_type() && {
  return std::move(map_type);
}

const ::some::valid::ns::UnorderedMapStruct& AnnotatedStruct::get_map_struct_type() const& {
  return map_struct_type;
}

::some::valid::ns::UnorderedMapStruct AnnotatedStruct::get_map_struct_type() && {
  return std::move(map_struct_type);
}

const std::list<::std::int32_t>& AnnotatedStruct::get_list_i32_template() const& {
  return list_i32_template;
}

std::list<::std::int32_t> AnnotatedStruct::get_list_i32_template() && {
  return std::move(list_i32_template);
}

const std::deque<::std::string>& AnnotatedStruct::get_list_string_template() const& {
  return list_string_template;
}

std::deque<::std::string> AnnotatedStruct::get_list_string_template() && {
  return std::move(list_string_template);
}

const folly::sorted_vector_set<::std::string>& AnnotatedStruct::get_set_template() const& {
  return set_template;
}

folly::sorted_vector_set<::std::string> AnnotatedStruct::get_set_template() && {
  return std::move(set_template);
}

const folly::sorted_vector_map<::std::int64_t, ::std::string>& AnnotatedStruct::get_map_template() const& {
  return map_template;
}

folly::sorted_vector_map<::std::int64_t, ::std::string> AnnotatedStruct::get_map_template() && {
  return std::move(map_template);
}

const ::some::valid::ns::std_list& AnnotatedStruct::get_typedef_list_template() const& {
  return typedef_list_template;
}

::some::valid::ns::std_list AnnotatedStruct::get_typedef_list_template() && {
  return std::move(typedef_list_template);
}

const ::some::valid::ns::std_deque& AnnotatedStruct::get_typedef_deque_template() const& {
  return typedef_deque_template;
}

::some::valid::ns::std_deque AnnotatedStruct::get_typedef_deque_template() && {
  return std::move(typedef_deque_template);
}

const ::some::valid::ns::folly_set& AnnotatedStruct::get_typedef_set_template() const& {
  return typedef_set_template;
}

::some::valid::ns::folly_set AnnotatedStruct::get_typedef_set_template() && {
  return std::move(typedef_set_template);
}

const ::some::valid::ns::folly_map& AnnotatedStruct::get_typedef_map_template() const& {
  return typedef_map_template;
}

::some::valid::ns::folly_map AnnotatedStruct::get_typedef_map_template() && {
  return std::move(typedef_map_template);
}

const ::std::vector<::some::valid::ns::IndirectionB>& AnnotatedStruct::get_indirection_b() const& {
  return indirection_b;
}

::std::vector<::some::valid::ns::IndirectionB> AnnotatedStruct::get_indirection_b() && {
  return std::move(indirection_b);
}

const ::std::set<::some::valid::ns::IndirectionC>& AnnotatedStruct::get_indirection_c() const& {
  return indirection_c;
}

::std::set<::some::valid::ns::IndirectionC> AnnotatedStruct::get_indirection_c() && {
  return std::move(indirection_c);
}

const ::some::valid::ns::containerStruct& AnnotatedStruct::get_struct_struct() const& {
  return struct_struct;
}

::some::valid::ns::containerStruct AnnotatedStruct::get_struct_struct() && {
  return std::move(struct_struct);
}


void swap(AnnotatedStruct& a, AnnotatedStruct& b) {
  using ::std::swap;
  swap(a.no_annotation_ref().value(), b.no_annotation_ref().value());
  swap(a.cpp_unique_ref, b.cpp_unique_ref);
  swap(a.cpp2_unique_ref, b.cpp2_unique_ref);
  swap(a.container_with_ref, b.container_with_ref);
  swap(a.req_cpp_unique_ref, b.req_cpp_unique_ref);
  swap(a.req_cpp2_unique_ref, b.req_cpp2_unique_ref);
  swap(a.req_container_with_ref, b.req_container_with_ref);
  swap(a.opt_cpp_unique_ref, b.opt_cpp_unique_ref);
  swap(a.opt_cpp2_unique_ref, b.opt_cpp2_unique_ref);
  swap(a.opt_container_with_ref, b.opt_container_with_ref);
  swap(a.ref_type_unique, b.ref_type_unique);
  swap(a.ref_type_shared, b.ref_type_shared);
  swap(a.ref_type_const, b.ref_type_const);
  swap(a.req_ref_type_shared, b.req_ref_type_shared);
  swap(a.req_ref_type_const, b.req_ref_type_const);
  swap(a.req_ref_type_unique, b.req_ref_type_unique);
  swap(a.opt_ref_type_const, b.opt_ref_type_const);
  swap(a.opt_ref_type_unique, b.opt_ref_type_unique);
  swap(a.opt_ref_type_shared, b.opt_ref_type_shared);
  swap(a.base_type_ref().value(), b.base_type_ref().value());
  swap(a.list_type_ref().value(), b.list_type_ref().value());
  swap(a.set_type_ref().value(), b.set_type_ref().value());
  swap(a.map_type_ref().value(), b.map_type_ref().value());
  swap(a.map_struct_type_ref().value(), b.map_struct_type_ref().value());
  swap(a.iobuf_type_ref().value(), b.iobuf_type_ref().value());
  swap(a.iobuf_ptr_ref().value(), b.iobuf_ptr_ref().value());
  swap(a.list_i32_template_ref().value(), b.list_i32_template_ref().value());
  swap(a.list_string_template_ref().value(), b.list_string_template_ref().value());
  swap(a.set_template_ref().value(), b.set_template_ref().value());
  swap(a.map_template_ref().value(), b.map_template_ref().value());
  swap(a.typedef_list_template_ref().value(), b.typedef_list_template_ref().value());
  swap(a.typedef_deque_template_ref().value(), b.typedef_deque_template_ref().value());
  swap(a.typedef_set_template_ref().value(), b.typedef_set_template_ref().value());
  swap(a.typedef_map_template_ref().value(), b.typedef_map_template_ref().value());
  swap(a.indirection_a_ref().value(), b.indirection_a_ref().value());
  swap(a.indirection_b_ref().value(), b.indirection_b_ref().value());
  swap(a.indirection_c_ref().value(), b.indirection_c_ref().value());
  swap(a.iobuf_type_val_ref().value(), b.iobuf_type_val_ref().value());
  swap(a.iobuf_ptr_val_ref().value(), b.iobuf_ptr_val_ref().value());
  swap(a.struct_struct_ref().value(), b.struct_struct_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void AnnotatedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AnnotatedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void AnnotatedStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AnnotatedStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AnnotatedStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AnnotatedStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::some::valid::ns::UnorderedMapStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of json option");

static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>,
        ::some::valid::ns::UnorderedMapStruct>,
    "inconsistent use of nimble option");
static_assert(
    ::apache::thrift::detail::st::gen_check_nimble<
        AnnotatedStruct,
        ::apache::thrift::type_class::structure,
        ::some::valid::ns::containerStruct>,
    "inconsistent use of nimble option");

}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::ComplexContainerStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::ComplexContainerStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {

ComplexContainerStruct::ComplexContainerStruct(const ComplexContainerStruct& srcObj) {
  map_of_iobufs = srcObj.map_of_iobufs;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.map_of_iobufs = srcObj.__isset.map_of_iobufs;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  map_of_iobuf_ptrs = ::apache::thrift::detail::st::copy_field<
        ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>>(srcObj.map_of_iobuf_ptrs);
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.map_of_iobuf_ptrs = srcObj.__isset.map_of_iobuf_ptrs;
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

ComplexContainerStruct& ComplexContainerStruct::operator=(const ComplexContainerStruct& src) {
  ComplexContainerStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ComplexContainerStruct::ComplexContainerStruct(ComplexContainerStruct&& other) noexcept  :
    map_of_iobufs(std::move(other.map_of_iobufs)),
    map_of_iobuf_ptrs(std::move(other.map_of_iobuf_ptrs)),
    __isset(other.__isset) {}
ComplexContainerStruct& ComplexContainerStruct::operator=(FOLLY_MAYBE_UNUSED ComplexContainerStruct&& other) noexcept {
    this->map_of_iobufs = std::move(other.map_of_iobufs);
    this->map_of_iobuf_ptrs = std::move(other.map_of_iobuf_ptrs);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
ComplexContainerStruct::ComplexContainerStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::some::valid::ns::IOBuf> map_of_iobufs__arg, ::std::map<::std::string, ::some::valid::ns::IOBufPtr> map_of_iobuf_ptrs__arg) :
    map_of_iobufs(std::move(map_of_iobufs__arg)),
    map_of_iobuf_ptrs(std::move(map_of_iobuf_ptrs__arg)) {
  __isset.map_of_iobufs = true;
  __isset.map_of_iobuf_ptrs = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void ComplexContainerStruct::__clear() {
  // clear all fields
  this->map_of_iobufs.clear();
  this->map_of_iobuf_ptrs.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool ComplexContainerStruct::operator==(const ComplexContainerStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.map_of_iobufs_ref() == rhs.map_of_iobufs_ref())) {
    return false;
  }
  if (!(lhs.map_of_iobuf_ptrs_ref() == rhs.map_of_iobuf_ptrs_ref())) {
    return false;
  }
  return true;
}

bool ComplexContainerStruct::operator<(const ComplexContainerStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.map_of_iobufs_ref() == rhs.map_of_iobufs_ref())) {
    return lhs.map_of_iobufs_ref() < rhs.map_of_iobufs_ref();
  }
  if (!(lhs.map_of_iobuf_ptrs_ref() == rhs.map_of_iobuf_ptrs_ref())) {
    return lhs.map_of_iobuf_ptrs_ref() < rhs.map_of_iobuf_ptrs_ref();
  }
  return false;
}

const ::std::map<::std::string, ::some::valid::ns::IOBuf>& ComplexContainerStruct::get_map_of_iobufs() const& {
  return map_of_iobufs;
}

::std::map<::std::string, ::some::valid::ns::IOBuf> ComplexContainerStruct::get_map_of_iobufs() && {
  return std::move(map_of_iobufs);
}

const ::std::map<::std::string, ::some::valid::ns::IOBufPtr>& ComplexContainerStruct::get_map_of_iobuf_ptrs() const& {
  return map_of_iobuf_ptrs;
}

::std::map<::std::string, ::some::valid::ns::IOBufPtr> ComplexContainerStruct::get_map_of_iobuf_ptrs() && {
  return std::move(map_of_iobuf_ptrs);
}


void swap(ComplexContainerStruct& a, ComplexContainerStruct& b) {
  using ::std::swap;
  swap(a.map_of_iobufs_ref().value(), b.map_of_iobufs_ref().value());
  swap(a.map_of_iobuf_ptrs_ref().value(), b.map_of_iobuf_ptrs_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void ComplexContainerStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ComplexContainerStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ComplexContainerStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ComplexContainerStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ComplexContainerStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ComplexContainerStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ComplexContainerStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ComplexContainerStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void ComplexContainerStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t ComplexContainerStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t ComplexContainerStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t ComplexContainerStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::FloatStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::FloatStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
FloatStruct::FloatStruct(apache::thrift::FragileConstructor, float floatField__arg, double doubleField__arg) :
    floatField(std::move(floatField__arg)),
    doubleField(std::move(doubleField__arg)) {
  __isset.floatField = true;
  __isset.doubleField = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void FloatStruct::__clear() {
  // clear all fields
  this->floatField = 0;
  this->doubleField = 0;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool FloatStruct::operator==(const FloatStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.floatField_ref() == rhs.floatField_ref())) {
    return false;
  }
  if (!(lhs.doubleField_ref() == rhs.doubleField_ref())) {
    return false;
  }
  return true;
}

bool FloatStruct::operator<(const FloatStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.floatField_ref() == rhs.floatField_ref())) {
    return lhs.floatField_ref() < rhs.floatField_ref();
  }
  if (!(lhs.doubleField_ref() == rhs.doubleField_ref())) {
    return lhs.doubleField_ref() < rhs.doubleField_ref();
  }
  return false;
}


void swap(FloatStruct& a, FloatStruct& b) {
  using ::std::swap;
  swap(a.floatField_ref().value(), b.floatField_ref().value());
  swap(a.doubleField_ref().value(), b.doubleField_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void FloatStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t FloatStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t FloatStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t FloatStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void FloatStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t FloatStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FloatStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FloatStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void FloatStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t FloatStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t FloatStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t FloatStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::FloatUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::FloatUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::some::valid::ns::FloatUnion::Type>::size;
folly::Range<::some::valid::ns::FloatUnion::Type const*> const TEnumTraits<::some::valid::ns::FloatUnion::Type>::values = folly::range(TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::some::valid::ns::FloatUnion::Type>::names = folly::range(TEnumDataStorage<::some::valid::ns::FloatUnion::Type>::names);

char const* TEnumTraits<::some::valid::ns::FloatUnion::Type>::findName(type value) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::FloatUnion::Type>;
  static folly::Indestructible<factory::ValuesToNamesMapType> const map{
      factory::makeValuesToNamesMap()};
  auto found = map->find(value);
  return found == map->end() ? nullptr : found->second;
}

bool TEnumTraits<::some::valid::ns::FloatUnion::Type>::findValue(char const* name, type* out) {
  using factory = detail::TEnumMapFactory<::some::valid::ns::FloatUnion::Type>;
  static folly::Indestructible<factory::NamesToValuesMapType> const map{
      factory::makeNamesToValuesMap()};
  auto found = map->find(name);
  return found == map->end() ? false : (*out = found->second, true);
}
}} // apache::thrift
namespace some { namespace valid { namespace ns {

void FloatUnion::__clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::floatSide:
      destruct(value_.floatSide);
      break;
    case Type::doubleSide:
      destruct(value_.doubleSide);
      break;
    default:
      assert(false);
      break;
  }
  type_ = Type::__EMPTY__;
}

bool FloatUnion::operator==(const FloatUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::floatSide:
      return value_.floatSide == rhs.value_.floatSide;
    case Type::doubleSide:
      return value_.doubleSide == rhs.value_.doubleSide;
    default:
      return true;
  }
}

bool FloatUnion::operator<(const FloatUnion& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::floatSide:
      return lhs.value_.floatSide < rhs.value_.floatSide;
    case Type::doubleSide:
      return lhs.value_.doubleSide < rhs.value_.doubleSide;
    default:
      return false;
  }
}

void swap(FloatUnion& a, FloatUnion& b) {
  FloatUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void FloatUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t FloatUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t FloatUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t FloatUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void FloatUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t FloatUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t FloatUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t FloatUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void FloatUnion::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t FloatUnion::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t FloatUnion::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t FloatUnion::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::some::valid::ns::AllRequiredNoExceptMoveCtrStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace some { namespace valid { namespace ns {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
AllRequiredNoExceptMoveCtrStruct::AllRequiredNoExceptMoveCtrStruct(apache::thrift::FragileConstructor, ::std::int64_t intField__arg) :
    intField(std::move(intField__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void AllRequiredNoExceptMoveCtrStruct::__clear() {
  // clear all fields
  this->intField = 0;
}

bool AllRequiredNoExceptMoveCtrStruct::operator==(const AllRequiredNoExceptMoveCtrStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.intField_ref() == rhs.intField_ref())) {
    return false;
  }
  return true;
}

bool AllRequiredNoExceptMoveCtrStruct::operator<(const AllRequiredNoExceptMoveCtrStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.intField_ref() == rhs.intField_ref())) {
    return lhs.intField_ref() < rhs.intField_ref();
  }
  return false;
}


void swap(AllRequiredNoExceptMoveCtrStruct& a, AllRequiredNoExceptMoveCtrStruct& b) {
  using ::std::swap;
  swap(a.intField_ref().value(), b.intField_ref().value());
}

template void AllRequiredNoExceptMoveCtrStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t AllRequiredNoExceptMoveCtrStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void AllRequiredNoExceptMoveCtrStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t AllRequiredNoExceptMoveCtrStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;
template void AllRequiredNoExceptMoveCtrStruct::readNoXfer<>(apache::thrift::SimpleJSONProtocolReader*);
template uint32_t AllRequiredNoExceptMoveCtrStruct::write<>(apache::thrift::SimpleJSONProtocolWriter*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSize<>(apache::thrift::SimpleJSONProtocolWriter const*) const;
template uint32_t AllRequiredNoExceptMoveCtrStruct::serializedSizeZC<>(apache::thrift::SimpleJSONProtocolWriter const*) const;



}}} // some::valid::ns
