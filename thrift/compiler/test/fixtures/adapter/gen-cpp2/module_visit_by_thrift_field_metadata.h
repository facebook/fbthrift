/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByThriftId<::cpp2::Foo> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).intField_ref());
    case 2:
      return f(1, static_cast<T&&>(t).optionalIntField_ref());
    case 3:
      return f(2, static_cast<T&&>(t).intFieldWithDefault_ref());
    case 4:
      return f(3, static_cast<T&&>(t).setField_ref());
    case 5:
      return f(4, static_cast<T&&>(t).optionalSetField_ref());
    case 6:
      return f(5, static_cast<T&&>(t).mapField_ref());
    case 7:
      return f(6, static_cast<T&&>(t).optionalMapField_ref());
    case 8:
      return f(7, static_cast<T&&>(t).binaryField_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::Foo");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::Baz> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).intField_ref());
    case 4:
      return f(1, static_cast<T&&>(t).setField_ref());
    case 6:
      return f(2, static_cast<T&&>(t).mapField_ref());
    case 8:
      return f(3, static_cast<T&&>(t).binaryField_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::Baz");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::Bar> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).structField_ref());
    case 2:
      return f(1, static_cast<T&&>(t).optionalStructField_ref());
    case 3:
      return f(2, static_cast<T&&>(t).structListField_ref());
    case 4:
      return f(3, static_cast<T&&>(t).optionalStructListField_ref());
    case 5:
      return f(4, static_cast<T&&>(t).unionField_ref());
    case 6:
      return f(5, static_cast<T&&>(t).optionalUnionField_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::Bar");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
