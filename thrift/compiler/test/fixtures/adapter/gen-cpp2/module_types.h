/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>


#include "thrift/annotation/gen-cpp2/cpp_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct intField;
struct optionalIntField;
struct intFieldWithDefault;
struct setField;
struct optionalSetField;
struct mapField;
struct optionalMapField;
struct binaryField;
struct intField;
struct setField;
struct mapField;
struct binaryField;
struct structField;
struct optionalStructField;
struct structListField;
struct optionalStructListField;
struct unionField;
struct optionalUnionField;
struct field;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalIntField
#define APACHE_THRIFT_ACCESSOR_optionalIntField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intFieldWithDefault
#define APACHE_THRIFT_ACCESSOR_intFieldWithDefault
APACHE_THRIFT_DEFINE_ACCESSOR(intFieldWithDefault);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalSetField
#define APACHE_THRIFT_ACCESSOR_optionalSetField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalSetField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalMapField
#define APACHE_THRIFT_ACCESSOR_optionalMapField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalMapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intField
#define APACHE_THRIFT_ACCESSOR_intField
APACHE_THRIFT_DEFINE_ACCESSOR(intField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setField
#define APACHE_THRIFT_ACCESSOR_setField
APACHE_THRIFT_DEFINE_ACCESSOR(setField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapField
#define APACHE_THRIFT_ACCESSOR_mapField
APACHE_THRIFT_DEFINE_ACCESSOR(mapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryField
#define APACHE_THRIFT_ACCESSOR_binaryField
APACHE_THRIFT_DEFINE_ACCESSOR(binaryField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structField
#define APACHE_THRIFT_ACCESSOR_structField
APACHE_THRIFT_DEFINE_ACCESSOR(structField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructField
#define APACHE_THRIFT_ACCESSOR_optionalStructField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structListField
#define APACHE_THRIFT_ACCESSOR_structListField
APACHE_THRIFT_DEFINE_ACCESSOR(structListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalStructListField
#define APACHE_THRIFT_ACCESSOR_optionalStructListField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalStructListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionField
#define APACHE_THRIFT_ACCESSOR_unionField
APACHE_THRIFT_DEFINE_ACCESSOR(unionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optionalUnionField
#define APACHE_THRIFT_ACCESSOR_optionalUnionField
APACHE_THRIFT_DEFINE_ACCESSOR(optionalUnionField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field
#define APACHE_THRIFT_ACCESSOR_field
APACHE_THRIFT_DEFINE_ACCESSOR(field);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class Foo;
class Baz;
class Bar;
class StructWithFieldAdapter;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::std::set<::std::string>> SetWithAdapter;
typedef ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>> ListWithElemAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::Bar> StructWithAdapter;
typedef ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::Baz> UnionWithAdapter;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
} // cpp2
namespace cpp2 {
class Foo final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Foo;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Foo();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Foo(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> intField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> optionalIntField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> intFieldWithDefault__arg, ::cpp2::SetWithAdapter setField__arg, ::cpp2::SetWithAdapter optionalSetField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> mapField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> optionalMapField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> binaryField__arg);

  Foo(Foo&&) noexcept;
  Foo(const Foo& src);


  Foo& operator=(Foo&&) noexcept;
  Foo& operator=(const Foo& src);
  void __clear();

  ~Foo();

 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> __fbthrift_field_intField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> __fbthrift_field_optionalIntField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> __fbthrift_field_intFieldWithDefault;
 private:
  ::cpp2::SetWithAdapter __fbthrift_field_setField;
 private:
  ::cpp2::SetWithAdapter __fbthrift_field_optionalSetField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> __fbthrift_field_mapField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> __fbthrift_field_optionalMapField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> __fbthrift_field_binaryField;
 private:
  apache::thrift::detail::isset_bitset<8, false> __isset;

 public:

  bool operator==(const Foo&) const;
  bool operator<(const Foo&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intField_ref() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intField_ref() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intField() const& {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intField() & {
    return {this->__fbthrift_field_intField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intField() && {
    return {static_cast<T&&>(this->__fbthrift_field_intField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalIntField_ref() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalIntField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalIntField_ref() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalIntField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalIntField() const& {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalIntField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalIntField() & {
    return {this->__fbthrift_field_optionalIntField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalIntField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalIntField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intFieldWithDefault_ref() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intFieldWithDefault_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intFieldWithDefault_ref() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intFieldWithDefault_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intFieldWithDefault() const& {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intFieldWithDefault() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intFieldWithDefault() & {
    return {this->__fbthrift_field_intFieldWithDefault, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intFieldWithDefault() && {
    return {static_cast<T&&>(this->__fbthrift_field_intFieldWithDefault), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setField_ref() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setField_ref() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setField() const& {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setField() & {
    return {this->__fbthrift_field_setField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setField() && {
    return {static_cast<T&&>(this->__fbthrift_field_setField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalSetField_ref() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalSetField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalSetField_ref() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalSetField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalSetField() const& {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalSetField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalSetField() & {
    return {this->__fbthrift_field_optionalSetField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalSetField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalSetField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapField_ref() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapField_ref() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapField() const& {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapField() & {
    return {this->__fbthrift_field_mapField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapField() && {
    return {static_cast<T&&>(this->__fbthrift_field_mapField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalMapField_ref() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalMapField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalMapField_ref() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalMapField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalMapField() const& {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalMapField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalMapField() & {
    return {this->__fbthrift_field_optionalMapField, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalMapField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalMapField), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryField_ref() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryField_ref() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryField() const& {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryField() & {
    return {this->__fbthrift_field_binaryField, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryField() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryField), __isset.at(7), __isset.bit(7)};
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Foo>;
  friend void swap(Foo& a, Foo& b);
};

template <class Protocol_>
uint32_t Foo::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class Baz final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Baz;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    intField = 1,
    setField = 4,
    mapField = 6,
    binaryField = 8,
  } ;

  Baz()
      : type_(Type::__EMPTY__) {}

  Baz(Baz&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  Baz(const Baz& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intField:
      {
        set_intField(rhs.value_.intField);
        break;
      }
      case Type::setField:
      {
        set_setField(rhs.value_.setField);
        break;
      }
      case Type::mapField:
      {
        set_mapField(rhs.value_.mapField);
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(rhs.value_.binaryField);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  Baz& operator=(Baz&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intField:
      {
        set_intField(std::move(rhs.value_.intField));
        break;
      }
      case Type::setField:
      {
        set_setField(std::move(rhs.value_.setField));
        break;
      }
      case Type::mapField:
      {
        set_mapField(std::move(rhs.value_.mapField));
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(std::move(rhs.value_.binaryField));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  Baz& operator=(const Baz& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intField:
      {
        set_intField(rhs.value_.intField);
        break;
      }
      case Type::setField:
      {
        set_setField(rhs.value_.setField);
        break;
      }
      case Type::mapField:
      {
        set_mapField(rhs.value_.mapField);
        break;
      }
      case Type::binaryField:
      {
        set_binaryField(rhs.value_.binaryField);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~Baz() {
    __clear();
  }
  union storage_type {
    ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> intField;
    ::cpp2::SetWithAdapter setField;
    ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> mapField;
    ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> binaryField;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const Baz&) const;
  bool operator<(const Baz&) const;

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>& set_intField(::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> t = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>()) {
    __clear();
    type_ = Type::intField;
    ::new (std::addressof(value_.intField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>(t);
    return value_.intField;
  }

  ::cpp2::SetWithAdapter& set_setField(::cpp2::SetWithAdapter const &t) {
    __clear();
    type_ = Type::setField;
    ::new (std::addressof(value_.setField)) ::cpp2::SetWithAdapter(t);
    return value_.setField;
  }

  ::cpp2::SetWithAdapter& set_setField(::cpp2::SetWithAdapter&& t) {
    __clear();
    type_ = Type::setField;
    ::new (std::addressof(value_.setField)) ::cpp2::SetWithAdapter(std::move(t));
    return value_.setField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::SetWithAdapter, T...>> ::cpp2::SetWithAdapter& set_setField(T&&... t) {
    __clear();
    type_ = Type::setField;
    ::new (std::addressof(value_.setField)) ::cpp2::SetWithAdapter(std::forward<T>(t)...);
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>& set_mapField(::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> const &t) {
    __clear();
    type_ = Type::mapField;
    ::new (std::addressof(value_.mapField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>(t);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>& set_mapField(::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>&& t) {
    __clear();
    type_ = Type::mapField;
    ::new (std::addressof(value_.mapField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>(std::move(t));
    return value_.mapField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>, T...>> ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>& set_mapField(T&&... t) {
    __clear();
    type_ = Type::mapField;
    ::new (std::addressof(value_.mapField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>(std::forward<T>(t)...);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>& set_binaryField(::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> const &t) {
    __clear();
    type_ = Type::binaryField;
    ::new (std::addressof(value_.binaryField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>(t);
    return value_.binaryField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>& set_binaryField(::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>&& t) {
    __clear();
    type_ = Type::binaryField;
    ::new (std::addressof(value_.binaryField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>(std::move(t));
    return value_.binaryField;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>, T...>> ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>& set_binaryField(T&&... t) {
    __clear();
    type_ = Type::binaryField;
    ::new (std::addressof(value_.binaryField)) ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>(std::forward<T>(t)...);
    return value_.binaryField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> const& get_intField() const {
    if (type_ != Type::intField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intField;
  }

  ::cpp2::SetWithAdapter const& get_setField() const {
    if (type_ != Type::setField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> const& get_mapField() const {
    if (type_ != Type::mapField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> const& get_binaryField() const {
    if (type_ != Type::binaryField) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.binaryField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>& mutable_intField() {
    assert(type_ == Type::intField);
    return value_.intField;
  }

  ::cpp2::SetWithAdapter& mutable_setField() {
    assert(type_ == Type::setField);
    return value_.setField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>& mutable_mapField() {
    assert(type_ == Type::mapField);
    return value_.mapField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>& mutable_binaryField() {
    assert(type_ == Type::binaryField);
    return value_.binaryField;
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t> move_intField() {
    assert(type_ == Type::intField);
    return std::move(value_.intField);
  }

  ::cpp2::SetWithAdapter move_setField() {
    assert(type_ == Type::setField);
    return std::move(value_.setField);
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>> move_mapField() {
    assert(type_ == Type::mapField);
    return std::move(value_.mapField);
  }

  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string> move_binaryField() {
    assert(type_ == Type::binaryField);
    return std::move(value_.binaryField);
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intField_ref() const& {
    return {value_.intField, type_, intField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intField_ref() const&& {
    return {std::move(value_.intField), type_, intField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intField_ref() & {
    return {value_.intField, type_, intField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intField_ref() && {
    return {std::move(value_.intField), type_, intField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> setField_ref() const& {
    return {value_.setField, type_, setField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> setField_ref() const&& {
    return {std::move(value_.setField), type_, setField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> setField_ref() & {
    return {value_.setField, type_, setField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::SetWithAdapter>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> setField_ref() && {
    return {std::move(value_.setField), type_, setField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> mapField_ref() const& {
    return {value_.mapField, type_, mapField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> mapField_ref() const&& {
    return {std::move(value_.mapField), type_, mapField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> mapField_ref() & {
    return {value_.mapField, type_, mapField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter3, ::std::map<::std::string, ::apache::thrift::adapt_detail::adapted_t<my::Adapter2, ::cpp2::ListWithElemAdapter>>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> mapField_ref() && {
    return {std::move(value_.mapField), type_, mapField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> binaryField_ref() const& {
    return {value_.binaryField, type_, binaryField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> binaryField_ref() const&& {
    return {std::move(value_.binaryField), type_, binaryField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> binaryField_ref() & {
    return {value_.binaryField, type_, binaryField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> binaryField_ref() && {
    return {std::move(value_.binaryField), type_, binaryField, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Baz>;
  friend void swap(Baz& a, Baz& b);
};

template <class Protocol_>
uint32_t Baz::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class Bar final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Bar;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Bar();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Bar(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo> structField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo> optionalStructField__arg, ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>> structListField__arg, ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>> optionalStructListField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz> unionField__arg, ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz> optionalUnionField__arg);

  Bar(Bar&&) noexcept;
  Bar(const Bar& src);


  Bar& operator=(Bar&&) noexcept;
  Bar& operator=(const Bar& src);
  void __clear();

  ~Bar();

 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo> __fbthrift_field_structField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo> __fbthrift_field_optionalStructField;
 private:
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>> __fbthrift_field_structListField;
 private:
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>> __fbthrift_field_optionalStructListField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz> __fbthrift_field_unionField;
 private:
  ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz> __fbthrift_field_optionalUnionField;
 private:
  apache::thrift::detail::isset_bitset<6, false> __isset;

 public:

  bool operator==(const Bar&) const;
  bool operator<(const Bar&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structField_ref() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structField_ref() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structField() const& {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structField() & {
    return {this->__fbthrift_field_structField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structField() && {
    return {static_cast<T&&>(this->__fbthrift_field_structField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructField_ref() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructField_ref() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructField() const& {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructField() & {
    return {this->__fbthrift_field_optionalStructField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structListField_ref() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structListField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structListField_ref() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structListField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structListField() const& {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structListField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structListField() & {
    return {this->__fbthrift_field_structListField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structListField() && {
    return {static_cast<T&&>(this->__fbthrift_field_structListField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructListField_ref() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructListField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructListField_ref() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructListField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalStructListField() const& {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalStructListField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalStructListField() & {
    return {this->__fbthrift_field_optionalStructListField, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalStructListField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalStructListField), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionField_ref() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionField_ref() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> unionField() const& {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> unionField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> unionField() & {
    return {this->__fbthrift_field_unionField, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> unionField() && {
    return {static_cast<T&&>(this->__fbthrift_field_unionField), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalUnionField_ref() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalUnionField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalUnionField_ref() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalUnionField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optionalUnionField() const& {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optionalUnionField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optionalUnionField() & {
    return {this->__fbthrift_field_optionalUnionField, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Baz>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optionalUnionField() && {
    return {static_cast<T&&>(this->__fbthrift_field_optionalUnionField), __isset.at(5), __isset.bit(5)};
  }
  const ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>& get_structListField() const&;
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>> get_structListField() &&;

  template <typename T_Bar_structListField_struct_setter = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  [[deprecated("Use `FOO.structListField_ref() = BAR;` instead of `FOO.set_structListField(BAR);`")]]
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>& set_structListField(T_Bar_structListField_struct_setter&& structListField_) {
    structListField_ref() = std::forward<T_Bar_structListField_struct_setter>(structListField_);
    return __fbthrift_field_structListField;
  }
  const ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>* get_optionalStructListField() const&;
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>* get_optionalStructListField() &;
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>* get_optionalStructListField() && = delete;

  template <typename T_Bar_optionalStructListField_struct_setter = ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>>
  [[deprecated("Use `FOO.optionalStructListField_ref() = BAR;` instead of `FOO.set_optionalStructListField(BAR);`")]]
  ::std::vector<::apache::thrift::adapt_detail::adapted_t<my::Adapter1, ::cpp2::Foo>>& set_optionalStructListField(T_Bar_optionalStructListField_struct_setter&& optionalStructListField_) {
    optionalStructListField_ref() = std::forward<T_Bar_optionalStructListField_struct_setter>(optionalStructListField_);
    return __fbthrift_field_optionalStructListField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Bar>;
  friend void swap(Bar& a, Bar& b);
};

template <class Protocol_>
uint32_t Bar::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class StructWithFieldAdapter final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = StructWithFieldAdapter;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StructWithFieldAdapter() :
      __fbthrift_field_field() {
    ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_field, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StructWithFieldAdapter(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type> field__arg);

  StructWithFieldAdapter(StructWithFieldAdapter&&) = default;
  StructWithFieldAdapter(const StructWithFieldAdapter& src);


  StructWithFieldAdapter& operator=(StructWithFieldAdapter&&) = default;
  StructWithFieldAdapter& operator=(const StructWithFieldAdapter& src);
  void __clear();
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type> __fbthrift_field_field;
 private:
  apache::thrift::detail::isset_bitset<1, false> __isset;

 public:

  bool operator==(const StructWithFieldAdapter&) const;
  bool operator<(const StructWithFieldAdapter&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field_ref() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field_ref() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field() const& {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field() & {
    return {this->__fbthrift_field_field, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, __fbthrift_cpp2_type>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field() && {
    return {static_cast<T&&>(this->__fbthrift_field_field), __isset.at(0), __isset.bit(0)};
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StructWithFieldAdapter>;
  friend void swap(StructWithFieldAdapter& a, StructWithFieldAdapter& b);
};

template <class Protocol_>
uint32_t StructWithFieldAdapter::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::Baz::Type>;

template <> struct TEnumTraits<::cpp2::Baz::Type> {
  using type = ::cpp2::Baz::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};
}} // apache::thrift
