<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * Foo
 */
class Foo implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'intField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'optionalIntField',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    3 => shape(
      'var' => 'intFieldWithDefault',
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'setField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'optionalSetField',
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    6 => shape(
      'var' => 'mapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    7 => shape(
      'var' => 'optionalMapField',
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    8 => shape(
      'var' => 'binaryField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'intField' => 1,
    'optionalIntField' => 2,
    'intFieldWithDefault' => 3,
    'setField' => 4,
    'optionalSetField' => 5,
    'mapField' => 6,
    'optionalMapField' => 7,
    'binaryField' => 8,
  ];

  const type TConstructorShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'optionalIntField' => ?\Adapter1::THackType,
    ?'intFieldWithDefault' => ?\Adapter1::THackType,
    ?'setField' => ?\Adapter2::THackType,
    ?'optionalSetField' => ?\Adapter2::THackType,
    ?'mapField' => ?\Adapter3::THackType,
    ?'optionalMapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
  );

  const type TShape = shape(
    'intField' => \Adapter1::THackType,
    ?'optionalIntField' => ?\Adapter1::THackType,
    'intFieldWithDefault' => \Adapter1::THackType,
    'setField' => \Adapter2::THackType,
    ?'optionalSetField' => ?\Adapter2::THackType,
    'mapField' => \Adapter3::THackType,
    ?'optionalMapField' => ?\Adapter3::THackType,
    'binaryField' => \Adapter1::THackType,
  );
  const int STRUCTURAL_ID = 3693521661416523209;
  /**
   * Original thrift field:-
   * 1: i32 intField
   */
  public \Adapter1::THackType $intField;
  /**
   * Original thrift field:-
   * 2: i32 optionalIntField
   */
  public ?\Adapter1::THackType $optionalIntField;
  /**
   * Original thrift field:-
   * 3: i32 intFieldWithDefault
   */
  public \Adapter1::THackType $intFieldWithDefault;
  /**
   * Original thrift field:-
   * 4: set<string> setField
   */
  public \Adapter2::THackType $setField;
  /**
   * Original thrift field:-
   * 5: set<string> optionalSetField
   */
  public ?\Adapter2::THackType $optionalSetField;
  /**
   * Original thrift field:-
   * 6: map<string, list<string>> mapField
   */
  public \Adapter3::THackType $mapField;
  /**
   * Original thrift field:-
   * 7: map<string, list<string>> optionalMapField
   */
  public ?\Adapter3::THackType $optionalMapField;
  /**
   * Original thrift field:-
   * 8: binary binaryField
   */
  public \Adapter1::THackType $binaryField;

  public function __construct(?\Adapter1::THackType $intField = null, ?\Adapter1::THackType $optionalIntField = null, ?\Adapter1::THackType $intFieldWithDefault = null, ?\Adapter2::THackType $setField = null, ?\Adapter2::THackType $optionalSetField = null, ?\Adapter3::THackType $mapField = null, ?\Adapter3::THackType $optionalMapField = null, ?\Adapter1::THackType $binaryField = null  )[] {
    $this->intField = $intField ?? \Adapter1::fromThrift(0);
    $this->optionalIntField = $optionalIntField;
    $this->intFieldWithDefault = $intFieldWithDefault ?? \Adapter1::fromThrift(13);
    $this->setField = $setField ?? \Adapter2::fromThrift(Set {});
    $this->optionalSetField = $optionalSetField;
    $this->mapField = $mapField ?? \Adapter3::fromThrift(Map {});
    $this->optionalMapField = $optionalMapField;
    $this->binaryField = $binaryField ?? \Adapter1::fromThrift('');
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'optionalIntField'),
      Shapes::idx($shape, 'intFieldWithDefault'),
      Shapes::idx($shape, 'setField'),
      Shapes::idx($shape, 'optionalSetField'),
      Shapes::idx($shape, 'mapField'),
      Shapes::idx($shape, 'optionalMapField'),
      Shapes::idx($shape, 'binaryField'),
    );
  }

  public function getName()[]: string {
    return 'Foo';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Foo",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optionalIntField",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intFieldWithDefault",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "setField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalSetField",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter",
                                      "underlyingType" => tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_list" => tmeta_ThriftListType::fromShape(
                                            shape(
                                              "valueType" => tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "mapField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter",
                                      "underlyingType" => tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_list" => tmeta_ThriftListType::fromShape(
                                            shape(
                                              "valueType" => tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalMapField",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryField",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['intField'],
      Shapes::idx($shape, 'optionalIntField'),
      $shape['intFieldWithDefault'],
      new Set(Keyset\keys($shape['setField'])),
      Shapes::idx($shape, 'optionalSetField') === null ? null : (new Set(Keyset\keys($shape['optionalSetField']))),
      (new Map($shape['mapField']))->map(
        $val0 ==> (new Vector($val0)),
      ),
      Shapes::idx($shape, 'optionalMapField') === null ? null : ((new Map($shape['optionalMapField']))->map(
        $val1 ==> (new Vector($val1)),
      )),
      $shape['binaryField'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'intField' => $this->intField,
      'optionalIntField' => $this->optionalIntField,
      'intFieldWithDefault' => $this->intFieldWithDefault,
      'setField' => ThriftUtil::toDArray(Dict\fill_keys($this->setField->toValuesArray(), true), static::class),
      'optionalSetField' => $this->optionalSetField
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'mapField' => $this->mapField->map(
        ($_val0) ==> vec($_val0),
      )
        |> dict($$),
      'optionalMapField' => $this->optionalMapField?->map(
        ($_val0) ==> vec($_val0),
      )
        |> $$ === null ? null : dict($$),
      'binaryField' => $this->binaryField,
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'intField') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['intField'];
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intField = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'optionalIntField') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['optionalIntField'];
      if ($_tmp1 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optionalIntField = (int)$_tmp1;
      }
    }    
    if (idx($parsed, 'intFieldWithDefault') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['intFieldWithDefault'];
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intFieldWithDefault = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'setField') !== null) {
      $_json6 = /* HH_FIXME[4110] */ $parsed['setField'];
      $_container7 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json6 as $_key4 => $_value5) {
        $_elem8 = '';
        $_elem8 = $_value5;
        $_container7->add($_elem8);
      }
      $this->setField = $_container7;
    }    
    if (idx($parsed, 'optionalSetField') !== null) {
      $_json12 = /* HH_FIXME[4110] */ $parsed['optionalSetField'];
      $_container13 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json12 as $_key10 => $_value11) {
        $_elem14 = '';
        $_elem14 = $_value11;
        $_container13->add($_elem14);
      }
      $this->optionalSetField = $_container13;
    }    
    if (idx($parsed, 'mapField') !== null) {
      $_json18 = /* HH_FIXME[4110] */ $parsed['mapField'];
      $_container19 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json18 as $_key16 => $_value17) {
        $_value20 = Vector {};
        $_json24 = $_value17;
        $_container25 = Vector {};
        foreach(/* HH_FIXME[4110] */ $_json24 as $_key22 => $_value23) {
          $_elem26 = '';
          $_elem26 = $_value23;
          $_container25 []= $_elem26;
        }
        $_value20 = $_container25;
        $_container19[$_key16] = $_value20;
      }
      $this->mapField = $_container19;
    }    
    if (idx($parsed, 'optionalMapField') !== null) {
      $_json30 = /* HH_FIXME[4110] */ $parsed['optionalMapField'];
      $_container31 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json30 as $_key28 => $_value29) {
        $_value32 = Vector {};
        $_json36 = $_value29;
        $_container37 = Vector {};
        foreach(/* HH_FIXME[4110] */ $_json36 as $_key34 => $_value35) {
          $_elem38 = '';
          $_elem38 = $_value35;
          $_container37 []= $_elem38;
        }
        $_value32 = $_container37;
        $_container31[$_key28] = $_value32;
      }
      $this->optionalMapField = $_container31;
    }    
    if (idx($parsed, 'binaryField') !== null) {
      $this->binaryField = /* HH_FIXME[4110] */ $parsed['binaryField'];
    }    
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, int>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, string>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Set<string>>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Vector<\Adapter1::THackType>>();
    \ThriftUtil::requireSameType<\Adapter3::TThriftType, Map<string, \Adapter2::THackType>>();
  }

}

enum BazEnum: int {
  _EMPTY_ = 0;
  intField = 1;
  setField = 4;
  mapField = 6;
  binaryField = 8;
}

/**
 * Original thrift struct:-
 * Baz
 */
class Baz implements \IThriftStruct, \IThriftUnion<BazEnum>, \IThriftShapishStruct {
  use \ThriftUnionSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'intField',
      'union' => true,
      'adapter' => \Adapter1::class,
      'type' => \TType::I32,
    ),
    4 => shape(
      'var' => 'setField',
      'union' => true,
      'adapter' => \Adapter2::class,
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    6 => shape(
      'var' => 'mapField',
      'union' => true,
      'adapter' => \Adapter3::class,
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::LST,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'adapter' => \Adapter2::class,
        'type' => \TType::LST,
        'etype' => \TType::STRING,
        'elem' => shape(
          'adapter' => \Adapter1::class,
          'type' => \TType::STRING,
        ),
        'format' => 'collection',
      ),
      'format' => 'collection',
    ),
    8 => shape(
      'var' => 'binaryField',
      'union' => true,
      'adapter' => \Adapter1::class,
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'intField' => 1,
    'setField' => 4,
    'mapField' => 6,
    'binaryField' => 8,
  ];

  const type TConstructorShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'setField' => ?\Adapter2::THackType,
    ?'mapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
  );

  const type TShape = shape(
    ?'intField' => ?\Adapter1::THackType,
    ?'setField' => ?\Adapter2::THackType,
    ?'mapField' => ?\Adapter3::THackType,
    ?'binaryField' => ?\Adapter1::THackType,
  );
  const int STRUCTURAL_ID = 2036191889248458060;
  /**
   * Original thrift field:-
   * 1: i32 intField
   */
  public ?\Adapter1::THackType $intField;
  /**
   * Original thrift field:-
   * 4: set<string> setField
   */
  public ?\Adapter2::THackType $setField;
  /**
   * Original thrift field:-
   * 6: map<string, list<string>> mapField
   */
  public ?\Adapter3::THackType $mapField;
  /**
   * Original thrift field:-
   * 8: binary binaryField
   */
  public ?\Adapter1::THackType $binaryField;
  protected BazEnum $_type = BazEnum::_EMPTY_;

  public function __construct(?\Adapter1::THackType $intField = null, ?\Adapter2::THackType $setField = null, ?\Adapter3::THackType $mapField = null, ?\Adapter1::THackType $binaryField = null  )[] {
    $this->_type = BazEnum::_EMPTY_;
    if ($intField !== null) {
      $this->intField = $intField;
      $this->_type = BazEnum::intField;
    }
    if ($setField !== null) {
      $this->setField = $setField;
      $this->_type = BazEnum::setField;
    }
    if ($mapField !== null) {
      $this->mapField = $mapField;
      $this->_type = BazEnum::mapField;
    }
    if ($binaryField !== null) {
      $this->binaryField = $binaryField;
      $this->_type = BazEnum::binaryField;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'setField'),
      Shapes::idx($shape, 'mapField'),
      Shapes::idx($shape, 'binaryField'),
    );
  }

  public function getName()[]: string {
    return 'Baz';
  }

  public function getType()[]: BazEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case BazEnum::intField:
        $this->intField = null;
        break;
      case BazEnum::setField:
        $this->setField = null;
        break;
      case BazEnum::mapField:
        $this->mapField = null;
        break;
      case BazEnum::binaryField:
        $this->binaryField = null;
        break;
      case BazEnum::_EMPTY_:
        break;
    }
    $this->_type = BazEnum::_EMPTY_;
}

  public function set_intField(\Adapter1::THackType $intField)[write_props]: this {
    return $this->setx_intField($intField);
   }

  public function setx_intField(\Adapter1::THackType $intField)[write_props]: this {
    $this->reset();
    $this->_type = BazEnum::intField;
    $this->intField = $intField;
    return $this;
  }

  public function get_intField()[]: \Adapter1::THackType {
    return $this->getx_intField();
  }

  public function getx_intField()[]: \Adapter1::THackType {
    invariant(
      $this->_type === BazEnum::intField,
      'get_intField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->intField as nonnull;
  }

  public function set_setField(\Adapter2::THackType $setField)[write_props]: this {
    return $this->setx_setField($setField);
   }

  public function setx_setField(\Adapter2::THackType $setField)[write_props]: this {
    $this->reset();
    $this->_type = BazEnum::setField;
    $this->setField = $setField;
    return $this;
  }

  public function get_setField()[]: \Adapter2::THackType {
    return $this->getx_setField();
  }

  public function getx_setField()[]: \Adapter2::THackType {
    invariant(
      $this->_type === BazEnum::setField,
      'get_setField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->setField as nonnull;
  }

  public function set_mapField(\Adapter3::THackType $mapField)[write_props]: this {
    return $this->setx_mapField($mapField);
   }

  public function setx_mapField(\Adapter3::THackType $mapField)[write_props]: this {
    $this->reset();
    $this->_type = BazEnum::mapField;
    $this->mapField = $mapField;
    return $this;
  }

  public function get_mapField()[]: \Adapter3::THackType {
    return $this->getx_mapField();
  }

  public function getx_mapField()[]: \Adapter3::THackType {
    invariant(
      $this->_type === BazEnum::mapField,
      'get_mapField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->mapField as nonnull;
  }

  public function set_binaryField(\Adapter1::THackType $binaryField)[write_props]: this {
    return $this->setx_binaryField($binaryField);
   }

  public function setx_binaryField(\Adapter1::THackType $binaryField)[write_props]: this {
    $this->reset();
    $this->_type = BazEnum::binaryField;
    $this->binaryField = $binaryField;
    return $this;
  }

  public function get_binaryField()[]: \Adapter1::THackType {
    return $this->getx_binaryField();
  }

  public function getx_binaryField()[]: \Adapter1::THackType {
    invariant(
      $this->_type === BazEnum::binaryField,
      'get_binaryField called on an instance of Baz whose current type is %s',
      (string)$this->_type,
    );
    return $this->binaryField as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Baz",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "intField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.SetWithAdapter",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_set" => tmeta_ThriftSetType::fromShape(
                            shape(
                              "valueType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "setField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.ListWithElemAdapter",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                                    shape(
                                      "name" => "module.ListWithElemAdapter",
                                      "underlyingType" => tmeta_ThriftType::fromShape(
                                        shape(
                                          "t_list" => tmeta_ThriftListType::fromShape(
                                            shape(
                                              "valueType" => tmeta_ThriftType::fromShape(
                                                shape(
                                                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                                                )
                                              ),
                                            )
                                          ),
                                        )
                                      ),
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "mapField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryField",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'intField'),
      Shapes::idx($shape, 'setField') === null ? null : (new Set(Keyset\keys($shape['setField']))),
      Shapes::idx($shape, 'mapField') === null ? null : ((new Map($shape['mapField']))->map(
        $val0 ==> (new Vector($val0)),
      )),
      Shapes::idx($shape, 'binaryField'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'intField' => $this->intField,
      'setField' => $this->setField
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'mapField' => $this->mapField?->map(
        ($_val0) ==> vec($_val0),
      )
        |> $$ === null ? null : dict($$),
      'binaryField' => $this->binaryField,
    );
  }
  public function readFromJson(string $jsonText): void {
    $this->_type = BazEnum::_EMPTY_;
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'intField') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['intField'];
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->intField = (int)$_tmp0;
      }
      $this->_type = BazEnum::intField;
    }    
    if (idx($parsed, 'setField') !== null) {
      $_json4 = /* HH_FIXME[4110] */ $parsed['setField'];
      $_container5 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json4 as $_key2 => $_value3) {
        $_elem6 = '';
        $_elem6 = $_value3;
        $_container5->add($_elem6);
      }
      $this->setField = $_container5;
      $this->_type = BazEnum::setField;
    }    
    if (idx($parsed, 'mapField') !== null) {
      $_json10 = /* HH_FIXME[4110] */ $parsed['mapField'];
      $_container11 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json10 as $_key8 => $_value9) {
        $_value12 = Vector {};
        $_json16 = $_value9;
        $_container17 = Vector {};
        foreach(/* HH_FIXME[4110] */ $_json16 as $_key14 => $_value15) {
          $_elem18 = '';
          $_elem18 = $_value15;
          $_container17 []= $_elem18;
        }
        $_value12 = $_container17;
        $_container11[$_key8] = $_value12;
      }
      $this->mapField = $_container11;
      $this->_type = BazEnum::mapField;
    }    
    if (idx($parsed, 'binaryField') !== null) {
      $this->binaryField = /* HH_FIXME[4110] */ $parsed['binaryField'];
      $this->_type = BazEnum::binaryField;
    }    
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, int>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, string>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Set<string>>();
    \ThriftUtil::requireSameType<\Adapter2::TThriftType, Vector<\Adapter1::THackType>>();
    \ThriftUtil::requireSameType<\Adapter3::TThriftType, Map<string, \Adapter2::THackType>>();
  }

}

/**
 * Original thrift struct:-
 * Bar
 */
class Bar implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'structField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Foo::class,
    ),
    2 => shape(
      'var' => 'optionalStructField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Foo::class,
    ),
    3 => shape(
      'var' => 'structListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => Foo::class,
      ),
      'format' => 'collection',
    ),
    4 => shape(
      'var' => 'optionalStructListField',
      'type' => \TType::LST,
      'etype' => \TType::STRUCT,
      'elem' => shape(
        'adapter' => \Adapter1::class,
        'type' => \TType::STRUCT,
        'class' => Foo::class,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'unionField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Baz::class,
    ),
    6 => shape(
      'var' => 'optionalUnionField',
      'adapter' => \Adapter1::class,
      'type' => \TType::STRUCT,
      'class' => Baz::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'structField' => 1,
    'optionalStructField' => 2,
    'structListField' => 3,
    'optionalStructListField' => 4,
    'unionField' => 5,
    'optionalUnionField' => 6,
  ];

  const type TConstructorShape = shape(
    ?'structField' => ?\Adapter1::THackType,
    ?'optionalStructField' => ?\Adapter1::THackType,
    ?'structListField' => ?Vector<\Adapter1::THackType>,
    ?'optionalStructListField' => ?Vector<\Adapter1::THackType>,
    ?'unionField' => ?\Adapter1::THackType,
    ?'optionalUnionField' => ?\Adapter1::THackType,
  );

  const type TShape = shape(
    ?'structField' => ?\Adapter1::THackType,
    ?'optionalStructField' => ?\Adapter1::THackType,
    'structListField' => vec<\Adapter1::THackType>,
    ?'optionalStructListField' => ?vec<\Adapter1::THackType>,
    ?'unionField' => ?\Adapter1::THackType,
    ?'optionalUnionField' => ?\Adapter1::THackType,
  );
  const int STRUCTURAL_ID = 7572690377543394081;
  /**
   * Original thrift field:-
   * 1: struct module.Foo structField
   */
  public ?\Adapter1::THackType $structField;
  /**
   * Original thrift field:-
   * 2: struct module.Foo optionalStructField
   */
  public ?\Adapter1::THackType $optionalStructField;
  /**
   * Original thrift field:-
   * 3: list<struct module.Foo> structListField
   */
  public Vector<\Adapter1::THackType> $structListField;
  /**
   * Original thrift field:-
   * 4: list<struct module.Foo> optionalStructListField
   */
  public ?Vector<\Adapter1::THackType> $optionalStructListField;
  /**
   * Original thrift field:-
   * 5: struct module.Baz unionField
   */
  public ?\Adapter1::THackType $unionField;
  /**
   * Original thrift field:-
   * 6: struct module.Baz optionalUnionField
   */
  public ?\Adapter1::THackType $optionalUnionField;

  public function __construct(?\Adapter1::THackType $structField = null, ?\Adapter1::THackType $optionalStructField = null, ?Vector<\Adapter1::THackType> $structListField = null, ?Vector<\Adapter1::THackType> $optionalStructListField = null, ?\Adapter1::THackType $unionField = null, ?\Adapter1::THackType $optionalUnionField = null  )[] {
    $this->structField = $structField;
    $this->optionalStructField = $optionalStructField;
    $this->structListField = $structListField ?? Vector {};
    $this->optionalStructListField = $optionalStructListField;
    $this->unionField = $unionField;
    $this->optionalUnionField = $optionalUnionField;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'structField'),
      Shapes::idx($shape, 'optionalStructField'),
      Shapes::idx($shape, 'structListField'),
      Shapes::idx($shape, 'optionalStructListField'),
      Shapes::idx($shape, 'unionField'),
      Shapes::idx($shape, 'optionalUnionField'),
    );
  }

  public function getName()[]: string {
    return 'Bar';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.Bar",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Foo",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Foo",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "structField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Foo",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Foo",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalStructField",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.Foo",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_struct" => tmeta_ThriftStructType::fromShape(
                                    shape(
                                      "name" => "module.Foo",
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "structListField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                            shape(
                              "name" => "module.Foo",
                              "underlyingType" => tmeta_ThriftType::fromShape(
                                shape(
                                  "t_struct" => tmeta_ThriftStructType::fromShape(
                                    shape(
                                      "name" => "module.Foo",
                                    )
                                  ),
                                )
                              ),
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalStructListField",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Baz",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Baz",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "unionField",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_typedef" => tmeta_ThriftTypedefType::fromShape(
                    shape(
                      "name" => "module.Baz",
                      "underlyingType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_struct" => tmeta_ThriftStructType::fromShape(
                            shape(
                              "name" => "module.Baz",
                            )
                          ),
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optionalUnionField",
              "is_optional" => true,
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'structField') === null ? null : (Foo::__fromShape($shape['structField'])),
      Shapes::idx($shape, 'optionalStructField') === null ? null : (Foo::__fromShape($shape['optionalStructField'])),
      (new Vector($shape['structListField']))->map(
        $val0 ==> Foo::__fromShape($val0),
      ),
      Shapes::idx($shape, 'optionalStructListField') === null ? null : ((new Vector($shape['optionalStructListField']))->map(
        $val1 ==> Foo::__fromShape($val1),
      )),
      Shapes::idx($shape, 'unionField') === null ? null : (Baz::__fromShape($shape['unionField'])),
      Shapes::idx($shape, 'optionalUnionField') === null ? null : (Baz::__fromShape($shape['optionalUnionField'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'structField' => $this->structField?->__toShape(),
      'optionalStructField' => $this->optionalStructField?->__toShape(),
      'structListField' => $this->structListField->map(
        ($_val0) ==> $_val0->__toShape(),
      )
        |> vec($$),
      'optionalStructListField' => $this->optionalStructListField?->map(
        ($_val0) ==> $_val0->__toShape(),
      )
        |> $$ === null ? null : vec($$),
      'unionField' => $this->unionField?->__toShape(),
      'optionalUnionField' => $this->optionalUnionField?->__toShape(),
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'structField') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['structField']);
      $_tmp1 = Foo::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->structField = $_tmp1;
    }    
    if (idx($parsed, 'optionalStructField') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['optionalStructField']);
      $_tmp3 = Foo::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->optionalStructField = $_tmp3;
    }    
    if (idx($parsed, 'structListField') !== null) {
      $_json7 = /* HH_FIXME[4110] */ $parsed['structListField'];
      $_container8 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json7 as $_key5 => $_value6) {
        $_elem9 = Foo::withDefaultValues();
        $_tmp10 = json_encode($_value6);
        $_tmp11 = Foo::withDefaultValues();
        $_tmp11->readFromJson($_tmp10);
        $_elem9 = $_tmp11;
        $_container8 []= $_elem9;
      }
      $this->structListField = $_container8;
    }    
    if (idx($parsed, 'optionalStructListField') !== null) {
      $_json15 = /* HH_FIXME[4110] */ $parsed['optionalStructListField'];
      $_container16 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json15 as $_key13 => $_value14) {
        $_elem17 = Foo::withDefaultValues();
        $_tmp18 = json_encode($_value14);
        $_tmp19 = Foo::withDefaultValues();
        $_tmp19->readFromJson($_tmp18);
        $_elem17 = $_tmp19;
        $_container16 []= $_elem17;
      }
      $this->optionalStructListField = $_container16;
    }    
    if (idx($parsed, 'unionField') !== null) {
      $_tmp20 = json_encode(/* HH_FIXME[4110] */ $parsed['unionField']);
      $_tmp21 = Baz::withDefaultValues();
      $_tmp21->readFromJson($_tmp20);
      $this->unionField = $_tmp21;
    }    
    if (idx($parsed, 'optionalUnionField') !== null) {
      $_tmp22 = json_encode(/* HH_FIXME[4110] */ $parsed['optionalUnionField']);
      $_tmp23 = Baz::withDefaultValues();
      $_tmp23->readFromJson($_tmp22);
      $this->optionalUnionField = $_tmp23;
    }    
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, Baz>();
    \ThriftUtil::requireSameType<\Adapter1::TThriftType, Foo>();
  }

}

