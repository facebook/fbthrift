#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import typing as _typing
from thrift.py3.server import RequestContext, ServiceInterface
from abc import abstractmethod, ABCMeta

import module.types as _module_types

_ServiceInterfaceT = _typing.TypeVar('_ServiceInterfaceT', bound='ServiceInterface')


class ServiceInterface(
    ServiceInterface,
    metaclass=ABCMeta,
):

    @staticmethod
    def pass_context_func(
        fn: _typing.Callable[
                [_ServiceInterfaceT, RequestContext, str, _module_types.Foo],
                _typing.Coroutine[_typing.Any, _typing.Any, int]
        ]
    ) -> _typing.Callable[
        [_ServiceInterfaceT, str, _module_types.Foo],
        _typing.Coroutine[_typing.Any, _typing.Any, int]
    ]: ...

    @abstractmethod
    async def func(
        self,
        arg1: str,
        arg2: _module_types.Foo
    ) -> int: ...
    pass


