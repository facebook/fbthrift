/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.adapter;

import java.util.*;

public class ServiceReactiveBlockingWrapper 
  implements Service {
  private final Service.Reactive _delegate;

  public ServiceReactiveBlockingWrapper(Service.Reactive _delegate) {
    
    this._delegate = _delegate;
  }

  public ServiceReactiveBlockingWrapper(org.apache.thrift.ProtocolId _protocolId, reactor.core.publisher.Mono<? extends com.facebook.thrift.client.RpcClient> _rpcClient, Map<String, String> _headers, Map<String, String> _persistentHeaders) {
    this(new ServiceReactiveClient(_protocolId, _rpcClient, _headers, _persistentHeaders));
  }

  @java.lang.Override
  public void close() {
    _delegate.dispose();
  }

  @java.lang.Override
  public int func( final String arg1, final test.fixtures.adapter.Foo arg2) throws org.apache.thrift.TException {
      return _delegate.func(arg1, arg2).block();
  }

  @java.lang.Override
  public int func(
        final String arg1,
        final test.fixtures.adapter.Foo arg2,
        com.facebook.thrift.client.RpcOptions rpcOptions) throws org.apache.thrift.TException {
      return _delegate.func(arg1, arg2).block();
  }

  @java.lang.Override
  public com.facebook.thrift.client.ResponseWrapper<Integer> funcWrapper(
    final String arg1,
    final test.fixtures.adapter.Foo arg2,
    com.facebook.thrift.client.RpcOptions rpcOptions) throws org.apache.thrift.TException {
      return _delegate.funcWrapper(arg1, arg2, rpcOptions).block();
  }

}
