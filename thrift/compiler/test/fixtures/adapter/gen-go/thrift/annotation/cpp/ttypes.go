// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package cpp

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	scope0 "thrift/annotation/scope"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = scope0.GoUnusedProtection__
var GoUnusedProtection__ int;

type RefType int64
const (
  RefType_Unique RefType = 0
  RefType_Shared RefType = 1
  RefType_SharedMutable RefType = 2
)

var RefTypeToName = map[RefType]string {
  RefType_Unique: "Unique",
  RefType_Shared: "Shared",
  RefType_SharedMutable: "SharedMutable",
}

var RefTypeToValue = map[string]RefType {
  "Unique": RefType_Unique,
  "Shared": RefType_Shared,
  "SharedMutable": RefType_SharedMutable,
}

var RefTypeNames = []string {
  "Unique",
  "Shared",
  "SharedMutable",
}

var RefTypeValues = []RefType {
  RefType_Unique,
  RefType_Shared,
  RefType_SharedMutable,
}

func (p RefType) String() string {
  if v, ok := RefTypeToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func RefTypeFromString(s string) (RefType, error) {
  if v, ok := RefTypeToValue[s]; ok {
    return v, nil
  }
  return RefType(0), fmt.Errorf("not a valid RefType string")
}

func RefTypePtr(v RefType) *RefType { return &v }

// Attributes:
//  - Type
type Ref struct {
  Type RefType `thrift:"type,1" db:"type" json:"type"`
}

func NewRef() *Ref {
  return &Ref{}
}


func (p *Ref) GetType() RefType {
  return p.Type
}
type RefBuilder struct {
  obj *Ref
}

func NewRefBuilder() *RefBuilder{
  return &RefBuilder{
    obj: NewRef(),
  }
}

func (p RefBuilder) Emit() *Ref{
  return &Ref{
    Type: p.obj.Type,
  }
}

func (r *RefBuilder) Type(type_a1 RefType) *RefBuilder {
  r.obj.Type = type_a1
  return r
}

func (r *Ref) SetType(type_a1 RefType) *Ref {
  r.Type = type_a1
  return r
}

func (p *Ref) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ref)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    temp := RefType(v)
    p.Type = temp
  }
  return nil
}

func (p *Ref) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Ref"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ref) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Ref) String() string {
  if p == nil {
    return "<nil>"
  }

  typeVal := fmt.Sprintf("%v", p.Type)
  return fmt.Sprintf("Ref({Type:%s})", typeVal)
}

// Attributes:
//  - Ref
type Lazy struct {
  Ref bool `thrift:"ref,1" db:"ref" json:"ref"`
}

func NewLazy() *Lazy {
  return &Lazy{}
}


func (p *Lazy) GetRef() bool {
  return p.Ref
}
type LazyBuilder struct {
  obj *Lazy
}

func NewLazyBuilder() *LazyBuilder{
  return &LazyBuilder{
    obj: NewLazy(),
  }
}

func (p LazyBuilder) Emit() *Lazy{
  return &Lazy{
    Ref: p.obj.Ref,
  }
}

func (l *LazyBuilder) Ref(ref bool) *LazyBuilder {
  l.obj.Ref = ref
  return l
}

func (l *Lazy) SetRef(ref bool) *Lazy {
  l.Ref = ref
  return l
}

func (p *Lazy) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Lazy)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Ref = v
  }
  return nil
}

func (p *Lazy) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("Lazy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Lazy) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ref", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ref: ", p), err) }
  if err := oprot.WriteBool(bool(p.Ref)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ref (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ref: ", p), err) }
  return err
}

func (p *Lazy) String() string {
  if p == nil {
    return "<nil>"
  }

  refVal := fmt.Sprintf("%v", p.Ref)
  return fmt.Sprintf("Lazy({Ref:%s})", refVal)
}

type DisableLazyChecksum struct {
}

func NewDisableLazyChecksum() *DisableLazyChecksum {
  return &DisableLazyChecksum{}
}

type DisableLazyChecksumBuilder struct {
  obj *DisableLazyChecksum
}

func NewDisableLazyChecksumBuilder() *DisableLazyChecksumBuilder{
  return &DisableLazyChecksumBuilder{
    obj: NewDisableLazyChecksum(),
  }
}

func (p DisableLazyChecksumBuilder) Emit() *DisableLazyChecksum{
  return &DisableLazyChecksum{
  }
}

func (p *DisableLazyChecksum) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DisableLazyChecksum) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("DisableLazyChecksum"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DisableLazyChecksum) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("DisableLazyChecksum({})")
}

// Attributes:
//  - Name
type ExperimentalAdapter struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewExperimentalAdapter() *ExperimentalAdapter {
  return &ExperimentalAdapter{}
}


func (p *ExperimentalAdapter) GetName() string {
  return p.Name
}
type ExperimentalAdapterBuilder struct {
  obj *ExperimentalAdapter
}

func NewExperimentalAdapterBuilder() *ExperimentalAdapterBuilder{
  return &ExperimentalAdapterBuilder{
    obj: NewExperimentalAdapter(),
  }
}

func (p ExperimentalAdapterBuilder) Emit() *ExperimentalAdapter{
  return &ExperimentalAdapter{
    Name: p.obj.Name,
  }
}

func (e *ExperimentalAdapterBuilder) Name(name string) *ExperimentalAdapterBuilder {
  e.obj.Name = name
  return e
}

func (e *ExperimentalAdapter) SetName(name string) *ExperimentalAdapter {
  e.Name = name
  return e
}

func (p *ExperimentalAdapter) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExperimentalAdapter)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Name = v
  }
  return nil
}

func (p *ExperimentalAdapter) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("ExperimentalAdapter"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExperimentalAdapter) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *ExperimentalAdapter) String() string {
  if p == nil {
    return "<nil>"
  }

  nameVal := fmt.Sprintf("%v", p.Name)
  return fmt.Sprintf("ExperimentalAdapter({Name:%s})", nameVal)
}

type PackIsset struct {
}

func NewPackIsset() *PackIsset {
  return &PackIsset{}
}

type PackIssetBuilder struct {
  obj *PackIsset
}

func NewPackIssetBuilder() *PackIssetBuilder{
  return &PackIssetBuilder{
    obj: NewPackIsset(),
  }
}

func (p PackIssetBuilder) Emit() *PackIsset{
  return &PackIsset{
  }
}

func (p *PackIsset) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PackIsset) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("PackIsset"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PackIsset) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("PackIsset({})")
}

