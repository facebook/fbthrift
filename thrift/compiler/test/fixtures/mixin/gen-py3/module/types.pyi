#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools


__property__ = property


class Mixin1(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        field1: bool
        pass

    field1: Final[str] = ...

    def __init__(
        self, *,
        field1: _typing.Optional[str]=None
    ) -> None: ...

    def __call__(
        self, *,
        field1: _typing.Union[str, __NotSet, None]=NOTSET
    ) -> Mixin1: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Mixin1'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'Mixin1') -> bool: ...
    def __gt__(self, other: 'Mixin1') -> bool: ...
    def __le__(self, other: 'Mixin1') -> bool: ...
    def __ge__(self, other: 'Mixin1') -> bool: ...


class Mixin2(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        m1: bool
        field2: bool
        pass

    m1: Final['Mixin1'] = ...

    field2: Final[_typing.Optional[str]] = ...

    field1: Final[str] = ...

    def __init__(
        self, *,
        m1: _typing.Optional['Mixin1']=None,
        field2: _typing.Optional[str]=None
    ) -> None: ...

    def __call__(
        self, *,
        m1: _typing.Union['Mixin1', __NotSet, None]=NOTSET,
        field2: _typing.Union[str, __NotSet, None]=NOTSET
    ) -> Mixin2: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Mixin2'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'Mixin2') -> bool: ...
    def __gt__(self, other: 'Mixin2') -> bool: ...
    def __le__(self, other: 'Mixin2') -> bool: ...
    def __ge__(self, other: 'Mixin2') -> bool: ...


class Mixin3Base(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        field3: bool
        pass

    field3: Final[str] = ...

    def __init__(
        self, *,
        field3: _typing.Optional[str]=None
    ) -> None: ...

    def __call__(
        self, *,
        field3: _typing.Union[str, __NotSet, None]=NOTSET
    ) -> Mixin3Base: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Mixin3Base'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'Mixin3Base') -> bool: ...
    def __gt__(self, other: 'Mixin3Base') -> bool: ...
    def __le__(self, other: 'Mixin3Base') -> bool: ...
    def __ge__(self, other: 'Mixin3Base') -> bool: ...


class Foo(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        field4: bool
        m2: bool
        m3: bool
        pass

    field4: Final[str] = ...

    m2: Final['Mixin2'] = ...

    m3: Final['Mixin3Base'] = ...

    m1: Final['Mixin1'] = ...

    field2: Final[_typing.Optional[str]] = ...

    field1: Final[str] = ...

    field3: Final[str] = ...

    def __init__(
        self, *,
        field4: _typing.Optional[str]=None,
        m2: _typing.Optional['Mixin2']=None,
        m3: _typing.Optional['Mixin3Base']=None
    ) -> None: ...

    def __call__(
        self, *,
        field4: _typing.Union[str, __NotSet, None]=NOTSET,
        m2: _typing.Union['Mixin2', __NotSet, None]=NOTSET,
        m3: _typing.Union['Mixin3Base', __NotSet, None]=NOTSET
    ) -> Foo: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Foo'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'Foo') -> bool: ...
    def __gt__(self, other: 'Foo') -> bool: ...
    def __le__(self, other: 'Foo') -> bool: ...
    def __ge__(self, other: 'Foo') -> bool: ...


Mixin3 = Mixin3Base
