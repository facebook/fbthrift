#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools


__property__ = property


class ComplexUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        intValue: bool
        stringValue: bool
        intListValue: bool
        stringListValue: bool
        typedefValue: bool
        pass

    intValue: Final[int] = ...

    stringValue: Final[str] = ...

    intListValue: Final[_typing.Sequence[int]] = ...

    stringListValue: Final[_typing.Sequence[str]] = ...

    typedefValue: Final[_typing.Mapping[int, str]] = ...

    stringRef: Final[_typing.Optional[str]] = ...

    def __init__(
        self, *,
        intValue: _typing.Optional[int]=None,
        stringValue: _typing.Optional[str]=None,
        intListValue: _typing.Optional[_typing.Sequence[int]]=None,
        stringListValue: _typing.Optional[_typing.Sequence[str]]=None,
        typedefValue: _typing.Optional[_typing.Mapping[int, str]]=None,
        stringRef: _typing.Optional[str]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'ComplexUnion') -> bool: ...
    def __gt__(self, other: 'ComplexUnion') -> bool: ...
    def __le__(self, other: 'ComplexUnion') -> bool: ...
    def __ge__(self, other: 'ComplexUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: ComplexUnion.Type = ...
        intValue: ComplexUnion.Type = ...
        stringValue: ComplexUnion.Type = ...
        intListValue: ComplexUnion.Type = ...
        stringListValue: ComplexUnion.Type = ...
        typedefValue: ComplexUnion.Type = ...
        stringRef: ComplexUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, int, str, _typing.Sequence[int], _typing.Sequence[str], _typing.Mapping[int, str], str]) -> ComplexUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, int, str, _typing.Sequence[int], _typing.Sequence[str], _typing.Mapping[int, str], str]: ...
    @__property__
    def type(self) -> "ComplexUnion.Type": ...


class ListUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        intListValue: bool
        stringListValue: bool
        pass

    intListValue: Final[_typing.Sequence[int]] = ...

    stringListValue: Final[_typing.Sequence[str]] = ...

    def __init__(
        self, *,
        intListValue: _typing.Optional[_typing.Sequence[int]]=None,
        stringListValue: _typing.Optional[_typing.Sequence[str]]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'ListUnion') -> bool: ...
    def __gt__(self, other: 'ListUnion') -> bool: ...
    def __le__(self, other: 'ListUnion') -> bool: ...
    def __ge__(self, other: 'ListUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: ListUnion.Type = ...
        intListValue: ListUnion.Type = ...
        stringListValue: ListUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, _typing.Sequence[int], _typing.Sequence[str]]) -> ListUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, _typing.Sequence[int], _typing.Sequence[str]]: ...
    @__property__
    def type(self) -> "ListUnion.Type": ...


class DataUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        binaryData: bool
        stringData: bool
        pass

    binaryData: Final[bytes] = ...

    stringData: Final[str] = ...

    def __init__(
        self, *,
        binaryData: _typing.Optional[bytes]=None,
        stringData: _typing.Optional[str]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'DataUnion') -> bool: ...
    def __gt__(self, other: 'DataUnion') -> bool: ...
    def __le__(self, other: 'DataUnion') -> bool: ...
    def __ge__(self, other: 'DataUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: DataUnion.Type = ...
        binaryData: DataUnion.Type = ...
        stringData: DataUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, bytes, str]) -> DataUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, bytes, str]: ...
    @__property__
    def type(self) -> "DataUnion.Type": ...


class Val(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        strVal: bool
        intVal: bool
        typedefValue: bool
        pass

    strVal: Final[str] = ...

    intVal: Final[int] = ...

    typedefValue: Final[_typing.Mapping[int, str]] = ...

    def __init__(
        self, *,
        strVal: _typing.Optional[str]=None,
        intVal: _typing.Optional[int]=None,
        typedefValue: _typing.Optional[_typing.Mapping[int, str]]=None
    ) -> None: ...

    def __call__(
        self, *,
        strVal: _typing.Union[str, __NotSet, None]=NOTSET,
        intVal: _typing.Union[int, __NotSet, None]=NOTSET,
        typedefValue: _typing.Union[_typing.Mapping[int, str], __NotSet, None]=NOTSET
    ) -> Val: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['Val'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'Val') -> bool: ...
    def __gt__(self, other: 'Val') -> bool: ...
    def __le__(self, other: 'Val') -> bool: ...
    def __ge__(self, other: 'Val') -> bool: ...


class ValUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        v1: bool
        v2: bool
        pass

    v1: Final['Val'] = ...

    v2: Final['Val'] = ...

    def __init__(
        self, *,
        v1: _typing.Optional['Val']=None,
        v2: _typing.Optional['Val']=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'ValUnion') -> bool: ...
    def __gt__(self, other: 'ValUnion') -> bool: ...
    def __le__(self, other: 'ValUnion') -> bool: ...
    def __ge__(self, other: 'ValUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: ValUnion.Type = ...
        v1: ValUnion.Type = ...
        v2: ValUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, 'Val', 'Val']) -> ValUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, 'Val', 'Val']: ...
    @__property__
    def type(self) -> "ValUnion.Type": ...


class VirtualComplexUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        thingOne: bool
        thingTwo: bool
        pass

    thingOne: Final[str] = ...

    thingTwo: Final[str] = ...

    def __init__(
        self, *,
        thingOne: _typing.Optional[str]=None,
        thingTwo: _typing.Optional[str]=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'VirtualComplexUnion') -> bool: ...
    def __gt__(self, other: 'VirtualComplexUnion') -> bool: ...
    def __le__(self, other: 'VirtualComplexUnion') -> bool: ...
    def __ge__(self, other: 'VirtualComplexUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: VirtualComplexUnion.Type = ...
        thingOne: VirtualComplexUnion.Type = ...
        thingTwo: VirtualComplexUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, str, str]) -> VirtualComplexUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, str, str]: ...
    @__property__
    def type(self) -> "VirtualComplexUnion.Type": ...


class NonCopyableStruct(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        num: bool
        pass

    num: Final[int] = ...

    def __init__(
        self, *,
        num: _typing.Optional[int]=None
    ) -> None: ...

    def __call__(
        self, *,
        num: _typing.Union[int, __NotSet, None]=NOTSET
    ) -> NonCopyableStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['NonCopyableStruct'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __lt__(self, other: 'NonCopyableStruct') -> bool: ...
    def __gt__(self, other: 'NonCopyableStruct') -> bool: ...
    def __le__(self, other: 'NonCopyableStruct') -> bool: ...
    def __ge__(self, other: 'NonCopyableStruct') -> bool: ...


class NonCopyableUnion(thrift.py3.types.Union, _typing.Hashable):
    class __fbthrift_IsSet:
        s: bool
        pass

    s: Final['NonCopyableStruct'] = ...

    def __init__(
        self, *,
        s: _typing.Optional['NonCopyableStruct']=None
    ) -> None: ...

    def __hash__(self) -> int: ...
    def __lt__(self, other: 'NonCopyableUnion') -> bool: ...
    def __gt__(self, other: 'NonCopyableUnion') -> bool: ...
    def __le__(self, other: 'NonCopyableUnion') -> bool: ...
    def __ge__(self, other: 'NonCopyableUnion') -> bool: ...

    class Type(thrift.py3.types.Enum):
        EMPTY: NonCopyableUnion.Type = ...
        s: NonCopyableUnion.Type = ...

    @staticmethod
    def fromValue(value: _typing.Union[None, 'NonCopyableStruct']) -> NonCopyableUnion: ...
    @__property__
    def value(self) -> _typing.Union[None, 'NonCopyableStruct']: ...
    @__property__
    def type(self) -> "NonCopyableUnion.Type": ...


_List__i64T = _typing.TypeVar('_List__i64T', bound=_typing.Sequence[int])


class List__i64(_typing.Sequence[int], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.Sequence[int]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.Sequence[int]: ...
    @_typing.overload
    def __getitem__(self, i: int) -> int: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[int]: ...
    def __add__(self, other: _typing.Sequence[int]) -> 'List__i64': ...
    def __radd__(self, other: _List__i64T) -> _List__i64T: ...
    def __reversed__(self) -> _typing.Iterator[int]: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


_List__stringT = _typing.TypeVar('_List__stringT', bound=_typing.Sequence[str])


class List__string(_typing.Sequence[str], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.Sequence[str]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.Sequence[str]: ...
    @_typing.overload
    def __getitem__(self, i: int) -> str: ...
    @_typing.overload
    def __getitem__(self, s: slice) -> _typing.Sequence[str]: ...
    def __add__(self, other: _typing.Sequence[str]) -> 'List__string': ...
    def __radd__(self, other: _List__stringT) -> _List__stringT: ...
    def __reversed__(self) -> _typing.Iterator[str]: ...
    def __iter__(self) -> _typing.Iterator[str]: ...


class Map__i16_string(_typing.Mapping[int, str], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.Mapping[int, str]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.Mapping[int, str]: ...
    def __getitem__(self, key: int) -> str: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


containerTypedef = Map__i16_string
