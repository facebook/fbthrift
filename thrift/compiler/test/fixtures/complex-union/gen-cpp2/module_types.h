/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct intValue;
struct stringValue;
struct intListValue;
struct stringListValue;
struct typedefValue;
struct stringRef;
struct intListValue;
struct stringListValue;
struct binaryData;
struct stringData;
struct strVal;
struct intVal;
struct typedefValue;
struct v1;
struct v2;
struct thingOne;
struct thingTwo;
struct num;
struct s;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_intValue
#define APACHE_THRIFT_ACCESSOR_intValue
APACHE_THRIFT_DEFINE_ACCESSOR(intValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringValue
#define APACHE_THRIFT_ACCESSOR_stringValue
APACHE_THRIFT_DEFINE_ACCESSOR(stringValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intListValue
#define APACHE_THRIFT_ACCESSOR_intListValue
APACHE_THRIFT_DEFINE_ACCESSOR(intListValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringListValue
#define APACHE_THRIFT_ACCESSOR_stringListValue
APACHE_THRIFT_DEFINE_ACCESSOR(stringListValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_typedefValue
#define APACHE_THRIFT_ACCESSOR_typedefValue
APACHE_THRIFT_DEFINE_ACCESSOR(typedefValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringRef
#define APACHE_THRIFT_ACCESSOR_stringRef
APACHE_THRIFT_DEFINE_ACCESSOR(stringRef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intListValue
#define APACHE_THRIFT_ACCESSOR_intListValue
APACHE_THRIFT_DEFINE_ACCESSOR(intListValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringListValue
#define APACHE_THRIFT_ACCESSOR_stringListValue
APACHE_THRIFT_DEFINE_ACCESSOR(stringListValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryData
#define APACHE_THRIFT_ACCESSOR_binaryData
APACHE_THRIFT_DEFINE_ACCESSOR(binaryData);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringData
#define APACHE_THRIFT_ACCESSOR_stringData
APACHE_THRIFT_DEFINE_ACCESSOR(stringData);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strVal
#define APACHE_THRIFT_ACCESSOR_strVal
APACHE_THRIFT_DEFINE_ACCESSOR(strVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intVal
#define APACHE_THRIFT_ACCESSOR_intVal
APACHE_THRIFT_DEFINE_ACCESSOR(intVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_typedefValue
#define APACHE_THRIFT_ACCESSOR_typedefValue
APACHE_THRIFT_DEFINE_ACCESSOR(typedefValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_v1
#define APACHE_THRIFT_ACCESSOR_v1
APACHE_THRIFT_DEFINE_ACCESSOR(v1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_v2
#define APACHE_THRIFT_ACCESSOR_v2
APACHE_THRIFT_DEFINE_ACCESSOR(v2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_thingOne
#define APACHE_THRIFT_ACCESSOR_thingOne
APACHE_THRIFT_DEFINE_ACCESSOR(thingOne);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_thingTwo
#define APACHE_THRIFT_ACCESSOR_thingTwo
APACHE_THRIFT_DEFINE_ACCESSOR(thingTwo);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_num
#define APACHE_THRIFT_ACCESSOR_num
APACHE_THRIFT_DEFINE_ACCESSOR(num);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class ComplexUnion;
class ListUnion;
class DataUnion;
class Val;
class ValUnion;
class VirtualComplexUnion;
class NonCopyableStruct;
class NonCopyableUnion;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef ::std::map<::std::int16_t, ::std::string> containerTypedef;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ComplexUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ComplexUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    intValue = 1,
    stringValue = 5,
    intListValue = 2,
    stringListValue = 3,
    typedefValue = 9,
    stringRef = 14,
  } ;

  ComplexUnion()
      : type_(Type::__EMPTY__) {}

  ComplexUnion(ComplexUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      case Type::typedefValue:
      {
        set_typedefValue(std::move(rhs.value_.typedefValue));
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(std::move(*rhs.value_.stringRef));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  ComplexUnion(const ComplexUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      case Type::typedefValue:
      {
        set_typedefValue(rhs.value_.typedefValue);
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(*rhs.value_.stringRef);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ComplexUnion& operator=(ComplexUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      case Type::typedefValue:
      {
        set_typedefValue(std::move(rhs.value_.typedefValue));
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(std::move(*rhs.value_.stringRef));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  ComplexUnion& operator=(const ComplexUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      case Type::typedefValue:
      {
        set_typedefValue(rhs.value_.typedefValue);
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(*rhs.value_.stringRef);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~ComplexUnion() {
    __clear();
  }
  union storage_type {
    ::std::int64_t intValue;
    ::std::string stringValue;
    ::std::vector<::std::int64_t> intListValue;
    ::std::vector<::std::string> stringListValue;
    ::cpp2::containerTypedef typedefValue;
    ::std::unique_ptr<::std::string> stringRef;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ComplexUnion&) const;
  bool operator<(const ComplexUnion&) const;

  ::std::int64_t& set_intValue(::std::int64_t t = ::std::int64_t()) {
    __clear();
    type_ = Type::intValue;
    ::new (std::addressof(value_.intValue)) ::std::int64_t(t);
    return value_.intValue;
  }

  ::std::string& set_stringValue(::std::string const &t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) ::std::string(t);
    return value_.stringValue;
  }

  ::std::string& set_stringValue(::std::string&& t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) ::std::string(std::move(t));
    return value_.stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_stringValue(T&&... t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) ::std::string(std::forward<T>(t)...);
    return value_.stringValue;
  }

  ::std::vector<::std::int64_t>& set_intListValue(::std::vector<::std::int64_t> const &t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(t);
    return value_.intListValue;
  }

  ::std::vector<::std::int64_t>& set_intListValue(::std::vector<::std::int64_t>&& t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(std::move(t));
    return value_.intListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::int64_t>, T...>> ::std::vector<::std::int64_t>& set_intListValue(T&&... t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(std::forward<T>(t)...);
    return value_.intListValue;
  }

  ::std::vector<::std::string>& set_stringListValue(::std::vector<::std::string> const &t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(t);
    return value_.stringListValue;
  }

  ::std::vector<::std::string>& set_stringListValue(::std::vector<::std::string>&& t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(std::move(t));
    return value_.stringListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::string>, T...>> ::std::vector<::std::string>& set_stringListValue(T&&... t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(std::forward<T>(t)...);
    return value_.stringListValue;
  }

  ::cpp2::containerTypedef& set_typedefValue(::cpp2::containerTypedef const &t) {
    __clear();
    type_ = Type::typedefValue;
    ::new (std::addressof(value_.typedefValue)) ::cpp2::containerTypedef(t);
    return value_.typedefValue;
  }

  ::cpp2::containerTypedef& set_typedefValue(::cpp2::containerTypedef&& t) {
    __clear();
    type_ = Type::typedefValue;
    ::new (std::addressof(value_.typedefValue)) ::cpp2::containerTypedef(std::move(t));
    return value_.typedefValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::containerTypedef, T...>> ::cpp2::containerTypedef& set_typedefValue(T&&... t) {
    __clear();
    type_ = Type::typedefValue;
    ::new (std::addressof(value_.typedefValue)) ::cpp2::containerTypedef(std::forward<T>(t)...);
    return value_.typedefValue;
  }

  ::std::unique_ptr<::std::string>& set_stringRef(::std::string const &t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(t));
    return value_.stringRef;
  }

  ::std::unique_ptr<::std::string>& set_stringRef(::std::string&& t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(std::move(t)));
    return value_.stringRef;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::unique_ptr<::std::string>& set_stringRef(T&&... t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) ::std::unique_ptr<::std::string>(new ::std::unique_ptr<::std::string>::element_type(std::forward<T>(t)...));
    return value_.stringRef;
  }

  ::std::int64_t const& get_intValue() const {
    if (type_ != Type::intValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intValue;
  }

  ::std::string const& get_stringValue() const {
    if (type_ != Type::stringValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.stringValue;
  }

  ::std::vector<::std::int64_t> const& get_intListValue() const {
    if (type_ != Type::intListValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intListValue;
  }

  ::std::vector<::std::string> const& get_stringListValue() const {
    if (type_ != Type::stringListValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.stringListValue;
  }

  ::cpp2::containerTypedef const& get_typedefValue() const {
    if (type_ != Type::typedefValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.typedefValue;
  }

  ::std::unique_ptr<::std::string> const& get_stringRef() const {
    if (type_ != Type::stringRef) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.stringRef;
  }

  ::std::int64_t& mutable_intValue() {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  ::std::string& mutable_stringValue() {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  ::std::vector<::std::int64_t>& mutable_intListValue() {
    assert(type_ == Type::intListValue);
    return value_.intListValue;
  }

  ::std::vector<::std::string>& mutable_stringListValue() {
    assert(type_ == Type::stringListValue);
    return value_.stringListValue;
  }

  ::cpp2::containerTypedef& mutable_typedefValue() {
    assert(type_ == Type::typedefValue);
    return value_.typedefValue;
  }

  ::std::unique_ptr<::std::string>& mutable_stringRef() {
    assert(type_ == Type::stringRef);
    return value_.stringRef;
  }

  ::std::int64_t move_intValue() {
    assert(type_ == Type::intValue);
    return std::move(value_.intValue);
  }

  ::std::string move_stringValue() {
    assert(type_ == Type::stringValue);
    return std::move(value_.stringValue);
  }

  ::std::vector<::std::int64_t> move_intListValue() {
    assert(type_ == Type::intListValue);
    return std::move(value_.intListValue);
  }

  ::std::vector<::std::string> move_stringListValue() {
    assert(type_ == Type::stringListValue);
    return std::move(value_.stringListValue);
  }

  ::cpp2::containerTypedef move_typedefValue() {
    assert(type_ == Type::typedefValue);
    return std::move(value_.typedefValue);
  }

  ::std::unique_ptr<::std::string> move_stringRef() {
    assert(type_ == Type::stringRef);
    return std::move(value_.stringRef);
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intValue_ref() const& {
    return {value_.intValue, type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intValue_ref() const&& {
    return {std::move(value_.intValue), type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intValue_ref() & {
    return {value_.intValue, type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intValue_ref() && {
    return {std::move(value_.intValue), type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> stringValue_ref() const& {
    return {value_.stringValue, type_, stringValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> stringValue_ref() const&& {
    return {std::move(value_.stringValue), type_, stringValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> stringValue_ref() & {
    return {value_.stringValue, type_, stringValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> stringValue_ref() && {
    return {std::move(value_.stringValue), type_, stringValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intListValue_ref() const& {
    return {value_.intListValue, type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intListValue_ref() const&& {
    return {std::move(value_.intListValue), type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intListValue_ref() & {
    return {value_.intListValue, type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intListValue_ref() && {
    return {std::move(value_.intListValue), type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> stringListValue_ref() const& {
    return {value_.stringListValue, type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> stringListValue_ref() const&& {
    return {std::move(value_.stringListValue), type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> stringListValue_ref() & {
    return {value_.stringListValue, type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> stringListValue_ref() && {
    return {std::move(value_.stringListValue), type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> typedefValue_ref() const& {
    return {value_.typedefValue, type_, typedefValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> typedefValue_ref() const&& {
    return {std::move(value_.typedefValue), type_, typedefValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> typedefValue_ref() & {
    return {value_.typedefValue, type_, typedefValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> typedefValue_ref() && {
    return {std::move(value_.typedefValue), type_, typedefValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> stringRef_ref() const& {
    return {value_.stringRef, type_, stringRef, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> stringRef_ref() const&& {
    return {std::move(value_.stringRef), type_, stringRef, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> stringRef_ref() & {
    return {value_.stringRef, type_, stringRef, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> stringRef_ref() && {
    return {std::move(value_.stringRef), type_, stringRef, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexUnion>;
  friend void swap(ComplexUnion& a, ComplexUnion& b);
};

template <class Protocol_>
uint32_t ComplexUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ListUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ListUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    intListValue = 2,
    stringListValue = 3,
  } ;

  ListUnion()
      : type_(Type::__EMPTY__) {}

  ListUnion(ListUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  ListUnion(const ListUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ListUnion& operator=(ListUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  ListUnion& operator=(const ListUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~ListUnion() {
    __clear();
  }
  union storage_type {
    ::std::vector<::std::int64_t> intListValue;
    ::std::vector<::std::string> stringListValue;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ListUnion&) const;
  bool operator<(const ListUnion&) const;

  ::std::vector<::std::int64_t>& set_intListValue(::std::vector<::std::int64_t> const &t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(t);
    return value_.intListValue;
  }

  ::std::vector<::std::int64_t>& set_intListValue(::std::vector<::std::int64_t>&& t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(std::move(t));
    return value_.intListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::int64_t>, T...>> ::std::vector<::std::int64_t>& set_intListValue(T&&... t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) ::std::vector<::std::int64_t>(std::forward<T>(t)...);
    return value_.intListValue;
  }

  ::std::vector<::std::string>& set_stringListValue(::std::vector<::std::string> const &t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(t);
    return value_.stringListValue;
  }

  ::std::vector<::std::string>& set_stringListValue(::std::vector<::std::string>&& t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(std::move(t));
    return value_.stringListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::string>, T...>> ::std::vector<::std::string>& set_stringListValue(T&&... t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) ::std::vector<::std::string>(std::forward<T>(t)...);
    return value_.stringListValue;
  }

  ::std::vector<::std::int64_t> const& get_intListValue() const {
    if (type_ != Type::intListValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intListValue;
  }

  ::std::vector<::std::string> const& get_stringListValue() const {
    if (type_ != Type::stringListValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.stringListValue;
  }

  ::std::vector<::std::int64_t>& mutable_intListValue() {
    assert(type_ == Type::intListValue);
    return value_.intListValue;
  }

  ::std::vector<::std::string>& mutable_stringListValue() {
    assert(type_ == Type::stringListValue);
    return value_.stringListValue;
  }

  ::std::vector<::std::int64_t> move_intListValue() {
    assert(type_ == Type::intListValue);
    return std::move(value_.intListValue);
  }

  ::std::vector<::std::string> move_stringListValue() {
    assert(type_ == Type::stringListValue);
    return std::move(value_.stringListValue);
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intListValue_ref() const& {
    return {value_.intListValue, type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intListValue_ref() const&& {
    return {std::move(value_.intListValue), type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intListValue_ref() & {
    return {value_.intListValue, type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intListValue_ref() && {
    return {std::move(value_.intListValue), type_, intListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> stringListValue_ref() const& {
    return {value_.stringListValue, type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> stringListValue_ref() const&& {
    return {std::move(value_.stringListValue), type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> stringListValue_ref() & {
    return {value_.stringListValue, type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> stringListValue_ref() && {
    return {std::move(value_.stringListValue), type_, stringListValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ListUnion>;
  friend void swap(ListUnion& a, ListUnion& b);
};

template <class Protocol_>
uint32_t ListUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class DataUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = DataUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    binaryData = 1,
    stringData = 2,
  } ;

  DataUnion()
      : type_(Type::__EMPTY__) {}

  DataUnion(DataUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::binaryData:
      {
        set_binaryData(std::move(rhs.value_.binaryData));
        break;
      }
      case Type::stringData:
      {
        set_stringData(std::move(rhs.value_.stringData));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  DataUnion(const DataUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::binaryData:
      {
        set_binaryData(rhs.value_.binaryData);
        break;
      }
      case Type::stringData:
      {
        set_stringData(rhs.value_.stringData);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  DataUnion& operator=(DataUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::binaryData:
      {
        set_binaryData(std::move(rhs.value_.binaryData));
        break;
      }
      case Type::stringData:
      {
        set_stringData(std::move(rhs.value_.stringData));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  DataUnion& operator=(const DataUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::binaryData:
      {
        set_binaryData(rhs.value_.binaryData);
        break;
      }
      case Type::stringData:
      {
        set_stringData(rhs.value_.stringData);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~DataUnion() {
    __clear();
  }
  union storage_type {
    ::std::string binaryData;
    ::std::string stringData;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const DataUnion&) const;
  bool operator<(const DataUnion&) const;

  ::std::string& set_binaryData(::std::string const &t) {
    __clear();
    type_ = Type::binaryData;
    ::new (std::addressof(value_.binaryData)) ::std::string(t);
    return value_.binaryData;
  }

  ::std::string& set_binaryData(::std::string&& t) {
    __clear();
    type_ = Type::binaryData;
    ::new (std::addressof(value_.binaryData)) ::std::string(std::move(t));
    return value_.binaryData;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_binaryData(T&&... t) {
    __clear();
    type_ = Type::binaryData;
    ::new (std::addressof(value_.binaryData)) ::std::string(std::forward<T>(t)...);
    return value_.binaryData;
  }

  ::std::string& set_stringData(::std::string const &t) {
    __clear();
    type_ = Type::stringData;
    ::new (std::addressof(value_.stringData)) ::std::string(t);
    return value_.stringData;
  }

  ::std::string& set_stringData(::std::string&& t) {
    __clear();
    type_ = Type::stringData;
    ::new (std::addressof(value_.stringData)) ::std::string(std::move(t));
    return value_.stringData;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_stringData(T&&... t) {
    __clear();
    type_ = Type::stringData;
    ::new (std::addressof(value_.stringData)) ::std::string(std::forward<T>(t)...);
    return value_.stringData;
  }

  ::std::string const& get_binaryData() const {
    if (type_ != Type::binaryData) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.binaryData;
  }

  ::std::string const& get_stringData() const {
    if (type_ != Type::stringData) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.stringData;
  }

  ::std::string& mutable_binaryData() {
    assert(type_ == Type::binaryData);
    return value_.binaryData;
  }

  ::std::string& mutable_stringData() {
    assert(type_ == Type::stringData);
    return value_.stringData;
  }

  ::std::string move_binaryData() {
    assert(type_ == Type::binaryData);
    return std::move(value_.binaryData);
  }

  ::std::string move_stringData() {
    assert(type_ == Type::stringData);
    return std::move(value_.stringData);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> binaryData_ref() const& {
    return {value_.binaryData, type_, binaryData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> binaryData_ref() const&& {
    return {std::move(value_.binaryData), type_, binaryData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> binaryData_ref() & {
    return {value_.binaryData, type_, binaryData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> binaryData_ref() && {
    return {std::move(value_.binaryData), type_, binaryData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> stringData_ref() const& {
    return {value_.stringData, type_, stringData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> stringData_ref() const&& {
    return {std::move(value_.stringData), type_, stringData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> stringData_ref() & {
    return {value_.stringData, type_, stringData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> stringData_ref() && {
    return {std::move(value_.stringData), type_, stringData, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DataUnion>;
  friend void swap(DataUnion& a, DataUnion& b);
};

template <class Protocol_>
uint32_t DataUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class Val final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = Val;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  Val() :
      intVal(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  Val(apache::thrift::FragileConstructor, ::std::string strVal__arg, ::std::int32_t intVal__arg, ::cpp2::containerTypedef typedefValue__arg);

  Val(Val&&) noexcept;

  Val(const Val& src);


  Val& operator=(Val&&) noexcept;
  Val& operator=(const Val& src);
  void __clear();
 private:
  ::std::string strVal;
 private:
  ::std::int32_t intVal;
 private:
  ::cpp2::containerTypedef typedefValue;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool strVal;
    bool intVal;
    bool typedefValue;
  } __isset = {};

 public:

  bool operator==(const Val&) const;
  bool operator<(const Val&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> strVal_ref() const& {
    return {this->strVal, __isset.strVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> strVal_ref() const&& {
    return {std::move(this->strVal), __isset.strVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> strVal_ref() & {
    return {this->strVal, __isset.strVal};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> strVal_ref() && {
    return {std::move(this->strVal), __isset.strVal};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> intVal_ref() const& {
    return {this->intVal, __isset.intVal};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> intVal_ref() const&& {
    return {std::move(this->intVal), __isset.intVal};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> intVal_ref() & {
    return {this->intVal, __isset.intVal};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> intVal_ref() && {
    return {std::move(this->intVal), __isset.intVal};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> typedefValue_ref() const& {
    return {this->typedefValue, __isset.typedefValue};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> typedefValue_ref() const&& {
    return {std::move(this->typedefValue), __isset.typedefValue};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> typedefValue_ref() & {
    return {this->typedefValue, __isset.typedefValue};
  }

  template <typename..., typename T = ::cpp2::containerTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> typedefValue_ref() && {
    return {std::move(this->typedefValue), __isset.typedefValue};
  }

  const ::std::string& get_strVal() const& {
    return strVal;
  }

  ::std::string get_strVal() && {
    return std::move(strVal);
  }

  template <typename T_Val_strVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.strVal_ref() = BAR;` instead of `FOO.set_strVal(BAR);`")]]
  ::std::string& set_strVal(T_Val_strVal_struct_setter&& strVal_) {
    strVal = std::forward<T_Val_strVal_struct_setter>(strVal_);
    __isset.strVal = true;
    return strVal;
  }

  ::std::int32_t get_intVal() const {
    return intVal;
  }

  [[deprecated("Use `FOO.intVal_ref() = BAR;` instead of `FOO.set_intVal(BAR);`")]]
  ::std::int32_t& set_intVal(::std::int32_t intVal_) {
    intVal = intVal_;
    __isset.intVal = true;
    return intVal;
  }
  const ::cpp2::containerTypedef& get_typedefValue() const&;
  ::cpp2::containerTypedef get_typedefValue() &&;

  template <typename T_Val_typedefValue_struct_setter = ::cpp2::containerTypedef>
  [[deprecated("Use `FOO.typedefValue_ref() = BAR;` instead of `FOO.set_typedefValue(BAR);`")]]
  ::cpp2::containerTypedef& set_typedefValue(T_Val_typedefValue_struct_setter&& typedefValue_) {
    typedefValue = std::forward<T_Val_typedefValue_struct_setter>(typedefValue_);
    __isset.typedefValue = true;
    return typedefValue;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<Val>;
  friend void swap(Val& a, Val& b);
};

template <class Protocol_>
uint32_t Val::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ValUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ValUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    v1 = 1,
    v2 = 2,
  } ;

  ValUnion()
      : type_(Type::__EMPTY__) {}

  ValUnion(ValUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::v1:
      {
        set_v1(std::move(rhs.value_.v1));
        break;
      }
      case Type::v2:
      {
        set_v2(std::move(rhs.value_.v2));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  ValUnion(const ValUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::v1:
      {
        set_v1(rhs.value_.v1);
        break;
      }
      case Type::v2:
      {
        set_v2(rhs.value_.v2);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ValUnion& operator=(ValUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::v1:
      {
        set_v1(std::move(rhs.value_.v1));
        break;
      }
      case Type::v2:
      {
        set_v2(std::move(rhs.value_.v2));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  ValUnion& operator=(const ValUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::v1:
      {
        set_v1(rhs.value_.v1);
        break;
      }
      case Type::v2:
      {
        set_v2(rhs.value_.v2);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~ValUnion() {
    __clear();
  }
  union storage_type {
    ::cpp2::Val v1;
    ::cpp2::Val v2;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const ValUnion&) const;
  bool operator<(const ValUnion&) const;

  ::cpp2::Val& set_v1(::cpp2::Val const &t) {
    __clear();
    type_ = Type::v1;
    ::new (std::addressof(value_.v1)) ::cpp2::Val(t);
    return value_.v1;
  }

  ::cpp2::Val& set_v1(::cpp2::Val&& t) {
    __clear();
    type_ = Type::v1;
    ::new (std::addressof(value_.v1)) ::cpp2::Val(std::move(t));
    return value_.v1;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::Val, T...>> ::cpp2::Val& set_v1(T&&... t) {
    __clear();
    type_ = Type::v1;
    ::new (std::addressof(value_.v1)) ::cpp2::Val(std::forward<T>(t)...);
    return value_.v1;
  }

  ::cpp2::Val& set_v2(::cpp2::Val const &t) {
    __clear();
    type_ = Type::v2;
    ::new (std::addressof(value_.v2)) ::cpp2::Val(t);
    return value_.v2;
  }

  ::cpp2::Val& set_v2(::cpp2::Val&& t) {
    __clear();
    type_ = Type::v2;
    ::new (std::addressof(value_.v2)) ::cpp2::Val(std::move(t));
    return value_.v2;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::Val, T...>> ::cpp2::Val& set_v2(T&&... t) {
    __clear();
    type_ = Type::v2;
    ::new (std::addressof(value_.v2)) ::cpp2::Val(std::forward<T>(t)...);
    return value_.v2;
  }

  ::cpp2::Val const& get_v1() const {
    if (type_ != Type::v1) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.v1;
  }

  ::cpp2::Val const& get_v2() const {
    if (type_ != Type::v2) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.v2;
  }

  ::cpp2::Val& mutable_v1() {
    assert(type_ == Type::v1);
    return value_.v1;
  }

  ::cpp2::Val& mutable_v2() {
    assert(type_ == Type::v2);
    return value_.v2;
  }

  ::cpp2::Val move_v1() {
    assert(type_ == Type::v1);
    return std::move(value_.v1);
  }

  ::cpp2::Val move_v2() {
    assert(type_ == Type::v2);
    return std::move(value_.v2);
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> v1_ref() const& {
    return {value_.v1, type_, v1, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> v1_ref() const&& {
    return {std::move(value_.v1), type_, v1, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> v1_ref() & {
    return {value_.v1, type_, v1, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> v1_ref() && {
    return {std::move(value_.v1), type_, v1, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> v2_ref() const& {
    return {value_.v2, type_, v2, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> v2_ref() const&& {
    return {std::move(value_.v2), type_, v2, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> v2_ref() & {
    return {value_.v2, type_, v2, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::Val>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> v2_ref() && {
    return {std::move(value_.v2), type_, v2, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ValUnion>;
  friend void swap(ValUnion& a, ValUnion& b);
};

template <class Protocol_>
uint32_t ValUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class VirtualComplexUnion  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = VirtualComplexUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    thingOne = 1,
    thingTwo = 2,
  } ;

  VirtualComplexUnion()
      : type_(Type::__EMPTY__) {}

  VirtualComplexUnion(VirtualComplexUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::thingOne:
      {
        set_thingOne(std::move(rhs.value_.thingOne));
        break;
      }
      case Type::thingTwo:
      {
        set_thingTwo(std::move(rhs.value_.thingTwo));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  VirtualComplexUnion(const VirtualComplexUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::thingOne:
      {
        set_thingOne(rhs.value_.thingOne);
        break;
      }
      case Type::thingTwo:
      {
        set_thingTwo(rhs.value_.thingTwo);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  VirtualComplexUnion& operator=(VirtualComplexUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::thingOne:
      {
        set_thingOne(std::move(rhs.value_.thingOne));
        break;
      }
      case Type::thingTwo:
      {
        set_thingTwo(std::move(rhs.value_.thingTwo));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  VirtualComplexUnion& operator=(const VirtualComplexUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::thingOne:
      {
        set_thingOne(rhs.value_.thingOne);
        break;
      }
      case Type::thingTwo:
      {
        set_thingTwo(rhs.value_.thingTwo);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  virtual ~VirtualComplexUnion() {
    __clear();
  }

  union storage_type {
    ::std::string thingOne;
    ::std::string thingTwo;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const VirtualComplexUnion&) const;
  bool operator<(const VirtualComplexUnion&) const;

  ::std::string& set_thingOne(::std::string const &t) {
    __clear();
    type_ = Type::thingOne;
    ::new (std::addressof(value_.thingOne)) ::std::string(t);
    return value_.thingOne;
  }

  ::std::string& set_thingOne(::std::string&& t) {
    __clear();
    type_ = Type::thingOne;
    ::new (std::addressof(value_.thingOne)) ::std::string(std::move(t));
    return value_.thingOne;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_thingOne(T&&... t) {
    __clear();
    type_ = Type::thingOne;
    ::new (std::addressof(value_.thingOne)) ::std::string(std::forward<T>(t)...);
    return value_.thingOne;
  }

  ::std::string& set_thingTwo(::std::string const &t) {
    __clear();
    type_ = Type::thingTwo;
    ::new (std::addressof(value_.thingTwo)) ::std::string(t);
    return value_.thingTwo;
  }

  ::std::string& set_thingTwo(::std::string&& t) {
    __clear();
    type_ = Type::thingTwo;
    ::new (std::addressof(value_.thingTwo)) ::std::string(std::move(t));
    return value_.thingTwo;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::string, T...>> ::std::string& set_thingTwo(T&&... t) {
    __clear();
    type_ = Type::thingTwo;
    ::new (std::addressof(value_.thingTwo)) ::std::string(std::forward<T>(t)...);
    return value_.thingTwo;
  }

  ::std::string const& get_thingOne() const {
    if (type_ != Type::thingOne) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.thingOne;
  }

  ::std::string const& get_thingTwo() const {
    if (type_ != Type::thingTwo) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.thingTwo;
  }

  ::std::string& mutable_thingOne() {
    assert(type_ == Type::thingOne);
    return value_.thingOne;
  }

  ::std::string& mutable_thingTwo() {
    assert(type_ == Type::thingTwo);
    return value_.thingTwo;
  }

  ::std::string move_thingOne() {
    assert(type_ == Type::thingOne);
    return std::move(value_.thingOne);
  }

  ::std::string move_thingTwo() {
    assert(type_ == Type::thingTwo);
    return std::move(value_.thingTwo);
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> thingOne_ref() const& {
    return {value_.thingOne, type_, thingOne, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> thingOne_ref() const&& {
    return {std::move(value_.thingOne), type_, thingOne, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> thingOne_ref() & {
    return {value_.thingOne, type_, thingOne, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> thingOne_ref() && {
    return {std::move(value_.thingOne), type_, thingOne, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> thingTwo_ref() const& {
    return {value_.thingTwo, type_, thingTwo, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> thingTwo_ref() const&& {
    return {std::move(value_.thingTwo), type_, thingTwo, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> thingTwo_ref() & {
    return {value_.thingTwo, type_, thingTwo, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> thingTwo_ref() && {
    return {std::move(value_.thingTwo), type_, thingTwo, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<VirtualComplexUnion>;
  friend void swap(VirtualComplexUnion& a, VirtualComplexUnion& b);
};

template <class Protocol_>
uint32_t VirtualComplexUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NonCopyableStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NonCopyableStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  NonCopyableStruct() :
      num(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  NonCopyableStruct(apache::thrift::FragileConstructor, ::std::int64_t num__arg);

  NonCopyableStruct(NonCopyableStruct&&) = default;


  NonCopyableStruct& operator=(NonCopyableStruct&&) = default;
  void __clear();
 private:
  ::std::int64_t num;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool num;
  } __isset = {};

 public:

  bool operator==(const NonCopyableStruct&) const;
  bool operator<(const NonCopyableStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> num_ref() const& {
    return {this->num, __isset.num};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> num_ref() const&& {
    return {std::move(this->num), __isset.num};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> num_ref() & {
    return {this->num, __isset.num};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> num_ref() && {
    return {std::move(this->num), __isset.num};
  }

  ::std::int64_t get_num() const {
    return num;
  }

  [[deprecated("Use `FOO.num_ref() = BAR;` instead of `FOO.set_num(BAR);`")]]
  ::std::int64_t& set_num(::std::int64_t num_) {
    num = num_;
    __isset.num = true;
    return num;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NonCopyableStruct>;
  friend void swap(NonCopyableStruct& a, NonCopyableStruct& b);
};

template <class Protocol_>
uint32_t NonCopyableStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class NonCopyableUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = NonCopyableUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    s = 1,
  } ;

  NonCopyableUnion()
      : type_(Type::__EMPTY__) {}

  NonCopyableUnion(NonCopyableUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  NonCopyableUnion& operator=(NonCopyableUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::s:
      {
        set_s(std::move(rhs.value_.s));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }
  void __clear();

  ~NonCopyableUnion() {
    __clear();
  }
  union storage_type {
    ::cpp2::NonCopyableStruct s;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const NonCopyableUnion&) const;
  bool operator<(const NonCopyableUnion&) const;


  ::cpp2::NonCopyableStruct& set_s(::cpp2::NonCopyableStruct&& t) {
    __clear();
    type_ = Type::s;
    ::new (std::addressof(value_.s)) ::cpp2::NonCopyableStruct(std::move(t));
    return value_.s;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::NonCopyableStruct, T...>> ::cpp2::NonCopyableStruct& set_s(T&&... t) {
    __clear();
    type_ = Type::s;
    ::new (std::addressof(value_.s)) ::cpp2::NonCopyableStruct(std::forward<T>(t)...);
    return value_.s;
  }

  ::cpp2::NonCopyableStruct const& get_s() const {
    if (type_ != Type::s) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.s;
  }

  ::cpp2::NonCopyableStruct& mutable_s() {
    assert(type_ == Type::s);
    return value_.s;
  }

  ::cpp2::NonCopyableStruct move_s() {
    assert(type_ == Type::s);
    return std::move(value_.s);
  }

  template <typename..., typename T = ::cpp2::NonCopyableStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> s_ref() const& {
    return {value_.s, type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::NonCopyableStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> s_ref() const&& {
    return {std::move(value_.s), type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::NonCopyableStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> s_ref() & {
    return {value_.s, type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::NonCopyableStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> s_ref() && {
    return {std::move(value_.s), type_, s, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<NonCopyableUnion>;
  friend void swap(NonCopyableUnion& a, NonCopyableUnion& b);
};

template <class Protocol_>
uint32_t NonCopyableUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
THRIFT_IGNORE_ISSET_USE_WARNING_END

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::ComplexUnion::Type>;

template <> struct TEnumTraits<::cpp2::ComplexUnion::Type> {
  using type = ::cpp2::ComplexUnion::Type;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::ListUnion::Type>;

template <> struct TEnumTraits<::cpp2::ListUnion::Type> {
  using type = ::cpp2::ListUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::DataUnion::Type>;

template <> struct TEnumTraits<::cpp2::DataUnion::Type> {
  using type = ::cpp2::DataUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::ValUnion::Type>;

template <> struct TEnumTraits<::cpp2::ValUnion::Type> {
  using type = ::cpp2::ValUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::VirtualComplexUnion::Type>;

template <> struct TEnumTraits<::cpp2::VirtualComplexUnion::Type> {
  using type = ::cpp2::VirtualComplexUnion::Type;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::NonCopyableUnion::Type>;

template <> struct TEnumTraits<::cpp2::NonCopyableUnion::Type> {
  using type = ::cpp2::NonCopyableUnion::Type;

  static constexpr std::size_t const size = 1;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};
}} // apache::thrift
