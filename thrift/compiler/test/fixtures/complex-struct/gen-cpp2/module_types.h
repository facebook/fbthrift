/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct myLongField;
struct MyByteField;
struct myStringField;
struct myFloatField;
struct myLongField;
struct mapListOfFloats;
struct MyIntField;
struct MyStringField;
struct MyDataField;
struct myEnum;
struct MyBoolField;
struct MyByteField;
struct MyShortField;
struct MyLongField;
struct MyDoubleField;
struct lDouble;
struct lShort;
struct lInteger;
struct lLong;
struct lString;
struct lBool;
struct lByte;
struct mShortString;
struct mIntegerString;
struct mStringMyStruct;
struct mStringBool;
struct mIntegerInteger;
struct mIntegerBool;
struct sShort;
struct sMyStruct;
struct sLong;
struct sString;
struct sByte;
struct mListList;
struct age;
struct name;
struct setOfSetOfInt;
struct listofListOfListOfListOfEnum;
struct listOfListOfMyStruct;
struct setOfListOfListOfLong;
struct setOfSetOfsetOfLong;
struct mapStructListOfListOfLong;
struct mKeyStructValInt;
struct listOfMapKeyIntValInt;
struct listOfMapKeyStrValList;
struct mapKeySetValLong;
struct mapKeyListValLong;
struct mapKeyMapValMap;
struct mapKeySetValMap;
struct NestedMaps;
struct mapKeyIntValList;
struct mapKeyIntValSet;
struct mapKeySetValInt;
struct mapKeyListValSet;
struct myEnum;
struct myStruct;
struct myDataItem;
struct complexNestedStruct;
struct longValue;
struct intValue;
struct myLongDFset;
struct myLongDF;
struct portDFset;
struct portNum;
struct myBinaryDFset;
struct myBinary;
struct myByteDFSet;
struct myByte;
struct myDoubleDFset;
struct myDoubleDFZero;
struct myDouble;
struct field3;
struct myList;
struct mySet;
struct simpleStruct;
struct listStructDFset;
struct myUnion;
struct listUnionDFset;
struct mapNestlistStructDfSet;
struct mapJavaTypeDFset;
struct emptyMap;
struct enumMapDFset;
struct myLongField;
struct myLongTypeDef;
struct myStringField;
struct myStringTypedef;
struct myMapField;
struct myMapTypedef;
struct myListField;
struct myListTypedef;
struct myMapListOfTypeDef;
struct myEnum;
struct setFloat;
struct myDataItem;
struct complexNestedStruct;
struct lsMap;
struct ioMap;
struct BigInteger;
struct binaryTestBuffer;
struct message;
struct errorCode;
struct message;
struct errorCode;
struct message;
struct listStrings;
struct errorEnum;
struct unionError;
struct structError;
struct lsMap;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyByteField
#define APACHE_THRIFT_ACCESSOR_MyByteField
APACHE_THRIFT_DEFINE_ACCESSOR(MyByteField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringField
#define APACHE_THRIFT_ACCESSOR_myStringField
APACHE_THRIFT_DEFINE_ACCESSOR(myStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myFloatField
#define APACHE_THRIFT_ACCESSOR_myFloatField
APACHE_THRIFT_DEFINE_ACCESSOR(myFloatField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapListOfFloats
#define APACHE_THRIFT_ACCESSOR_mapListOfFloats
APACHE_THRIFT_DEFINE_ACCESSOR(mapListOfFloats);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDataField
#define APACHE_THRIFT_ACCESSOR_MyDataField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDataField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyBoolField
#define APACHE_THRIFT_ACCESSOR_MyBoolField
APACHE_THRIFT_DEFINE_ACCESSOR(MyBoolField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyByteField
#define APACHE_THRIFT_ACCESSOR_MyByteField
APACHE_THRIFT_DEFINE_ACCESSOR(MyByteField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyShortField
#define APACHE_THRIFT_ACCESSOR_MyShortField
APACHE_THRIFT_DEFINE_ACCESSOR(MyShortField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyLongField
#define APACHE_THRIFT_ACCESSOR_MyLongField
APACHE_THRIFT_DEFINE_ACCESSOR(MyLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDoubleField
#define APACHE_THRIFT_ACCESSOR_MyDoubleField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDoubleField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lDouble
#define APACHE_THRIFT_ACCESSOR_lDouble
APACHE_THRIFT_DEFINE_ACCESSOR(lDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lShort
#define APACHE_THRIFT_ACCESSOR_lShort
APACHE_THRIFT_DEFINE_ACCESSOR(lShort);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lInteger
#define APACHE_THRIFT_ACCESSOR_lInteger
APACHE_THRIFT_DEFINE_ACCESSOR(lInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lLong
#define APACHE_THRIFT_ACCESSOR_lLong
APACHE_THRIFT_DEFINE_ACCESSOR(lLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lString
#define APACHE_THRIFT_ACCESSOR_lString
APACHE_THRIFT_DEFINE_ACCESSOR(lString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lBool
#define APACHE_THRIFT_ACCESSOR_lBool
APACHE_THRIFT_DEFINE_ACCESSOR(lBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lByte
#define APACHE_THRIFT_ACCESSOR_lByte
APACHE_THRIFT_DEFINE_ACCESSOR(lByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mShortString
#define APACHE_THRIFT_ACCESSOR_mShortString
APACHE_THRIFT_DEFINE_ACCESSOR(mShortString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerString
#define APACHE_THRIFT_ACCESSOR_mIntegerString
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mStringMyStruct
#define APACHE_THRIFT_ACCESSOR_mStringMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(mStringMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mStringBool
#define APACHE_THRIFT_ACCESSOR_mStringBool
APACHE_THRIFT_DEFINE_ACCESSOR(mStringBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerInteger
#define APACHE_THRIFT_ACCESSOR_mIntegerInteger
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mIntegerBool
#define APACHE_THRIFT_ACCESSOR_mIntegerBool
APACHE_THRIFT_DEFINE_ACCESSOR(mIntegerBool);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sShort
#define APACHE_THRIFT_ACCESSOR_sShort
APACHE_THRIFT_DEFINE_ACCESSOR(sShort);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sMyStruct
#define APACHE_THRIFT_ACCESSOR_sMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(sMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sLong
#define APACHE_THRIFT_ACCESSOR_sLong
APACHE_THRIFT_DEFINE_ACCESSOR(sLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sString
#define APACHE_THRIFT_ACCESSOR_sString
APACHE_THRIFT_DEFINE_ACCESSOR(sString);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_sByte
#define APACHE_THRIFT_ACCESSOR_sByte
APACHE_THRIFT_DEFINE_ACCESSOR(sByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mListList
#define APACHE_THRIFT_ACCESSOR_mListList
APACHE_THRIFT_DEFINE_ACCESSOR(mListList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_age
#define APACHE_THRIFT_ACCESSOR_age
APACHE_THRIFT_DEFINE_ACCESSOR(age);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_name
#define APACHE_THRIFT_ACCESSOR_name
APACHE_THRIFT_DEFINE_ACCESSOR(name);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfSetOfInt
#define APACHE_THRIFT_ACCESSOR_setOfSetOfInt
APACHE_THRIFT_DEFINE_ACCESSOR(setOfSetOfInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listofListOfListOfListOfEnum
#define APACHE_THRIFT_ACCESSOR_listofListOfListOfListOfEnum
APACHE_THRIFT_DEFINE_ACCESSOR(listofListOfListOfListOfEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfListOfMyStruct
#define APACHE_THRIFT_ACCESSOR_listOfListOfMyStruct
APACHE_THRIFT_DEFINE_ACCESSOR(listOfListOfMyStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfListOfListOfLong
#define APACHE_THRIFT_ACCESSOR_setOfListOfListOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(setOfListOfListOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setOfSetOfsetOfLong
#define APACHE_THRIFT_ACCESSOR_setOfSetOfsetOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(setOfSetOfsetOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapStructListOfListOfLong
#define APACHE_THRIFT_ACCESSOR_mapStructListOfListOfLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapStructListOfListOfLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mKeyStructValInt
#define APACHE_THRIFT_ACCESSOR_mKeyStructValInt
APACHE_THRIFT_DEFINE_ACCESSOR(mKeyStructValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfMapKeyIntValInt
#define APACHE_THRIFT_ACCESSOR_listOfMapKeyIntValInt
APACHE_THRIFT_DEFINE_ACCESSOR(listOfMapKeyIntValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listOfMapKeyStrValList
#define APACHE_THRIFT_ACCESSOR_listOfMapKeyStrValList
APACHE_THRIFT_DEFINE_ACCESSOR(listOfMapKeyStrValList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValLong
#define APACHE_THRIFT_ACCESSOR_mapKeySetValLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyListValLong
#define APACHE_THRIFT_ACCESSOR_mapKeyListValLong
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyListValLong);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyMapValMap
#define APACHE_THRIFT_ACCESSOR_mapKeyMapValMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyMapValMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValMap
#define APACHE_THRIFT_ACCESSOR_mapKeySetValMap
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_NestedMaps
#define APACHE_THRIFT_ACCESSOR_NestedMaps
APACHE_THRIFT_DEFINE_ACCESSOR(NestedMaps);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyIntValList
#define APACHE_THRIFT_ACCESSOR_mapKeyIntValList
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyIntValList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyIntValSet
#define APACHE_THRIFT_ACCESSOR_mapKeyIntValSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyIntValSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeySetValInt
#define APACHE_THRIFT_ACCESSOR_mapKeySetValInt
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeySetValInt);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapKeyListValSet
#define APACHE_THRIFT_ACCESSOR_mapKeyListValSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapKeyListValSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_complexNestedStruct
#define APACHE_THRIFT_ACCESSOR_complexNestedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(complexNestedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_longValue
#define APACHE_THRIFT_ACCESSOR_longValue
APACHE_THRIFT_DEFINE_ACCESSOR(longValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_intValue
#define APACHE_THRIFT_ACCESSOR_intValue
APACHE_THRIFT_DEFINE_ACCESSOR(intValue);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongDFset
#define APACHE_THRIFT_ACCESSOR_myLongDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myLongDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongDF
#define APACHE_THRIFT_ACCESSOR_myLongDF
APACHE_THRIFT_DEFINE_ACCESSOR(myLongDF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_portDFset
#define APACHE_THRIFT_ACCESSOR_portDFset
APACHE_THRIFT_DEFINE_ACCESSOR(portDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_portNum
#define APACHE_THRIFT_ACCESSOR_portNum
APACHE_THRIFT_DEFINE_ACCESSOR(portNum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myBinaryDFset
#define APACHE_THRIFT_ACCESSOR_myBinaryDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myBinaryDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myBinary
#define APACHE_THRIFT_ACCESSOR_myBinary
APACHE_THRIFT_DEFINE_ACCESSOR(myBinary);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myByteDFSet
#define APACHE_THRIFT_ACCESSOR_myByteDFSet
APACHE_THRIFT_DEFINE_ACCESSOR(myByteDFSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myByte
#define APACHE_THRIFT_ACCESSOR_myByte
APACHE_THRIFT_DEFINE_ACCESSOR(myByte);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDoubleDFset
#define APACHE_THRIFT_ACCESSOR_myDoubleDFset
APACHE_THRIFT_DEFINE_ACCESSOR(myDoubleDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDoubleDFZero
#define APACHE_THRIFT_ACCESSOR_myDoubleDFZero
APACHE_THRIFT_DEFINE_ACCESSOR(myDoubleDFZero);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDouble
#define APACHE_THRIFT_ACCESSOR_myDouble
APACHE_THRIFT_DEFINE_ACCESSOR(myDouble);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_field3
#define APACHE_THRIFT_ACCESSOR_field3
APACHE_THRIFT_DEFINE_ACCESSOR(field3);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myList
#define APACHE_THRIFT_ACCESSOR_myList
APACHE_THRIFT_DEFINE_ACCESSOR(myList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mySet
#define APACHE_THRIFT_ACCESSOR_mySet
APACHE_THRIFT_DEFINE_ACCESSOR(mySet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_simpleStruct
#define APACHE_THRIFT_ACCESSOR_simpleStruct
APACHE_THRIFT_DEFINE_ACCESSOR(simpleStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listStructDFset
#define APACHE_THRIFT_ACCESSOR_listStructDFset
APACHE_THRIFT_DEFINE_ACCESSOR(listStructDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myUnion
#define APACHE_THRIFT_ACCESSOR_myUnion
APACHE_THRIFT_DEFINE_ACCESSOR(myUnion);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listUnionDFset
#define APACHE_THRIFT_ACCESSOR_listUnionDFset
APACHE_THRIFT_DEFINE_ACCESSOR(listUnionDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapNestlistStructDfSet
#define APACHE_THRIFT_ACCESSOR_mapNestlistStructDfSet
APACHE_THRIFT_DEFINE_ACCESSOR(mapNestlistStructDfSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_mapJavaTypeDFset
#define APACHE_THRIFT_ACCESSOR_mapJavaTypeDFset
APACHE_THRIFT_DEFINE_ACCESSOR(mapJavaTypeDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_emptyMap
#define APACHE_THRIFT_ACCESSOR_emptyMap
APACHE_THRIFT_DEFINE_ACCESSOR(emptyMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_enumMapDFset
#define APACHE_THRIFT_ACCESSOR_enumMapDFset
APACHE_THRIFT_DEFINE_ACCESSOR(enumMapDFset);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongField
#define APACHE_THRIFT_ACCESSOR_myLongField
APACHE_THRIFT_DEFINE_ACCESSOR(myLongField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myLongTypeDef
#define APACHE_THRIFT_ACCESSOR_myLongTypeDef
APACHE_THRIFT_DEFINE_ACCESSOR(myLongTypeDef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringField
#define APACHE_THRIFT_ACCESSOR_myStringField
APACHE_THRIFT_DEFINE_ACCESSOR(myStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStringTypedef
#define APACHE_THRIFT_ACCESSOR_myStringTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myStringTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapField
#define APACHE_THRIFT_ACCESSOR_myMapField
APACHE_THRIFT_DEFINE_ACCESSOR(myMapField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapTypedef
#define APACHE_THRIFT_ACCESSOR_myMapTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myMapTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myListField
#define APACHE_THRIFT_ACCESSOR_myListField
APACHE_THRIFT_DEFINE_ACCESSOR(myListField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myListTypedef
#define APACHE_THRIFT_ACCESSOR_myListTypedef
APACHE_THRIFT_DEFINE_ACCESSOR(myListTypedef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myMapListOfTypeDef
#define APACHE_THRIFT_ACCESSOR_myMapListOfTypeDef
APACHE_THRIFT_DEFINE_ACCESSOR(myMapListOfTypeDef);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_setFloat
#define APACHE_THRIFT_ACCESSOR_setFloat
APACHE_THRIFT_DEFINE_ACCESSOR(setFloat);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_complexNestedStruct
#define APACHE_THRIFT_ACCESSOR_complexNestedStruct
APACHE_THRIFT_DEFINE_ACCESSOR(complexNestedStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lsMap
#define APACHE_THRIFT_ACCESSOR_lsMap
APACHE_THRIFT_DEFINE_ACCESSOR(lsMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ioMap
#define APACHE_THRIFT_ACCESSOR_ioMap
APACHE_THRIFT_DEFINE_ACCESSOR(ioMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_BigInteger
#define APACHE_THRIFT_ACCESSOR_BigInteger
APACHE_THRIFT_DEFINE_ACCESSOR(BigInteger);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryTestBuffer
#define APACHE_THRIFT_ACCESSOR_binaryTestBuffer
APACHE_THRIFT_DEFINE_ACCESSOR(binaryTestBuffer);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCode
#define APACHE_THRIFT_ACCESSOR_errorCode
APACHE_THRIFT_DEFINE_ACCESSOR(errorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorCode
#define APACHE_THRIFT_ACCESSOR_errorCode
APACHE_THRIFT_DEFINE_ACCESSOR(errorCode);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_message
#define APACHE_THRIFT_ACCESSOR_message
APACHE_THRIFT_DEFINE_ACCESSOR(message);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_listStrings
#define APACHE_THRIFT_ACCESSOR_listStrings
APACHE_THRIFT_DEFINE_ACCESSOR(listStrings);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_errorEnum
#define APACHE_THRIFT_ACCESSOR_errorEnum
APACHE_THRIFT_DEFINE_ACCESSOR(errorEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_unionError
#define APACHE_THRIFT_ACCESSOR_unionError
APACHE_THRIFT_DEFINE_ACCESSOR(unionError);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structError
#define APACHE_THRIFT_ACCESSOR_structError
APACHE_THRIFT_DEFINE_ACCESSOR(structError);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_lsMap
#define APACHE_THRIFT_ACCESSOR_lsMap
APACHE_THRIFT_DEFINE_ACCESSOR(lsMap);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
  MyValue3 = 3,
  MyValue4 = 4,
  MyValue5 = 5,
};




} // cpp2

namespace std {
template<> struct hash<::cpp2::MyEnum> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::MyEnum>;

template <> struct TEnumTraits<::cpp2::MyEnum> {
  using type = ::cpp2::MyEnum;

  static constexpr std::size_t const size = 5;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue5; }
};


}} // apache::thrift

namespace cpp2 {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES;

} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyStructFloatFieldThrowExp;
class MyStructMapFloatThrowExp;
class MyDataItem;
class MyStruct;
class SimpleStruct;
class ComplexNestedStruct;
class MyUnion;
class defaultStruct;
class MyStructTypeDef;
class MyUnionFloatFieldThrowExp;
class TypeRemapped;
class emptyXcep;
class reqXcep;
class optXcep;
class complexException;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef ::std::string stringTypedef;
typedef ::std::int64_t longTypeDef;
typedef ::std::map<::std::int16_t, ::std::string> mapTypedef;
typedef ::std::vector<double> listTypedef;
typedef float floatTypedef;
typedef ::std::map<::std::int32_t, ::std::int64_t> FMap;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStructFloatFieldThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStructFloatFieldThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructFloatFieldThrowExp() :
      myLongField(0),
      MyByteField(0),
      myFloatField(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructFloatFieldThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::int8_t MyByteField__arg, ::std::string myStringField__arg, float myFloatField__arg);

  MyStructFloatFieldThrowExp(MyStructFloatFieldThrowExp&&) noexcept;

  MyStructFloatFieldThrowExp(const MyStructFloatFieldThrowExp& src);


  MyStructFloatFieldThrowExp& operator=(MyStructFloatFieldThrowExp&&) noexcept;
  MyStructFloatFieldThrowExp& operator=(const MyStructFloatFieldThrowExp& src);
  void __clear();
 private:
  ::std::int64_t myLongField;
 private:
  ::std::int8_t MyByteField;
 private:
  ::std::string myStringField;
 private:
  float myFloatField;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myLongField;
    bool MyByteField;
    bool myStringField;
    bool myFloatField;
  } __isset = {};

 public:

  bool operator==(const MyStructFloatFieldThrowExp&) const;
  bool operator<(const MyStructFloatFieldThrowExp&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongField_ref() const& {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongField_ref() const&& {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongField_ref() & {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongField_ref() && {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyByteField_ref() const& {
    return {this->MyByteField, __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyByteField_ref() const&& {
    return {std::move(this->MyByteField), __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyByteField_ref() & {
    return {this->MyByteField, __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyByteField_ref() && {
    return {std::move(this->MyByteField), __isset.MyByteField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myStringField_ref() const& {
    return {this->myStringField, __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myStringField_ref() const&& {
    return {std::move(this->myStringField), __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myStringField_ref() & {
    return {this->myStringField, __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myStringField_ref() && {
    return {std::move(this->myStringField), __isset.myStringField};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myFloatField_ref() const& {
    return {this->myFloatField, __isset.myFloatField};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myFloatField_ref() const&& {
    return {std::move(this->myFloatField), __isset.myFloatField};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myFloatField_ref() & {
    return {this->myFloatField, __isset.myFloatField};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myFloatField_ref() && {
    return {std::move(this->myFloatField), __isset.myFloatField};
  }

  ::std::int64_t get_myLongField() const {
    return myLongField;
  }

  [[deprecated("Use `FOO.myLongField_ref() = BAR;` instead of `FOO.set_myLongField(BAR);`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_) {
    myLongField = myLongField_;
    __isset.myLongField = true;
    return myLongField;
  }

  ::std::int8_t get_MyByteField() const {
    return MyByteField;
  }

  [[deprecated("Use `FOO.MyByteField_ref() = BAR;` instead of `FOO.set_MyByteField(BAR);`")]]
  ::std::int8_t& set_MyByteField(::std::int8_t MyByteField_) {
    MyByteField = MyByteField_;
    __isset.MyByteField = true;
    return MyByteField;
  }

  const ::std::string& get_myStringField() const& {
    return myStringField;
  }

  ::std::string get_myStringField() && {
    return std::move(myStringField);
  }

  template <typename T_MyStructFloatFieldThrowExp_myStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myStringField_ref() = BAR;` instead of `FOO.set_myStringField(BAR);`")]]
  ::std::string& set_myStringField(T_MyStructFloatFieldThrowExp_myStringField_struct_setter&& myStringField_) {
    myStringField = std::forward<T_MyStructFloatFieldThrowExp_myStringField_struct_setter>(myStringField_);
    __isset.myStringField = true;
    return myStringField;
  }

  float get_myFloatField() const {
    return myFloatField;
  }

  [[deprecated("Use `FOO.myFloatField_ref() = BAR;` instead of `FOO.set_myFloatField(BAR);`")]]
  float& set_myFloatField(float myFloatField_) {
    myFloatField = myFloatField_;
    __isset.myFloatField = true;
    return myFloatField;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructFloatFieldThrowExp>;
  friend void swap(MyStructFloatFieldThrowExp& a, MyStructFloatFieldThrowExp& b);
};

template <class Protocol_>
uint32_t MyStructFloatFieldThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStructMapFloatThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStructMapFloatThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructMapFloatThrowExp() :
      myLongField(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructMapFloatThrowExp(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> mapListOfFloats__arg);

  MyStructMapFloatThrowExp(MyStructMapFloatThrowExp&&) noexcept;

  MyStructMapFloatThrowExp(const MyStructMapFloatThrowExp& src);


  MyStructMapFloatThrowExp& operator=(MyStructMapFloatThrowExp&&) noexcept;
  MyStructMapFloatThrowExp& operator=(const MyStructMapFloatThrowExp& src);
  void __clear();
 private:
  ::std::int64_t myLongField;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> mapListOfFloats;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myLongField;
    bool mapListOfFloats;
  } __isset = {};

 public:

  bool operator==(const MyStructMapFloatThrowExp&) const;
  bool operator<(const MyStructMapFloatThrowExp&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongField_ref() const& {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongField_ref() const&& {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongField_ref() & {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongField_ref() && {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapListOfFloats_ref() const& {
    return {this->mapListOfFloats, __isset.mapListOfFloats};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapListOfFloats_ref() const&& {
    return {std::move(this->mapListOfFloats), __isset.mapListOfFloats};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapListOfFloats_ref() & {
    return {this->mapListOfFloats, __isset.mapListOfFloats};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapListOfFloats_ref() && {
    return {std::move(this->mapListOfFloats), __isset.mapListOfFloats};
  }

  ::std::int64_t get_myLongField() const {
    return myLongField;
  }

  [[deprecated("Use `FOO.myLongField_ref() = BAR;` instead of `FOO.set_myLongField(BAR);`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_) {
    myLongField = myLongField_;
    __isset.myLongField = true;
    return myLongField;
  }
  const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& get_mapListOfFloats() const&;
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>> get_mapListOfFloats() &&;

  template <typename T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>>
  [[deprecated("Use `FOO.mapListOfFloats_ref() = BAR;` instead of `FOO.set_mapListOfFloats(BAR);`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::floatTypedef>>>& set_mapListOfFloats(T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter&& mapListOfFloats_) {
    mapListOfFloats = std::forward<T_MyStructMapFloatThrowExp_mapListOfFloats_struct_setter>(mapListOfFloats_);
    __isset.mapListOfFloats = true;
    return mapListOfFloats;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructMapFloatThrowExp>;
  friend void swap(MyStructMapFloatThrowExp& a, MyStructMapFloatThrowExp& b);
};

template <class Protocol_>
uint32_t MyStructMapFloatThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;
  void __clear();

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
uint32_t MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::cpp2::MyDataItem MyDataField__arg, ::cpp2::MyEnum myEnum__arg, bool MyBoolField__arg, ::std::int8_t MyByteField__arg, ::std::int16_t MyShortField__arg, ::std::int64_t MyLongField__arg, double MyDoubleField__arg, ::std::vector<double> lDouble__arg, ::std::vector<::std::int16_t> lShort__arg, ::std::vector<::std::int32_t> lInteger__arg, ::std::vector<::std::int64_t> lLong__arg, ::std::vector<::std::string> lString__arg, ::std::vector<bool> lBool__arg, ::std::vector<::std::int8_t> lByte__arg, ::std::map<::std::int16_t, ::std::string> mShortString__arg, ::std::map<::std::int32_t, ::std::string> mIntegerString__arg, ::std::map<::std::string, ::cpp2::MyStruct> mStringMyStruct__arg, ::std::map<::std::string, bool> mStringBool__arg, ::std::map<::std::int32_t, ::std::int32_t> mIntegerInteger__arg, ::std::map<::std::int32_t, bool> mIntegerBool__arg, ::std::set<::std::int16_t> sShort__arg, ::std::set<::cpp2::MyStruct> sMyStruct__arg, ::std::set<::std::int64_t> sLong__arg, ::std::set<::std::string> sString__arg, ::std::set<::std::int8_t> sByte__arg, ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> mListList__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);
  void __clear();

  ~MyStruct();

 private:
  ::std::int64_t MyIntField;
 private:
  ::std::string MyStringField;
 private:
  ::cpp2::MyDataItem MyDataField;
 private:
  ::cpp2::MyEnum myEnum;
 private:
  bool MyBoolField;
 private:
  ::std::int8_t MyByteField;
 private:
  ::std::int16_t MyShortField;
 private:
  ::std::int64_t MyLongField;
 private:
  double MyDoubleField;
 private:
  ::std::vector<double> lDouble;
 private:
  ::std::vector<::std::int16_t> lShort;
 private:
  ::std::vector<::std::int32_t> lInteger;
 private:
  ::std::vector<::std::int64_t> lLong;
 private:
  ::std::vector<::std::string> lString;
 private:
  ::std::vector<bool> lBool;
 private:
  ::std::vector<::std::int8_t> lByte;
 private:
  ::std::map<::std::int16_t, ::std::string> mShortString;
 private:
  ::std::map<::std::int32_t, ::std::string> mIntegerString;
 private:
  ::std::map<::std::string, ::cpp2::MyStruct> mStringMyStruct;
 private:
  ::std::map<::std::string, bool> mStringBool;
 private:
  ::std::map<::std::int32_t, ::std::int32_t> mIntegerInteger;
 private:
  ::std::map<::std::int32_t, bool> mIntegerBool;
 private:
  ::std::set<::std::int16_t> sShort;
 private:
  ::std::set<::cpp2::MyStruct> sMyStruct;
 private:
  ::std::set<::std::int64_t> sLong;
 private:
  ::std::set<::std::string> sString;
 private:
  ::std::set<::std::int8_t> sByte;
 private:
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> mListList;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool MyIntField;
    bool MyStringField;
    bool MyDataField;
    bool myEnum;
    bool MyBoolField;
    bool MyByteField;
    bool MyShortField;
    bool MyLongField;
    bool MyDoubleField;
    bool lDouble;
    bool lShort;
    bool lInteger;
    bool lLong;
    bool lString;
    bool lBool;
    bool lByte;
    bool mShortString;
    bool mIntegerString;
    bool mStringMyStruct;
    bool mStringBool;
    bool mIntegerInteger;
    bool mIntegerBool;
    bool sShort;
    bool sMyStruct;
    bool sLong;
    bool sString;
    bool sByte;
    bool mListList;
  } __isset = {};

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->MyIntField, __isset.MyIntField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {std::move(this->MyIntField), __isset.MyIntField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField_ref() const& {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField_ref() const&& {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField_ref() & {
    return {this->MyStringField, __isset.MyStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField_ref() && {
    return {std::move(this->MyStringField), __isset.MyStringField};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDataField_ref() const& {
    return {this->MyDataField, __isset.MyDataField};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDataField_ref() const&& {
    return {std::move(this->MyDataField), __isset.MyDataField};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDataField_ref() & {
    return {this->MyDataField, __isset.MyDataField};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDataField_ref() && {
    return {std::move(this->MyDataField), __isset.MyDataField};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnum_ref() const& {
    return {this->myEnum, __isset.myEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(this->myEnum), __isset.myEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnum_ref() & {
    return {this->myEnum, __isset.myEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnum_ref() && {
    return {std::move(this->myEnum), __isset.myEnum};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyBoolField_ref() const& {
    return {this->MyBoolField, __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyBoolField_ref() const&& {
    return {std::move(this->MyBoolField), __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyBoolField_ref() & {
    return {this->MyBoolField, __isset.MyBoolField};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyBoolField_ref() && {
    return {std::move(this->MyBoolField), __isset.MyBoolField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyByteField_ref() const& {
    return {this->MyByteField, __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyByteField_ref() const&& {
    return {std::move(this->MyByteField), __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyByteField_ref() & {
    return {this->MyByteField, __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyByteField_ref() && {
    return {std::move(this->MyByteField), __isset.MyByteField};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyShortField_ref() const& {
    return {this->MyShortField, __isset.MyShortField};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyShortField_ref() const&& {
    return {std::move(this->MyShortField), __isset.MyShortField};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyShortField_ref() & {
    return {this->MyShortField, __isset.MyShortField};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyShortField_ref() && {
    return {std::move(this->MyShortField), __isset.MyShortField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyLongField_ref() const& {
    return {this->MyLongField, __isset.MyLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyLongField_ref() const&& {
    return {std::move(this->MyLongField), __isset.MyLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyLongField_ref() & {
    return {this->MyLongField, __isset.MyLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyLongField_ref() && {
    return {std::move(this->MyLongField), __isset.MyLongField};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDoubleField_ref() const& {
    return {this->MyDoubleField, __isset.MyDoubleField};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDoubleField_ref() const&& {
    return {std::move(this->MyDoubleField), __isset.MyDoubleField};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDoubleField_ref() & {
    return {this->MyDoubleField, __isset.MyDoubleField};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDoubleField_ref() && {
    return {std::move(this->MyDoubleField), __isset.MyDoubleField};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lDouble_ref() const& {
    return {this->lDouble, __isset.lDouble};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lDouble_ref() const&& {
    return {std::move(this->lDouble), __isset.lDouble};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lDouble_ref() & {
    return {this->lDouble, __isset.lDouble};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lDouble_ref() && {
    return {std::move(this->lDouble), __isset.lDouble};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lShort_ref() const& {
    return {this->lShort, __isset.lShort};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lShort_ref() const&& {
    return {std::move(this->lShort), __isset.lShort};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lShort_ref() & {
    return {this->lShort, __isset.lShort};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lShort_ref() && {
    return {std::move(this->lShort), __isset.lShort};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lInteger_ref() const& {
    return {this->lInteger, __isset.lInteger};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lInteger_ref() const&& {
    return {std::move(this->lInteger), __isset.lInteger};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lInteger_ref() & {
    return {this->lInteger, __isset.lInteger};
  }

  template <typename..., typename T = ::std::vector<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lInteger_ref() && {
    return {std::move(this->lInteger), __isset.lInteger};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lLong_ref() const& {
    return {this->lLong, __isset.lLong};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lLong_ref() const&& {
    return {std::move(this->lLong), __isset.lLong};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lLong_ref() & {
    return {this->lLong, __isset.lLong};
  }

  template <typename..., typename T = ::std::vector<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lLong_ref() && {
    return {std::move(this->lLong), __isset.lLong};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lString_ref() const& {
    return {this->lString, __isset.lString};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lString_ref() const&& {
    return {std::move(this->lString), __isset.lString};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lString_ref() & {
    return {this->lString, __isset.lString};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lString_ref() && {
    return {std::move(this->lString), __isset.lString};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lBool_ref() const& {
    return {this->lBool, __isset.lBool};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lBool_ref() const&& {
    return {std::move(this->lBool), __isset.lBool};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lBool_ref() & {
    return {this->lBool, __isset.lBool};
  }

  template <typename..., typename T = ::std::vector<bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lBool_ref() && {
    return {std::move(this->lBool), __isset.lBool};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lByte_ref() const& {
    return {this->lByte, __isset.lByte};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lByte_ref() const&& {
    return {std::move(this->lByte), __isset.lByte};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lByte_ref() & {
    return {this->lByte, __isset.lByte};
  }

  template <typename..., typename T = ::std::vector<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lByte_ref() && {
    return {std::move(this->lByte), __isset.lByte};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mShortString_ref() const& {
    return {this->mShortString, __isset.mShortString};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mShortString_ref() const&& {
    return {std::move(this->mShortString), __isset.mShortString};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mShortString_ref() & {
    return {this->mShortString, __isset.mShortString};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mShortString_ref() && {
    return {std::move(this->mShortString), __isset.mShortString};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mIntegerString_ref() const& {
    return {this->mIntegerString, __isset.mIntegerString};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mIntegerString_ref() const&& {
    return {std::move(this->mIntegerString), __isset.mIntegerString};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mIntegerString_ref() & {
    return {this->mIntegerString, __isset.mIntegerString};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mIntegerString_ref() && {
    return {std::move(this->mIntegerString), __isset.mIntegerString};
  }

  template <typename..., typename T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mStringMyStruct_ref() const& {
    return {this->mStringMyStruct, __isset.mStringMyStruct};
  }

  template <typename..., typename T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mStringMyStruct_ref() const&& {
    return {std::move(this->mStringMyStruct), __isset.mStringMyStruct};
  }

  template <typename..., typename T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mStringMyStruct_ref() & {
    return {this->mStringMyStruct, __isset.mStringMyStruct};
  }

  template <typename..., typename T = ::std::map<::std::string, ::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mStringMyStruct_ref() && {
    return {std::move(this->mStringMyStruct), __isset.mStringMyStruct};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mStringBool_ref() const& {
    return {this->mStringBool, __isset.mStringBool};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mStringBool_ref() const&& {
    return {std::move(this->mStringBool), __isset.mStringBool};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mStringBool_ref() & {
    return {this->mStringBool, __isset.mStringBool};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mStringBool_ref() && {
    return {std::move(this->mStringBool), __isset.mStringBool};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mIntegerInteger_ref() const& {
    return {this->mIntegerInteger, __isset.mIntegerInteger};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mIntegerInteger_ref() const&& {
    return {std::move(this->mIntegerInteger), __isset.mIntegerInteger};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mIntegerInteger_ref() & {
    return {this->mIntegerInteger, __isset.mIntegerInteger};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mIntegerInteger_ref() && {
    return {std::move(this->mIntegerInteger), __isset.mIntegerInteger};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mIntegerBool_ref() const& {
    return {this->mIntegerBool, __isset.mIntegerBool};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mIntegerBool_ref() const&& {
    return {std::move(this->mIntegerBool), __isset.mIntegerBool};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mIntegerBool_ref() & {
    return {this->mIntegerBool, __isset.mIntegerBool};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mIntegerBool_ref() && {
    return {std::move(this->mIntegerBool), __isset.mIntegerBool};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sShort_ref() const& {
    return {this->sShort, __isset.sShort};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sShort_ref() const&& {
    return {std::move(this->sShort), __isset.sShort};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sShort_ref() & {
    return {this->sShort, __isset.sShort};
  }

  template <typename..., typename T = ::std::set<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sShort_ref() && {
    return {std::move(this->sShort), __isset.sShort};
  }

  template <typename..., typename T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sMyStruct_ref() const& {
    return {this->sMyStruct, __isset.sMyStruct};
  }

  template <typename..., typename T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sMyStruct_ref() const&& {
    return {std::move(this->sMyStruct), __isset.sMyStruct};
  }

  template <typename..., typename T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sMyStruct_ref() & {
    return {this->sMyStruct, __isset.sMyStruct};
  }

  template <typename..., typename T = ::std::set<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sMyStruct_ref() && {
    return {std::move(this->sMyStruct), __isset.sMyStruct};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sLong_ref() const& {
    return {this->sLong, __isset.sLong};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sLong_ref() const&& {
    return {std::move(this->sLong), __isset.sLong};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sLong_ref() & {
    return {this->sLong, __isset.sLong};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sLong_ref() && {
    return {std::move(this->sLong), __isset.sLong};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sString_ref() const& {
    return {this->sString, __isset.sString};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sString_ref() const&& {
    return {std::move(this->sString), __isset.sString};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sString_ref() & {
    return {this->sString, __isset.sString};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sString_ref() && {
    return {std::move(this->sString), __isset.sString};
  }

  template <typename..., typename T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> sByte_ref() const& {
    return {this->sByte, __isset.sByte};
  }

  template <typename..., typename T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> sByte_ref() const&& {
    return {std::move(this->sByte), __isset.sByte};
  }

  template <typename..., typename T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> sByte_ref() & {
    return {this->sByte, __isset.sByte};
  }

  template <typename..., typename T = ::std::set<::std::int8_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> sByte_ref() && {
    return {std::move(this->sByte), __isset.sByte};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mListList_ref() const& {
    return {this->mListList, __isset.mListList};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mListList_ref() const&& {
    return {std::move(this->mListList), __isset.mListList};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mListList_ref() & {
    return {this->mListList, __isset.mListList};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mListList_ref() && {
    return {std::move(this->mListList), __isset.mListList};
  }

  ::std::int64_t get_MyIntField() const {
    return MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField = MyIntField_;
    __isset.MyIntField = true;
    return MyIntField;
  }

  const ::std::string& get_MyStringField() const& {
    return MyStringField;
  }

  ::std::string get_MyStringField() && {
    return std::move(MyStringField);
  }

  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField_ref() = BAR;` instead of `FOO.set_MyStringField(BAR);`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    __isset.MyStringField = true;
    return MyStringField;
  }
  const ::cpp2::MyDataItem& get_MyDataField() const&;
  ::cpp2::MyDataItem get_MyDataField() &&;

  template <typename T_MyStruct_MyDataField_struct_setter = ::cpp2::MyDataItem>
  [[deprecated("Use `FOO.MyDataField_ref() = BAR;` instead of `FOO.set_MyDataField(BAR);`")]]
  ::cpp2::MyDataItem& set_MyDataField(T_MyStruct_MyDataField_struct_setter&& MyDataField_) {
    MyDataField = std::forward<T_MyStruct_MyDataField_struct_setter>(MyDataField_);
    __isset.MyDataField = true;
    return MyDataField;
  }

  ::cpp2::MyEnum get_myEnum() const {
    return myEnum;
  }

  [[deprecated("Use `FOO.myEnum_ref() = BAR;` instead of `FOO.set_myEnum(BAR);`")]]
  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum myEnum_) {
    myEnum = myEnum_;
    __isset.myEnum = true;
    return myEnum;
  }

  bool get_MyBoolField() const {
    return MyBoolField;
  }

  [[deprecated("Use `FOO.MyBoolField_ref() = BAR;` instead of `FOO.set_MyBoolField(BAR);`")]]
  bool& set_MyBoolField(bool MyBoolField_) {
    MyBoolField = MyBoolField_;
    __isset.MyBoolField = true;
    return MyBoolField;
  }

  ::std::int8_t get_MyByteField() const {
    return MyByteField;
  }

  [[deprecated("Use `FOO.MyByteField_ref() = BAR;` instead of `FOO.set_MyByteField(BAR);`")]]
  ::std::int8_t& set_MyByteField(::std::int8_t MyByteField_) {
    MyByteField = MyByteField_;
    __isset.MyByteField = true;
    return MyByteField;
  }

  ::std::int16_t get_MyShortField() const {
    return MyShortField;
  }

  [[deprecated("Use `FOO.MyShortField_ref() = BAR;` instead of `FOO.set_MyShortField(BAR);`")]]
  ::std::int16_t& set_MyShortField(::std::int16_t MyShortField_) {
    MyShortField = MyShortField_;
    __isset.MyShortField = true;
    return MyShortField;
  }

  ::std::int64_t get_MyLongField() const {
    return MyLongField;
  }

  [[deprecated("Use `FOO.MyLongField_ref() = BAR;` instead of `FOO.set_MyLongField(BAR);`")]]
  ::std::int64_t& set_MyLongField(::std::int64_t MyLongField_) {
    MyLongField = MyLongField_;
    __isset.MyLongField = true;
    return MyLongField;
  }

  double get_MyDoubleField() const {
    return MyDoubleField;
  }

  [[deprecated("Use `FOO.MyDoubleField_ref() = BAR;` instead of `FOO.set_MyDoubleField(BAR);`")]]
  double& set_MyDoubleField(double MyDoubleField_) {
    MyDoubleField = MyDoubleField_;
    __isset.MyDoubleField = true;
    return MyDoubleField;
  }
  const ::std::vector<double>& get_lDouble() const&;
  ::std::vector<double> get_lDouble() &&;

  template <typename T_MyStruct_lDouble_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.lDouble_ref() = BAR;` instead of `FOO.set_lDouble(BAR);`")]]
  ::std::vector<double>& set_lDouble(T_MyStruct_lDouble_struct_setter&& lDouble_) {
    lDouble = std::forward<T_MyStruct_lDouble_struct_setter>(lDouble_);
    __isset.lDouble = true;
    return lDouble;
  }
  const ::std::vector<::std::int16_t>& get_lShort() const&;
  ::std::vector<::std::int16_t> get_lShort() &&;

  template <typename T_MyStruct_lShort_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.lShort_ref() = BAR;` instead of `FOO.set_lShort(BAR);`")]]
  ::std::vector<::std::int16_t>& set_lShort(T_MyStruct_lShort_struct_setter&& lShort_) {
    lShort = std::forward<T_MyStruct_lShort_struct_setter>(lShort_);
    __isset.lShort = true;
    return lShort;
  }
  const ::std::vector<::std::int32_t>& get_lInteger() const&;
  ::std::vector<::std::int32_t> get_lInteger() &&;

  template <typename T_MyStruct_lInteger_struct_setter = ::std::vector<::std::int32_t>>
  [[deprecated("Use `FOO.lInteger_ref() = BAR;` instead of `FOO.set_lInteger(BAR);`")]]
  ::std::vector<::std::int32_t>& set_lInteger(T_MyStruct_lInteger_struct_setter&& lInteger_) {
    lInteger = std::forward<T_MyStruct_lInteger_struct_setter>(lInteger_);
    __isset.lInteger = true;
    return lInteger;
  }
  const ::std::vector<::std::int64_t>& get_lLong() const&;
  ::std::vector<::std::int64_t> get_lLong() &&;

  template <typename T_MyStruct_lLong_struct_setter = ::std::vector<::std::int64_t>>
  [[deprecated("Use `FOO.lLong_ref() = BAR;` instead of `FOO.set_lLong(BAR);`")]]
  ::std::vector<::std::int64_t>& set_lLong(T_MyStruct_lLong_struct_setter&& lLong_) {
    lLong = std::forward<T_MyStruct_lLong_struct_setter>(lLong_);
    __isset.lLong = true;
    return lLong;
  }
  const ::std::vector<::std::string>& get_lString() const&;
  ::std::vector<::std::string> get_lString() &&;

  template <typename T_MyStruct_lString_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.lString_ref() = BAR;` instead of `FOO.set_lString(BAR);`")]]
  ::std::vector<::std::string>& set_lString(T_MyStruct_lString_struct_setter&& lString_) {
    lString = std::forward<T_MyStruct_lString_struct_setter>(lString_);
    __isset.lString = true;
    return lString;
  }
  const ::std::vector<bool>& get_lBool() const&;
  ::std::vector<bool> get_lBool() &&;

  template <typename T_MyStruct_lBool_struct_setter = ::std::vector<bool>>
  [[deprecated("Use `FOO.lBool_ref() = BAR;` instead of `FOO.set_lBool(BAR);`")]]
  ::std::vector<bool>& set_lBool(T_MyStruct_lBool_struct_setter&& lBool_) {
    lBool = std::forward<T_MyStruct_lBool_struct_setter>(lBool_);
    __isset.lBool = true;
    return lBool;
  }
  const ::std::vector<::std::int8_t>& get_lByte() const&;
  ::std::vector<::std::int8_t> get_lByte() &&;

  template <typename T_MyStruct_lByte_struct_setter = ::std::vector<::std::int8_t>>
  [[deprecated("Use `FOO.lByte_ref() = BAR;` instead of `FOO.set_lByte(BAR);`")]]
  ::std::vector<::std::int8_t>& set_lByte(T_MyStruct_lByte_struct_setter&& lByte_) {
    lByte = std::forward<T_MyStruct_lByte_struct_setter>(lByte_);
    __isset.lByte = true;
    return lByte;
  }
  const ::std::map<::std::int16_t, ::std::string>& get_mShortString() const&;
  ::std::map<::std::int16_t, ::std::string> get_mShortString() &&;

  template <typename T_MyStruct_mShortString_struct_setter = ::std::map<::std::int16_t, ::std::string>>
  [[deprecated("Use `FOO.mShortString_ref() = BAR;` instead of `FOO.set_mShortString(BAR);`")]]
  ::std::map<::std::int16_t, ::std::string>& set_mShortString(T_MyStruct_mShortString_struct_setter&& mShortString_) {
    mShortString = std::forward<T_MyStruct_mShortString_struct_setter>(mShortString_);
    __isset.mShortString = true;
    return mShortString;
  }
  const ::std::map<::std::int32_t, ::std::string>& get_mIntegerString() const&;
  ::std::map<::std::int32_t, ::std::string> get_mIntegerString() &&;

  template <typename T_MyStruct_mIntegerString_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.mIntegerString_ref() = BAR;` instead of `FOO.set_mIntegerString(BAR);`")]]
  ::std::map<::std::int32_t, ::std::string>& set_mIntegerString(T_MyStruct_mIntegerString_struct_setter&& mIntegerString_) {
    mIntegerString = std::forward<T_MyStruct_mIntegerString_struct_setter>(mIntegerString_);
    __isset.mIntegerString = true;
    return mIntegerString;
  }
  const ::std::map<::std::string, ::cpp2::MyStruct>& get_mStringMyStruct() const&;
  ::std::map<::std::string, ::cpp2::MyStruct> get_mStringMyStruct() &&;

  template <typename T_MyStruct_mStringMyStruct_struct_setter = ::std::map<::std::string, ::cpp2::MyStruct>>
  [[deprecated("Use `FOO.mStringMyStruct_ref() = BAR;` instead of `FOO.set_mStringMyStruct(BAR);`")]]
  ::std::map<::std::string, ::cpp2::MyStruct>& set_mStringMyStruct(T_MyStruct_mStringMyStruct_struct_setter&& mStringMyStruct_) {
    mStringMyStruct = std::forward<T_MyStruct_mStringMyStruct_struct_setter>(mStringMyStruct_);
    __isset.mStringMyStruct = true;
    return mStringMyStruct;
  }
  const ::std::map<::std::string, bool>& get_mStringBool() const&;
  ::std::map<::std::string, bool> get_mStringBool() &&;

  template <typename T_MyStruct_mStringBool_struct_setter = ::std::map<::std::string, bool>>
  [[deprecated("Use `FOO.mStringBool_ref() = BAR;` instead of `FOO.set_mStringBool(BAR);`")]]
  ::std::map<::std::string, bool>& set_mStringBool(T_MyStruct_mStringBool_struct_setter&& mStringBool_) {
    mStringBool = std::forward<T_MyStruct_mStringBool_struct_setter>(mStringBool_);
    __isset.mStringBool = true;
    return mStringBool;
  }
  const ::std::map<::std::int32_t, ::std::int32_t>& get_mIntegerInteger() const&;
  ::std::map<::std::int32_t, ::std::int32_t> get_mIntegerInteger() &&;

  template <typename T_MyStruct_mIntegerInteger_struct_setter = ::std::map<::std::int32_t, ::std::int32_t>>
  [[deprecated("Use `FOO.mIntegerInteger_ref() = BAR;` instead of `FOO.set_mIntegerInteger(BAR);`")]]
  ::std::map<::std::int32_t, ::std::int32_t>& set_mIntegerInteger(T_MyStruct_mIntegerInteger_struct_setter&& mIntegerInteger_) {
    mIntegerInteger = std::forward<T_MyStruct_mIntegerInteger_struct_setter>(mIntegerInteger_);
    __isset.mIntegerInteger = true;
    return mIntegerInteger;
  }
  const ::std::map<::std::int32_t, bool>& get_mIntegerBool() const&;
  ::std::map<::std::int32_t, bool> get_mIntegerBool() &&;

  template <typename T_MyStruct_mIntegerBool_struct_setter = ::std::map<::std::int32_t, bool>>
  [[deprecated("Use `FOO.mIntegerBool_ref() = BAR;` instead of `FOO.set_mIntegerBool(BAR);`")]]
  ::std::map<::std::int32_t, bool>& set_mIntegerBool(T_MyStruct_mIntegerBool_struct_setter&& mIntegerBool_) {
    mIntegerBool = std::forward<T_MyStruct_mIntegerBool_struct_setter>(mIntegerBool_);
    __isset.mIntegerBool = true;
    return mIntegerBool;
  }
  const ::std::set<::std::int16_t>& get_sShort() const&;
  ::std::set<::std::int16_t> get_sShort() &&;

  template <typename T_MyStruct_sShort_struct_setter = ::std::set<::std::int16_t>>
  [[deprecated("Use `FOO.sShort_ref() = BAR;` instead of `FOO.set_sShort(BAR);`")]]
  ::std::set<::std::int16_t>& set_sShort(T_MyStruct_sShort_struct_setter&& sShort_) {
    sShort = std::forward<T_MyStruct_sShort_struct_setter>(sShort_);
    __isset.sShort = true;
    return sShort;
  }
  const ::std::set<::cpp2::MyStruct>& get_sMyStruct() const&;
  ::std::set<::cpp2::MyStruct> get_sMyStruct() &&;

  template <typename T_MyStruct_sMyStruct_struct_setter = ::std::set<::cpp2::MyStruct>>
  [[deprecated("Use `FOO.sMyStruct_ref() = BAR;` instead of `FOO.set_sMyStruct(BAR);`")]]
  ::std::set<::cpp2::MyStruct>& set_sMyStruct(T_MyStruct_sMyStruct_struct_setter&& sMyStruct_) {
    sMyStruct = std::forward<T_MyStruct_sMyStruct_struct_setter>(sMyStruct_);
    __isset.sMyStruct = true;
    return sMyStruct;
  }
  const ::std::set<::std::int64_t>& get_sLong() const&;
  ::std::set<::std::int64_t> get_sLong() &&;

  template <typename T_MyStruct_sLong_struct_setter = ::std::set<::std::int64_t>>
  [[deprecated("Use `FOO.sLong_ref() = BAR;` instead of `FOO.set_sLong(BAR);`")]]
  ::std::set<::std::int64_t>& set_sLong(T_MyStruct_sLong_struct_setter&& sLong_) {
    sLong = std::forward<T_MyStruct_sLong_struct_setter>(sLong_);
    __isset.sLong = true;
    return sLong;
  }
  const ::std::set<::std::string>& get_sString() const&;
  ::std::set<::std::string> get_sString() &&;

  template <typename T_MyStruct_sString_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.sString_ref() = BAR;` instead of `FOO.set_sString(BAR);`")]]
  ::std::set<::std::string>& set_sString(T_MyStruct_sString_struct_setter&& sString_) {
    sString = std::forward<T_MyStruct_sString_struct_setter>(sString_);
    __isset.sString = true;
    return sString;
  }
  const ::std::set<::std::int8_t>& get_sByte() const&;
  ::std::set<::std::int8_t> get_sByte() &&;

  template <typename T_MyStruct_sByte_struct_setter = ::std::set<::std::int8_t>>
  [[deprecated("Use `FOO.sByte_ref() = BAR;` instead of `FOO.set_sByte(BAR);`")]]
  ::std::set<::std::int8_t>& set_sByte(T_MyStruct_sByte_struct_setter&& sByte_) {
    sByte = std::forward<T_MyStruct_sByte_struct_setter>(sByte_);
    __isset.sByte = true;
    return sByte;
  }
  const ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& get_mListList() const&;
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>> get_mListList() &&;

  template <typename T_MyStruct_mListList_struct_setter = ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.mListList_ref() = BAR;` instead of `FOO.set_mListList(BAR);`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::vector<::std::int32_t>>& set_mListList(T_MyStruct_mListList_struct_setter&& mListList_) {
    mListList = std::forward<T_MyStruct_mListList_struct_setter>(mListList_);
    __isset.mListList = true;
    return mListList;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class SimpleStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SimpleStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SimpleStruct() :
      age(60LL),
      name(apache::thrift::StringTraits<std::string>::fromStringLiteral("Batman")) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SimpleStruct(apache::thrift::FragileConstructor, ::std::int64_t age__arg, ::std::string name__arg);

  SimpleStruct(SimpleStruct&&) noexcept;

  SimpleStruct(const SimpleStruct& src);


  SimpleStruct& operator=(SimpleStruct&&) noexcept;
  SimpleStruct& operator=(const SimpleStruct& src);
  void __clear();
 private:
  ::std::int64_t age;
 private:
  ::std::string name;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool age;
    bool name;
  } __isset = {};

 public:

  bool operator==(const SimpleStruct&) const;
  bool operator<(const SimpleStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> age_ref() const& {
    return {this->age, __isset.age};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> age_ref() const&& {
    return {std::move(this->age), __isset.age};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> age_ref() & {
    return {this->age, __isset.age};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> age_ref() && {
    return {std::move(this->age), __isset.age};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> name_ref() const& {
    return {this->name, __isset.name};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> name_ref() const&& {
    return {std::move(this->name), __isset.name};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> name_ref() & {
    return {this->name, __isset.name};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> name_ref() && {
    return {std::move(this->name), __isset.name};
  }

  ::std::int64_t get_age() const {
    return age;
  }

  [[deprecated("Use `FOO.age_ref() = BAR;` instead of `FOO.set_age(BAR);`")]]
  ::std::int64_t& set_age(::std::int64_t age_) {
    age = age_;
    __isset.age = true;
    return age;
  }

  const ::std::string& get_name() const& {
    return name;
  }

  ::std::string get_name() && {
    return std::move(name);
  }

  template <typename T_SimpleStruct_name_struct_setter = ::std::string>
  [[deprecated("Use `FOO.name_ref() = BAR;` instead of `FOO.set_name(BAR);`")]]
  ::std::string& set_name(T_SimpleStruct_name_struct_setter&& name_) {
    name = std::forward<T_SimpleStruct_name_struct_setter>(name_);
    __isset.name = true;
    return name;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SimpleStruct>;
  friend void swap(SimpleStruct& a, SimpleStruct& b);
};

template <class Protocol_>
uint32_t SimpleStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class ComplexNestedStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = ComplexNestedStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  ComplexNestedStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  ComplexNestedStruct(apache::thrift::FragileConstructor, ::std::set<::std::set<::std::int32_t>> setOfSetOfInt__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> listofListOfListOfListOfEnum__arg, ::std::vector<::std::vector<::cpp2::MyStruct>> listOfListOfMyStruct__arg, ::std::set<::std::vector<::std::vector<::std::int64_t>>> setOfListOfListOfLong__arg, ::std::set<::std::set<::std::set<::std::int64_t>>> setOfSetOfsetOfLong__arg, ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> mapStructListOfListOfLong__arg, ::std::map<::cpp2::MyStruct, ::std::int32_t> mKeyStructValInt__arg, ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> listOfMapKeyIntValInt__arg, ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> listOfMapKeyStrValList__arg, ::std::map<::std::set<::std::int32_t>, ::std::int64_t> mapKeySetValLong__arg, ::std::map<::std::vector<::std::string>, ::std::int32_t> mapKeyListValLong__arg, ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> mapKeyMapValMap__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> mapKeySetValMap__arg, ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> NestedMaps__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> mapKeyIntValList__arg, ::std::map<::std::int32_t, ::std::set<bool>> mapKeyIntValSet__arg, ::std::map<::std::set<bool>, ::cpp2::MyEnum> mapKeySetValInt__arg, ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> mapKeyListValSet__arg);

  ComplexNestedStruct(ComplexNestedStruct&&) noexcept;

  ComplexNestedStruct(const ComplexNestedStruct& src);


  ComplexNestedStruct& operator=(ComplexNestedStruct&&) noexcept;
  ComplexNestedStruct& operator=(const ComplexNestedStruct& src);
  void __clear();

  ~ComplexNestedStruct();

 private:
  ::std::set<::std::set<::std::int32_t>> setOfSetOfInt;
 private:
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> listofListOfListOfListOfEnum;
 private:
  ::std::vector<::std::vector<::cpp2::MyStruct>> listOfListOfMyStruct;
 private:
  ::std::set<::std::vector<::std::vector<::std::int64_t>>> setOfListOfListOfLong;
 private:
  ::std::set<::std::set<::std::set<::std::int64_t>>> setOfSetOfsetOfLong;
 private:
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> mapStructListOfListOfLong;
 private:
  ::std::map<::cpp2::MyStruct, ::std::int32_t> mKeyStructValInt;
 private:
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> listOfMapKeyIntValInt;
 private:
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> listOfMapKeyStrValList;
 private:
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t> mapKeySetValLong;
 private:
  ::std::map<::std::vector<::std::string>, ::std::int32_t> mapKeyListValLong;
 private:
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> mapKeyMapValMap;
 private:
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> mapKeySetValMap;
 private:
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> NestedMaps;
 private:
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> mapKeyIntValList;
 private:
  ::std::map<::std::int32_t, ::std::set<bool>> mapKeyIntValSet;
 private:
  ::std::map<::std::set<bool>, ::cpp2::MyEnum> mapKeySetValInt;
 private:
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> mapKeyListValSet;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool setOfSetOfInt;
    bool listofListOfListOfListOfEnum;
    bool listOfListOfMyStruct;
    bool setOfListOfListOfLong;
    bool setOfSetOfsetOfLong;
    bool mapStructListOfListOfLong;
    bool mKeyStructValInt;
    bool listOfMapKeyIntValInt;
    bool listOfMapKeyStrValList;
    bool mapKeySetValLong;
    bool mapKeyListValLong;
    bool mapKeyMapValMap;
    bool mapKeySetValMap;
    bool NestedMaps;
    bool mapKeyIntValList;
    bool mapKeyIntValSet;
    bool mapKeySetValInt;
    bool mapKeyListValSet;
  } __isset = {};

 public:

  bool operator==(const ComplexNestedStruct&) const;
  bool operator<(const ComplexNestedStruct&) const;

  template <typename..., typename T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setOfSetOfInt_ref() const& {
    return {this->setOfSetOfInt, __isset.setOfSetOfInt};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setOfSetOfInt_ref() const&& {
    return {std::move(this->setOfSetOfInt), __isset.setOfSetOfInt};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setOfSetOfInt_ref() & {
    return {this->setOfSetOfInt, __isset.setOfSetOfInt};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setOfSetOfInt_ref() && {
    return {std::move(this->setOfSetOfInt), __isset.setOfSetOfInt};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listofListOfListOfListOfEnum_ref() const& {
    return {this->listofListOfListOfListOfEnum, __isset.listofListOfListOfListOfEnum};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listofListOfListOfListOfEnum_ref() const&& {
    return {std::move(this->listofListOfListOfListOfEnum), __isset.listofListOfListOfListOfEnum};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listofListOfListOfListOfEnum_ref() & {
    return {this->listofListOfListOfListOfEnum, __isset.listofListOfListOfListOfEnum};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listofListOfListOfListOfEnum_ref() && {
    return {std::move(this->listofListOfListOfListOfEnum), __isset.listofListOfListOfListOfEnum};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listOfListOfMyStruct_ref() const& {
    return {this->listOfListOfMyStruct, __isset.listOfListOfMyStruct};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listOfListOfMyStruct_ref() const&& {
    return {std::move(this->listOfListOfMyStruct), __isset.listOfListOfMyStruct};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listOfListOfMyStruct_ref() & {
    return {this->listOfListOfMyStruct, __isset.listOfListOfMyStruct};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listOfListOfMyStruct_ref() && {
    return {std::move(this->listOfListOfMyStruct), __isset.listOfListOfMyStruct};
  }

  template <typename..., typename T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setOfListOfListOfLong_ref() const& {
    return {this->setOfListOfListOfLong, __isset.setOfListOfListOfLong};
  }

  template <typename..., typename T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setOfListOfListOfLong_ref() const&& {
    return {std::move(this->setOfListOfListOfLong), __isset.setOfListOfListOfLong};
  }

  template <typename..., typename T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setOfListOfListOfLong_ref() & {
    return {this->setOfListOfListOfLong, __isset.setOfListOfListOfLong};
  }

  template <typename..., typename T = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setOfListOfListOfLong_ref() && {
    return {std::move(this->setOfListOfListOfLong), __isset.setOfListOfListOfLong};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> setOfSetOfsetOfLong_ref() const& {
    return {this->setOfSetOfsetOfLong, __isset.setOfSetOfsetOfLong};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> setOfSetOfsetOfLong_ref() const&& {
    return {std::move(this->setOfSetOfsetOfLong), __isset.setOfSetOfsetOfLong};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> setOfSetOfsetOfLong_ref() & {
    return {this->setOfSetOfsetOfLong, __isset.setOfSetOfsetOfLong};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> setOfSetOfsetOfLong_ref() && {
    return {std::move(this->setOfSetOfsetOfLong), __isset.setOfSetOfsetOfLong};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapStructListOfListOfLong_ref() const& {
    return {this->mapStructListOfListOfLong, __isset.mapStructListOfListOfLong};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapStructListOfListOfLong_ref() const&& {
    return {std::move(this->mapStructListOfListOfLong), __isset.mapStructListOfListOfLong};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapStructListOfListOfLong_ref() & {
    return {this->mapStructListOfListOfLong, __isset.mapStructListOfListOfLong};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapStructListOfListOfLong_ref() && {
    return {std::move(this->mapStructListOfListOfLong), __isset.mapStructListOfListOfLong};
  }

  template <typename..., typename T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mKeyStructValInt_ref() const& {
    return {this->mKeyStructValInt, __isset.mKeyStructValInt};
  }

  template <typename..., typename T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mKeyStructValInt_ref() const&& {
    return {std::move(this->mKeyStructValInt), __isset.mKeyStructValInt};
  }

  template <typename..., typename T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mKeyStructValInt_ref() & {
    return {this->mKeyStructValInt, __isset.mKeyStructValInt};
  }

  template <typename..., typename T = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mKeyStructValInt_ref() && {
    return {std::move(this->mKeyStructValInt), __isset.mKeyStructValInt};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listOfMapKeyIntValInt_ref() const& {
    return {this->listOfMapKeyIntValInt, __isset.listOfMapKeyIntValInt};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listOfMapKeyIntValInt_ref() const&& {
    return {std::move(this->listOfMapKeyIntValInt), __isset.listOfMapKeyIntValInt};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listOfMapKeyIntValInt_ref() & {
    return {this->listOfMapKeyIntValInt, __isset.listOfMapKeyIntValInt};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listOfMapKeyIntValInt_ref() && {
    return {std::move(this->listOfMapKeyIntValInt), __isset.listOfMapKeyIntValInt};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listOfMapKeyStrValList_ref() const& {
    return {this->listOfMapKeyStrValList, __isset.listOfMapKeyStrValList};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listOfMapKeyStrValList_ref() const&& {
    return {std::move(this->listOfMapKeyStrValList), __isset.listOfMapKeyStrValList};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listOfMapKeyStrValList_ref() & {
    return {this->listOfMapKeyStrValList, __isset.listOfMapKeyStrValList};
  }

  template <typename..., typename T = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listOfMapKeyStrValList_ref() && {
    return {std::move(this->listOfMapKeyStrValList), __isset.listOfMapKeyStrValList};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeySetValLong_ref() const& {
    return {this->mapKeySetValLong, __isset.mapKeySetValLong};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeySetValLong_ref() const&& {
    return {std::move(this->mapKeySetValLong), __isset.mapKeySetValLong};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeySetValLong_ref() & {
    return {this->mapKeySetValLong, __isset.mapKeySetValLong};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeySetValLong_ref() && {
    return {std::move(this->mapKeySetValLong), __isset.mapKeySetValLong};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeyListValLong_ref() const& {
    return {this->mapKeyListValLong, __isset.mapKeyListValLong};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeyListValLong_ref() const&& {
    return {std::move(this->mapKeyListValLong), __isset.mapKeyListValLong};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeyListValLong_ref() & {
    return {this->mapKeyListValLong, __isset.mapKeyListValLong};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeyListValLong_ref() && {
    return {std::move(this->mapKeyListValLong), __isset.mapKeyListValLong};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeyMapValMap_ref() const& {
    return {this->mapKeyMapValMap, __isset.mapKeyMapValMap};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeyMapValMap_ref() const&& {
    return {std::move(this->mapKeyMapValMap), __isset.mapKeyMapValMap};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeyMapValMap_ref() & {
    return {this->mapKeyMapValMap, __isset.mapKeyMapValMap};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeyMapValMap_ref() && {
    return {std::move(this->mapKeyMapValMap), __isset.mapKeyMapValMap};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeySetValMap_ref() const& {
    return {this->mapKeySetValMap, __isset.mapKeySetValMap};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeySetValMap_ref() const&& {
    return {std::move(this->mapKeySetValMap), __isset.mapKeySetValMap};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeySetValMap_ref() & {
    return {this->mapKeySetValMap, __isset.mapKeySetValMap};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeySetValMap_ref() && {
    return {std::move(this->mapKeySetValMap), __isset.mapKeySetValMap};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> NestedMaps_ref() const& {
    return {this->NestedMaps, __isset.NestedMaps};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> NestedMaps_ref() const&& {
    return {std::move(this->NestedMaps), __isset.NestedMaps};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> NestedMaps_ref() & {
    return {this->NestedMaps, __isset.NestedMaps};
  }

  template <typename..., typename T = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> NestedMaps_ref() && {
    return {std::move(this->NestedMaps), __isset.NestedMaps};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeyIntValList_ref() const& {
    return {this->mapKeyIntValList, __isset.mapKeyIntValList};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeyIntValList_ref() const&& {
    return {std::move(this->mapKeyIntValList), __isset.mapKeyIntValList};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeyIntValList_ref() & {
    return {this->mapKeyIntValList, __isset.mapKeyIntValList};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeyIntValList_ref() && {
    return {std::move(this->mapKeyIntValList), __isset.mapKeyIntValList};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeyIntValSet_ref() const& {
    return {this->mapKeyIntValSet, __isset.mapKeyIntValSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeyIntValSet_ref() const&& {
    return {std::move(this->mapKeyIntValSet), __isset.mapKeyIntValSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeyIntValSet_ref() & {
    return {this->mapKeyIntValSet, __isset.mapKeyIntValSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::set<bool>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeyIntValSet_ref() && {
    return {std::move(this->mapKeyIntValSet), __isset.mapKeyIntValSet};
  }

  template <typename..., typename T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeySetValInt_ref() const& {
    return {this->mapKeySetValInt, __isset.mapKeySetValInt};
  }

  template <typename..., typename T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeySetValInt_ref() const&& {
    return {std::move(this->mapKeySetValInt), __isset.mapKeySetValInt};
  }

  template <typename..., typename T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeySetValInt_ref() & {
    return {this->mapKeySetValInt, __isset.mapKeySetValInt};
  }

  template <typename..., typename T = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeySetValInt_ref() && {
    return {std::move(this->mapKeySetValInt), __isset.mapKeySetValInt};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapKeyListValSet_ref() const& {
    return {this->mapKeyListValSet, __isset.mapKeyListValSet};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapKeyListValSet_ref() const&& {
    return {std::move(this->mapKeyListValSet), __isset.mapKeyListValSet};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapKeyListValSet_ref() & {
    return {this->mapKeyListValSet, __isset.mapKeyListValSet};
  }

  template <typename..., typename T = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapKeyListValSet_ref() && {
    return {std::move(this->mapKeyListValSet), __isset.mapKeyListValSet};
  }
  const ::std::set<::std::set<::std::int32_t>>& get_setOfSetOfInt() const&;
  ::std::set<::std::set<::std::int32_t>> get_setOfSetOfInt() &&;

  template <typename T_ComplexNestedStruct_setOfSetOfInt_struct_setter = ::std::set<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.setOfSetOfInt_ref() = BAR;` instead of `FOO.set_setOfSetOfInt(BAR);`")]]
  ::std::set<::std::set<::std::int32_t>>& set_setOfSetOfInt(T_ComplexNestedStruct_setOfSetOfInt_struct_setter&& setOfSetOfInt_) {
    setOfSetOfInt = std::forward<T_ComplexNestedStruct_setOfSetOfInt_struct_setter>(setOfSetOfInt_);
    __isset.setOfSetOfInt = true;
    return setOfSetOfInt;
  }
  const ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& get_listofListOfListOfListOfEnum() const&;
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>> get_listofListOfListOfListOfEnum() &&;

  template <typename T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter = ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>>
  [[deprecated("Use `FOO.listofListOfListOfListOfEnum_ref() = BAR;` instead of `FOO.set_listofListOfListOfListOfEnum(BAR);`")]]
  ::std::vector<::std::vector<::std::vector<::std::vector<::cpp2::MyEnum>>>>& set_listofListOfListOfListOfEnum(T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter&& listofListOfListOfListOfEnum_) {
    listofListOfListOfListOfEnum = std::forward<T_ComplexNestedStruct_listofListOfListOfListOfEnum_struct_setter>(listofListOfListOfListOfEnum_);
    __isset.listofListOfListOfListOfEnum = true;
    return listofListOfListOfListOfEnum;
  }
  const ::std::vector<::std::vector<::cpp2::MyStruct>>& get_listOfListOfMyStruct() const&;
  ::std::vector<::std::vector<::cpp2::MyStruct>> get_listOfListOfMyStruct() &&;

  template <typename T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter = ::std::vector<::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.listOfListOfMyStruct_ref() = BAR;` instead of `FOO.set_listOfListOfMyStruct(BAR);`")]]
  ::std::vector<::std::vector<::cpp2::MyStruct>>& set_listOfListOfMyStruct(T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter&& listOfListOfMyStruct_) {
    listOfListOfMyStruct = std::forward<T_ComplexNestedStruct_listOfListOfMyStruct_struct_setter>(listOfListOfMyStruct_);
    __isset.listOfListOfMyStruct = true;
    return listOfListOfMyStruct;
  }
  const ::std::set<::std::vector<::std::vector<::std::int64_t>>>& get_setOfListOfListOfLong() const&;
  ::std::set<::std::vector<::std::vector<::std::int64_t>>> get_setOfListOfListOfLong() &&;

  template <typename T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter = ::std::set<::std::vector<::std::vector<::std::int64_t>>>>
  [[deprecated("Use `FOO.setOfListOfListOfLong_ref() = BAR;` instead of `FOO.set_setOfListOfListOfLong(BAR);`")]]
  ::std::set<::std::vector<::std::vector<::std::int64_t>>>& set_setOfListOfListOfLong(T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter&& setOfListOfListOfLong_) {
    setOfListOfListOfLong = std::forward<T_ComplexNestedStruct_setOfListOfListOfLong_struct_setter>(setOfListOfListOfLong_);
    __isset.setOfListOfListOfLong = true;
    return setOfListOfListOfLong;
  }
  const ::std::set<::std::set<::std::set<::std::int64_t>>>& get_setOfSetOfsetOfLong() const&;
  ::std::set<::std::set<::std::set<::std::int64_t>>> get_setOfSetOfsetOfLong() &&;

  template <typename T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter = ::std::set<::std::set<::std::set<::std::int64_t>>>>
  [[deprecated("Use `FOO.setOfSetOfsetOfLong_ref() = BAR;` instead of `FOO.set_setOfSetOfsetOfLong(BAR);`")]]
  ::std::set<::std::set<::std::set<::std::int64_t>>>& set_setOfSetOfsetOfLong(T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter&& setOfSetOfsetOfLong_) {
    setOfSetOfsetOfLong = std::forward<T_ComplexNestedStruct_setOfSetOfsetOfLong_struct_setter>(setOfSetOfsetOfLong_);
    __isset.setOfSetOfsetOfLong = true;
    return setOfSetOfsetOfLong;
  }
  const ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& get_mapStructListOfListOfLong() const&;
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>> get_mapStructListOfListOfLong() &&;

  template <typename T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter = ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>>
  [[deprecated("Use `FOO.mapStructListOfListOfLong_ref() = BAR;` instead of `FOO.set_mapStructListOfListOfLong(BAR);`")]]
  ::std::map<::std::int32_t, ::std::vector<::std::vector<::cpp2::MyStruct>>>& set_mapStructListOfListOfLong(T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter&& mapStructListOfListOfLong_) {
    mapStructListOfListOfLong = std::forward<T_ComplexNestedStruct_mapStructListOfListOfLong_struct_setter>(mapStructListOfListOfLong_);
    __isset.mapStructListOfListOfLong = true;
    return mapStructListOfListOfLong;
  }
  const ::std::map<::cpp2::MyStruct, ::std::int32_t>& get_mKeyStructValInt() const&;
  ::std::map<::cpp2::MyStruct, ::std::int32_t> get_mKeyStructValInt() &&;

  template <typename T_ComplexNestedStruct_mKeyStructValInt_struct_setter = ::std::map<::cpp2::MyStruct, ::std::int32_t>>
  [[deprecated("Use `FOO.mKeyStructValInt_ref() = BAR;` instead of `FOO.set_mKeyStructValInt(BAR);`")]]
  ::std::map<::cpp2::MyStruct, ::std::int32_t>& set_mKeyStructValInt(T_ComplexNestedStruct_mKeyStructValInt_struct_setter&& mKeyStructValInt_) {
    mKeyStructValInt = std::forward<T_ComplexNestedStruct_mKeyStructValInt_struct_setter>(mKeyStructValInt_);
    __isset.mKeyStructValInt = true;
    return mKeyStructValInt;
  }
  const ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& get_listOfMapKeyIntValInt() const&;
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>> get_listOfMapKeyIntValInt() &&;

  template <typename T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter = ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>>
  [[deprecated("Use `FOO.listOfMapKeyIntValInt_ref() = BAR;` instead of `FOO.set_listOfMapKeyIntValInt(BAR);`")]]
  ::std::vector<::std::map<::std::int32_t, ::std::int32_t>>& set_listOfMapKeyIntValInt(T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter&& listOfMapKeyIntValInt_) {
    listOfMapKeyIntValInt = std::forward<T_ComplexNestedStruct_listOfMapKeyIntValInt_struct_setter>(listOfMapKeyIntValInt_);
    __isset.listOfMapKeyIntValInt = true;
    return listOfMapKeyIntValInt;
  }
  const ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& get_listOfMapKeyStrValList() const&;
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>> get_listOfMapKeyStrValList() &&;

  template <typename T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter = ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>>
  [[deprecated("Use `FOO.listOfMapKeyStrValList_ref() = BAR;` instead of `FOO.set_listOfMapKeyStrValList(BAR);`")]]
  ::std::vector<::std::map<::std::string, ::std::vector<::cpp2::MyStruct>>>& set_listOfMapKeyStrValList(T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter&& listOfMapKeyStrValList_) {
    listOfMapKeyStrValList = std::forward<T_ComplexNestedStruct_listOfMapKeyStrValList_struct_setter>(listOfMapKeyStrValList_);
    __isset.listOfMapKeyStrValList = true;
    return listOfMapKeyStrValList;
  }
  const ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& get_mapKeySetValLong() const&;
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t> get_mapKeySetValLong() &&;

  template <typename T_ComplexNestedStruct_mapKeySetValLong_struct_setter = ::std::map<::std::set<::std::int32_t>, ::std::int64_t>>
  [[deprecated("Use `FOO.mapKeySetValLong_ref() = BAR;` instead of `FOO.set_mapKeySetValLong(BAR);`")]]
  ::std::map<::std::set<::std::int32_t>, ::std::int64_t>& set_mapKeySetValLong(T_ComplexNestedStruct_mapKeySetValLong_struct_setter&& mapKeySetValLong_) {
    mapKeySetValLong = std::forward<T_ComplexNestedStruct_mapKeySetValLong_struct_setter>(mapKeySetValLong_);
    __isset.mapKeySetValLong = true;
    return mapKeySetValLong;
  }
  const ::std::map<::std::vector<::std::string>, ::std::int32_t>& get_mapKeyListValLong() const&;
  ::std::map<::std::vector<::std::string>, ::std::int32_t> get_mapKeyListValLong() &&;

  template <typename T_ComplexNestedStruct_mapKeyListValLong_struct_setter = ::std::map<::std::vector<::std::string>, ::std::int32_t>>
  [[deprecated("Use `FOO.mapKeyListValLong_ref() = BAR;` instead of `FOO.set_mapKeyListValLong(BAR);`")]]
  ::std::map<::std::vector<::std::string>, ::std::int32_t>& set_mapKeyListValLong(T_ComplexNestedStruct_mapKeyListValLong_struct_setter&& mapKeyListValLong_) {
    mapKeyListValLong = std::forward<T_ComplexNestedStruct_mapKeyListValLong_struct_setter>(mapKeyListValLong_);
    __isset.mapKeyListValLong = true;
    return mapKeyListValLong;
  }
  const ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& get_mapKeyMapValMap() const&;
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>> get_mapKeyMapValMap() &&;

  template <typename T_ComplexNestedStruct_mapKeyMapValMap_struct_setter = ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  [[deprecated("Use `FOO.mapKeyMapValMap_ref() = BAR;` instead of `FOO.set_mapKeyMapValMap(BAR);`")]]
  ::std::map<::std::map<::std::int32_t, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& set_mapKeyMapValMap(T_ComplexNestedStruct_mapKeyMapValMap_struct_setter&& mapKeyMapValMap_) {
    mapKeyMapValMap = std::forward<T_ComplexNestedStruct_mapKeyMapValMap_struct_setter>(mapKeyMapValMap_);
    __isset.mapKeyMapValMap = true;
    return mapKeyMapValMap;
  }
  const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& get_mapKeySetValMap() const&;
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> get_mapKeySetValMap() &&;

  template <typename T_ComplexNestedStruct_mapKeySetValMap_struct_setter = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  [[deprecated("Use `FOO.mapKeySetValMap_ref() = BAR;` instead of `FOO.set_mapKeySetValMap(BAR);`")]]
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& set_mapKeySetValMap(T_ComplexNestedStruct_mapKeySetValMap_struct_setter&& mapKeySetValMap_) {
    mapKeySetValMap = std::forward<T_ComplexNestedStruct_mapKeySetValMap_struct_setter>(mapKeySetValMap_);
    __isset.mapKeySetValMap = true;
    return mapKeySetValMap;
  }
  const ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& get_NestedMaps() const&;
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>> get_NestedMaps() &&;

  template <typename T_ComplexNestedStruct_NestedMaps_struct_setter = ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>>
  [[deprecated("Use `FOO.NestedMaps_ref() = BAR;` instead of `FOO.set_NestedMaps(BAR);`")]]
  ::std::map<::std::map<::std::map<::std::int32_t, ::std::string>, ::std::string>, ::std::map<::std::int32_t, ::std::string>>& set_NestedMaps(T_ComplexNestedStruct_NestedMaps_struct_setter&& NestedMaps_) {
    NestedMaps = std::forward<T_ComplexNestedStruct_NestedMaps_struct_setter>(NestedMaps_);
    __isset.NestedMaps = true;
    return NestedMaps;
  }
  const ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& get_mapKeyIntValList() const&;
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>> get_mapKeyIntValList() &&;

  template <typename T_ComplexNestedStruct_mapKeyIntValList_struct_setter = ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>>
  [[deprecated("Use `FOO.mapKeyIntValList_ref() = BAR;` instead of `FOO.set_mapKeyIntValList(BAR);`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::MyStruct>>& set_mapKeyIntValList(T_ComplexNestedStruct_mapKeyIntValList_struct_setter&& mapKeyIntValList_) {
    mapKeyIntValList = std::forward<T_ComplexNestedStruct_mapKeyIntValList_struct_setter>(mapKeyIntValList_);
    __isset.mapKeyIntValList = true;
    return mapKeyIntValList;
  }
  const ::std::map<::std::int32_t, ::std::set<bool>>& get_mapKeyIntValSet() const&;
  ::std::map<::std::int32_t, ::std::set<bool>> get_mapKeyIntValSet() &&;

  template <typename T_ComplexNestedStruct_mapKeyIntValSet_struct_setter = ::std::map<::std::int32_t, ::std::set<bool>>>
  [[deprecated("Use `FOO.mapKeyIntValSet_ref() = BAR;` instead of `FOO.set_mapKeyIntValSet(BAR);`")]]
  ::std::map<::std::int32_t, ::std::set<bool>>& set_mapKeyIntValSet(T_ComplexNestedStruct_mapKeyIntValSet_struct_setter&& mapKeyIntValSet_) {
    mapKeyIntValSet = std::forward<T_ComplexNestedStruct_mapKeyIntValSet_struct_setter>(mapKeyIntValSet_);
    __isset.mapKeyIntValSet = true;
    return mapKeyIntValSet;
  }
  const ::std::map<::std::set<bool>, ::cpp2::MyEnum>& get_mapKeySetValInt() const&;
  ::std::map<::std::set<bool>, ::cpp2::MyEnum> get_mapKeySetValInt() &&;

  template <typename T_ComplexNestedStruct_mapKeySetValInt_struct_setter = ::std::map<::std::set<bool>, ::cpp2::MyEnum>>
  [[deprecated("Use `FOO.mapKeySetValInt_ref() = BAR;` instead of `FOO.set_mapKeySetValInt(BAR);`")]]
  ::std::map<::std::set<bool>, ::cpp2::MyEnum>& set_mapKeySetValInt(T_ComplexNestedStruct_mapKeySetValInt_struct_setter&& mapKeySetValInt_) {
    mapKeySetValInt = std::forward<T_ComplexNestedStruct_mapKeySetValInt_struct_setter>(mapKeySetValInt_);
    __isset.mapKeySetValInt = true;
    return mapKeySetValInt;
  }
  const ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& get_mapKeyListValSet() const&;
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>> get_mapKeyListValSet() &&;

  template <typename T_ComplexNestedStruct_mapKeyListValSet_struct_setter = ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>>
  [[deprecated("Use `FOO.mapKeyListValSet_ref() = BAR;` instead of `FOO.set_mapKeyListValSet(BAR);`")]]
  ::std::map<::std::vector<::std::int32_t>, ::std::set<::std::map<double, ::std::string>>>& set_mapKeyListValSet(T_ComplexNestedStruct_mapKeyListValSet_struct_setter&& mapKeyListValSet_) {
    mapKeyListValSet = std::forward<T_ComplexNestedStruct_mapKeyListValSet_struct_setter>(mapKeyListValSet_);
    __isset.mapKeyListValSet = true;
    return mapKeyListValSet;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<ComplexNestedStruct>;
  friend void swap(ComplexNestedStruct& a, ComplexNestedStruct& b);
};

template <class Protocol_>
uint32_t ComplexNestedStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myDataItem = 3,
    complexNestedStruct = 4,
    longValue = 5,
    intValue = 6,
  } ;

  MyUnion()
      : type_(Type::__EMPTY__) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      case Type::longValue:
      {
        set_longValue(std::move(rhs.value_.longValue));
        break;
      }
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  MyUnion(const MyUnion& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      }
      case Type::longValue:
      {
        set_longValue(rhs.value_.longValue);
        break;
      }
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      case Type::longValue:
      {
        set_longValue(std::move(rhs.value_.longValue));
        break;
      }
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      }
      case Type::longValue:
      {
        set_longValue(rhs.value_.longValue);
        break;
      }
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~MyUnion() {
    __clear();
  }
  union storage_type {
    ::cpp2::MyEnum myEnum;
    ::cpp2::MyStruct myStruct;
    ::cpp2::MyDataItem myDataItem;
    ::cpp2::ComplexNestedStruct complexNestedStruct;
    ::std::int64_t longValue;
    ::std::int32_t intValue;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum t = ::cpp2::MyEnum()) {
    __clear();
    type_ = Type::myEnum;
    ::new (std::addressof(value_.myEnum)) ::cpp2::MyEnum(t);
    return value_.myEnum;
  }

  ::cpp2::MyStruct& set_myStruct(::cpp2::MyStruct const &t) {
    __clear();
    type_ = Type::myStruct;
    ::new (std::addressof(value_.myStruct)) ::cpp2::MyStruct(t);
    return value_.myStruct;
  }

  ::cpp2::MyStruct& set_myStruct(::cpp2::MyStruct&& t) {
    __clear();
    type_ = Type::myStruct;
    ::new (std::addressof(value_.myStruct)) ::cpp2::MyStruct(std::move(t));
    return value_.myStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyStruct, T...>> ::cpp2::MyStruct& set_myStruct(T&&... t) {
    __clear();
    type_ = Type::myStruct;
    ::new (std::addressof(value_.myStruct)) ::cpp2::MyStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem const &t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(t);
    return value_.myDataItem;
  }

  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem&& t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::move(t));
    return value_.myDataItem;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyDataItem, T...>> ::cpp2::MyDataItem& set_myDataItem(T&&... t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct const &t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(t);
    return value_.complexNestedStruct;
  }

  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct&& t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::move(t));
    return value_.complexNestedStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::ComplexNestedStruct, T...>> ::cpp2::ComplexNestedStruct& set_complexNestedStruct(T&&... t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::forward<T>(t)...);
    return value_.complexNestedStruct;
  }

  ::std::int64_t& set_longValue(::std::int64_t t = ::std::int64_t()) {
    __clear();
    type_ = Type::longValue;
    ::new (std::addressof(value_.longValue)) ::std::int64_t(t);
    return value_.longValue;
  }

  ::std::int32_t& set_intValue(::std::int32_t t = ::std::int32_t()) {
    __clear();
    type_ = Type::intValue;
    ::new (std::addressof(value_.intValue)) ::std::int32_t(t);
    return value_.intValue;
  }

  ::cpp2::MyEnum const& get_myEnum() const {
    if (type_ != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.myEnum;
  }

  ::cpp2::MyStruct const& get_myStruct() const {
    if (type_ != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.myStruct;
  }

  ::cpp2::MyDataItem const& get_myDataItem() const {
    if (type_ != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct const& get_complexNestedStruct() const {
    if (type_ != Type::complexNestedStruct) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.complexNestedStruct;
  }

  ::std::int64_t const& get_longValue() const {
    if (type_ != Type::longValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.longValue;
  }

  ::std::int32_t const& get_intValue() const {
    if (type_ != Type::intValue) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.intValue;
  }

  ::cpp2::MyEnum& mutable_myEnum() {
    assert(type_ == Type::myEnum);
    return value_.myEnum;
  }

  ::cpp2::MyStruct& mutable_myStruct() {
    assert(type_ == Type::myStruct);
    return value_.myStruct;
  }

  ::cpp2::MyDataItem& mutable_myDataItem() {
    assert(type_ == Type::myDataItem);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& mutable_complexNestedStruct() {
    assert(type_ == Type::complexNestedStruct);
    return value_.complexNestedStruct;
  }

  ::std::int64_t& mutable_longValue() {
    assert(type_ == Type::longValue);
    return value_.longValue;
  }

  ::std::int32_t& mutable_intValue() {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  ::cpp2::MyEnum move_myEnum() {
    assert(type_ == Type::myEnum);
    return std::move(value_.myEnum);
  }

  ::cpp2::MyStruct move_myStruct() {
    assert(type_ == Type::myStruct);
    return std::move(value_.myStruct);
  }

  ::cpp2::MyDataItem move_myDataItem() {
    assert(type_ == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  ::cpp2::ComplexNestedStruct move_complexNestedStruct() {
    assert(type_ == Type::complexNestedStruct);
    return std::move(value_.complexNestedStruct);
  }

  ::std::int64_t move_longValue() {
    assert(type_ == Type::longValue);
    return std::move(value_.longValue);
  }

  ::std::int32_t move_intValue() {
    assert(type_ == Type::intValue);
    return std::move(value_.intValue);
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(value_.myEnum), type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, type_, myStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myStruct_ref() const&& {
    return {std::move(value_.myStruct), type_, myStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, type_, myStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), type_, myStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myDataItem_ref() const&& {
    return {std::move(value_.myDataItem), type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> complexNestedStruct_ref() const& {
    return {value_.complexNestedStruct, type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> complexNestedStruct_ref() const&& {
    return {std::move(value_.complexNestedStruct), type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> complexNestedStruct_ref() & {
    return {value_.complexNestedStruct, type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> complexNestedStruct_ref() && {
    return {std::move(value_.complexNestedStruct), type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> longValue_ref() const& {
    return {value_.longValue, type_, longValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> longValue_ref() const&& {
    return {std::move(value_.longValue), type_, longValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> longValue_ref() & {
    return {value_.longValue, type_, longValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> longValue_ref() && {
    return {std::move(value_.longValue), type_, longValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> intValue_ref() const& {
    return {value_.intValue, type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> intValue_ref() const&& {
    return {std::move(value_.intValue), type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> intValue_ref() & {
    return {value_.intValue, type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> intValue_ref() && {
    return {std::move(value_.intValue), type_, intValue, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
uint32_t MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class defaultStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = defaultStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  defaultStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  defaultStruct(apache::thrift::FragileConstructor, ::std::int64_t myLongDFset__arg, ::std::int64_t myLongDF__arg, ::std::int32_t portDFset__arg, ::std::int32_t portNum__arg, ::std::string myBinaryDFset__arg, ::std::string myBinary__arg, ::std::int8_t myByteDFSet__arg, ::std::int8_t myByte__arg, double myDoubleDFset__arg, double myDoubleDFZero__arg, double myDouble__arg, ::std::map<::std::int32_t, ::std::string> field3__arg, ::std::vector<::cpp2::MyEnum> myList__arg, ::std::set<::std::string> mySet__arg, ::cpp2::SimpleStruct simpleStruct__arg, ::std::vector<::cpp2::SimpleStruct> listStructDFset__arg, ::cpp2::MyUnion myUnion__arg, ::std::vector<::cpp2::MyUnion> listUnionDFset__arg, ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> mapNestlistStructDfSet__arg, ::std::map<::std::int64_t, ::std::string> mapJavaTypeDFset__arg, ::std::map<::std::int64_t, ::std::int32_t> emptyMap__arg, ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> enumMapDFset__arg);

  defaultStruct(defaultStruct&&) noexcept;

  defaultStruct(const defaultStruct& src);


  defaultStruct& operator=(defaultStruct&&) noexcept;
  defaultStruct& operator=(const defaultStruct& src);
  void __clear();

  ~defaultStruct();

 private:
  ::std::int64_t myLongDFset;
 private:
  ::std::int64_t myLongDF;
 private:
  ::std::int32_t portDFset;
 private:
  ::std::int32_t portNum;
 private:
  ::std::string myBinaryDFset;
 private:
  ::std::string myBinary;
 private:
  ::std::int8_t myByteDFSet;
 private:
  ::std::int8_t myByte;
 private:
  double myDoubleDFset;
 private:
  double myDoubleDFZero;
 private:
  double myDouble;
 private:
  ::std::map<::std::int32_t, ::std::string> field3;
 private:
  ::std::vector<::cpp2::MyEnum> myList;
 private:
  ::std::set<::std::string> mySet;
 private:
  ::cpp2::SimpleStruct simpleStruct;
 private:
  ::std::vector<::cpp2::SimpleStruct> listStructDFset;
 private:
  ::cpp2::MyUnion myUnion;
 private:
  ::std::vector<::cpp2::MyUnion> listUnionDFset;
 private:
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> mapNestlistStructDfSet;
 private:
  ::std::map<::std::int64_t, ::std::string> mapJavaTypeDFset;
 private:
  ::std::map<::std::int64_t, ::std::int32_t> emptyMap;
 private:
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> enumMapDFset;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myLongDFset;
    bool myLongDF;
    bool portDFset;
    bool portNum;
    bool myBinaryDFset;
    bool myBinary;
    bool myByteDFSet;
    bool myByte;
    bool myDoubleDFset;
    bool myDoubleDFZero;
    bool myDouble;
    bool field3;
    bool myList;
    bool mySet;
    bool simpleStruct;
    bool listStructDFset;
    bool myUnion;
    bool listUnionDFset;
    bool mapNestlistStructDfSet;
    bool mapJavaTypeDFset;
    bool emptyMap;
    bool enumMapDFset;
  } __isset = {};

 public:

  bool operator==(const defaultStruct&) const;
  bool operator<(const defaultStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongDFset_ref() const& {
    return {this->myLongDFset, __isset.myLongDFset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongDFset_ref() const&& {
    return {std::move(this->myLongDFset), __isset.myLongDFset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongDFset_ref() & {
    return {this->myLongDFset, __isset.myLongDFset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongDFset_ref() && {
    return {std::move(this->myLongDFset), __isset.myLongDFset};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongDF_ref() const& {
    return {this->myLongDF, __isset.myLongDF};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongDF_ref() const&& {
    return {std::move(this->myLongDF), __isset.myLongDF};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongDF_ref() & {
    return {this->myLongDF, __isset.myLongDF};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongDF_ref() && {
    return {std::move(this->myLongDF), __isset.myLongDF};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> portDFset_ref() const& {
    return {this->portDFset, __isset.portDFset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> portDFset_ref() const&& {
    return {std::move(this->portDFset), __isset.portDFset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> portDFset_ref() & {
    return {this->portDFset, __isset.portDFset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> portDFset_ref() && {
    return {std::move(this->portDFset), __isset.portDFset};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> portNum_ref() const& {
    return {this->portNum, __isset.portNum};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> portNum_ref() const&& {
    return {std::move(this->portNum), __isset.portNum};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> portNum_ref() & {
    return {this->portNum, __isset.portNum};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> portNum_ref() && {
    return {std::move(this->portNum), __isset.portNum};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myBinaryDFset_ref() const& {
    return {this->myBinaryDFset, __isset.myBinaryDFset};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myBinaryDFset_ref() const&& {
    return {std::move(this->myBinaryDFset), __isset.myBinaryDFset};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myBinaryDFset_ref() & {
    return {this->myBinaryDFset, __isset.myBinaryDFset};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myBinaryDFset_ref() && {
    return {std::move(this->myBinaryDFset), __isset.myBinaryDFset};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myBinary_ref() const& {
    return {this->myBinary, __isset.myBinary};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myBinary_ref() const&& {
    return {std::move(this->myBinary), __isset.myBinary};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myBinary_ref() & {
    return {this->myBinary, __isset.myBinary};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myBinary_ref() && {
    return {std::move(this->myBinary), __isset.myBinary};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myByteDFSet_ref() const& {
    return {this->myByteDFSet, __isset.myByteDFSet};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myByteDFSet_ref() const&& {
    return {std::move(this->myByteDFSet), __isset.myByteDFSet};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myByteDFSet_ref() & {
    return {this->myByteDFSet, __isset.myByteDFSet};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myByteDFSet_ref() && {
    return {std::move(this->myByteDFSet), __isset.myByteDFSet};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myByte_ref() const& {
    return {this->myByte, __isset.myByte};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myByte_ref() const&& {
    return {std::move(this->myByte), __isset.myByte};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myByte_ref() & {
    return {this->myByte, __isset.myByte};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myByte_ref() && {
    return {std::move(this->myByte), __isset.myByte};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myDoubleDFset_ref() const& {
    return {this->myDoubleDFset, __isset.myDoubleDFset};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myDoubleDFset_ref() const&& {
    return {std::move(this->myDoubleDFset), __isset.myDoubleDFset};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myDoubleDFset_ref() & {
    return {this->myDoubleDFset, __isset.myDoubleDFset};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myDoubleDFset_ref() && {
    return {std::move(this->myDoubleDFset), __isset.myDoubleDFset};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myDoubleDFZero_ref() const& {
    return {this->myDoubleDFZero, __isset.myDoubleDFZero};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myDoubleDFZero_ref() const&& {
    return {std::move(this->myDoubleDFZero), __isset.myDoubleDFZero};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myDoubleDFZero_ref() & {
    return {this->myDoubleDFZero, __isset.myDoubleDFZero};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myDoubleDFZero_ref() && {
    return {std::move(this->myDoubleDFZero), __isset.myDoubleDFZero};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myDouble_ref() const& {
    return {this->myDouble, __isset.myDouble};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myDouble_ref() const&& {
    return {std::move(this->myDouble), __isset.myDouble};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myDouble_ref() & {
    return {this->myDouble, __isset.myDouble};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myDouble_ref() && {
    return {std::move(this->myDouble), __isset.myDouble};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> field3_ref() const& {
    return {this->field3, __isset.field3};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> field3_ref() const&& {
    return {std::move(this->field3), __isset.field3};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> field3_ref() & {
    return {this->field3, __isset.field3};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> field3_ref() && {
    return {std::move(this->field3), __isset.field3};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myList_ref() const& {
    return {this->myList, __isset.myList};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myList_ref() const&& {
    return {std::move(this->myList), __isset.myList};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myList_ref() & {
    return {this->myList, __isset.myList};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyEnum>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myList_ref() && {
    return {std::move(this->myList), __isset.myList};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mySet_ref() const& {
    return {this->mySet, __isset.mySet};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mySet_ref() const&& {
    return {std::move(this->mySet), __isset.mySet};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mySet_ref() & {
    return {this->mySet, __isset.mySet};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mySet_ref() && {
    return {std::move(this->mySet), __isset.mySet};
  }

  template <typename..., typename T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> simpleStruct_ref() const& {
    return {this->simpleStruct, __isset.simpleStruct};
  }

  template <typename..., typename T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> simpleStruct_ref() const&& {
    return {std::move(this->simpleStruct), __isset.simpleStruct};
  }

  template <typename..., typename T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> simpleStruct_ref() & {
    return {this->simpleStruct, __isset.simpleStruct};
  }

  template <typename..., typename T = ::cpp2::SimpleStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> simpleStruct_ref() && {
    return {std::move(this->simpleStruct), __isset.simpleStruct};
  }

  template <typename..., typename T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listStructDFset_ref() const& {
    return {this->listStructDFset, __isset.listStructDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listStructDFset_ref() const&& {
    return {std::move(this->listStructDFset), __isset.listStructDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listStructDFset_ref() & {
    return {this->listStructDFset, __isset.listStructDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::SimpleStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listStructDFset_ref() && {
    return {std::move(this->listStructDFset), __isset.listStructDFset};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myUnion_ref() const& {
    return {this->myUnion, __isset.myUnion};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myUnion_ref() const&& {
    return {std::move(this->myUnion), __isset.myUnion};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myUnion_ref() & {
    return {this->myUnion, __isset.myUnion};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myUnion_ref() && {
    return {std::move(this->myUnion), __isset.myUnion};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listUnionDFset_ref() const& {
    return {this->listUnionDFset, __isset.listUnionDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listUnionDFset_ref() const&& {
    return {std::move(this->listUnionDFset), __isset.listUnionDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listUnionDFset_ref() & {
    return {this->listUnionDFset, __isset.listUnionDFset};
  }

  template <typename..., typename T = ::std::vector<::cpp2::MyUnion>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listUnionDFset_ref() && {
    return {std::move(this->listUnionDFset), __isset.listUnionDFset};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapNestlistStructDfSet_ref() const& {
    return {this->mapNestlistStructDfSet, __isset.mapNestlistStructDfSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapNestlistStructDfSet_ref() const&& {
    return {std::move(this->mapNestlistStructDfSet), __isset.mapNestlistStructDfSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapNestlistStructDfSet_ref() & {
    return {this->mapNestlistStructDfSet, __isset.mapNestlistStructDfSet};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapNestlistStructDfSet_ref() && {
    return {std::move(this->mapNestlistStructDfSet), __isset.mapNestlistStructDfSet};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> mapJavaTypeDFset_ref() const& {
    return {this->mapJavaTypeDFset, __isset.mapJavaTypeDFset};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> mapJavaTypeDFset_ref() const&& {
    return {std::move(this->mapJavaTypeDFset), __isset.mapJavaTypeDFset};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> mapJavaTypeDFset_ref() & {
    return {this->mapJavaTypeDFset, __isset.mapJavaTypeDFset};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> mapJavaTypeDFset_ref() && {
    return {std::move(this->mapJavaTypeDFset), __isset.mapJavaTypeDFset};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> emptyMap_ref() const& {
    return {this->emptyMap, __isset.emptyMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> emptyMap_ref() const&& {
    return {std::move(this->emptyMap), __isset.emptyMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> emptyMap_ref() & {
    return {this->emptyMap, __isset.emptyMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> emptyMap_ref() && {
    return {std::move(this->emptyMap), __isset.emptyMap};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> enumMapDFset_ref() const& {
    return {this->enumMapDFset, __isset.enumMapDFset};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> enumMapDFset_ref() const&& {
    return {std::move(this->enumMapDFset), __isset.enumMapDFset};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> enumMapDFset_ref() & {
    return {this->enumMapDFset, __isset.enumMapDFset};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> enumMapDFset_ref() && {
    return {std::move(this->enumMapDFset), __isset.enumMapDFset};
  }

  ::std::int64_t get_myLongDFset() const {
    return myLongDFset;
  }

  [[deprecated("Use `FOO.myLongDFset_ref() = BAR;` instead of `FOO.set_myLongDFset(BAR);`")]]
  ::std::int64_t& set_myLongDFset(::std::int64_t myLongDFset_) {
    myLongDFset = myLongDFset_;
    __isset.myLongDFset = true;
    return myLongDFset;
  }

  ::std::int64_t get_myLongDF() const {
    return myLongDF;
  }

  [[deprecated("Use `FOO.myLongDF_ref() = BAR;` instead of `FOO.set_myLongDF(BAR);`")]]
  ::std::int64_t& set_myLongDF(::std::int64_t myLongDF_) {
    myLongDF = myLongDF_;
    __isset.myLongDF = true;
    return myLongDF;
  }

  ::std::int32_t get_portDFset() const {
    return portDFset;
  }

  [[deprecated("Use `FOO.portDFset_ref() = BAR;` instead of `FOO.set_portDFset(BAR);`")]]
  ::std::int32_t& set_portDFset(::std::int32_t portDFset_) {
    portDFset = portDFset_;
    __isset.portDFset = true;
    return portDFset;
  }

  ::std::int32_t get_portNum() const {
    return portNum;
  }

  [[deprecated("Use `FOO.portNum_ref() = BAR;` instead of `FOO.set_portNum(BAR);`")]]
  ::std::int32_t& set_portNum(::std::int32_t portNum_) {
    portNum = portNum_;
    __isset.portNum = true;
    return portNum;
  }

  const ::std::string& get_myBinaryDFset() const& {
    return myBinaryDFset;
  }

  ::std::string get_myBinaryDFset() && {
    return std::move(myBinaryDFset);
  }

  template <typename T_defaultStruct_myBinaryDFset_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myBinaryDFset_ref() = BAR;` instead of `FOO.set_myBinaryDFset(BAR);`")]]
  ::std::string& set_myBinaryDFset(T_defaultStruct_myBinaryDFset_struct_setter&& myBinaryDFset_) {
    myBinaryDFset = std::forward<T_defaultStruct_myBinaryDFset_struct_setter>(myBinaryDFset_);
    __isset.myBinaryDFset = true;
    return myBinaryDFset;
  }

  const ::std::string& get_myBinary() const& {
    return myBinary;
  }

  ::std::string get_myBinary() && {
    return std::move(myBinary);
  }

  template <typename T_defaultStruct_myBinary_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myBinary_ref() = BAR;` instead of `FOO.set_myBinary(BAR);`")]]
  ::std::string& set_myBinary(T_defaultStruct_myBinary_struct_setter&& myBinary_) {
    myBinary = std::forward<T_defaultStruct_myBinary_struct_setter>(myBinary_);
    __isset.myBinary = true;
    return myBinary;
  }

  ::std::int8_t get_myByteDFSet() const {
    return myByteDFSet;
  }

  [[deprecated("Use `FOO.myByteDFSet_ref() = BAR;` instead of `FOO.set_myByteDFSet(BAR);`")]]
  ::std::int8_t& set_myByteDFSet(::std::int8_t myByteDFSet_) {
    myByteDFSet = myByteDFSet_;
    __isset.myByteDFSet = true;
    return myByteDFSet;
  }

  ::std::int8_t get_myByte() const {
    return myByte;
  }

  [[deprecated("Use `FOO.myByte_ref() = BAR;` instead of `FOO.set_myByte(BAR);`")]]
  ::std::int8_t& set_myByte(::std::int8_t myByte_) {
    myByte = myByte_;
    __isset.myByte = true;
    return myByte;
  }

  double get_myDoubleDFset() const {
    return myDoubleDFset;
  }

  [[deprecated("Use `FOO.myDoubleDFset_ref() = BAR;` instead of `FOO.set_myDoubleDFset(BAR);`")]]
  double& set_myDoubleDFset(double myDoubleDFset_) {
    myDoubleDFset = myDoubleDFset_;
    __isset.myDoubleDFset = true;
    return myDoubleDFset;
  }

  double get_myDoubleDFZero() const {
    return myDoubleDFZero;
  }

  [[deprecated("Use `FOO.myDoubleDFZero_ref() = BAR;` instead of `FOO.set_myDoubleDFZero(BAR);`")]]
  double& set_myDoubleDFZero(double myDoubleDFZero_) {
    myDoubleDFZero = myDoubleDFZero_;
    __isset.myDoubleDFZero = true;
    return myDoubleDFZero;
  }

  double get_myDouble() const {
    return myDouble;
  }

  [[deprecated("Use `FOO.myDouble_ref() = BAR;` instead of `FOO.set_myDouble(BAR);`")]]
  double& set_myDouble(double myDouble_) {
    myDouble = myDouble_;
    __isset.myDouble = true;
    return myDouble;
  }
  const ::std::map<::std::int32_t, ::std::string>& get_field3() const&;
  ::std::map<::std::int32_t, ::std::string> get_field3() &&;

  template <typename T_defaultStruct_field3_struct_setter = ::std::map<::std::int32_t, ::std::string>>
  [[deprecated("Use `FOO.field3_ref() = BAR;` instead of `FOO.set_field3(BAR);`")]]
  ::std::map<::std::int32_t, ::std::string>& set_field3(T_defaultStruct_field3_struct_setter&& field3_) {
    field3 = std::forward<T_defaultStruct_field3_struct_setter>(field3_);
    __isset.field3 = true;
    return field3;
  }
  const ::std::vector<::cpp2::MyEnum>& get_myList() const&;
  ::std::vector<::cpp2::MyEnum> get_myList() &&;

  template <typename T_defaultStruct_myList_struct_setter = ::std::vector<::cpp2::MyEnum>>
  [[deprecated("Use `FOO.myList_ref() = BAR;` instead of `FOO.set_myList(BAR);`")]]
  ::std::vector<::cpp2::MyEnum>& set_myList(T_defaultStruct_myList_struct_setter&& myList_) {
    myList = std::forward<T_defaultStruct_myList_struct_setter>(myList_);
    __isset.myList = true;
    return myList;
  }
  const ::std::set<::std::string>& get_mySet() const&;
  ::std::set<::std::string> get_mySet() &&;

  template <typename T_defaultStruct_mySet_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.mySet_ref() = BAR;` instead of `FOO.set_mySet(BAR);`")]]
  ::std::set<::std::string>& set_mySet(T_defaultStruct_mySet_struct_setter&& mySet_) {
    mySet = std::forward<T_defaultStruct_mySet_struct_setter>(mySet_);
    __isset.mySet = true;
    return mySet;
  }
  const ::cpp2::SimpleStruct& get_simpleStruct() const&;
  ::cpp2::SimpleStruct get_simpleStruct() &&;

  template <typename T_defaultStruct_simpleStruct_struct_setter = ::cpp2::SimpleStruct>
  [[deprecated("Use `FOO.simpleStruct_ref() = BAR;` instead of `FOO.set_simpleStruct(BAR);`")]]
  ::cpp2::SimpleStruct& set_simpleStruct(T_defaultStruct_simpleStruct_struct_setter&& simpleStruct_) {
    simpleStruct = std::forward<T_defaultStruct_simpleStruct_struct_setter>(simpleStruct_);
    __isset.simpleStruct = true;
    return simpleStruct;
  }
  const ::std::vector<::cpp2::SimpleStruct>& get_listStructDFset() const&;
  ::std::vector<::cpp2::SimpleStruct> get_listStructDFset() &&;

  template <typename T_defaultStruct_listStructDFset_struct_setter = ::std::vector<::cpp2::SimpleStruct>>
  [[deprecated("Use `FOO.listStructDFset_ref() = BAR;` instead of `FOO.set_listStructDFset(BAR);`")]]
  ::std::vector<::cpp2::SimpleStruct>& set_listStructDFset(T_defaultStruct_listStructDFset_struct_setter&& listStructDFset_) {
    listStructDFset = std::forward<T_defaultStruct_listStructDFset_struct_setter>(listStructDFset_);
    __isset.listStructDFset = true;
    return listStructDFset;
  }
  const ::cpp2::MyUnion& get_myUnion() const&;
  ::cpp2::MyUnion get_myUnion() &&;

  template <typename T_defaultStruct_myUnion_struct_setter = ::cpp2::MyUnion>
  [[deprecated("Use `FOO.myUnion_ref() = BAR;` instead of `FOO.set_myUnion(BAR);`")]]
  ::cpp2::MyUnion& set_myUnion(T_defaultStruct_myUnion_struct_setter&& myUnion_) {
    myUnion = std::forward<T_defaultStruct_myUnion_struct_setter>(myUnion_);
    __isset.myUnion = true;
    return myUnion;
  }
  const ::std::vector<::cpp2::MyUnion>& get_listUnionDFset() const&;
  ::std::vector<::cpp2::MyUnion> get_listUnionDFset() &&;

  template <typename T_defaultStruct_listUnionDFset_struct_setter = ::std::vector<::cpp2::MyUnion>>
  [[deprecated("Use `FOO.listUnionDFset_ref() = BAR;` instead of `FOO.set_listUnionDFset(BAR);`")]]
  ::std::vector<::cpp2::MyUnion>& set_listUnionDFset(T_defaultStruct_listUnionDFset_struct_setter&& listUnionDFset_) {
    listUnionDFset = std::forward<T_defaultStruct_listUnionDFset_struct_setter>(listUnionDFset_);
    __isset.listUnionDFset = true;
    return listUnionDFset;
  }
  const ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& get_mapNestlistStructDfSet() const&;
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>> get_mapNestlistStructDfSet() &&;

  template <typename T_defaultStruct_mapNestlistStructDfSet_struct_setter = ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>>
  [[deprecated("Use `FOO.mapNestlistStructDfSet_ref() = BAR;` instead of `FOO.set_mapNestlistStructDfSet(BAR);`")]]
  ::std::map<::std::int32_t, ::std::vector<::cpp2::SimpleStruct>>& set_mapNestlistStructDfSet(T_defaultStruct_mapNestlistStructDfSet_struct_setter&& mapNestlistStructDfSet_) {
    mapNestlistStructDfSet = std::forward<T_defaultStruct_mapNestlistStructDfSet_struct_setter>(mapNestlistStructDfSet_);
    __isset.mapNestlistStructDfSet = true;
    return mapNestlistStructDfSet;
  }
  const ::std::map<::std::int64_t, ::std::string>& get_mapJavaTypeDFset() const&;
  ::std::map<::std::int64_t, ::std::string> get_mapJavaTypeDFset() &&;

  template <typename T_defaultStruct_mapJavaTypeDFset_struct_setter = ::std::map<::std::int64_t, ::std::string>>
  [[deprecated("Use `FOO.mapJavaTypeDFset_ref() = BAR;` instead of `FOO.set_mapJavaTypeDFset(BAR);`")]]
  ::std::map<::std::int64_t, ::std::string>& set_mapJavaTypeDFset(T_defaultStruct_mapJavaTypeDFset_struct_setter&& mapJavaTypeDFset_) {
    mapJavaTypeDFset = std::forward<T_defaultStruct_mapJavaTypeDFset_struct_setter>(mapJavaTypeDFset_);
    __isset.mapJavaTypeDFset = true;
    return mapJavaTypeDFset;
  }
  const ::std::map<::std::int64_t, ::std::int32_t>& get_emptyMap() const&;
  ::std::map<::std::int64_t, ::std::int32_t> get_emptyMap() &&;

  template <typename T_defaultStruct_emptyMap_struct_setter = ::std::map<::std::int64_t, ::std::int32_t>>
  [[deprecated("Use `FOO.emptyMap_ref() = BAR;` instead of `FOO.set_emptyMap(BAR);`")]]
  ::std::map<::std::int64_t, ::std::int32_t>& set_emptyMap(T_defaultStruct_emptyMap_struct_setter&& emptyMap_) {
    emptyMap = std::forward<T_defaultStruct_emptyMap_struct_setter>(emptyMap_);
    __isset.emptyMap = true;
    return emptyMap;
  }
  const ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& get_enumMapDFset() const&;
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>> get_enumMapDFset() &&;

  template <typename T_defaultStruct_enumMapDFset_struct_setter = ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>>
  [[deprecated("Use `FOO.enumMapDFset_ref() = BAR;` instead of `FOO.set_enumMapDFset(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::int32_t, ::cpp2::MyEnum>>& set_enumMapDFset(T_defaultStruct_enumMapDFset_struct_setter&& enumMapDFset_) {
    enumMapDFset = std::forward<T_defaultStruct_enumMapDFset_struct_setter>(enumMapDFset_);
    __isset.enumMapDFset = true;
    return enumMapDFset;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<defaultStruct>;
  friend void swap(defaultStruct& a, defaultStruct& b);
};

template <class Protocol_>
uint32_t defaultStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyStructTypeDef final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyStructTypeDef;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructTypeDef();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructTypeDef(apache::thrift::FragileConstructor, ::std::int64_t myLongField__arg, ::cpp2::longTypeDef myLongTypeDef__arg, ::std::string myStringField__arg, ::cpp2::stringTypedef myStringTypedef__arg, ::std::map<::std::int16_t, ::std::string> myMapField__arg, ::cpp2::mapTypedef myMapTypedef__arg, ::std::vector<double> myListField__arg, ::cpp2::listTypedef myListTypedef__arg, ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> myMapListOfTypeDef__arg);

  MyStructTypeDef(MyStructTypeDef&&) noexcept;

  MyStructTypeDef(const MyStructTypeDef& src);


  MyStructTypeDef& operator=(MyStructTypeDef&&) noexcept;
  MyStructTypeDef& operator=(const MyStructTypeDef& src);
  void __clear();

  ~MyStructTypeDef();

 private:
  ::std::int64_t myLongField;
 private:
  ::cpp2::longTypeDef myLongTypeDef;
 private:
  ::std::string myStringField;
 private:
  ::cpp2::stringTypedef myStringTypedef;
 private:
  ::std::map<::std::int16_t, ::std::string> myMapField;
 private:
  ::cpp2::mapTypedef myMapTypedef;
 private:
  ::std::vector<double> myListField;
 private:
  ::cpp2::listTypedef myListTypedef;
 private:
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> myMapListOfTypeDef;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool myLongField;
    bool myLongTypeDef;
    bool myStringField;
    bool myStringTypedef;
    bool myMapField;
    bool myMapTypedef;
    bool myListField;
    bool myListTypedef;
    bool myMapListOfTypeDef;
  } __isset = {};

 public:

  bool operator==(const MyStructTypeDef&) const;
  bool operator<(const MyStructTypeDef&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongField_ref() const& {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongField_ref() const&& {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongField_ref() & {
    return {this->myLongField, __isset.myLongField};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongField_ref() && {
    return {std::move(this->myLongField), __isset.myLongField};
  }

  template <typename..., typename T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myLongTypeDef_ref() const& {
    return {this->myLongTypeDef, __isset.myLongTypeDef};
  }

  template <typename..., typename T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myLongTypeDef_ref() const&& {
    return {std::move(this->myLongTypeDef), __isset.myLongTypeDef};
  }

  template <typename..., typename T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myLongTypeDef_ref() & {
    return {this->myLongTypeDef, __isset.myLongTypeDef};
  }

  template <typename..., typename T = ::cpp2::longTypeDef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myLongTypeDef_ref() && {
    return {std::move(this->myLongTypeDef), __isset.myLongTypeDef};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myStringField_ref() const& {
    return {this->myStringField, __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myStringField_ref() const&& {
    return {std::move(this->myStringField), __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myStringField_ref() & {
    return {this->myStringField, __isset.myStringField};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myStringField_ref() && {
    return {std::move(this->myStringField), __isset.myStringField};
  }

  template <typename..., typename T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myStringTypedef_ref() const& {
    return {this->myStringTypedef, __isset.myStringTypedef};
  }

  template <typename..., typename T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myStringTypedef_ref() const&& {
    return {std::move(this->myStringTypedef), __isset.myStringTypedef};
  }

  template <typename..., typename T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myStringTypedef_ref() & {
    return {this->myStringTypedef, __isset.myStringTypedef};
  }

  template <typename..., typename T = ::cpp2::stringTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myStringTypedef_ref() && {
    return {std::move(this->myStringTypedef), __isset.myStringTypedef};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myMapField_ref() const& {
    return {this->myMapField, __isset.myMapField};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myMapField_ref() const&& {
    return {std::move(this->myMapField), __isset.myMapField};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myMapField_ref() & {
    return {this->myMapField, __isset.myMapField};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myMapField_ref() && {
    return {std::move(this->myMapField), __isset.myMapField};
  }

  template <typename..., typename T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myMapTypedef_ref() const& {
    return {this->myMapTypedef, __isset.myMapTypedef};
  }

  template <typename..., typename T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myMapTypedef_ref() const&& {
    return {std::move(this->myMapTypedef), __isset.myMapTypedef};
  }

  template <typename..., typename T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myMapTypedef_ref() & {
    return {this->myMapTypedef, __isset.myMapTypedef};
  }

  template <typename..., typename T = ::cpp2::mapTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myMapTypedef_ref() && {
    return {std::move(this->myMapTypedef), __isset.myMapTypedef};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myListField_ref() const& {
    return {this->myListField, __isset.myListField};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myListField_ref() const&& {
    return {std::move(this->myListField), __isset.myListField};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myListField_ref() & {
    return {this->myListField, __isset.myListField};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myListField_ref() && {
    return {std::move(this->myListField), __isset.myListField};
  }

  template <typename..., typename T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myListTypedef_ref() const& {
    return {this->myListTypedef, __isset.myListTypedef};
  }

  template <typename..., typename T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myListTypedef_ref() const&& {
    return {std::move(this->myListTypedef), __isset.myListTypedef};
  }

  template <typename..., typename T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myListTypedef_ref() & {
    return {this->myListTypedef, __isset.myListTypedef};
  }

  template <typename..., typename T = ::cpp2::listTypedef>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myListTypedef_ref() && {
    return {std::move(this->myListTypedef), __isset.myListTypedef};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myMapListOfTypeDef_ref() const& {
    return {this->myMapListOfTypeDef, __isset.myMapListOfTypeDef};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myMapListOfTypeDef_ref() const&& {
    return {std::move(this->myMapListOfTypeDef), __isset.myMapListOfTypeDef};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myMapListOfTypeDef_ref() & {
    return {this->myMapListOfTypeDef, __isset.myMapListOfTypeDef};
  }

  template <typename..., typename T = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myMapListOfTypeDef_ref() && {
    return {std::move(this->myMapListOfTypeDef), __isset.myMapListOfTypeDef};
  }

  ::std::int64_t get_myLongField() const {
    return myLongField;
  }

  [[deprecated("Use `FOO.myLongField_ref() = BAR;` instead of `FOO.set_myLongField(BAR);`")]]
  ::std::int64_t& set_myLongField(::std::int64_t myLongField_) {
    myLongField = myLongField_;
    __isset.myLongField = true;
    return myLongField;
  }

  ::cpp2::longTypeDef get_myLongTypeDef() const {
    return myLongTypeDef;
  }

  [[deprecated("Use `FOO.myLongTypeDef_ref() = BAR;` instead of `FOO.set_myLongTypeDef(BAR);`")]]
  ::cpp2::longTypeDef& set_myLongTypeDef(::cpp2::longTypeDef myLongTypeDef_) {
    myLongTypeDef = myLongTypeDef_;
    __isset.myLongTypeDef = true;
    return myLongTypeDef;
  }

  const ::std::string& get_myStringField() const& {
    return myStringField;
  }

  ::std::string get_myStringField() && {
    return std::move(myStringField);
  }

  template <typename T_MyStructTypeDef_myStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.myStringField_ref() = BAR;` instead of `FOO.set_myStringField(BAR);`")]]
  ::std::string& set_myStringField(T_MyStructTypeDef_myStringField_struct_setter&& myStringField_) {
    myStringField = std::forward<T_MyStructTypeDef_myStringField_struct_setter>(myStringField_);
    __isset.myStringField = true;
    return myStringField;
  }

  const ::cpp2::stringTypedef& get_myStringTypedef() const& {
    return myStringTypedef;
  }

  ::cpp2::stringTypedef get_myStringTypedef() && {
    return std::move(myStringTypedef);
  }

  template <typename T_MyStructTypeDef_myStringTypedef_struct_setter = ::cpp2::stringTypedef>
  [[deprecated("Use `FOO.myStringTypedef_ref() = BAR;` instead of `FOO.set_myStringTypedef(BAR);`")]]
  ::cpp2::stringTypedef& set_myStringTypedef(T_MyStructTypeDef_myStringTypedef_struct_setter&& myStringTypedef_) {
    myStringTypedef = std::forward<T_MyStructTypeDef_myStringTypedef_struct_setter>(myStringTypedef_);
    __isset.myStringTypedef = true;
    return myStringTypedef;
  }
  const ::std::map<::std::int16_t, ::std::string>& get_myMapField() const&;
  ::std::map<::std::int16_t, ::std::string> get_myMapField() &&;

  template <typename T_MyStructTypeDef_myMapField_struct_setter = ::std::map<::std::int16_t, ::std::string>>
  [[deprecated("Use `FOO.myMapField_ref() = BAR;` instead of `FOO.set_myMapField(BAR);`")]]
  ::std::map<::std::int16_t, ::std::string>& set_myMapField(T_MyStructTypeDef_myMapField_struct_setter&& myMapField_) {
    myMapField = std::forward<T_MyStructTypeDef_myMapField_struct_setter>(myMapField_);
    __isset.myMapField = true;
    return myMapField;
  }
  const ::cpp2::mapTypedef& get_myMapTypedef() const&;
  ::cpp2::mapTypedef get_myMapTypedef() &&;

  template <typename T_MyStructTypeDef_myMapTypedef_struct_setter = ::cpp2::mapTypedef>
  [[deprecated("Use `FOO.myMapTypedef_ref() = BAR;` instead of `FOO.set_myMapTypedef(BAR);`")]]
  ::cpp2::mapTypedef& set_myMapTypedef(T_MyStructTypeDef_myMapTypedef_struct_setter&& myMapTypedef_) {
    myMapTypedef = std::forward<T_MyStructTypeDef_myMapTypedef_struct_setter>(myMapTypedef_);
    __isset.myMapTypedef = true;
    return myMapTypedef;
  }
  const ::std::vector<double>& get_myListField() const&;
  ::std::vector<double> get_myListField() &&;

  template <typename T_MyStructTypeDef_myListField_struct_setter = ::std::vector<double>>
  [[deprecated("Use `FOO.myListField_ref() = BAR;` instead of `FOO.set_myListField(BAR);`")]]
  ::std::vector<double>& set_myListField(T_MyStructTypeDef_myListField_struct_setter&& myListField_) {
    myListField = std::forward<T_MyStructTypeDef_myListField_struct_setter>(myListField_);
    __isset.myListField = true;
    return myListField;
  }
  const ::cpp2::listTypedef& get_myListTypedef() const&;
  ::cpp2::listTypedef get_myListTypedef() &&;

  template <typename T_MyStructTypeDef_myListTypedef_struct_setter = ::cpp2::listTypedef>
  [[deprecated("Use `FOO.myListTypedef_ref() = BAR;` instead of `FOO.set_myListTypedef(BAR);`")]]
  ::cpp2::listTypedef& set_myListTypedef(T_MyStructTypeDef_myListTypedef_struct_setter&& myListTypedef_) {
    myListTypedef = std::forward<T_MyStructTypeDef_myListTypedef_struct_setter>(myListTypedef_);
    __isset.myListTypedef = true;
    return myListTypedef;
  }
  const ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& get_myMapListOfTypeDef() const&;
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>> get_myMapListOfTypeDef() &&;

  template <typename T_MyStructTypeDef_myMapListOfTypeDef_struct_setter = ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>>
  [[deprecated("Use `FOO.myMapListOfTypeDef_ref() = BAR;` instead of `FOO.set_myMapListOfTypeDef(BAR);`")]]
  ::std::map<::std::int16_t, ::std::vector<::cpp2::listTypedef>>& set_myMapListOfTypeDef(T_MyStructTypeDef_myMapListOfTypeDef_struct_setter&& myMapListOfTypeDef_) {
    myMapListOfTypeDef = std::forward<T_MyStructTypeDef_myMapListOfTypeDef_struct_setter>(myMapListOfTypeDef_);
    __isset.myMapListOfTypeDef = true;
    return myMapListOfTypeDef;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructTypeDef>;
  friend void swap(MyStructTypeDef& a, MyStructTypeDef& b);
};

template <class Protocol_>
uint32_t MyStructTypeDef::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class MyUnionFloatFieldThrowExp final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = MyUnionFloatFieldThrowExp;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    setFloat = 2,
    myDataItem = 3,
    complexNestedStruct = 4,
  } ;

  MyUnionFloatFieldThrowExp()
      : type_(Type::__EMPTY__) {}

  MyUnionFloatFieldThrowExp(MyUnionFloatFieldThrowExp&& rhs) noexcept
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(std::move(rhs.value_.setFloat));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  MyUnionFloatFieldThrowExp(const MyUnionFloatFieldThrowExp& rhs)
      : type_(Type::__EMPTY__) {
    if (this == &rhs) { return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(rhs.value_.setFloat);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnionFloatFieldThrowExp& operator=(MyUnionFloatFieldThrowExp&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(std::move(rhs.value_.setFloat));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(std::move(rhs.value_.complexNestedStruct));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  MyUnionFloatFieldThrowExp& operator=(const MyUnionFloatFieldThrowExp& rhs) {
    if (this == &rhs) { return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch (rhs.type_) {
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::setFloat:
      {
        set_setFloat(rhs.value_.setFloat);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::complexNestedStruct:
      {
        set_complexNestedStruct(rhs.value_.complexNestedStruct);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  void __clear();

  ~MyUnionFloatFieldThrowExp() {
    __clear();
  }
  union storage_type {
    ::cpp2::MyEnum myEnum;
    ::std::vector<::std::vector<float>> setFloat;
    ::cpp2::MyDataItem myDataItem;
    ::cpp2::ComplexNestedStruct complexNestedStruct;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnionFloatFieldThrowExp&) const;
  bool operator<(const MyUnionFloatFieldThrowExp&) const;

  ::cpp2::MyEnum& set_myEnum(::cpp2::MyEnum t = ::cpp2::MyEnum()) {
    __clear();
    type_ = Type::myEnum;
    ::new (std::addressof(value_.myEnum)) ::cpp2::MyEnum(t);
    return value_.myEnum;
  }

  ::std::vector<::std::vector<float>>& set_setFloat(::std::vector<::std::vector<float>> const &t) {
    __clear();
    type_ = Type::setFloat;
    ::new (std::addressof(value_.setFloat)) ::std::vector<::std::vector<float>>(t);
    return value_.setFloat;
  }

  ::std::vector<::std::vector<float>>& set_setFloat(::std::vector<::std::vector<float>>&& t) {
    __clear();
    type_ = Type::setFloat;
    ::new (std::addressof(value_.setFloat)) ::std::vector<::std::vector<float>>(std::move(t));
    return value_.setFloat;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<::std::vector<float>>, T...>> ::std::vector<::std::vector<float>>& set_setFloat(T&&... t) {
    __clear();
    type_ = Type::setFloat;
    ::new (std::addressof(value_.setFloat)) ::std::vector<::std::vector<float>>(std::forward<T>(t)...);
    return value_.setFloat;
  }

  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem const &t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(t);
    return value_.myDataItem;
  }

  ::cpp2::MyDataItem& set_myDataItem(::cpp2::MyDataItem&& t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::move(t));
    return value_.myDataItem;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::MyDataItem, T...>> ::cpp2::MyDataItem& set_myDataItem(T&&... t) {
    __clear();
    type_ = Type::myDataItem;
    ::new (std::addressof(value_.myDataItem)) ::cpp2::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct const &t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(t);
    return value_.complexNestedStruct;
  }

  ::cpp2::ComplexNestedStruct& set_complexNestedStruct(::cpp2::ComplexNestedStruct&& t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::move(t));
    return value_.complexNestedStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::cpp2::ComplexNestedStruct, T...>> ::cpp2::ComplexNestedStruct& set_complexNestedStruct(T&&... t) {
    __clear();
    type_ = Type::complexNestedStruct;
    ::new (std::addressof(value_.complexNestedStruct)) ::cpp2::ComplexNestedStruct(std::forward<T>(t)...);
    return value_.complexNestedStruct;
  }

  ::cpp2::MyEnum const& get_myEnum() const {
    if (type_ != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.myEnum;
  }

  ::std::vector<::std::vector<float>> const& get_setFloat() const {
    if (type_ != Type::setFloat) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.setFloat;
  }

  ::cpp2::MyDataItem const& get_myDataItem() const {
    if (type_ != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct const& get_complexNestedStruct() const {
    if (type_ != Type::complexNestedStruct) {
      ::apache::thrift::detail::throw_on_bad_field_access();
    }
    return value_.complexNestedStruct;
  }

  ::cpp2::MyEnum& mutable_myEnum() {
    assert(type_ == Type::myEnum);
    return value_.myEnum;
  }

  ::std::vector<::std::vector<float>>& mutable_setFloat() {
    assert(type_ == Type::setFloat);
    return value_.setFloat;
  }

  ::cpp2::MyDataItem& mutable_myDataItem() {
    assert(type_ == Type::myDataItem);
    return value_.myDataItem;
  }

  ::cpp2::ComplexNestedStruct& mutable_complexNestedStruct() {
    assert(type_ == Type::complexNestedStruct);
    return value_.complexNestedStruct;
  }

  ::cpp2::MyEnum move_myEnum() {
    assert(type_ == Type::myEnum);
    return std::move(value_.myEnum);
  }

  ::std::vector<::std::vector<float>> move_setFloat() {
    assert(type_ == Type::setFloat);
    return std::move(value_.setFloat);
  }

  ::cpp2::MyDataItem move_myDataItem() {
    assert(type_ == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  ::cpp2::ComplexNestedStruct move_complexNestedStruct() {
    assert(type_ == Type::complexNestedStruct);
    return std::move(value_.complexNestedStruct);
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(value_.myEnum), type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), type_, myEnum, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> setFloat_ref() const& {
    return {value_.setFloat, type_, setFloat, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> setFloat_ref() const&& {
    return {std::move(value_.setFloat), type_, setFloat, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> setFloat_ref() & {
    return {value_.setFloat, type_, setFloat, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<::std::vector<float>>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> setFloat_ref() && {
    return {std::move(value_.setFloat), type_, setFloat, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myDataItem_ref() const&& {
    return {std::move(value_.myDataItem), type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), type_, myDataItem, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> complexNestedStruct_ref() const& {
    return {value_.complexNestedStruct, type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> complexNestedStruct_ref() const&& {
    return {std::move(value_.complexNestedStruct), type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> complexNestedStruct_ref() & {
    return {value_.complexNestedStruct, type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::cpp2::ComplexNestedStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> complexNestedStruct_ref() && {
    return {std::move(value_.complexNestedStruct), type_, complexNestedStruct, this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnionFloatFieldThrowExp>;
  friend void swap(MyUnionFloatFieldThrowExp& a, MyUnionFloatFieldThrowExp& b);
};

template <class Protocol_>
uint32_t MyUnionFloatFieldThrowExp::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class TypeRemapped final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = TypeRemapped;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TypeRemapped() :
      BigInteger(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TypeRemapped(apache::thrift::FragileConstructor, ::std::map<::std::int64_t, ::std::string> lsMap__arg, ::std::map<::std::int32_t, ::cpp2::FMap> ioMap__arg, ::std::int32_t BigInteger__arg, ::std::string binaryTestBuffer__arg);

  TypeRemapped(TypeRemapped&&) noexcept;

  TypeRemapped(const TypeRemapped& src);


  TypeRemapped& operator=(TypeRemapped&&) noexcept;
  TypeRemapped& operator=(const TypeRemapped& src);
  void __clear();
 private:
  ::std::map<::std::int64_t, ::std::string> lsMap;
 private:
  ::std::map<::std::int32_t, ::cpp2::FMap> ioMap;
 private:
  ::std::int32_t BigInteger;
 private:
  ::std::string binaryTestBuffer;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool lsMap;
    bool ioMap;
    bool BigInteger;
    bool binaryTestBuffer;
  } __isset = {};

 public:

  bool operator==(const TypeRemapped&) const;
  bool operator<(const TypeRemapped&) const;

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lsMap_ref() const& {
    return {this->lsMap, __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lsMap_ref() const&& {
    return {std::move(this->lsMap), __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lsMap_ref() & {
    return {this->lsMap, __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lsMap_ref() && {
    return {std::move(this->lsMap), __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::cpp2::FMap>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> ioMap_ref() const& {
    return {this->ioMap, __isset.ioMap};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::cpp2::FMap>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> ioMap_ref() const&& {
    return {std::move(this->ioMap), __isset.ioMap};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::cpp2::FMap>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> ioMap_ref() & {
    return {this->ioMap, __isset.ioMap};
  }

  template <typename..., typename T = ::std::map<::std::int32_t, ::cpp2::FMap>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> ioMap_ref() && {
    return {std::move(this->ioMap), __isset.ioMap};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> BigInteger_ref() const& {
    return {this->BigInteger, __isset.BigInteger};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> BigInteger_ref() const&& {
    return {std::move(this->BigInteger), __isset.BigInteger};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> BigInteger_ref() & {
    return {this->BigInteger, __isset.BigInteger};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> BigInteger_ref() && {
    return {std::move(this->BigInteger), __isset.BigInteger};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryTestBuffer_ref() const& {
    return {this->binaryTestBuffer, __isset.binaryTestBuffer};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryTestBuffer_ref() const&& {
    return {std::move(this->binaryTestBuffer), __isset.binaryTestBuffer};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryTestBuffer_ref() & {
    return {this->binaryTestBuffer, __isset.binaryTestBuffer};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryTestBuffer_ref() && {
    return {std::move(this->binaryTestBuffer), __isset.binaryTestBuffer};
  }
  const ::std::map<::std::int64_t, ::std::string>& get_lsMap() const&;
  ::std::map<::std::int64_t, ::std::string> get_lsMap() &&;

  template <typename T_TypeRemapped_lsMap_struct_setter = ::std::map<::std::int64_t, ::std::string>>
  [[deprecated("Use `FOO.lsMap_ref() = BAR;` instead of `FOO.set_lsMap(BAR);`")]]
  ::std::map<::std::int64_t, ::std::string>& set_lsMap(T_TypeRemapped_lsMap_struct_setter&& lsMap_) {
    lsMap = std::forward<T_TypeRemapped_lsMap_struct_setter>(lsMap_);
    __isset.lsMap = true;
    return lsMap;
  }
  const ::std::map<::std::int32_t, ::cpp2::FMap>& get_ioMap() const&;
  ::std::map<::std::int32_t, ::cpp2::FMap> get_ioMap() &&;

  template <typename T_TypeRemapped_ioMap_struct_setter = ::std::map<::std::int32_t, ::cpp2::FMap>>
  [[deprecated("Use `FOO.ioMap_ref() = BAR;` instead of `FOO.set_ioMap(BAR);`")]]
  ::std::map<::std::int32_t, ::cpp2::FMap>& set_ioMap(T_TypeRemapped_ioMap_struct_setter&& ioMap_) {
    ioMap = std::forward<T_TypeRemapped_ioMap_struct_setter>(ioMap_);
    __isset.ioMap = true;
    return ioMap;
  }

  ::std::int32_t get_BigInteger() const {
    return BigInteger;
  }

  [[deprecated("Use `FOO.BigInteger_ref() = BAR;` instead of `FOO.set_BigInteger(BAR);`")]]
  ::std::int32_t& set_BigInteger(::std::int32_t BigInteger_) {
    BigInteger = BigInteger_;
    __isset.BigInteger = true;
    return BigInteger;
  }

  const ::std::string& get_binaryTestBuffer() const& {
    return binaryTestBuffer;
  }

  ::std::string get_binaryTestBuffer() && {
    return std::move(binaryTestBuffer);
  }

  template <typename T_TypeRemapped_binaryTestBuffer_struct_setter = ::std::string>
  [[deprecated("Use `FOO.binaryTestBuffer_ref() = BAR;` instead of `FOO.set_binaryTestBuffer(BAR);`")]]
  ::std::string& set_binaryTestBuffer(T_TypeRemapped_binaryTestBuffer_struct_setter&& binaryTestBuffer_) {
    binaryTestBuffer = std::forward<T_TypeRemapped_binaryTestBuffer_struct_setter>(binaryTestBuffer_);
    __isset.binaryTestBuffer = true;
    return binaryTestBuffer;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TypeRemapped>;
  friend void swap(TypeRemapped& a, TypeRemapped& b);
};

template <class Protocol_>
uint32_t TypeRemapped::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class FOLLY_EXPORT emptyXcep final : public apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = emptyXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  emptyXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  emptyXcep(apache::thrift::FragileConstructor);

  emptyXcep(emptyXcep&&) noexcept;

  emptyXcep(const emptyXcep& src);


  emptyXcep& operator=(emptyXcep&&) noexcept;
  emptyXcep& operator=(const emptyXcep& src);
  void __clear();

  ~emptyXcep() override;


 public:

  bool operator==(const emptyXcep&) const;
  bool operator<(const emptyXcep&) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::emptyXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<emptyXcep>;
  friend void swap(emptyXcep& a, emptyXcep& b);
};

template <class Protocol_>
uint32_t emptyXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class FOLLY_EXPORT reqXcep final : public apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = reqXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  reqXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  reqXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg);

  reqXcep(reqXcep&&) noexcept;

  reqXcep(const reqXcep& src);


  reqXcep& operator=(reqXcep&&) noexcept;
  reqXcep& operator=(const reqXcep& src);
  void __clear();

  ~reqXcep() override;

 public:
  ::std::string message;
 public:
  ::std::int32_t errorCode;

 private:

 public:

  bool operator==(const reqXcep&) const;
  bool operator<(const reqXcep&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> message_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> message_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->message)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> message_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> message_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->message)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&> errorCode_ref() const& {
    return ::apache::thrift::required_field_ref<const T&>{this->errorCode};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<const T&&> errorCode_ref() const&& {
    return ::apache::thrift::required_field_ref<const T&&>{std::move(this->errorCode)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&> errorCode_ref() & {
    return ::apache::thrift::required_field_ref<T&>{this->errorCode};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::required_field_ref<T&&> errorCode_ref() && {
    return ::apache::thrift::required_field_ref<T&&>{std::move(this->errorCode)};
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_reqXcep_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_reqXcep_message_struct_setter&& message_) {
    message = std::forward<T_reqXcep_message_struct_setter>(message_);
    return message;
  }

  ::std::int32_t get_errorCode() const {
    return errorCode;
  }

  [[deprecated("Use `FOO.errorCode_ref() = BAR;` instead of `FOO.set_errorCode(BAR);`")]]
  ::std::int32_t& set_errorCode(::std::int32_t errorCode_) {
    errorCode = errorCode_;
    return errorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::reqXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<reqXcep>;
  friend void swap(reqXcep& a, reqXcep& b);
};

template <class Protocol_>
uint32_t reqXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class FOLLY_EXPORT optXcep final : public apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = optXcep;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  optXcep();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  optXcep(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::int32_t errorCode__arg);

  optXcep(optXcep&&) noexcept;

  optXcep(const optXcep& src);


  optXcep& operator=(optXcep&&) noexcept;
  optXcep& operator=(const optXcep& src);
  void __clear();

  ~optXcep() override;

 private:
  ::std::string message;
 private:
  ::std::int32_t errorCode;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool message;
    bool errorCode;
  } __isset = {};

 public:

  bool operator==(const optXcep&) const;
  bool operator<(const optXcep&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> errorCode_ref() const& {
    return {this->errorCode, __isset.errorCode};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> errorCode_ref() const&& {
    return {std::move(this->errorCode), __isset.errorCode};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> errorCode_ref() & {
    return {this->errorCode, __isset.errorCode};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> errorCode_ref() && {
    return {std::move(this->errorCode), __isset.errorCode};
  }

  const ::std::string* get_message() const& {
    return message_ref() ? std::addressof(message) : nullptr;
  }

  ::std::string* get_message() & {
    return message_ref() ? std::addressof(message) : nullptr;
  }
  ::std::string* get_message() && = delete;

  template <typename T_optXcep_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_optXcep_message_struct_setter&& message_) {
    message = std::forward<T_optXcep_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }

  const ::std::int32_t* get_errorCode() const& {
    return errorCode_ref() ? std::addressof(errorCode) : nullptr;
  }

  ::std::int32_t* get_errorCode() & {
    return errorCode_ref() ? std::addressof(errorCode) : nullptr;
  }
  ::std::int32_t* get_errorCode() && = delete;

  [[deprecated("Use `FOO.errorCode_ref() = BAR;` instead of `FOO.set_errorCode(BAR);`")]]
  ::std::int32_t& set_errorCode(::std::int32_t errorCode_) {
    errorCode = errorCode_;
    __isset.errorCode = true;
    return errorCode;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::optXcep";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<optXcep>;
  friend void swap(optXcep& a, optXcep& b);
};

template <class Protocol_>
uint32_t optXcep::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class FOLLY_EXPORT complexException final : public apache::thrift::TException {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;
  static constexpr ::apache::thrift::ExceptionKind __fbthrift_cpp2_gen_exception_kind =
         ::apache::thrift::ExceptionKind::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionSafety __fbthrift_cpp2_gen_exception_safety =
         ::apache::thrift::ExceptionSafety::UNSPECIFIED;
  static constexpr ::apache::thrift::ExceptionBlame __fbthrift_cpp2_gen_exception_blame =
         ::apache::thrift::ExceptionBlame::UNSPECIFIED;

 public:
  using __fbthrift_cpp2_type = complexException;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  complexException();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  complexException(apache::thrift::FragileConstructor, ::std::string message__arg, ::std::vector<::std::string> listStrings__arg, ::cpp2::MyEnum errorEnum__arg, ::cpp2::MyUnion unionError__arg, ::cpp2::MyStruct structError__arg, ::std::map<::std::int64_t, ::std::string> lsMap__arg);

  complexException(complexException&&) noexcept;

  complexException(const complexException& src);


  complexException& operator=(complexException&&) noexcept;
  complexException& operator=(const complexException& src);
  void __clear();

  ~complexException() override;

 private:
  ::std::string message;
 private:
  ::std::vector<::std::string> listStrings;
 private:
  ::cpp2::MyEnum errorEnum;
 private:
  ::cpp2::MyUnion unionError;
 private:
  ::cpp2::MyStruct structError;
 private:
  ::std::map<::std::int64_t, ::std::string> lsMap;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool message;
    bool listStrings;
    bool errorEnum;
    bool unionError;
    bool structError;
    bool lsMap;
  } __isset = {};

 public:

  bool operator==(const complexException&) const;
  bool operator<(const complexException&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> message_ref() const& {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> message_ref() const&& {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> message_ref() & {
    return {this->message, __isset.message};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> message_ref() && {
    return {std::move(this->message), __isset.message};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> listStrings_ref() const& {
    return {this->listStrings, __isset.listStrings};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> listStrings_ref() const&& {
    return {std::move(this->listStrings), __isset.listStrings};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> listStrings_ref() & {
    return {this->listStrings, __isset.listStrings};
  }

  template <typename..., typename T = ::std::vector<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> listStrings_ref() && {
    return {std::move(this->listStrings), __isset.listStrings};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> errorEnum_ref() const& {
    return {this->errorEnum, __isset.errorEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> errorEnum_ref() const&& {
    return {std::move(this->errorEnum), __isset.errorEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> errorEnum_ref() & {
    return {this->errorEnum, __isset.errorEnum};
  }

  template <typename..., typename T = ::cpp2::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> errorEnum_ref() && {
    return {std::move(this->errorEnum), __isset.errorEnum};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> unionError_ref() const& {
    return {this->unionError, __isset.unionError};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> unionError_ref() const&& {
    return {std::move(this->unionError), __isset.unionError};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> unionError_ref() & {
    return {this->unionError, __isset.unionError};
  }

  template <typename..., typename T = ::cpp2::MyUnion>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> unionError_ref() && {
    return {std::move(this->unionError), __isset.unionError};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structError_ref() const& {
    return {this->structError, __isset.structError};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structError_ref() const&& {
    return {std::move(this->structError), __isset.structError};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structError_ref() & {
    return {this->structError, __isset.structError};
  }

  template <typename..., typename T = ::cpp2::MyStruct>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structError_ref() && {
    return {std::move(this->structError), __isset.structError};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> lsMap_ref() const& {
    return {this->lsMap, __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> lsMap_ref() const&& {
    return {std::move(this->lsMap), __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> lsMap_ref() & {
    return {this->lsMap, __isset.lsMap};
  }

  template <typename..., typename T = ::std::map<::std::int64_t, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> lsMap_ref() && {
    return {std::move(this->lsMap), __isset.lsMap};
  }

  const ::std::string& get_message() const& {
    return message;
  }

  ::std::string get_message() && {
    return std::move(message);
  }

  template <typename T_complexException_message_struct_setter = ::std::string>
  [[deprecated("Use `FOO.message_ref() = BAR;` instead of `FOO.set_message(BAR);`")]]
  ::std::string& set_message(T_complexException_message_struct_setter&& message_) {
    message = std::forward<T_complexException_message_struct_setter>(message_);
    __isset.message = true;
    return message;
  }
  const ::std::vector<::std::string>& get_listStrings() const&;
  ::std::vector<::std::string> get_listStrings() &&;

  template <typename T_complexException_listStrings_struct_setter = ::std::vector<::std::string>>
  [[deprecated("Use `FOO.listStrings_ref() = BAR;` instead of `FOO.set_listStrings(BAR);`")]]
  ::std::vector<::std::string>& set_listStrings(T_complexException_listStrings_struct_setter&& listStrings_) {
    listStrings = std::forward<T_complexException_listStrings_struct_setter>(listStrings_);
    __isset.listStrings = true;
    return listStrings;
  }

  ::cpp2::MyEnum get_errorEnum() const {
    return errorEnum;
  }

  [[deprecated("Use `FOO.errorEnum_ref() = BAR;` instead of `FOO.set_errorEnum(BAR);`")]]
  ::cpp2::MyEnum& set_errorEnum(::cpp2::MyEnum errorEnum_) {
    errorEnum = errorEnum_;
    __isset.errorEnum = true;
    return errorEnum;
  }
  const ::cpp2::MyUnion* get_unionError() const&;
  ::cpp2::MyUnion* get_unionError() &;
  ::cpp2::MyUnion* get_unionError() && = delete;

  template <typename T_complexException_unionError_struct_setter = ::cpp2::MyUnion>
  [[deprecated("Use `FOO.unionError_ref() = BAR;` instead of `FOO.set_unionError(BAR);`")]]
  ::cpp2::MyUnion& set_unionError(T_complexException_unionError_struct_setter&& unionError_) {
    unionError = std::forward<T_complexException_unionError_struct_setter>(unionError_);
    __isset.unionError = true;
    return unionError;
  }
  const ::cpp2::MyStruct& get_structError() const&;
  ::cpp2::MyStruct get_structError() &&;

  template <typename T_complexException_structError_struct_setter = ::cpp2::MyStruct>
  [[deprecated("Use `FOO.structError_ref() = BAR;` instead of `FOO.set_structError(BAR);`")]]
  ::cpp2::MyStruct& set_structError(T_complexException_structError_struct_setter&& structError_) {
    structError = std::forward<T_complexException_structError_struct_setter>(structError_);
    __isset.structError = true;
    return structError;
  }
  const ::std::map<::std::int64_t, ::std::string>& get_lsMap() const&;
  ::std::map<::std::int64_t, ::std::string> get_lsMap() &&;

  template <typename T_complexException_lsMap_struct_setter = ::std::map<::std::int64_t, ::std::string>>
  [[deprecated("Use `FOO.lsMap_ref() = BAR;` instead of `FOO.set_lsMap(BAR);`")]]
  ::std::map<::std::int64_t, ::std::string>& set_lsMap(T_complexException_lsMap_struct_setter&& lsMap_) {
    lsMap = std::forward<T_complexException_lsMap_struct_setter>(lsMap_);
    __isset.lsMap = true;
    return lsMap;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

  const char* what() const noexcept override {
    return "::cpp2::complexException";
  }

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<complexException>;
  friend void swap(complexException& a, complexException& b);
};

template <class Protocol_>
uint32_t complexException::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
THRIFT_IGNORE_ISSET_USE_WARNING_END

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::cpp2::MyUnion::Type>;

template <> struct TEnumTraits<::cpp2::MyUnion::Type> {
  using type = ::cpp2::MyUnion::Type;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};

template <> struct TEnumDataStorage<::cpp2::MyUnionFloatFieldThrowExp::Type>;

template <> struct TEnumTraits<::cpp2::MyUnionFloatFieldThrowExp::Type> {
  using type = ::cpp2::MyUnionFloatFieldThrowExp::Type;

  static constexpr std::size_t const size = 4;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

};
}} // apache::thrift
