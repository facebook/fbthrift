/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace tag {
struct small_A;
struct small_B;
struct fieldA;
struct fieldB;
struct fieldC;
struct fieldD;
struct fieldE;
struct fieldF;
struct fieldG;
struct fieldH;
struct fieldI;
struct fieldJ;
struct fieldK;
struct fieldL;
struct fieldM;
struct fieldN;
struct fieldO;
struct fieldP;
struct fieldQ;
struct fieldR;
struct fieldS;
struct fieldT;
struct fieldU;
struct fieldX;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_small_A
#define APACHE_THRIFT_ACCESSOR_small_A
APACHE_THRIFT_DEFINE_ACCESSOR(small_A);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_small_B
#define APACHE_THRIFT_ACCESSOR_small_B
APACHE_THRIFT_DEFINE_ACCESSOR(small_B);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldA
#define APACHE_THRIFT_ACCESSOR_fieldA
APACHE_THRIFT_DEFINE_ACCESSOR(fieldA);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldB
#define APACHE_THRIFT_ACCESSOR_fieldB
APACHE_THRIFT_DEFINE_ACCESSOR(fieldB);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldC
#define APACHE_THRIFT_ACCESSOR_fieldC
APACHE_THRIFT_DEFINE_ACCESSOR(fieldC);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldD
#define APACHE_THRIFT_ACCESSOR_fieldD
APACHE_THRIFT_DEFINE_ACCESSOR(fieldD);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldE
#define APACHE_THRIFT_ACCESSOR_fieldE
APACHE_THRIFT_DEFINE_ACCESSOR(fieldE);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldF
#define APACHE_THRIFT_ACCESSOR_fieldF
APACHE_THRIFT_DEFINE_ACCESSOR(fieldF);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldG
#define APACHE_THRIFT_ACCESSOR_fieldG
APACHE_THRIFT_DEFINE_ACCESSOR(fieldG);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldH
#define APACHE_THRIFT_ACCESSOR_fieldH
APACHE_THRIFT_DEFINE_ACCESSOR(fieldH);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldI
#define APACHE_THRIFT_ACCESSOR_fieldI
APACHE_THRIFT_DEFINE_ACCESSOR(fieldI);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldJ
#define APACHE_THRIFT_ACCESSOR_fieldJ
APACHE_THRIFT_DEFINE_ACCESSOR(fieldJ);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldK
#define APACHE_THRIFT_ACCESSOR_fieldK
APACHE_THRIFT_DEFINE_ACCESSOR(fieldK);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldL
#define APACHE_THRIFT_ACCESSOR_fieldL
APACHE_THRIFT_DEFINE_ACCESSOR(fieldL);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldM
#define APACHE_THRIFT_ACCESSOR_fieldM
APACHE_THRIFT_DEFINE_ACCESSOR(fieldM);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldN
#define APACHE_THRIFT_ACCESSOR_fieldN
APACHE_THRIFT_DEFINE_ACCESSOR(fieldN);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldO
#define APACHE_THRIFT_ACCESSOR_fieldO
APACHE_THRIFT_DEFINE_ACCESSOR(fieldO);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldP
#define APACHE_THRIFT_ACCESSOR_fieldP
APACHE_THRIFT_DEFINE_ACCESSOR(fieldP);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldQ
#define APACHE_THRIFT_ACCESSOR_fieldQ
APACHE_THRIFT_DEFINE_ACCESSOR(fieldQ);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldR
#define APACHE_THRIFT_ACCESSOR_fieldR
APACHE_THRIFT_DEFINE_ACCESSOR(fieldR);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldS
#define APACHE_THRIFT_ACCESSOR_fieldS
APACHE_THRIFT_DEFINE_ACCESSOR(fieldS);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldT
#define APACHE_THRIFT_ACCESSOR_fieldT
APACHE_THRIFT_DEFINE_ACCESSOR(fieldT);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldU
#define APACHE_THRIFT_ACCESSOR_fieldU
APACHE_THRIFT_DEFINE_ACCESSOR(fieldU);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_fieldX
#define APACHE_THRIFT_ACCESSOR_fieldX
APACHE_THRIFT_DEFINE_ACCESSOR(fieldX);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace cpp2 {

enum class MyEnumA {
  fieldA = 1,
  fieldB = 2,
  fieldC = 4,
};




} // cpp2

namespace std {
template<> struct hash<::cpp2::MyEnumA> :
  ::apache::thrift::detail::enum_hash<::cpp2::MyEnumA> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::cpp2::MyEnumA>;

template <> struct TEnumTraits<::cpp2::MyEnumA> {
  using type = ::cpp2::MyEnumA;

  static constexpr std::size_t const size = 3;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static char const* findName(type value);
  static bool findValue(char const* name, type* out);

  static constexpr type min() { return type::fieldA; }
  static constexpr type max() { return type::fieldC; }
};


}} // apache::thrift

namespace cpp2 {

using _MyEnumA_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnumA>;
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnumA_EnumMapFactory::ValuesToNamesMapType _MyEnumA_VALUES_TO_NAMES;
[[deprecated("use apache::thrift::TEnumTraits")]]
extern const _MyEnumA_EnumMapFactory::NamesToValuesMapType _MyEnumA_NAMES_TO_VALUES;

} // cpp2

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class SmallStruct;
class containerStruct;
} // cpp2
// END forward_declare
// BEGIN typedefs
namespace cpp2 {
typedef Foo IndirectionA;
typedef Baz IndirectionC;
typedef Bar IndirectionB;

} // cpp2
// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class SmallStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = SmallStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  SmallStruct() :
      small_A(0),
      small_B(0) {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  SmallStruct(apache::thrift::FragileConstructor, bool small_A__arg, ::std::int32_t small_B__arg);

  SmallStruct(SmallStruct&&) = default;

  SmallStruct(const SmallStruct&) = default;


  SmallStruct& operator=(SmallStruct&&) = default;

  SmallStruct& operator=(const SmallStruct&) = default;
  void __clear();
 private:
  bool small_A;
 private:
  ::std::int32_t small_B;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool small_A;
    bool small_B;
  } __isset = {};

 public:

  bool operator==(const SmallStruct&) const;
  bool operator<(const SmallStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_A_ref() const& {
    return {this->small_A, __isset.small_A};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_A_ref() const&& {
    return {std::move(this->small_A), __isset.small_A};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_A_ref() & {
    return {this->small_A, __isset.small_A};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_A_ref() && {
    return {std::move(this->small_A), __isset.small_A};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> small_B_ref() const& {
    return {this->small_B, __isset.small_B};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> small_B_ref() const&& {
    return {std::move(this->small_B), __isset.small_B};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> small_B_ref() & {
    return {this->small_B, __isset.small_B};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> small_B_ref() && {
    return {std::move(this->small_B), __isset.small_B};
  }

  bool get_small_A() const {
    return small_A;
  }

  [[deprecated("Use `FOO.small_A_ref() = BAR;` instead of `FOO.set_small_A(BAR);`")]]
  bool& set_small_A(bool small_A_) {
    small_A = small_A_;
    __isset.small_A = true;
    return small_A;
  }

  ::std::int32_t get_small_B() const {
    return small_B;
  }

  [[deprecated("Use `FOO.small_B_ref() = BAR;` instead of `FOO.set_small_B(BAR);`")]]
  ::std::int32_t& set_small_B(::std::int32_t small_B_) {
    small_B = small_B_;
    __isset.small_B = true;
    return small_B;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<SmallStruct>;
  friend void swap(SmallStruct& a, SmallStruct& b);
};

template <class Protocol_>
uint32_t SmallStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;

class containerStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = false;

 public:
  using __fbthrift_cpp2_type = containerStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  containerStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  containerStruct(apache::thrift::FragileConstructor, bool fieldA__arg, ::std::map<::std::string, bool> fieldB__arg, ::std::set<::std::int32_t> fieldC__arg, ::std::string fieldD__arg, ::std::string fieldE__arg, ::std::vector<::std::vector<::std::vector<::std::int32_t>>> fieldF__arg, ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> fieldG__arg, ::std::vector<::std::set<::std::int32_t>> fieldH__arg, bool fieldI__arg, ::std::map<::std::string, ::std::vector<::std::int32_t>> fieldJ__arg, ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> fieldK__arg, ::std::set<::std::set<::std::set<bool>>> fieldL__arg, ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> fieldM__arg, ::std::vector<::cpp2::IndirectionA> fieldN__arg, ::std::vector<::cpp2::IndirectionB> fieldO__arg, ::std::vector<::cpp2::IndirectionC> fieldP__arg, ::cpp2::MyEnumA fieldQ__arg, ::std::unique_ptr<::std::map<::std::string, bool>> fieldR__arg, ::std::unique_ptr<::cpp2::SmallStruct> fieldS__arg, ::std::shared_ptr<::cpp2::SmallStruct> fieldT__arg, ::std::shared_ptr<const ::cpp2::SmallStruct> fieldU__arg, ::std::unique_ptr<::cpp2::SmallStruct> fieldX__arg);

  containerStruct(containerStruct&&) noexcept;
  containerStruct(const containerStruct& src);


  containerStruct& operator=(containerStruct&&) noexcept;
  containerStruct& operator=(const containerStruct& src);
  void __clear();

  ~containerStruct();

 private:
  bool fieldA;
 private:
  ::std::map<::std::string, bool> fieldB;
 private:
  ::std::set<::std::int32_t> fieldC;
 private:
  ::std::string fieldD;
 private:
  ::std::string fieldE;
 private:
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>> fieldF;
 private:
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> fieldG;
 private:
  ::std::vector<::std::set<::std::int32_t>> fieldH;
 private:
  bool fieldI;
 private:
  ::std::map<::std::string, ::std::vector<::std::int32_t>> fieldJ;
 private:
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> fieldK;
 private:
  ::std::set<::std::set<::std::set<bool>>> fieldL;
 private:
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> fieldM;
 private:
  ::std::vector<::cpp2::IndirectionA> fieldN;
 private:
  ::std::vector<::cpp2::IndirectionB> fieldO;
 private:
  ::std::vector<::cpp2::IndirectionC> fieldP;
 private:
  ::cpp2::MyEnumA fieldQ;
 public:
  ::std::unique_ptr<::std::map<::std::string, bool>> fieldR;
 public:
  ::std::unique_ptr<::cpp2::SmallStruct> fieldS;
 public:
  ::std::shared_ptr<::cpp2::SmallStruct> fieldT;
 public:
  ::std::shared_ptr<const ::cpp2::SmallStruct> fieldU;
 public:
  ::std::unique_ptr<::cpp2::SmallStruct> fieldX;

 private:
  [[deprecated("__isset field is deprecated in Thrift struct. Use _ref() accessors instead.")]]
  struct __isset {
    bool fieldA;
    bool fieldB;
    bool fieldC;
    bool fieldD;
    bool fieldE;
    bool fieldF;
    bool fieldG;
    bool fieldH;
    bool fieldI;
    bool fieldJ;
    bool fieldK;
    bool fieldL;
    bool fieldM;
    bool fieldN;
    bool fieldO;
    bool fieldP;
    bool fieldQ;
  } __isset = {};

 public:

  bool operator==(const containerStruct&) const;
  bool operator<(const containerStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldA_ref() const& {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldA_ref() const&& {
    return {std::move(this->fieldA), __isset.fieldA};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldA_ref() & {
    return {this->fieldA, __isset.fieldA};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldA_ref() && {
    return {std::move(this->fieldA), __isset.fieldA};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldB_ref() const& {
    return {this->fieldB, __isset.fieldB};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldB_ref() const&& {
    return {std::move(this->fieldB), __isset.fieldB};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldB_ref() & {
    return {this->fieldB, __isset.fieldB};
  }

  template <typename..., typename T = ::std::map<::std::string, bool>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldB_ref() && {
    return {std::move(this->fieldB), __isset.fieldB};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldC_ref() const& {
    return {this->fieldC, __isset.fieldC};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldC_ref() const&& {
    return {std::move(this->fieldC), __isset.fieldC};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldC_ref() & {
    return {this->fieldC, __isset.fieldC};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldC_ref() && {
    return {std::move(this->fieldC), __isset.fieldC};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldD_ref() const& {
    return {this->fieldD, __isset.fieldD};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldD_ref() const&& {
    return {std::move(this->fieldD), __isset.fieldD};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldD_ref() & {
    return {this->fieldD, __isset.fieldD};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldD_ref() && {
    return {std::move(this->fieldD), __isset.fieldD};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldE_ref() const& {
    return {this->fieldE, __isset.fieldE};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldE_ref() const&& {
    return {std::move(this->fieldE), __isset.fieldE};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldE_ref() & {
    return {this->fieldE, __isset.fieldE};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldE_ref() && {
    return {std::move(this->fieldE), __isset.fieldE};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldF_ref() const& {
    return {this->fieldF, __isset.fieldF};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldF_ref() const&& {
    return {std::move(this->fieldF), __isset.fieldF};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldF_ref() & {
    return {this->fieldF, __isset.fieldF};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldF_ref() && {
    return {std::move(this->fieldF), __isset.fieldF};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldG_ref() const& {
    return {this->fieldG, __isset.fieldG};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldG_ref() const&& {
    return {std::move(this->fieldG), __isset.fieldG};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldG_ref() & {
    return {this->fieldG, __isset.fieldG};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldG_ref() && {
    return {std::move(this->fieldG), __isset.fieldG};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldH_ref() const& {
    return {this->fieldH, __isset.fieldH};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldH_ref() const&& {
    return {std::move(this->fieldH), __isset.fieldH};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldH_ref() & {
    return {this->fieldH, __isset.fieldH};
  }

  template <typename..., typename T = ::std::vector<::std::set<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldH_ref() && {
    return {std::move(this->fieldH), __isset.fieldH};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldI_ref() const& {
    return {this->fieldI, __isset.fieldI};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldI_ref() const&& {
    return {std::move(this->fieldI), __isset.fieldI};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldI_ref() & {
    return {this->fieldI, __isset.fieldI};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldI_ref() && {
    return {std::move(this->fieldI), __isset.fieldI};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldJ_ref() const& {
    return {this->fieldJ, __isset.fieldJ};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldJ_ref() const&& {
    return {std::move(this->fieldJ), __isset.fieldJ};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldJ_ref() & {
    return {this->fieldJ, __isset.fieldJ};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldJ_ref() && {
    return {std::move(this->fieldJ), __isset.fieldJ};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldK_ref() const& {
    return {this->fieldK, __isset.fieldK};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldK_ref() const&& {
    return {std::move(this->fieldK), __isset.fieldK};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldK_ref() & {
    return {this->fieldK, __isset.fieldK};
  }

  template <typename..., typename T = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldK_ref() && {
    return {std::move(this->fieldK), __isset.fieldK};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldL_ref() const& {
    return {this->fieldL, __isset.fieldL};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldL_ref() const&& {
    return {std::move(this->fieldL), __isset.fieldL};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldL_ref() & {
    return {this->fieldL, __isset.fieldL};
  }

  template <typename..., typename T = ::std::set<::std::set<::std::set<bool>>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldL_ref() && {
    return {std::move(this->fieldL), __isset.fieldL};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldM_ref() const& {
    return {this->fieldM, __isset.fieldM};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldM_ref() const&& {
    return {std::move(this->fieldM), __isset.fieldM};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldM_ref() & {
    return {this->fieldM, __isset.fieldM};
  }

  template <typename..., typename T = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldM_ref() && {
    return {std::move(this->fieldM), __isset.fieldM};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldN_ref() const& {
    return {this->fieldN, __isset.fieldN};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldN_ref() const&& {
    return {std::move(this->fieldN), __isset.fieldN};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldN_ref() & {
    return {this->fieldN, __isset.fieldN};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionA>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldN_ref() && {
    return {std::move(this->fieldN), __isset.fieldN};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldO_ref() const& {
    return {this->fieldO, __isset.fieldO};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldO_ref() const&& {
    return {std::move(this->fieldO), __isset.fieldO};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldO_ref() & {
    return {this->fieldO, __isset.fieldO};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionB>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldO_ref() && {
    return {std::move(this->fieldO), __isset.fieldO};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldP_ref() const& {
    return {this->fieldP, __isset.fieldP};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldP_ref() const&& {
    return {std::move(this->fieldP), __isset.fieldP};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldP_ref() & {
    return {this->fieldP, __isset.fieldP};
  }

  template <typename..., typename T = ::std::vector<::cpp2::IndirectionC>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldP_ref() && {
    return {std::move(this->fieldP), __isset.fieldP};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> fieldQ_ref() const& {
    return {this->fieldQ, __isset.fieldQ};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> fieldQ_ref() const&& {
    return {std::move(this->fieldQ), __isset.fieldQ};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> fieldQ_ref() & {
    return {this->fieldQ, __isset.fieldQ};
  }

  template <typename..., typename T = ::cpp2::MyEnumA>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> fieldQ_ref() && {
    return {std::move(this->fieldQ), __isset.fieldQ};
  }
  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T& fieldR_ref() & { return fieldR; }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T& fieldR_ref() const& { return fieldR; }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE T&& fieldR_ref() && { return std::move(fieldR); }

  template <typename ..., typename T = ::std::unique_ptr<::std::map<::std::string, bool>>>
  FOLLY_ERASE const T&& fieldR_ref() const&& { return std::move(fieldR); }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldS_ref() & { return fieldS; }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldS_ref() const& { return fieldS; }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldS_ref() && { return std::move(fieldS); }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldS_ref() const&& { return std::move(fieldS); }
  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldT_ref() & { return fieldT; }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldT_ref() const& { return fieldT; }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldT_ref() && { return std::move(fieldT); }

  template <typename ..., typename T = ::std::shared_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldT_ref() const&& { return std::move(fieldT); }
  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldU_ref() & { return fieldU; }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldU_ref() const& { return fieldU; }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldU_ref() && { return std::move(fieldU); }

  template <typename ..., typename T = ::std::shared_ptr<const ::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldU_ref() const&& { return std::move(fieldU); }
  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T& fieldX_ref() & { return fieldX; }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T& fieldX_ref() const& { return fieldX; }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE T&& fieldX_ref() && { return std::move(fieldX); }

  template <typename ..., typename T = ::std::unique_ptr<::cpp2::SmallStruct>>
  FOLLY_ERASE const T&& fieldX_ref() const&& { return std::move(fieldX); }

  bool get_fieldA() const {
    return fieldA;
  }

  [[deprecated("Use `FOO.fieldA_ref() = BAR;` instead of `FOO.set_fieldA(BAR);`")]]
  bool& set_fieldA(bool fieldA_) {
    fieldA = fieldA_;
    __isset.fieldA = true;
    return fieldA;
  }
  const ::std::map<::std::string, bool>& get_fieldB() const&;
  ::std::map<::std::string, bool> get_fieldB() &&;

  template <typename T_containerStruct_fieldB_struct_setter = ::std::map<::std::string, bool>>
  [[deprecated("Use `FOO.fieldB_ref() = BAR;` instead of `FOO.set_fieldB(BAR);`")]]
  ::std::map<::std::string, bool>& set_fieldB(T_containerStruct_fieldB_struct_setter&& fieldB_) {
    fieldB = std::forward<T_containerStruct_fieldB_struct_setter>(fieldB_);
    __isset.fieldB = true;
    return fieldB;
  }
  const ::std::set<::std::int32_t>& get_fieldC() const&;
  ::std::set<::std::int32_t> get_fieldC() &&;

  template <typename T_containerStruct_fieldC_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.fieldC_ref() = BAR;` instead of `FOO.set_fieldC(BAR);`")]]
  ::std::set<::std::int32_t>& set_fieldC(T_containerStruct_fieldC_struct_setter&& fieldC_) {
    fieldC = std::forward<T_containerStruct_fieldC_struct_setter>(fieldC_);
    __isset.fieldC = true;
    return fieldC;
  }

  const ::std::string& get_fieldD() const& {
    return fieldD;
  }

  ::std::string get_fieldD() && {
    return std::move(fieldD);
  }

  template <typename T_containerStruct_fieldD_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldD_ref() = BAR;` instead of `FOO.set_fieldD(BAR);`")]]
  ::std::string& set_fieldD(T_containerStruct_fieldD_struct_setter&& fieldD_) {
    fieldD = std::forward<T_containerStruct_fieldD_struct_setter>(fieldD_);
    __isset.fieldD = true;
    return fieldD;
  }

  const ::std::string& get_fieldE() const& {
    return fieldE;
  }

  ::std::string get_fieldE() && {
    return std::move(fieldE);
  }

  template <typename T_containerStruct_fieldE_struct_setter = ::std::string>
  [[deprecated("Use `FOO.fieldE_ref() = BAR;` instead of `FOO.set_fieldE(BAR);`")]]
  ::std::string& set_fieldE(T_containerStruct_fieldE_struct_setter&& fieldE_) {
    fieldE = std::forward<T_containerStruct_fieldE_struct_setter>(fieldE_);
    __isset.fieldE = true;
    return fieldE;
  }
  const ::std::vector<::std::vector<::std::vector<::std::int32_t>>>& get_fieldF() const&;
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>> get_fieldF() &&;

  template <typename T_containerStruct_fieldF_struct_setter = ::std::vector<::std::vector<::std::vector<::std::int32_t>>>>
  [[deprecated("Use `FOO.fieldF_ref() = BAR;` instead of `FOO.set_fieldF(BAR);`")]]
  ::std::vector<::std::vector<::std::vector<::std::int32_t>>>& set_fieldF(T_containerStruct_fieldF_struct_setter&& fieldF_) {
    fieldF = std::forward<T_containerStruct_fieldF_struct_setter>(fieldF_);
    __isset.fieldF = true;
    return fieldF;
  }
  const ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>& get_fieldG() const&;
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>> get_fieldG() &&;

  template <typename T_containerStruct_fieldG_struct_setter = ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>>
  [[deprecated("Use `FOO.fieldG_ref() = BAR;` instead of `FOO.set_fieldG(BAR);`")]]
  ::std::map<::std::string, ::std::map<::std::string, ::std::map<::std::string, ::std::int32_t>>>& set_fieldG(T_containerStruct_fieldG_struct_setter&& fieldG_) {
    fieldG = std::forward<T_containerStruct_fieldG_struct_setter>(fieldG_);
    __isset.fieldG = true;
    return fieldG;
  }
  const ::std::vector<::std::set<::std::int32_t>>& get_fieldH() const&;
  ::std::vector<::std::set<::std::int32_t>> get_fieldH() &&;

  template <typename T_containerStruct_fieldH_struct_setter = ::std::vector<::std::set<::std::int32_t>>>
  [[deprecated("Use `FOO.fieldH_ref() = BAR;` instead of `FOO.set_fieldH(BAR);`")]]
  ::std::vector<::std::set<::std::int32_t>>& set_fieldH(T_containerStruct_fieldH_struct_setter&& fieldH_) {
    fieldH = std::forward<T_containerStruct_fieldH_struct_setter>(fieldH_);
    __isset.fieldH = true;
    return fieldH;
  }

  bool get_fieldI() const {
    return fieldI;
  }

  [[deprecated("Use `FOO.fieldI_ref() = BAR;` instead of `FOO.set_fieldI(BAR);`")]]
  bool& set_fieldI(bool fieldI_) {
    fieldI = fieldI_;
    __isset.fieldI = true;
    return fieldI;
  }
  const ::std::map<::std::string, ::std::vector<::std::int32_t>>& get_fieldJ() const&;
  ::std::map<::std::string, ::std::vector<::std::int32_t>> get_fieldJ() &&;

  template <typename T_containerStruct_fieldJ_struct_setter = ::std::map<::std::string, ::std::vector<::std::int32_t>>>
  [[deprecated("Use `FOO.fieldJ_ref() = BAR;` instead of `FOO.set_fieldJ(BAR);`")]]
  ::std::map<::std::string, ::std::vector<::std::int32_t>>& set_fieldJ(T_containerStruct_fieldJ_struct_setter&& fieldJ_) {
    fieldJ = std::forward<T_containerStruct_fieldJ_struct_setter>(fieldJ_);
    __isset.fieldJ = true;
    return fieldJ;
  }
  const ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>& get_fieldK() const&;
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>> get_fieldK() &&;

  template <typename T_containerStruct_fieldK_struct_setter = ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>>
  [[deprecated("Use `FOO.fieldK_ref() = BAR;` instead of `FOO.set_fieldK(BAR);`")]]
  ::std::vector<::std::vector<::std::vector<::std::vector<::std::int32_t>>>>& set_fieldK(T_containerStruct_fieldK_struct_setter&& fieldK_) {
    fieldK = std::forward<T_containerStruct_fieldK_struct_setter>(fieldK_);
    __isset.fieldK = true;
    return fieldK;
  }
  const ::std::set<::std::set<::std::set<bool>>>& get_fieldL() const&;
  ::std::set<::std::set<::std::set<bool>>> get_fieldL() &&;

  template <typename T_containerStruct_fieldL_struct_setter = ::std::set<::std::set<::std::set<bool>>>>
  [[deprecated("Use `FOO.fieldL_ref() = BAR;` instead of `FOO.set_fieldL(BAR);`")]]
  ::std::set<::std::set<::std::set<bool>>>& set_fieldL(T_containerStruct_fieldL_struct_setter&& fieldL_) {
    fieldL = std::forward<T_containerStruct_fieldL_struct_setter>(fieldL_);
    __isset.fieldL = true;
    return fieldL;
  }
  const ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& get_fieldM() const&;
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>> get_fieldM() &&;

  template <typename T_containerStruct_fieldM_struct_setter = ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>
  [[deprecated("Use `FOO.fieldM_ref() = BAR;` instead of `FOO.set_fieldM(BAR);`")]]
  ::std::map<::std::set<::std::vector<::std::int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>& set_fieldM(T_containerStruct_fieldM_struct_setter&& fieldM_) {
    fieldM = std::forward<T_containerStruct_fieldM_struct_setter>(fieldM_);
    __isset.fieldM = true;
    return fieldM;
  }
  const ::std::vector<::cpp2::IndirectionA>& get_fieldN() const&;
  ::std::vector<::cpp2::IndirectionA> get_fieldN() &&;

  template <typename T_containerStruct_fieldN_struct_setter = ::std::vector<::cpp2::IndirectionA>>
  [[deprecated("Use `FOO.fieldN_ref() = BAR;` instead of `FOO.set_fieldN(BAR);`")]]
  ::std::vector<::cpp2::IndirectionA>& set_fieldN(T_containerStruct_fieldN_struct_setter&& fieldN_) {
    fieldN = std::forward<T_containerStruct_fieldN_struct_setter>(fieldN_);
    __isset.fieldN = true;
    return fieldN;
  }
  const ::std::vector<::cpp2::IndirectionB>& get_fieldO() const&;
  ::std::vector<::cpp2::IndirectionB> get_fieldO() &&;

  template <typename T_containerStruct_fieldO_struct_setter = ::std::vector<::cpp2::IndirectionB>>
  [[deprecated("Use `FOO.fieldO_ref() = BAR;` instead of `FOO.set_fieldO(BAR);`")]]
  ::std::vector<::cpp2::IndirectionB>& set_fieldO(T_containerStruct_fieldO_struct_setter&& fieldO_) {
    fieldO = std::forward<T_containerStruct_fieldO_struct_setter>(fieldO_);
    __isset.fieldO = true;
    return fieldO;
  }
  const ::std::vector<::cpp2::IndirectionC>& get_fieldP() const&;
  ::std::vector<::cpp2::IndirectionC> get_fieldP() &&;

  template <typename T_containerStruct_fieldP_struct_setter = ::std::vector<::cpp2::IndirectionC>>
  [[deprecated("Use `FOO.fieldP_ref() = BAR;` instead of `FOO.set_fieldP(BAR);`")]]
  ::std::vector<::cpp2::IndirectionC>& set_fieldP(T_containerStruct_fieldP_struct_setter&& fieldP_) {
    fieldP = std::forward<T_containerStruct_fieldP_struct_setter>(fieldP_);
    __isset.fieldP = true;
    return fieldP;
  }

  ::cpp2::MyEnumA get_fieldQ() const {
    return fieldQ;
  }

  [[deprecated("Use `FOO.fieldQ_ref() = BAR;` instead of `FOO.set_fieldQ(BAR);`")]]
  ::cpp2::MyEnumA& set_fieldQ(::cpp2::MyEnumA fieldQ_) {
    fieldQ = fieldQ_;
    __isset.fieldQ = true;
    return fieldQ;
  }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<containerStruct>;
  friend void swap(containerStruct& a, containerStruct& b);
};

template <class Protocol_>
uint32_t containerStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
THRIFT_IGNORE_ISSET_USE_WARNING_END
