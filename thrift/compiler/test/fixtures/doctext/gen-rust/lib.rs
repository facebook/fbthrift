// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

#![recursion_limit = "100000000"]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies)]

pub use self::consts::*;
pub use self::errors::*;
pub use self::types::*;

/// Constant definitions for `module`.
pub mod consts {
    #[doc = "Constant foo"]
    pub const FOO: &::std::primitive::str = "foo";

    #[doc = "Multi-\nline\nslash comment"]
    pub const BAR: ::std::primitive::i32 = 123;

    #[doc = "BIFF has your mail"]
    pub const BIFF: ::std::primitive::i32 = 0;

    pub const SHOUTY: ::std::primitive::i32 = 11;
}

/// Thrift type definitions for `module`.
pub mod types {
    #![allow(clippy::redundant_closure)]


    #[doc = "Cool new name for string"]
    pub type lanyard = ::std::string::String;

    #[doc = "Secret name"]
    #[derive(Default, Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct number(pub ::std::primitive::i32);

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    #[doc = "DefinitionList doctext."]
    pub struct A {
        #[doc = "Field doctext."]
        pub useless_field: ::std::primitive::i32,
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    #[doc = "Union U"]
    pub enum U {
        #[doc = "i32 field i"]
        i(::std::primitive::i32),
        #[doc = "string s"]
        s(::std::string::String),
        UnknownField(::std::primitive::i32),
    }

    #[derive(Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    #[doc = "Something amiss"]
    pub struct Bang {
        #[doc = "All explosions can be explained away"]
        pub message: ::std::string::String,
    }

    #[doc = "This enum is great"]
    #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
    pub struct B(pub ::std::primitive::i32);

    impl B {
        #[doc = "EnumDef doctext."]
        pub const HELLO: Self = B(0i32);
    }

    impl ::fbthrift::ThriftEnum for B {
        fn enumerate() -> &'static [(B, &'static str)] {
            &[
                (B::HELLO, "HELLO"),
            ]
        }

        fn variants() -> &'static [&'static str] {
            &[
                "HELLO",
            ]
        }

        fn variant_values() -> &'static [B] {
            &[
                B::HELLO,
            ]
        }
    }

    impl ::std::default::Default for B {
        fn default() -> Self {
            B(::fbthrift::__UNKNOWN_ID)
        }
    }

    impl<'a> ::std::convert::From<&'a B> for ::std::primitive::i32 {
        #[inline]
        fn from(x: &'a B) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<B> for ::std::primitive::i32 {
        #[inline]
        fn from(x: B) -> Self {
            x.0
        }
    }

    impl ::std::convert::From<::std::primitive::i32> for B {
        #[inline]
        fn from(x: ::std::primitive::i32) -> Self {
            Self(x)
        }
    }

    impl ::std::fmt::Display for B {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("HELLO", 0),
            ];
            ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
        }
    }

    impl ::std::fmt::Debug for B {
        fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(fmt, "B::{}", self)
        }
    }

    impl ::std::str::FromStr for B {
        type Err = ::anyhow::Error;

        fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
            static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
                ("HELLO", 0),
            ];
            ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "B").map(B)
        }
    }

    impl ::fbthrift::GetTType for B {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
    }

    impl<P> ::fbthrift::Serialize<P> for B
    where
        P: ::fbthrift::ProtocolWriter,
    {
        #[inline]
        fn write(&self, p: &mut P) {
            p.write_i32(self.into())
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for B
    where
        P: ::fbthrift::ProtocolReader,
    {
        #[inline]
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::std::result::Result::Ok(B::from(p.read_i32()?))
        }
    }


    impl ::fbthrift::GetTType for number {
        const TTYPE: ::fbthrift::TType = <::std::primitive::i32 as ::fbthrift::GetTType>::TTYPE;
    }

    impl<P> ::fbthrift::Serialize<P> for number
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            self.0.write(p)
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for number
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            ::fbthrift::Deserialize::read(p).map(number)
        }
    }


    impl ::std::default::Default for self::A {
        fn default() -> Self {
            Self {
                useless_field: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::A {}
    unsafe impl ::std::marker::Sync for self::A {}

    impl ::fbthrift::GetTType for self::A {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::A
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("A");
            p.write_field_begin("useless_field", ::fbthrift::TType::I32, 1);
            ::fbthrift::Serialize::write(&self.useless_field, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::A
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("useless_field", ::fbthrift::TType::I32, 1),
            ];
            let mut field_useless_field = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_useless_field = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                useless_field: field_useless_field.unwrap_or_default(),
            })
        }
    }



    impl ::std::default::Default for U {
        fn default() -> Self {
            Self::UnknownField(-1)
        }
    }

    impl ::fbthrift::GetTType for U {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for U
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("U");
            match self {
                U::i(inner) => {
                    p.write_field_begin("i", ::fbthrift::TType::I32, 1);
                    ::fbthrift::Serialize::write(inner, p);
                    p.write_field_end();
                }
                U::s(inner) => {
                    p.write_field_begin("s", ::fbthrift::TType::String, 2);
                    ::fbthrift::Serialize::write(inner, p);
                    p.write_field_end();
                }
                U::UnknownField(_) => {}
            }
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for U
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("i", ::fbthrift::TType::I32, 1),
                ::fbthrift::Field::new("s", ::fbthrift::TType::String, 2),
            ];
            let _ = p.read_struct_begin(|_| ())?;
            let mut once = false;
            let mut alt = ::std::option::Option::None;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32, once) {
                    (::fbthrift::TType::Stop, _, _) => break,
                    (::fbthrift::TType::I32, 1, false) => {
                        once = true;
                        alt = ::std::option::Option::Some(U::i(::fbthrift::Deserialize::read(p)?));
                    }
                    (::fbthrift::TType::String, 2, false) => {
                        once = true;
                        alt = ::std::option::Option::Some(U::s(::fbthrift::Deserialize::read(p)?));
                    }
                    (fty, _, false) => p.skip(fty)?,
                    (badty, badid, true) => return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                        format!(
                            "unwanted extra union {} field ty {:?} id {}",
                            "U",
                            badty,
                            badid,
                        ),
                    ))),
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(alt.unwrap_or_default())
        }
    }

    impl ::std::default::Default for self::Bang {
        fn default() -> Self {
            Self {
                message: ::std::default::Default::default(),
            }
        }
    }

    unsafe impl ::std::marker::Send for self::Bang {}
    unsafe impl ::std::marker::Sync for self::Bang {}

    impl ::fbthrift::GetTType for self::Bang {
        const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
    }

    impl<P> ::fbthrift::Serialize<P> for self::Bang
    where
        P: ::fbthrift::ProtocolWriter,
    {
        fn write(&self, p: &mut P) {
            p.write_struct_begin("Bang");
            p.write_field_begin("message", ::fbthrift::TType::String, 1);
            ::fbthrift::Serialize::write(&self.message, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P> ::fbthrift::Deserialize<P> for self::Bang
    where
        P: ::fbthrift::ProtocolReader,
    {
        fn read(p: &mut P) -> ::anyhow::Result<Self> {
            static FIELDS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("message", ::fbthrift::TType::String, 1),
            ];
            let mut field_message = ::std::option::Option::None;
            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::String, 1) => field_message = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::std::result::Result::Ok(Self {
                message: field_message.unwrap_or_default(),
            })
        }
    }

}

#[doc(hidden)]
pub mod dependencies {
}

pub mod services {
    pub mod c {
        #![doc = "Detailed overview of service"]


        #[derive(Clone, Debug)]
        pub enum FExn {
            Success(()),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for FExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                FExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for FExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for FExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("F");
                match self {
                    FExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Void,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    FExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for FExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Void, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = FExn::Success(());
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::Void, 0i32), false) => {
                            once = true;
                            alt = FExn::Success(::fbthrift::Deserialize::read(p)?);
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "FExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                ::std::result::Result::Ok(alt)
            }
        }
        #[derive(Clone, Debug)]
        pub enum NumbersStreamExn {
            Success(crate::types::number),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for NumbersStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                NumbersStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for NumbersStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for NumbersStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Numbers");
                match self {
                    NumbersStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    NumbersStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for NumbersStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(NumbersStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "NumbersStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "NumbersStreamExn"),
                    )
                    .into(),
                )
            }
        }


        #[derive(Clone, Debug)]
        pub enum ThingExn {
            Success(::std::string::String),
            bang(crate::types::Bang),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<crate::types::Bang> for ThingExn {
            fn from(exn: crate::types::Bang) -> Self {
                ThingExn::bang(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ThingExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                ThingExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for ThingExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for ThingExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Thing");
                match self {
                    ThingExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::String,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ThingExn::bang(inner) => {
                        p.write_field_begin(
                            "bang",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ThingExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for ThingExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::String, 0),
                    ::fbthrift::Field::new("bang", ::fbthrift::TType::Struct, 1),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::String, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ThingExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ThingExn::bang(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ThingExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "ThingExn"),
                    )
                    .into(),
                )
            }
        }
    }
}

/// Client implementation for each service in `module`.
pub mod client {

    pub struct CImpl<P, T> {
        transport: T,
        _phantom: ::std::marker::PhantomData<fn() -> P>,
    }

    impl<P, T> CImpl<P, T> {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }
    }

    #[doc = "Detailed overview of service"]
    pub trait C: ::std::marker::Send {
        #[doc = "Function doctext."]
        fn f(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::c::FError>> + ::std::marker::Send + 'static>>;
        #[doc = "Streaming function"]
        fn numbers(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>, crate::errors::c::NumbersError>> + ::std::marker::Send + 'static>>;
        #[doc = ""]
        fn thing(
            &self,
            arg_a: ::std::primitive::i32,
            arg_b: &::std::primitive::str,
            arg_c: &::std::collections::BTreeSet<::std::primitive::i32>,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::c::ThingError>> + ::std::marker::Send + 'static>>;
    }

    impl<P, T> C for CImpl<P, T>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
    {        fn f(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::c::FError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::{ProtocolWriter as _};
            use ::futures::future::{FutureExt as _, TryFutureExt as _};
            const_cstr! {
                SERVICE_NAME = "C";
                METHOD_NAME = "C.f";
            }
            let request = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "f",
                ::fbthrift::MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(SERVICE_NAME, METHOD_NAME, request)
                .map_err(::std::convert::From::from)
                .and_then(|reply| {
                    let de = P::deserializer(reply);
                    (move |mut p: P::Deserializer| {
                        use ::fbthrift::{ProtocolReader as _};
                        let (_, message_type, _) = match p.read_message_begin(|_| ()) {
                            Ok(res) => res,
                            Err(e) => return ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ::std::result::Result::Err(e.into())
                                    )
                                )
                        };
                        match message_type {
                            ::fbthrift::MessageType::Reply => {
                                let exn: ::tokio_shim::task::JoinHandle<(Result<crate::services::c::FExn, _>, _)> = ::tokio_shim::task::spawn_blocking(move || {
                                  (::fbthrift::Deserialize::read(&mut p), p)
                                });
                                ::futures::future::Either::Right(exn.then(
                                    |exn| {
                                        let result = (move || {
                                            let (exn, mut p) = match exn {
                                                Ok(res) => res,
                                                Err(e) => {
                                                    // spawn_blocking threads can't be cancelled, so any
                                                    // error is a panic. This shouldn't happen, but we propagate if it does
                                                    ::std::panic::resume_unwind(e.into_panic())
                                                }
                                            };
                                            let exn = exn?;
                                            let result = match exn {
                                                crate::services::c::FExn::Success(x) => ::std::result::Result::Ok(x),
                                                crate::services::c::FExn::ApplicationException(ae) => {
                                                    ::std::result::Result::Err(crate::errors::c::FError::ApplicationException(ae))
                                                }
                                            };
                                            p.read_message_end()?;
                                            result
                                        })();
                                        ::futures::future::ready(result)
                                    }
                                ))
                            }
                            ::fbthrift::MessageType::Exception => {
                                let ae: ::std::result::Result<::fbthrift::ApplicationException, _> = ::fbthrift::Deserialize::read(&mut p);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ae.map_err(|e| e.into()).and_then(|ae| {
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                              ::std::result::Result::Err(crate::errors::c::FError::ApplicationException(ae))
                                          }
                                        )
                                        })
                                    )
                                )
                            }
                            ::fbthrift::MessageType::Call | ::fbthrift::MessageType::Oneway | ::fbthrift::MessageType::InvalidMessageType => {
                                let err = ::anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                            ::std::result::Result::Err(crate::errors::c::FError::ThriftError(err))
                                          }
                                        )
                                    )
                                )
                            }
                        }
                    })(de)
                })
                .boxed()
        }
        fn numbers(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>, crate::errors::c::NumbersError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::{ProtocolWriter as _};
            use ::futures::future::{FutureExt as _, TryFutureExt as _};
            const_cstr! {
                SERVICE_NAME = "C";
                METHOD_NAME = "C.numbers";
            }
            let request = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "numbers",
                ::fbthrift::MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            use futures::StreamExt;

            self.transport()
                .call_stream(SERVICE_NAME, METHOD_NAME, request)
                .map_err(::std::convert::From::from)
                .and_then(|(_initial_response, stream)| {
                    let new_stream: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< 
                    Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >> = ::std::boxed::Box::pin(stream.then(
                        |stream_item_response| {
                            match stream_item_response {
                                Err(e) => {
                                    ::futures::future::Either::Left(
                                        ::futures::future::ready(
                                            ::std::result::Result::Err(crate::errors::c::NumbersStreamError::from(e))
                                        )
                                    )
                                },
                                Ok(stream_item) => {
                                    let de = P::deserializer(stream_item);
                                    (move |mut p: P::Deserializer| {
                                        let exn: ::tokio_shim::task::JoinHandle<(Result<crate::services::c::NumbersStreamExn, _>, _)> = 
                                            ::tokio_shim::task::spawn_blocking(|| (::fbthrift::Deserialize::read(&mut p), p));
                                        ::futures::future::Either::Right(exn.then(
                                            |exn| {
                                                let result = (move || {
                                                    let (exn, _) = match exn {
                                                      Ok(res) => res,
                                                      Err(e) => {
                                                          // spawn_blocking threads can't be cancelled, so any
                                                          // error is a panic. This shouldn't happen, but we propagate if it does
                                                          ::std::panic::resume_unwind(e.into_panic())
                                                      }
                                                  };
                                                  let exn = exn?;
                                                  let result = match exn {
                                                      crate::services::c::NumbersStreamExn::Success(x) => ::std::result::Result::Ok(x),
                                                      crate::services::c::NumbersStreamExn::ApplicationException(ae) => {
                                                          ::std::result::Result::Err(crate::errors::c::NumbersStreamError::ApplicationException(ae))
                                                      }
                                                  };
                                                  result
                                                })();
                                                ::futures::future::ready(result)
                                              }))
                                    })(de)
                                }
                            }
                        }
                    ));
                    ::futures::future::ready(::std::result::Result::Ok(new_stream))
                })
                .boxed()
        }
        fn thing(
            &self,
            arg_a: ::std::primitive::i32,
            arg_b: &::std::primitive::str,
            arg_c: &::std::collections::BTreeSet<::std::primitive::i32>,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::c::ThingError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::{ProtocolWriter as _};
            use ::futures::future::{FutureExt as _, TryFutureExt as _};
            const_cstr! {
                SERVICE_NAME = "C";
                METHOD_NAME = "C.thing";
            }
            let request = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "thing",
                ::fbthrift::MessageType::Call,
                // Note: we send a 0 message sequence ID from clients because
                // this field should not be used by the server (except for some
                // language implementations).
                0,
                |p| {
                    p.write_struct_begin("args");
                    p.write_field_begin("arg_a", ::fbthrift::TType::I32, 1i16);
                    ::fbthrift::Serialize::write(&arg_a, p);
                    p.write_field_end();
                    p.write_field_begin("arg_b", ::fbthrift::TType::String, 2i16);
                    ::fbthrift::Serialize::write(&arg_b, p);
                    p.write_field_end();
                    p.write_field_begin("arg_c", ::fbthrift::TType::Set, 3i16);
                    ::fbthrift::Serialize::write(&arg_c, p);
                    p.write_field_end();
                    p.write_field_stop();
                    p.write_struct_end();
                },
            ));
            self.transport()
                .call(SERVICE_NAME, METHOD_NAME, request)
                .map_err(::std::convert::From::from)
                .and_then(|reply| {
                    let de = P::deserializer(reply);
                    (move |mut p: P::Deserializer| {
                        use ::fbthrift::{ProtocolReader as _};
                        let (_, message_type, _) = match p.read_message_begin(|_| ()) {
                            Ok(res) => res,
                            Err(e) => return ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ::std::result::Result::Err(e.into())
                                    )
                                )
                        };
                        match message_type {
                            ::fbthrift::MessageType::Reply => {
                                let exn: ::tokio_shim::task::JoinHandle<(Result<crate::services::c::ThingExn, _>, _)> = ::tokio_shim::task::spawn_blocking(move || {
                                  (::fbthrift::Deserialize::read(&mut p), p)
                                });
                                ::futures::future::Either::Right(exn.then(
                                    |exn| {
                                        let result = (move || {
                                            let (exn, mut p) = match exn {
                                                Ok(res) => res,
                                                Err(e) => {
                                                    // spawn_blocking threads can't be cancelled, so any
                                                    // error is a panic. This shouldn't happen, but we propagate if it does
                                                    ::std::panic::resume_unwind(e.into_panic())
                                                }
                                            };
                                            let exn = exn?;
                                            let result = match exn {
                                                crate::services::c::ThingExn::Success(x) => ::std::result::Result::Ok(x),
                                                crate::services::c::ThingExn::bang(err) => {
                                                    ::std::result::Result::Err(crate::errors::c::ThingError::bang(err))
                                                }
                                                crate::services::c::ThingExn::ApplicationException(ae) => {
                                                    ::std::result::Result::Err(crate::errors::c::ThingError::ApplicationException(ae))
                                                }
                                            };
                                            p.read_message_end()?;
                                            result
                                        })();
                                        ::futures::future::ready(result)
                                    }
                                ))
                            }
                            ::fbthrift::MessageType::Exception => {
                                let ae: ::std::result::Result<::fbthrift::ApplicationException, _> = ::fbthrift::Deserialize::read(&mut p);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        ae.map_err(|e| e.into()).and_then(|ae| {
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                              ::std::result::Result::Err(crate::errors::c::ThingError::ApplicationException(ae))
                                          }
                                        )
                                        })
                                    )
                                )
                            }
                            ::fbthrift::MessageType::Call | ::fbthrift::MessageType::Oneway | ::fbthrift::MessageType::InvalidMessageType => {
                                let err = ::anyhow::anyhow!("Unexpected message type {:?}", message_type);
                                ::futures::future::Either::Left(
                                    ::futures::future::ready(
                                        p.read_message_end().map_err(|e| e.into()).and_then(
                                          |_| {
                                            ::std::result::Result::Err(crate::errors::c::ThingError::ThriftError(err))
                                          }
                                        )
                                    )
                                )
                            }
                        }
                    })(de)
                })
                .boxed()
        }
    }

    impl<'a, T> C for T
    where
        T: ::std::convert::AsRef<dyn C + 'a>,
        T: ::std::marker::Send,
    {
        fn f(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::c::FError>> + ::std::marker::Send + 'static>> {
            self.as_ref().f(
            )
        }
        fn numbers(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>, crate::errors::c::NumbersError>> + ::std::marker::Send + 'static>> {
            self.as_ref().numbers(
            )
        }
        fn thing(
            &self,
            arg_a: ::std::primitive::i32,
            arg_b: &::std::primitive::str,
            arg_c: &::std::collections::BTreeSet<::std::primitive::i32>,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::c::ThingError>> + ::std::marker::Send + 'static>> {
            self.as_ref().thing(
                arg_a,
                arg_b,
                arg_c,
            )
        }
    }

    #[derive(Clone)]
    pub struct make_C;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// # const _: &str = stringify! {
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = <dyn BuckGraphService>::new(protocol, transport);
    /// # };
    /// ```
    impl dyn C {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> ::std::sync::Arc<impl C + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
        {
            let _ = protocol;
            ::std::sync::Arc::new(CImpl::<P, T>::new(transport))
        }
    }

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ::fbthrift::ClientFactory for make_C {
        type Api = dyn C + ::std::marker::Send + ::std::marker::Sync + 'static;

        fn new<P, T>(protocol: P, transport: T) -> ::std::sync::Arc<Self::Api>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport + ::std::marker::Sync,
            P::Deserializer: ::std::marker::Send,
        {
            <dyn C>::new(protocol, transport)
        }
    }
}

/// Server definitions for `module`.
pub mod server {
    #[doc = "Detailed overview of service"]
    #[::async_trait::async_trait]
    pub trait C: ::std::marker::Send + ::std::marker::Sync + 'static {
        #[doc = "Function doctext."]
        async fn f(
            &self,
        ) -> ::std::result::Result<(), crate::services::c::FExn> {
            ::std::result::Result::Err(crate::services::c::FExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "C",
                    "f",
                ),
            ))
        }
        // numbers: server-side streaming not yet implemented
        #[doc = ""]
        async fn thing(
            &self,
            _a: ::std::primitive::i32,
            _b: ::std::string::String,
            _c: ::std::collections::BTreeSet<::std::primitive::i32>,
        ) -> ::std::result::Result<::std::string::String, crate::services::c::ThingExn> {
            ::std::result::Result::Err(crate::services::c::ThingExn::ApplicationException(
                ::fbthrift::ApplicationException::unimplemented_method(
                    "C",
                    "thing",
                ),
            ))
        }
    }

    /// Processor for C's methods.
    #[derive(Clone, Debug)]
    pub struct CProcessor<P, H, R> {
        service: H,
        supa: ::fbthrift::NullServiceProcessor<P, R>,
        _phantom: ::std::marker::PhantomData<(P, H, R)>,
    }

    impl<P, H, R> CProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: C,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Sync,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: ::fbthrift::NullServiceProcessor::new(),
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }

        async fn handle_f<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            req_ctxt: &R,
            seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::ProtocolReader as _;

            const_cstr! {
                SERVICE_NAME = "C";
                METHOD_NAME = "C.f";
            }
            let mut ctx_stack = req_ctxt.get_context_stack(
                &SERVICE_NAME,
                &METHOD_NAME,
            )?;
            ::fbthrift::ContextStack::pre_read(&mut ctx_stack)?;

            static ARGS: &[::fbthrift::Field] = &[
            ];

            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::fbthrift::ContextStack::post_read(&mut ctx_stack, 0)?;
            let res = self.service.f(
            ).await;
            let res = match res {
                ::std::result::Result::Ok(res) => {
                    crate::services::c::FExn::Success(res)
                }
                ::std::result::Result::Err(crate::services::c::FExn::ApplicationException(aexn)) => {
                    req_ctxt.set_user_exception_header(::fbthrift::help::type_name_of_val(&aexn), &format!("{:?}", aexn))?;
                    return ::std::result::Result::Err(aexn.into())
                }
                ::std::result::Result::Err(crate::services::c::FExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "f",
                    )
                }
            };
            ::fbthrift::ContextStack::pre_write(&mut ctx_stack)?;
            let res = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "f",
                ::fbthrift::MessageType::Reply,
                seqid,
                |p| ::fbthrift::Serialize::write(&res, p),
            ));
            ::fbthrift::ContextStack::post_write(&mut ctx_stack, 0)?;
            ::std::result::Result::Ok(res)
        }

        async fn handle_thing<'a>(
            &'a self,
            p: &'a mut P::Deserializer,
            req_ctxt: &R,
            seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::const_cstr::const_cstr;
            use ::fbthrift::ProtocolReader as _;

            const_cstr! {
                SERVICE_NAME = "C";
                METHOD_NAME = "C.thing";
            }
            let mut ctx_stack = req_ctxt.get_context_stack(
                &SERVICE_NAME,
                &METHOD_NAME,
            )?;
            ::fbthrift::ContextStack::pre_read(&mut ctx_stack)?;

            static ARGS: &[::fbthrift::Field] = &[
                ::fbthrift::Field::new("a", ::fbthrift::TType::I32, 1),
                ::fbthrift::Field::new("b", ::fbthrift::TType::String, 2),
                ::fbthrift::Field::new("c", ::fbthrift::TType::Set, 3),
            ];
            let mut field_a = ::std::option::Option::None;
            let mut field_b = ::std::option::Option::None;
            let mut field_c = ::std::option::Option::None;

            let _ = p.read_struct_begin(|_| ())?;
            loop {
                let (_, fty, fid) = p.read_field_begin(|_| (), ARGS)?;
                match (fty, fid as ::std::primitive::i32) {
                    (::fbthrift::TType::Stop, _) => break,
                    (::fbthrift::TType::I32, 1) => field_a = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::String, 2) => field_b = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (::fbthrift::TType::Set, 3) => field_c = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                    (fty, _) => p.skip(fty)?,
                }
                p.read_field_end()?;
            }
            p.read_struct_end()?;
            ::fbthrift::ContextStack::post_read(&mut ctx_stack, 0)?;
            let res = self.service.thing(
                field_a.ok_or_else(|| {
                    ::fbthrift::ApplicationException::missing_arg(
                        "thing",
                        "a",
                    )
                })?,
                field_b.ok_or_else(|| {
                    ::fbthrift::ApplicationException::missing_arg(
                        "thing",
                        "b",
                    )
                })?,
                field_c.ok_or_else(|| {
                    ::fbthrift::ApplicationException::missing_arg(
                        "thing",
                        "c",
                    )
                })?,
            ).await;
            let res = match res {
                ::std::result::Result::Ok(res) => {
                    crate::services::c::ThingExn::Success(res)
                }
                ::std::result::Result::Err(crate::services::c::ThingExn::ApplicationException(aexn)) => {
                    req_ctxt.set_user_exception_header(::fbthrift::help::type_name_of_val(&aexn), &format!("{:?}", aexn))?;
                    return ::std::result::Result::Err(aexn.into())
                }
                ::std::result::Result::Err(crate::services::c::ThingExn::Success(_)) => {
                    panic!(
                        "{} attempted to return success via error",
                        "thing",
                    )
                }
                ::std::result::Result::Err(exn) => {
                    req_ctxt.set_user_exception_header(::fbthrift::help::type_name_of_val(&exn), &format!("{:?}", exn))?;
                    exn
                }
            };
            ::fbthrift::ContextStack::pre_write(&mut ctx_stack)?;
            let res = ::fbthrift::serialize!(P, |p| ::fbthrift::protocol::write_message(
                p,
                "thing",
                ::fbthrift::MessageType::Reply,
                seqid,
                |p| ::fbthrift::Serialize::write(&res, p),
            ));
            ::fbthrift::ContextStack::post_write(&mut ctx_stack, 0)?;
            ::std::result::Result::Ok(res)
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ServiceProcessor<P> for CProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: C,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[::std::primitive::u8]) -> ::std::result::Result<::std::primitive::usize, ::fbthrift::ApplicationException> {
            match name {
                b"f" => ::std::result::Result::Ok(0usize),
                b"thing" => ::std::result::Result::Ok(2usize),
                _ => ::std::result::Result::Err(::fbthrift::ApplicationException::unknown_method()),
            }
        }

        async fn handle_method(
            &self,
            idx: ::std::primitive::usize,
            _p: &mut P::Deserializer,
            _r: &R,
            _seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            match idx {
                0usize => self.handle_f(_p, _r, _seqid).await,
                2usize => self.handle_thing(_p, _r, _seqid).await,
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "CProcessor",
                    bad
                ),
            }
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ThriftService<P::Frame> for CProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        P::Frame: ::std::marker::Send + 'static,
        H: C,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type Handler = H;
        type RequestContext = R;

        async fn call(
            &self,
            req: ::fbthrift::ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::fbthrift::{BufExt as _, ProtocolReader as _, ServiceProcessor as _};
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != ::fbthrift::MessageType::Call {
                return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                ::std::result::Result::Ok(idx) => idx,
                ::std::result::Result::Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await;
            p.read_message_end()?;
            match res {
                ::std::result::Result::Ok(bytes) => ::std::result::Result::Ok(bytes),
                ::std::result::Result::Err(err) => match err.downcast_ref::<::fbthrift::ProtocolError>() {
                    ::std::option::Option::Some(::fbthrift::ProtocolError::ApplicationException(ae)) => {
                        let res = ::fbthrift::serialize!(P, |p| {
                            ::fbthrift::protocol::write_message(
                                p,
                                "CProcessor",
                                ::fbthrift::MessageType::Exception,
                                seqid,
                                |p| ::fbthrift::Serialize::write(&ae, p),
                            )
                        });
                        ::std::result::Result::Ok(res)
                    }
                    _ => ::std::result::Result::Err(err),
                },
            }
        }
    }

    /// Construct a new instance of a C service.
    ///
    /// This is called when a new instance of a Thrift service Processor
    /// is needed for a particular Thrift protocol.
    pub fn make_C_server<F, H, R>(
        proto: ::fbthrift::ProtocolID,
        handler: H,
    ) -> ::std::result::Result<::std::boxed::Box<dyn ::fbthrift::ThriftService<F, Handler = H, RequestContext = R> + ::std::marker::Send + 'static>, ::fbthrift::ApplicationException>
    where
        F: ::fbthrift::Framing + ::std::marker::Send + ::std::marker::Sync + 'static,
        H: C,
        R: ::fbthrift::RequestContext<Name = ::const_cstr::ConstCStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        match proto {
            ::fbthrift::ProtocolID::BinaryProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(CProcessor::<::fbthrift::BinaryProtocol<F>, H, R>::new(handler)))
            }
            ::fbthrift::ProtocolID::CompactProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(CProcessor::<::fbthrift::CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => ::std::result::Result::Err(::fbthrift::ApplicationException::invalid_protocol(bad)),
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
/// ```thrift
/// service MyService {
///     FunctionResponse myFunction(
///         1: FunctionRequest request,
///     ) throws {
///         1: StorageException s,
///         2: NotFoundException n,
///     ),
///
///     // other functions
/// }
/// ```
///
/// we would end up with this mock object under crate::mock::MyService:
///
/// ```
/// # const _: &str = stringify! {
/// impl crate::client::MyService for MyService<'mock> {...}
///
/// pub struct MyService<'mock> {
///     pub myFunction: myFunction<'mock>,
///     // ...
/// }
///
/// impl dyn crate::client::MyService {
///     pub fn mock<'mock>() -> MyService<'mock>;
/// }
///
/// impl myFunction<'mock> {
///     // directly return the given success response
///     pub fn ret(&self, value: FunctionResponse);
///
///     // invoke closure to compute success response
///     pub fn mock(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///     );
///
///     // invoke closure to compute response
///     pub fn mock_result(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> Result<FunctionResponse, crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock,
///     );
///
///     // return one of the function's declared exceptions
///     pub fn throw<E>(&self, exception: E)
///     where
///         E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
/// }
///
/// impl From<StorageException> for MyFunctionExn {...}
/// impl From<NotFoundException> for MyFunctionExn {...}
/// # };
/// ```
///
/// The intended usage from a test would be:
///
/// ```
/// # const _: &str = stringify! {
/// use std::sync::Arc;
/// use thrift_if::client::MyService;
///
/// #[test]
/// fn test_my_client() {
///     let mock = Arc::new(<dyn MyService>::mock());
///
///     // directly return a success response
///     let resp = FunctionResponse {...};
///     mock.myFunction.ret(resp);
///
///     // or give a closure to compute the success response
///     mock.myFunction.mock(|request| FunctionResponse {...});
///
///     // or throw one of the function's exceptions
///     mock.myFunction.throw(StorageException::ItFailed);
///
///     // or compute a Result (useful if your exceptions aren't Clone)
///     mock.myFunction.mock_result(|request| Err(...));
///
///     let out = do_the_thing(mock).wait().unwrap();
///     assert!(out.what_i_expected());
/// }
///
/// fn do_the_thing(
///     client: Arc<dyn MyService + Send + Sync + 'static>,
/// ) -> impl Future<Item = Out> {...}
/// # };
/// ```
pub mod mock {
    pub struct C<'mock> {
        pub f: r#impl::c::f<'mock>,
        pub numbers: r#impl::c::numbers<'mock>,
        pub thing: r#impl::c::thing<'mock>,
        _marker: ::std::marker::PhantomData<&'mock ()>,
    }

    impl dyn super::client::C {
        pub fn mock<'mock>() -> C<'mock> {
            C {
                f: r#impl::c::f::unimplemented(),
                numbers: r#impl::c::numbers::unimplemented(),
                thing: r#impl::c::thing::unimplemented(),
                _marker: ::std::marker::PhantomData,
            }
        }
    }

    #[::async_trait::async_trait]
    impl<'mock> super::client::C for C<'mock> {
        fn f(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(), crate::errors::c::FError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.f.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
        fn numbers(
            &self,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>, crate::errors::c::NumbersError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.numbers.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut() -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure()))
        }
        fn thing(
            &self,
            arg_a: ::std::primitive::i32,
            arg_b: &::std::primitive::str,
            arg_c: &::std::collections::BTreeSet<::std::primitive::i32>,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::string::String, crate::errors::c::ThingError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.thing.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32, ::std::string::String, ::std::collections::BTreeSet<::std::primitive::i32>) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_a.clone(), arg_b.to_owned(), arg_c.clone())))
        }
    }

    mod r#impl {
        pub mod c {

            pub struct f<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        (),
                        crate::errors::c::FError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> f<'mock> {
                pub fn unimplemented() -> Self {
                    f {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "C",
                            "f",
                        ))),
                    }
                }

                pub fn ret(&self, value: ()) {
                    self.mock(move || value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> () + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<(), crate::errors::c::FError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::c::FError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct numbers<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut() -> ::std::result::Result<
                        ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>,
                        crate::errors::c::NumbersError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> numbers<'mock> {
                pub fn unimplemented() -> Self {
                    numbers {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|| panic!(
                            "{}::{} is not mocked",
                            "C",
                            "numbers",
                        ))),
                    }
                }

                pub fn ret(&self, _value: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut() -> ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Ok(mock()));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut() -> ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<crate::types::number, crate::errors::c::NumbersStreamError>> + ::std::marker::Send + 'static >>, crate::errors::c::NumbersError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || mock());
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::c::NumbersError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move || ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct thing<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32, ::std::string::String, ::std::collections::BTreeSet<::std::primitive::i32>) -> ::std::result::Result<
                        ::std::string::String,
                        crate::errors::c::ThingError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            impl<'mock> thing<'mock> {
                pub fn unimplemented() -> Self {
                    thing {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32, _: ::std::string::String, _: ::std::collections::BTreeSet<::std::primitive::i32>| panic!(
                            "{}::{} is not mocked",
                            "C",
                            "thing",
                        ))),
                    }
                }

                pub fn ret(&self, value: ::std::string::String) {
                    self.mock(move |_: ::std::primitive::i32, _: ::std::string::String, _: ::std::collections::BTreeSet<::std::primitive::i32>| value.clone());
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::string::String, ::std::collections::BTreeSet<::std::primitive::i32>) -> ::std::string::String + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |a, b, c| ::std::result::Result::Ok(mock(a, b, c)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::string::String, ::std::collections::BTreeSet<::std::primitive::i32>) -> ::std::result::Result<::std::string::String, crate::errors::c::ThingError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |a, b, c| mock(a, b, c));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::c::ThingError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32, _: ::std::string::String, _: ::std::collections::BTreeSet<::std::primitive::i32>| ::std::result::Result::Err(exception.clone().into()));
                }
            }
        }
    }
}

/// Error return types.
pub mod errors {
    /// Errors for C functions.
    pub mod c {

        pub trait AsBang {
            fn as_bang(&self) -> Option<&crate::types::Bang>;
        }

        impl AsBang for ::anyhow::Error {
            fn as_bang(&self) -> Option<&crate::types::Bang> {
                for cause in self.chain() {
                    if let Some(ThingError::bang(e)) = cause.downcast_ref::<ThingError>() {
                        return Some(e);
                    }
                }
                None
            }
        }

        pub type FError = ::fbthrift::NonthrowingFunctionError;

        pub type NumbersError = ::fbthrift::NonthrowingFunctionError;

        pub type NumbersStreamError = ::fbthrift::NonthrowingFunctionError;
        /// Errors for thing.
        #[derive(Debug, ::thiserror::Error)]
        pub enum ThingError {
            #[error("C::thing failed with {0:?}")]
            bang(crate::types::Bang),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::Bang> for ThingError {
            fn from(e: crate::types::Bang) -> Self {
                ThingError::bang(e)
            }
        }

        impl AsBang for ThingError {
            fn as_bang(&self) -> Option<&crate::types::Bang> {
                match self {
                    ThingError::bang(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<::anyhow::Error> for ThingError {
            fn from(err: ::anyhow::Error) -> Self {
                ThingError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ThingError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                ThingError::ApplicationException(ae)
            }
        }

    }

}
