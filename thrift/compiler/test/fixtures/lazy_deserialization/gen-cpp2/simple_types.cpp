/**
 * Autogenerated by Thrift for src/simple.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types.h"
#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/lazy_deserialization/gen-cpp2/simple_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::Foo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::Foo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Foo::Foo(const Foo&) = default;
Foo& Foo::operator=(const Foo&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Foo::Foo(Foo&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    __isset(other.__isset) {}
Foo& Foo::operator=(FOLLY_MAYBE_UNUSED Foo&& other) noexcept {
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    this->field4 = std::move(other.field4);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Foo::Foo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)) {
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void Foo::__clear() {
  // clear all fields
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool Foo::operator==(const Foo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  return true;
}

bool Foo::operator<(const Foo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  return false;
}

const ::std::vector<double>& Foo::get_field1() const& {
  return field1;
}

::std::vector<double> Foo::get_field1() && {
  return std::move(field1);
}

const ::std::vector<::std::int32_t>& Foo::get_field2() const& {
  return field2;
}

::std::vector<::std::int32_t> Foo::get_field2() && {
  return std::move(field2);
}

const ::std::vector<double>& Foo::get_field3() const& {
  return field3;
}

::std::vector<double> Foo::get_field3() && {
  return std::move(field3);
}

const ::std::vector<::std::int32_t>& Foo::get_field4() const& {
  return field4;
}

::std::vector<::std::int32_t> Foo::get_field4() && {
  return std::move(field4);
}


void swap(Foo& a, Foo& b) {
  using ::std::swap;
  swap(a.field1_ref().value(), b.field1_ref().value());
  swap(a.field2_ref().value(), b.field2_ref().value());
  swap(a.field3_ref().value(), b.field3_ref().value());
  swap(a.field4_ref().value(), b.field4_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void Foo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::LazyFoo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::LazyFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

LazyFoo::LazyFoo(const LazyFoo& srcObj) {
  std::lock_guard<std::mutex> lock(srcObj.__fbthrift_deserializationMutex_);
  __fbthrift_protocol_ = srcObj.__fbthrift_protocol_;
  __fbthrift_serializedData_ = srcObj.__fbthrift_serializedData_;
  field1 = srcObj.field1;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field1 = srcObj.__isset.field1;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  field2 = srcObj.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field2 = srcObj.__isset.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  __fbthrift_isDeserialized_.field3.store(srcObj.__fbthrift_isDeserialized_.field3.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field3 = srcObj.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field3 = srcObj.__isset.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  __fbthrift_isDeserialized_.field4.store(srcObj.__fbthrift_isDeserialized_.field4.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field4 = srcObj.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field4 = srcObj.__isset.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

LazyFoo& LazyFoo::operator=(const LazyFoo& src) {
  LazyFoo tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
LazyFoo::LazyFoo(LazyFoo&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    __isset(other.__isset),
    __fbthrift_protocol_(other.__fbthrift_protocol_),
    __fbthrift_serializedData_(std::move(other.__fbthrift_serializedData_)) {
  const auto relaxed = std::memory_order::memory_order_relaxed;
  __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3, relaxed);
  other.__fbthrift_isDeserialized_.field3.store(true, relaxed);
  __fbthrift_isDeserialized_.field4.store(other.__fbthrift_isDeserialized_.field4, relaxed);
  other.__fbthrift_isDeserialized_.field4.store(true, relaxed);
}
LazyFoo& LazyFoo::operator=(FOLLY_MAYBE_UNUSED LazyFoo&& other) noexcept {
    const auto relaxed = std::memory_order::memory_order_relaxed;
    __fbthrift_protocol_ = other.__fbthrift_protocol_;
    __fbthrift_serializedData_ = std::move(other.__fbthrift_serializedData_);
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3.exchange(true), relaxed);
    this->field4 = std::move(other.field4);
    __fbthrift_isDeserialized_.field4.store(other.__fbthrift_isDeserialized_.field4.exchange(true), relaxed);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
LazyFoo::LazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)) {
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
const ::std::vector<double>& LazyFoo::__fbthrift_read_field_field3() const {

  if (__fbthrift_isDeserialized_.field3) {
    return field3;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field3) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field3 = true;
  }
  return field3;
}

::std::vector<double>& LazyFoo::__fbthrift_read_field_field3() {
  std::as_const(*this).__fbthrift_read_field_field3();
  return field3;
}
const ::std::vector<::std::int32_t>& LazyFoo::__fbthrift_read_field_field4() const {

  if (__fbthrift_isDeserialized_.field4) {
    return field4;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field4) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field4 = true;
  }
  return field4;
}

::std::vector<::std::int32_t>& LazyFoo::__fbthrift_read_field_field4() {
  std::as_const(*this).__fbthrift_read_field_field4();
  return field4;
}

void LazyFoo::__clear() {
  // clear all fields
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool LazyFoo::operator==(const LazyFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  lhs.field4_ref();
  rhs.field4_ref();
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  return true;
}

bool LazyFoo::operator<(const LazyFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  lhs.field4_ref();
  rhs.field4_ref();
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  return false;
}

const ::std::vector<double>& LazyFoo::get_field1() const& {
  return field1;
}

::std::vector<double> LazyFoo::get_field1() && {
  return std::move(field1);
}

const ::std::vector<::std::int32_t>& LazyFoo::get_field2() const& {
  return field2;
}

::std::vector<::std::int32_t> LazyFoo::get_field2() && {
  return std::move(field2);
}


void swap(LazyFoo& a, LazyFoo& b) {
  using ::std::swap;
  swap(a.field1_ref().value(), b.field1_ref().value());
  swap(a.field2_ref().value(), b.field2_ref().value());
  swap(a.field3_ref().value(), b.field3_ref().value());
  swap(a.field4_ref().value(), b.field4_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void LazyFoo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LazyFoo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LazyFoo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LazyFoo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LazyFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LazyFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LazyFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LazyFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalFoo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalFoo::OptionalFoo(const OptionalFoo&) = default;
OptionalFoo& OptionalFoo::operator=(const OptionalFoo&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalFoo::OptionalFoo(OptionalFoo&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    __isset(other.__isset) {}
OptionalFoo& OptionalFoo::operator=(FOLLY_MAYBE_UNUSED OptionalFoo&& other) noexcept {
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    this->field4 = std::move(other.field4);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalFoo::OptionalFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)) {
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void OptionalFoo::__clear() {
  // clear all fields
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool OptionalFoo::operator==(const OptionalFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  return true;
}

bool OptionalFoo::operator<(const OptionalFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  return false;
}

const ::std::vector<double>* OptionalFoo::get_field1() const& {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

::std::vector<double>* OptionalFoo::get_field1() & {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

const ::std::vector<::std::int32_t>* OptionalFoo::get_field2() const& {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}

::std::vector<::std::int32_t>* OptionalFoo::get_field2() & {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}

const ::std::vector<double>* OptionalFoo::get_field3() const& {
  return field3_ref().has_value() ? std::addressof(field3) : nullptr;
}

::std::vector<double>* OptionalFoo::get_field3() & {
  return field3_ref().has_value() ? std::addressof(field3) : nullptr;
}

const ::std::vector<::std::int32_t>* OptionalFoo::get_field4() const& {
  return field4_ref().has_value() ? std::addressof(field4) : nullptr;
}

::std::vector<::std::int32_t>* OptionalFoo::get_field4() & {
  return field4_ref().has_value() ? std::addressof(field4) : nullptr;
}


void swap(OptionalFoo& a, OptionalFoo& b) {
  using ::std::swap;
  swap(a.field1_ref().value_unchecked(), b.field1_ref().value_unchecked());
  swap(a.field2_ref().value_unchecked(), b.field2_ref().value_unchecked());
  swap(a.field3_ref().value_unchecked(), b.field3_ref().value_unchecked());
  swap(a.field4_ref().value_unchecked(), b.field4_ref().value_unchecked());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void OptionalFoo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalFoo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalFoo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalFoo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalLazyFoo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalLazyFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

OptionalLazyFoo::OptionalLazyFoo(const OptionalLazyFoo& srcObj) {
  std::lock_guard<std::mutex> lock(srcObj.__fbthrift_deserializationMutex_);
  __fbthrift_protocol_ = srcObj.__fbthrift_protocol_;
  __fbthrift_serializedData_ = srcObj.__fbthrift_serializedData_;
  field1 = srcObj.field1;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field1 = srcObj.__isset.field1;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  field2 = srcObj.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field2 = srcObj.__isset.field2;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  __fbthrift_isDeserialized_.field3.store(srcObj.__fbthrift_isDeserialized_.field3.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field3 = srcObj.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field3 = srcObj.__isset.field3;
THRIFT_IGNORE_ISSET_USE_WARNING_END
  __fbthrift_isDeserialized_.field4.store(srcObj.__fbthrift_isDeserialized_.field4.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field4 = srcObj.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset.field4 = srcObj.__isset.field4;
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

OptionalLazyFoo& OptionalLazyFoo::operator=(const OptionalLazyFoo& src) {
  OptionalLazyFoo tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalLazyFoo::OptionalLazyFoo(OptionalLazyFoo&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    __isset(other.__isset),
    __fbthrift_protocol_(other.__fbthrift_protocol_),
    __fbthrift_serializedData_(std::move(other.__fbthrift_serializedData_)) {
  const auto relaxed = std::memory_order::memory_order_relaxed;
  __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3, relaxed);
  other.__fbthrift_isDeserialized_.field3.store(true, relaxed);
  __fbthrift_isDeserialized_.field4.store(other.__fbthrift_isDeserialized_.field4, relaxed);
  other.__fbthrift_isDeserialized_.field4.store(true, relaxed);
}
OptionalLazyFoo& OptionalLazyFoo::operator=(FOLLY_MAYBE_UNUSED OptionalLazyFoo&& other) noexcept {
    const auto relaxed = std::memory_order::memory_order_relaxed;
    __fbthrift_protocol_ = other.__fbthrift_protocol_;
    __fbthrift_serializedData_ = std::move(other.__fbthrift_serializedData_);
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3.exchange(true), relaxed);
    this->field4 = std::move(other.field4);
    __fbthrift_isDeserialized_.field4.store(other.__fbthrift_isDeserialized_.field4.exchange(true), relaxed);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalLazyFoo::OptionalLazyFoo(apache::thrift::FragileConstructor, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)) {
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END
const ::std::vector<double>& OptionalLazyFoo::__fbthrift_read_field_field3() const {

  if (__fbthrift_isDeserialized_.field3) {
    return field3;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field3) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field3 = true;
  }
  return field3;
}

::std::vector<double>& OptionalLazyFoo::__fbthrift_read_field_field3() {
  std::as_const(*this).__fbthrift_read_field_field3();
  return field3;
}
const ::std::vector<::std::int32_t>& OptionalLazyFoo::__fbthrift_read_field_field4() const {

  if (__fbthrift_isDeserialized_.field4) {
    return field4;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field4) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field4_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field4_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field4 = true;
  }
  return field4;
}

::std::vector<::std::int32_t>& OptionalLazyFoo::__fbthrift_read_field_field4() {
  std::as_const(*this).__fbthrift_read_field_field4();
  return field4;
}

void OptionalLazyFoo::__clear() {
  // clear all fields
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool OptionalLazyFoo::operator==(const OptionalLazyFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  lhs.field4_ref();
  rhs.field4_ref();
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  return true;
}

bool OptionalLazyFoo::operator<(const OptionalLazyFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  lhs.field4_ref();
  rhs.field4_ref();
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  return false;
}

const ::std::vector<double>* OptionalLazyFoo::get_field1() const& {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

::std::vector<double>* OptionalLazyFoo::get_field1() & {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

const ::std::vector<::std::int32_t>* OptionalLazyFoo::get_field2() const& {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}

::std::vector<::std::int32_t>* OptionalLazyFoo::get_field2() & {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}


void swap(OptionalLazyFoo& a, OptionalLazyFoo& b) {
  using ::std::swap;
  swap(a.field1_ref().value_unchecked(), b.field1_ref().value_unchecked());
  swap(a.field2_ref().value_unchecked(), b.field2_ref().value_unchecked());
  swap(a.field3_ref().value_unchecked(), b.field3_ref().value_unchecked());
  swap(a.field4_ref().value_unchecked(), b.field4_ref().value_unchecked());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void OptionalLazyFoo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalLazyFoo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalLazyFoo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalLazyFoo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalLazyFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalLazyFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalLazyFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalLazyFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::LazyCppRef>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::LazyCppRef>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

LazyCppRef::LazyCppRef(const LazyCppRef& srcObj) {
  std::lock_guard<std::mutex> lock(srcObj.__fbthrift_deserializationMutex_);
  __fbthrift_protocol_ = srcObj.__fbthrift_protocol_;
  __fbthrift_serializedData_ = srcObj.__fbthrift_serializedData_;
  __fbthrift_isDeserialized_.field1.store(srcObj.__fbthrift_isDeserialized_.field1.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field1 = ::apache::thrift::detail::st::copy_field<
        ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>(srcObj.field1);
  __fbthrift_isDeserialized_.field2.store(srcObj.__fbthrift_isDeserialized_.field2.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field2 = srcObj.field2;
  __fbthrift_isDeserialized_.field3.store(srcObj.__fbthrift_isDeserialized_.field3.load(std::memory_order::memory_order_relaxed),
                                                      std::memory_order::memory_order_relaxed);
  field3 = srcObj.field3;
}

LazyCppRef& LazyCppRef::operator=(const LazyCppRef& src) {
  LazyCppRef tmp(src);
  swap(*this, tmp);
  return *this;
}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
LazyCppRef::LazyCppRef(LazyCppRef&& other) noexcept  :
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),

    __fbthrift_protocol_(other.__fbthrift_protocol_),
    __fbthrift_serializedData_(std::move(other.__fbthrift_serializedData_)) {
  const auto relaxed = std::memory_order::memory_order_relaxed;
  __fbthrift_isDeserialized_.field1.store(other.__fbthrift_isDeserialized_.field1, relaxed);
  other.__fbthrift_isDeserialized_.field1.store(true, relaxed);
  __fbthrift_isDeserialized_.field2.store(other.__fbthrift_isDeserialized_.field2, relaxed);
  other.__fbthrift_isDeserialized_.field2.store(true, relaxed);
  __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3, relaxed);
  other.__fbthrift_isDeserialized_.field3.store(true, relaxed);
}
LazyCppRef& LazyCppRef::operator=(FOLLY_MAYBE_UNUSED LazyCppRef&& other) noexcept {
    const auto relaxed = std::memory_order::memory_order_relaxed;
    __fbthrift_protocol_ = other.__fbthrift_protocol_;
    __fbthrift_serializedData_ = std::move(other.__fbthrift_serializedData_);
    this->field1 = std::move(other.field1);
    __fbthrift_isDeserialized_.field1.store(other.__fbthrift_isDeserialized_.field1.exchange(true), relaxed);
    this->field2 = std::move(other.field2);
    __fbthrift_isDeserialized_.field2.store(other.__fbthrift_isDeserialized_.field2.exchange(true), relaxed);
    this->field3 = std::move(other.field3);
    __fbthrift_isDeserialized_.field3.store(other.__fbthrift_isDeserialized_.field3.exchange(true), relaxed);
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
LazyCppRef::LazyCppRef(apache::thrift::FragileConstructor, ::std::unique_ptr<::std::vector<::std::int32_t>> field1__arg, ::std::shared_ptr<::std::vector<::std::int32_t>> field2__arg, ::std::shared_ptr<const ::std::vector<::std::int32_t>> field3__arg) :
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END
const ::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field1() const {

  if (__fbthrift_isDeserialized_.field1) {
    return field1;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field1) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field1_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field1_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field1 = true;
  }
  return field1;
}

::std::unique_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field1() {
  std::as_const(*this).__fbthrift_read_field_field1();
  return field1;
}
const ::std::shared_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field2() const {

  if (__fbthrift_isDeserialized_.field2) {
    return field2;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field2) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field2_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field2_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field2 = true;
  }
  return field2;
}

::std::shared_ptr<::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field2() {
  std::as_const(*this).__fbthrift_read_field_field2();
  return field2;
}
const ::std::shared_ptr<const ::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field3() const {

  if (__fbthrift_isDeserialized_.field3) {
    return field3;
  }

  std::lock_guard<std::mutex> lock(__fbthrift_deserializationMutex_);
  if (!__fbthrift_isDeserialized_.field3) {
    switch (__fbthrift_protocol_) {
      case ::apache::thrift::protocol::T_COMPACT_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::CompactProtocolReader>();
        break;
      case ::apache::thrift::protocol::T_BINARY_PROTOCOL:
        __fbthrift_read_field_field3_impl<::apache::thrift::BinaryProtocolReader>();
        break;
      default:
        CHECK(false) << int(__fbthrift_protocol_);
    }
    __fbthrift_isDeserialized_.field3 = true;
  }
  return field3;
}

::std::shared_ptr<const ::std::vector<::std::int32_t>>& LazyCppRef::__fbthrift_read_field_field3() {
  std::as_const(*this).__fbthrift_read_field_field3();
  return field3;
}

void LazyCppRef::__clear() {
  // clear all fields
  this->field1.reset();
  this->field2.reset();
  this->field3.reset();
}

bool LazyCppRef::operator==(const LazyCppRef& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  lhs.field1_ref();
  rhs.field1_ref();
  if ((lhs.field1 == nullptr) != (rhs.field1 == nullptr) || (lhs.field1 != nullptr && lhs.field1 != rhs.field1 && !(*lhs.field1 == *rhs.field1))) {
    return false;
  }
  lhs.field2_ref();
  rhs.field2_ref();
  if ((lhs.field2 == nullptr) != (rhs.field2 == nullptr) || (lhs.field2 != nullptr && lhs.field2 != rhs.field2 && !(*lhs.field2 == *rhs.field2))) {
    return false;
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if ((lhs.field3 == nullptr) != (rhs.field3 == nullptr) || (lhs.field3 != nullptr && lhs.field3 != rhs.field3 && !(*lhs.field3 == *rhs.field3))) {
    return false;
  }
  return true;
}

bool LazyCppRef::operator<(const LazyCppRef& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  lhs.field1_ref();
  rhs.field1_ref();
  if ((lhs.field1 == nullptr) != (rhs.field1 == nullptr) || (lhs.field1 != nullptr && lhs.field1 != rhs.field1 && !(*lhs.field1 == *rhs.field1))) {
    return lhs.field1 == nullptr || (rhs.field1 != nullptr && *lhs.field1 < *rhs.field1);
  }
  lhs.field2_ref();
  rhs.field2_ref();
  if ((lhs.field2 == nullptr) != (rhs.field2 == nullptr) || (lhs.field2 != nullptr && lhs.field2 != rhs.field2 && !(*lhs.field2 == *rhs.field2))) {
    return lhs.field2 == nullptr || (rhs.field2 != nullptr && *lhs.field2 < *rhs.field2);
  }
  lhs.field3_ref();
  rhs.field3_ref();
  if ((lhs.field3 == nullptr) != (rhs.field3 == nullptr) || (lhs.field3 != nullptr && lhs.field3 != rhs.field3 && !(*lhs.field3 == *rhs.field3))) {
    return lhs.field3 == nullptr || (rhs.field3 != nullptr && *lhs.field3 < *rhs.field3);
  }
  return false;
}


void swap(LazyCppRef& a, LazyCppRef& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
}

template void LazyCppRef::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t LazyCppRef::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t LazyCppRef::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t LazyCppRef::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void LazyCppRef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t LazyCppRef::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t LazyCppRef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t LazyCppRef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::IndexedFoo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::IndexedFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
IndexedFoo::IndexedFoo(const IndexedFoo&) = default;
IndexedFoo& IndexedFoo::operator=(const IndexedFoo&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
IndexedFoo::IndexedFoo() :
      serialized_data_size(0) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

IndexedFoo::~IndexedFoo() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
IndexedFoo::IndexedFoo(IndexedFoo&& other) noexcept  :
    serialized_data_size(std::move(other.serialized_data_size)),
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    field_id_to_size(std::move(other.field_id_to_size)),
    __isset(other.__isset) {}
IndexedFoo& IndexedFoo::operator=(FOLLY_MAYBE_UNUSED IndexedFoo&& other) noexcept {
    this->serialized_data_size = std::move(other.serialized_data_size);
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    this->field4 = std::move(other.field4);
    this->field_id_to_size = std::move(other.field_id_to_size);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
IndexedFoo::IndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg) :
    serialized_data_size(std::move(serialized_data_size__arg)),
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)),
    field_id_to_size(std::move(field_id_to_size__arg)) {
  __isset.serialized_data_size = true;
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
  __isset.field_id_to_size = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void IndexedFoo::__clear() {
  // clear all fields
  this->serialized_data_size = 0;
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
  this->field_id_to_size.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool IndexedFoo::operator==(const IndexedFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.serialized_data_size_ref() == rhs.serialized_data_size_ref())) {
    return false;
  }
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  if (!(lhs.field_id_to_size_ref() == rhs.field_id_to_size_ref())) {
    return false;
  }
  return true;
}

bool IndexedFoo::operator<(const IndexedFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.serialized_data_size_ref() == rhs.serialized_data_size_ref())) {
    return lhs.serialized_data_size_ref() < rhs.serialized_data_size_ref();
  }
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  if (!(lhs.field_id_to_size_ref() == rhs.field_id_to_size_ref())) {
    return lhs.field_id_to_size_ref() < rhs.field_id_to_size_ref();
  }
  return false;
}

const ::std::vector<double>& IndexedFoo::get_field1() const& {
  return field1;
}

::std::vector<double> IndexedFoo::get_field1() && {
  return std::move(field1);
}

const ::std::vector<::std::int32_t>& IndexedFoo::get_field2() const& {
  return field2;
}

::std::vector<::std::int32_t> IndexedFoo::get_field2() && {
  return std::move(field2);
}

const ::std::vector<double>& IndexedFoo::get_field3() const& {
  return field3;
}

::std::vector<double> IndexedFoo::get_field3() && {
  return std::move(field3);
}

const ::std::vector<::std::int32_t>& IndexedFoo::get_field4() const& {
  return field4;
}

::std::vector<::std::int32_t> IndexedFoo::get_field4() && {
  return std::move(field4);
}

const ::std::map<::std::int16_t, ::std::int64_t>& IndexedFoo::get_field_id_to_size() const& {
  return field_id_to_size;
}

::std::map<::std::int16_t, ::std::int64_t> IndexedFoo::get_field_id_to_size() && {
  return std::move(field_id_to_size);
}


void swap(IndexedFoo& a, IndexedFoo& b) {
  using ::std::swap;
  swap(a.serialized_data_size_ref().value(), b.serialized_data_size_ref().value());
  swap(a.field1_ref().value(), b.field1_ref().value());
  swap(a.field2_ref().value(), b.field2_ref().value());
  swap(a.field3_ref().value(), b.field3_ref().value());
  swap(a.field4_ref().value(), b.field4_ref().value());
  swap(a.field_id_to_size_ref().value(), b.field_id_to_size_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void IndexedFoo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t IndexedFoo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t IndexedFoo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t IndexedFoo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void IndexedFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t IndexedFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t IndexedFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t IndexedFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::OptionalIndexedFoo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::OptionalIndexedFoo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalIndexedFoo::OptionalIndexedFoo(const OptionalIndexedFoo&) = default;
OptionalIndexedFoo& OptionalIndexedFoo::operator=(const OptionalIndexedFoo&) = default;
THRIFT_IGNORE_ISSET_USE_WARNING_END
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalIndexedFoo::OptionalIndexedFoo() :
      serialized_data_size(0) {
}

THRIFT_IGNORE_ISSET_USE_WARNING_END

OptionalIndexedFoo::~OptionalIndexedFoo() {}

THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalIndexedFoo::OptionalIndexedFoo(OptionalIndexedFoo&& other) noexcept  :
    serialized_data_size(std::move(other.serialized_data_size)),
    field1(std::move(other.field1)),
    field2(std::move(other.field2)),
    field3(std::move(other.field3)),
    field4(std::move(other.field4)),
    field_id_to_size(std::move(other.field_id_to_size)),
    __isset(other.__isset) {}
OptionalIndexedFoo& OptionalIndexedFoo::operator=(FOLLY_MAYBE_UNUSED OptionalIndexedFoo&& other) noexcept {
    this->serialized_data_size = std::move(other.serialized_data_size);
    this->field1 = std::move(other.field1);
    this->field2 = std::move(other.field2);
    this->field3 = std::move(other.field3);
    this->field4 = std::move(other.field4);
    this->field_id_to_size = std::move(other.field_id_to_size);
    __isset = other.__isset;
    return *this;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
OptionalIndexedFoo::OptionalIndexedFoo(apache::thrift::FragileConstructor, double serialized_data_size__arg, ::std::vector<double> field1__arg, ::std::vector<::std::int32_t> field2__arg, ::std::vector<double> field3__arg, ::std::vector<::std::int32_t> field4__arg, ::std::map<::std::int16_t, ::std::int64_t> field_id_to_size__arg) :
    serialized_data_size(std::move(serialized_data_size__arg)),
    field1(std::move(field1__arg)),
    field2(std::move(field2__arg)),
    field3(std::move(field3__arg)),
    field4(std::move(field4__arg)),
    field_id_to_size(std::move(field_id_to_size__arg)) {
  __isset.serialized_data_size = true;
  __isset.field1 = true;
  __isset.field2 = true;
  __isset.field3 = true;
  __isset.field4 = true;
  __isset.field_id_to_size = true;
}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void OptionalIndexedFoo::__clear() {
  // clear all fields
  this->serialized_data_size = 0;
  this->field1.clear();
  this->field2.clear();
  this->field3.clear();
  this->field4.clear();
  this->field_id_to_size.clear();
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  __isset = {};
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

bool OptionalIndexedFoo::operator==(const OptionalIndexedFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.serialized_data_size_ref() == rhs.serialized_data_size_ref())) {
    return false;
  }
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return false;
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return false;
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return false;
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return false;
  }
  if (!(lhs.field_id_to_size_ref() == rhs.field_id_to_size_ref())) {
    return false;
  }
  return true;
}

bool OptionalIndexedFoo::operator<(const OptionalIndexedFoo& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.serialized_data_size_ref() == rhs.serialized_data_size_ref())) {
    return lhs.serialized_data_size_ref() < rhs.serialized_data_size_ref();
  }
  if (!(lhs.field1_ref() == rhs.field1_ref())) {
    return lhs.field1_ref() < rhs.field1_ref();
  }
  if (!(lhs.field2_ref() == rhs.field2_ref())) {
    return lhs.field2_ref() < rhs.field2_ref();
  }
  if (!(lhs.field3_ref() == rhs.field3_ref())) {
    return lhs.field3_ref() < rhs.field3_ref();
  }
  if (!(lhs.field4_ref() == rhs.field4_ref())) {
    return lhs.field4_ref() < rhs.field4_ref();
  }
  if (!(lhs.field_id_to_size_ref() == rhs.field_id_to_size_ref())) {
    return lhs.field_id_to_size_ref() < rhs.field_id_to_size_ref();
  }
  return false;
}

const ::std::vector<double>* OptionalIndexedFoo::get_field1() const& {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

::std::vector<double>* OptionalIndexedFoo::get_field1() & {
  return field1_ref().has_value() ? std::addressof(field1) : nullptr;
}

const ::std::vector<::std::int32_t>* OptionalIndexedFoo::get_field2() const& {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}

::std::vector<::std::int32_t>* OptionalIndexedFoo::get_field2() & {
  return field2_ref().has_value() ? std::addressof(field2) : nullptr;
}

const ::std::vector<double>* OptionalIndexedFoo::get_field3() const& {
  return field3_ref().has_value() ? std::addressof(field3) : nullptr;
}

::std::vector<double>* OptionalIndexedFoo::get_field3() & {
  return field3_ref().has_value() ? std::addressof(field3) : nullptr;
}

const ::std::vector<::std::int32_t>* OptionalIndexedFoo::get_field4() const& {
  return field4_ref().has_value() ? std::addressof(field4) : nullptr;
}

::std::vector<::std::int32_t>* OptionalIndexedFoo::get_field4() & {
  return field4_ref().has_value() ? std::addressof(field4) : nullptr;
}

const ::std::map<::std::int16_t, ::std::int64_t>& OptionalIndexedFoo::get_field_id_to_size() const& {
  return field_id_to_size;
}

::std::map<::std::int16_t, ::std::int64_t> OptionalIndexedFoo::get_field_id_to_size() && {
  return std::move(field_id_to_size);
}


void swap(OptionalIndexedFoo& a, OptionalIndexedFoo& b) {
  using ::std::swap;
  swap(a.serialized_data_size_ref().value(), b.serialized_data_size_ref().value());
  swap(a.field1_ref().value_unchecked(), b.field1_ref().value_unchecked());
  swap(a.field2_ref().value_unchecked(), b.field2_ref().value_unchecked());
  swap(a.field3_ref().value_unchecked(), b.field3_ref().value_unchecked());
  swap(a.field4_ref().value_unchecked(), b.field4_ref().value_unchecked());
  swap(a.field_id_to_size_ref().value(), b.field_id_to_size_ref().value());
THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
  swap(a.__isset, b.__isset);
THRIFT_IGNORE_ISSET_USE_WARNING_END
}

template void OptionalIndexedFoo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalIndexedFoo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalIndexedFoo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalIndexedFoo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalIndexedFoo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalIndexedFoo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalIndexedFoo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalIndexedFoo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::Empty>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::Empty>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {


THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
Empty::Empty(apache::thrift::FragileConstructor) {}
THRIFT_IGNORE_ISSET_USE_WARNING_END

void Empty::__clear() {
  // clear all fields
}

bool Empty::operator==(const Empty& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return true;
}

bool Empty::operator<(const Empty& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  return false;
}


void swap(Empty& a, Empty& b) {
  using ::std::swap;
  (void)a;
  (void)b;
}

template void Empty::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Empty::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Empty::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Empty::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Empty::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test
