<?hh // strict
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * AnnotaionStruct
 */
class AnnotaionStruct implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const type TShape = shape(
  );
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  )[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'AnnotaionStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.AnnotaionStruct",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'facebook_thrift_annotation_Transitive' => facebook_thrift_annotation_Transitive::fromShape(
          shape(
          )
        ),
        '\facebook_thrift_annotation\ExperimentalAdapter' => \facebook_thrift_annotation\ExperimentalAdapter::fromShape(
          shape(
            "name" => "\MyFieldAdapter",
            "adapted_generic_type" => "\MyFieldWrapper",
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

  }

}

/**
 * Original thrift struct:-
 * MyStruct
 */
class MyStruct implements \IThriftStruct, \IThriftShapishStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'wrapped_field',
      'field_adapter' => \MyFieldAdapter::class,
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'annotated_field',
      'field_adapter' => \MyFieldAdapter::class,
      'type' => \TType::I64,
    ),
    3 => shape(
      'var' => 'adapted_type',
      'adapter' => \MyAdapter::class,
      'type' => \TType::I64,
    ),
    4 => shape(
      'var' => 'adapted_field',
      'adapter' => \MyFieldAdapter::class,
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'wrapped_field' => 1,
    'annotated_field' => 2,
    'adapted_type' => 3,
    'adapted_field' => 4,
  ];

  const type TConstructorShape = shape(
    ?'wrapped_field' => ?int,
    ?'annotated_field' => ?int,
    ?'adapted_type' => ?\MyAdapter::THackType,
    ?'adapted_field' => ?\MyFieldAdapter::THackType,
  );

  const type TShape = shape(
    'wrapped_field' => int,
    'annotated_field' => int,
    'adapted_type' => \MyAdapter::THackType,
    'adapted_field' => \MyFieldAdapter::THackType,
  );
  const int STRUCTURAL_ID = 7908308362005994187;
  /**
   * Original thrift field:-
   * 1: i64 wrapped_field
   */
  private ?\MyFieldWrapper<int> $wrapped_field;

  public function getWrapped_wrapped_field()[]: \MyFieldWrapper<int> {
    return $this->wrapped_field as nonnull;
  }

  public function setWrapped_wrapped_field(\MyFieldWrapper<int> $wrapped_field)[write_props]: void {
    \MyFieldAdapter::assignWrapped<int>($this->wrapped_field as nonnull, $wrapped_field);
   }

  public function get_wrapped_field()[]: int {
    return \MyFieldAdapter::toThrift<int>($this->wrapped_field as nonnull);
  }

  public function set_wrapped_field(int $wrapped_field)[write_props]: void {
    \MyFieldAdapter::assign<int>($this->wrapped_field as nonnull, $wrapped_field);
  }

  /**
   * Original thrift field:-
   * 2: i64 annotated_field
   */
  private ?\MyFieldWrapper<int> $annotated_field;

  public function getWrapped_annotated_field()[]: \MyFieldWrapper<int> {
    return $this->annotated_field as nonnull;
  }

  public function setWrapped_annotated_field(\MyFieldWrapper<int> $annotated_field)[write_props]: void {
    \MyFieldAdapter::assignWrapped<int>($this->annotated_field as nonnull, $annotated_field);
   }

  public function get_annotated_field()[]: int {
    return \MyFieldAdapter::toThrift<int>($this->annotated_field as nonnull);
  }

  public function set_annotated_field(int $annotated_field)[write_props]: void {
    \MyFieldAdapter::assign<int>($this->annotated_field as nonnull, $annotated_field);
  }

  /**
   * Original thrift field:-
   * 3: i64 adapted_type
   */
  public \MyAdapter::THackType $adapted_type;
  /**
   * Original thrift field:-
   * 4: i64 adapted_field
   */
  public \MyFieldAdapter::THackType $adapted_field;

  public function __construct(?int $wrapped_field = null, ?int $annotated_field = null, ?\MyAdapter::THackType $adapted_type = null, ?\MyFieldAdapter::THackType $adapted_field = null  )[] {
    $this->adapted_type = $adapted_type ?? \MyAdapter::fromThrift(0);
    $this->adapted_field = $adapted_field ?? \MyFieldAdapter::fromThrift(0);
    $wrapped_field = $wrapped_field ?? 0;
    $this->wrapped_field = \MyFieldAdapter::fromThrift<int>($wrapped_field, 1, $this);
    $annotated_field = $annotated_field ?? 0;
    $this->annotated_field = \MyFieldAdapter::fromThrift<int>($annotated_field, 2, $this);
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'wrapped_field'),
      Shapes::idx($shape, 'annotated_field'),
      Shapes::idx($shape, 'adapted_type'),
      Shapes::idx($shape, 'adapted_field'),
    );
  }

  public function getName()[]: string {
    return 'MyStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStruct",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "wrapped_field",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "annotated_field",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "adapted_type",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "adapted_field",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'wrapped_field' => shape(
          'field' => dict[
            '\facebook_thrift_annotation\ExperimentalAdapter' => \facebook_thrift_annotation\ExperimentalAdapter::fromShape(
              shape(
                "name" => "\MyFieldAdapter",
                "adapted_generic_type" => "\MyFieldWrapper",
              )
            ),
          ],
          'type' => dict[],
        ),
        'annotated_field' => shape(
          'field' => dict[
            'AnnotaionStruct' => AnnotaionStruct::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
        'adapted_field' => shape(
          'field' => dict[
            '\facebook_thrift_annotation\ExperimentalAdapter' => \facebook_thrift_annotation\ExperimentalAdapter::fromShape(
              shape(
                "name" => "\MyFieldAdapter",
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['wrapped_field'],
      $shape['annotated_field'],
      $shape['adapted_type'],
      $shape['adapted_field'],
    );
  }

  public function __toShape()[]: self::TShape {
    $wrapped_field = \MyFieldAdapter::toThrift<int>($this->wrapped_field as nonnull);
    $annotated_field = \MyFieldAdapter::toThrift<int>($this->annotated_field as nonnull);
    return shape(
      'wrapped_field' => $wrapped_field,
      'annotated_field' => $annotated_field,
      'adapted_type' => $this->adapted_type,
      'adapted_field' => $this->adapted_field,
    );
  }
  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'wrapped_field') !== null) {
      $this->wrapped_field = /* HH_FIXME[4110] */ $parsed['wrapped_field'];
    }    
    if (idx($parsed, 'annotated_field') !== null) {
      $this->annotated_field = /* HH_FIXME[4110] */ $parsed['annotated_field'];
    }    
    if (idx($parsed, 'adapted_type') !== null) {
      $this->adapted_type = /* HH_FIXME[4110] */ $parsed['adapted_type'];
    }    
    if (idx($parsed, 'adapted_field') !== null) {
      $this->adapted_field = /* HH_FIXME[4110] */ $parsed['adapted_field'];
    }    
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\MyAdapter::TThriftType, int>();
  }

  private static function __hackExperimentalAdapterTypeChecks()[]: void{
     \ThriftUtil::requireSameType<\MyFieldAdapter::TThriftType, int>();

    (new \ThriftAdapterVerifier<int, \MyFieldWrapper<int>>())->requireSameReturnType(\MyFieldAdapter::fromThrift<int>,\MyFieldAdapter::toThrift<int>);
  }

}

enum MyUnionEnum: int {
  _EMPTY_ = 0;
  union_annotated_field = 1;
  union_adapted_type = 3;
}

/**
 * Original thrift struct:-
 * MyUnion
 */
class MyUnion implements \IThriftStruct, \IThriftUnion<MyUnionEnum>, \IThriftShapishStruct {
  use \ThriftUnionSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'union_annotated_field',
      'union' => true,
      'field_adapter' => \MyFieldAdapter::class,
      'type' => \TType::I64,
    ),
    3 => shape(
      'var' => 'union_adapted_type',
      'union' => true,
      'adapter' => \AdapterTestIntToString::class,
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'union_annotated_field' => 1,
    'union_adapted_type' => 3,
  ];

  const type TConstructorShape = shape(
    ?'union_annotated_field' => ?int,
    ?'union_adapted_type' => ?\AdapterTestIntToString::THackType,
  );

  const type TShape = shape(
    ?'union_annotated_field' => ?int,
    ?'union_adapted_type' => ?\AdapterTestIntToString::THackType,
  );
  const int STRUCTURAL_ID = 4654710099560546823;
  /**
   * Original thrift field:-
   * 1: i64 union_annotated_field
   */
  private ?\MyFieldWrapper<?int> $union_annotated_field;
  /**
   * Original thrift field:-
   * 3: i64 union_adapted_type
   */
  public ?\AdapterTestIntToString::THackType $union_adapted_type;
  protected MyUnionEnum $_type = MyUnionEnum::_EMPTY_;

  public function __construct(?int $union_annotated_field = null, ?\AdapterTestIntToString::THackType $union_adapted_type = null  )[] {
    $this->_type = MyUnionEnum::_EMPTY_;
    if ($union_adapted_type !== null) {
      $this->union_adapted_type = $union_adapted_type;
      $this->_type = MyUnionEnum::union_adapted_type;
    }
    if ($union_annotated_field !== null) {
      $this->union_annotated_field = \MyFieldAdapter::fromThrift<?int>($union_annotated_field, 1, $this);
      $this->_type = MyUnionEnum::union_annotated_field;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'union_annotated_field'),
      Shapes::idx($shape, 'union_adapted_type'),
    );
  }

  public function getName()[]: string {
    return 'MyUnion';
  }

  public function getType()[]: MyUnionEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case MyUnionEnum::union_annotated_field:
        \MyFieldAdapter::assign<?int>($this->union_annotated_field as nonnull, null);
        break;
      case MyUnionEnum::union_adapted_type:
        $this->union_adapted_type = null;
        break;
      case MyUnionEnum::_EMPTY_:
        break;
    }
    $this->_type = MyUnionEnum::_EMPTY_;
  }

  public function getWrapped_union_annotated_field()[]: \MyFieldWrapper<?int> {
    return $this->union_annotated_field as nonnull;
  }

  public function setWrapped_union_annotated_field(\MyFieldWrapper<?int> $union_annotated_field)[write_props]: this {
    $this->reset();
    $this->_type = MyUnionEnum::union_annotated_field;
    \MyFieldAdapter::assignWrapped<?int>($this->union_annotated_field as nonnull, $union_annotated_field);
    return $this;
  }

  public function set_union_annotated_field(int $union_annotated_field)[write_props]: this {
    $this->reset();
    $this->_type = MyUnionEnum::union_annotated_field;
    \MyFieldAdapter::assign<?int>($this->union_annotated_field as nonnull, $union_annotated_field);
    return $this;
  }

  public function get_union_annotated_field()[]: int {
    return $this->getx_union_annotated_field();
  }

  public function getx_union_annotated_field()[]: int {
    invariant(
      $this->_type === MyUnionEnum::union_annotated_field,
      'get_union_annotated_field called on an instance of MyUnion whose current type is %s',
      (string)$this->_type,
    );
    return \MyFieldAdapter::toThrift<?int>($this->union_annotated_field as nonnull) as nonnull;
  }

  public function set_union_adapted_type(\AdapterTestIntToString::THackType $union_adapted_type)[write_props]: this {
    $this->reset();
    $this->_type = MyUnionEnum::union_adapted_type;
    $this->union_adapted_type = $union_adapted_type;
    return $this;
  }

  public function get_union_adapted_type()[]: \AdapterTestIntToString::THackType {
    return $this->getx_union_adapted_type();
  }

  public function getx_union_adapted_type()[]: \AdapterTestIntToString::THackType {
    invariant(
      $this->_type === MyUnionEnum::union_adapted_type,
      'get_union_adapted_type called on an instance of MyUnion whose current type is %s',
      (string)$this->_type,
    );
    return $this->union_adapted_type as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyUnion",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "union_annotated_field",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "union_adapted_type",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'union_annotated_field' => shape(
          'field' => dict[
            'AnnotaionStruct' => AnnotaionStruct::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'union_annotated_field'),
      Shapes::idx($shape, 'union_adapted_type'),
    );
  }

  public function __toShape()[]: self::TShape {
    $union_annotated_field = \MyFieldAdapter::toThrift<?int>($this->union_annotated_field as nonnull);
    return shape(
      'union_annotated_field' => $union_annotated_field,
      'union_adapted_type' => $this->union_adapted_type,
    );
  }
  public function readFromJson(string $jsonText): void {
    $this->_type = MyUnionEnum::_EMPTY_;
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'union_annotated_field') !== null) {
      $this->union_annotated_field = /* HH_FIXME[4110] */ $parsed['union_annotated_field'];
      $this->_type = MyUnionEnum::union_annotated_field;
    }    
    if (idx($parsed, 'union_adapted_type') !== null) {
      $this->union_adapted_type = /* HH_FIXME[4110] */ $parsed['union_adapted_type'];
      $this->_type = MyUnionEnum::union_adapted_type;
    }    
  }

  private static function __hackAdapterTypeChecks()[]: void {
    \ThriftUtil::requireSameType<\AdapterTestIntToString::TThriftType, int>();
  }

  private static function __hackExperimentalAdapterTypeChecks()[]: void{
 
    (new \ThriftAdapterVerifier<?int, \MyFieldWrapper<?int>>())->requireSameReturnType(\MyFieldAdapter::fromThrift<?int>,\MyFieldAdapter::toThrift<?int>);
  }

}

/**
 * Original thrift exception:-
 * MyException
 */
class MyException extends \TException implements \IThriftStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'code',
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'message',
      'type' => \TType::STRING,
    ),
    3 => shape(
      'var' => 'annotated_message',
      'field_adapter' => \MyFieldAdapter::class,
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'code' => 1,
    'message' => 2,
    'annotated_message' => 3,
  ];

  const type TConstructorShape = shape(
    ?'code' => ?int,
    ?'message' => ?string,
    ?'annotated_message' => ?string,
  );

  const int STRUCTURAL_ID = 5996584748207663461;
  /**
   * Original thrift field:-
   * 1: i64 code
   */
  public int $code;
  /**
   * Original thrift field:-
   * 2: string message
   */
  public string $message;
  /**
   * Original thrift field:-
   * 3: string annotated_message
   */
  private ?\MyFieldWrapper<string> $annotated_message;

  public function getWrapped_annotated_message()[]: \MyFieldWrapper<string> {
    return $this->annotated_message as nonnull;
  }

  public function setWrapped_annotated_message(\MyFieldWrapper<string> $annotated_message)[write_props]: void {
    \MyFieldAdapter::assignWrapped<string>($this->annotated_message as nonnull, $annotated_message);
   }

  public function get_annotated_message()[]: string {
    return \MyFieldAdapter::toThrift<string>($this->annotated_message as nonnull);
  }

  public function set_annotated_message(string $annotated_message)[write_props]: void {
    \MyFieldAdapter::assign<string>($this->annotated_message as nonnull, $annotated_message);
  }


  public function __construct(?int $code = null, ?string $message = null, ?string $annotated_message = null  )[] {
    parent::__construct();
    $this->code = $code ?? 0;
    $this->message = $message ?? '';
    $annotated_message = $annotated_message ?? '';
    $this->annotated_message = \MyFieldAdapter::fromThrift<string>($annotated_message, 3, $this);
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'code'),
      Shapes::idx($shape, 'message'),
      Shapes::idx($shape, 'annotated_message'),
    );
  }

  public function getName()[]: string {
    return 'MyException';
  }

  public static function getExceptionMetadata()[]: \tmeta_ThriftException {
    return tmeta_ThriftException::fromShape(
      shape(
        "name" => "module.MyException",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "code",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "message",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "annotated_message",
            )
          ),
        ],
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'annotated_message' => shape(
          'field' => dict[
            'AnnotaionStruct' => AnnotaionStruct::fromShape(
              shape(
              )
            ),
          ],
          'type' => dict[],
        ),
      ],
    );
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'code') !== null) {
      $this->code = /* HH_FIXME[4110] */ $parsed['code'];
    }    
    if (idx($parsed, 'message') !== null) {
      $this->message = /* HH_FIXME[4110] */ $parsed['message'];
    }    
    if (idx($parsed, 'annotated_message') !== null) {
      $this->annotated_message = /* HH_FIXME[4110] */ $parsed['annotated_message'];
    }    
  }

  private static function __hackExperimentalAdapterTypeChecks()[]: void{
 
    (new \ThriftAdapterVerifier<string, \MyFieldWrapper<string>>())->requireSameReturnType(\MyFieldAdapter::fromThrift<string>,\MyFieldAdapter::toThrift<string>);
  }

}

