{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------

module TestService where
import Prelude ( Bool(..), Enum, Float, IO, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 concat, error, fromIntegral, fromEnum, length, map,
                 maybe, not, null, otherwise, return, show, toEnum,
                 enumFromTo, Bounded, minBound, maxBound, seq, succ,
                 pred, enumFrom, enumFromThen, enumFromThenTo,
                 (.), (&&), (||), (==), (++), ($), (-), (>>=), (>>))

import qualified Control.Applicative as Applicative (ZipList(..))
import Control.Applicative ( (<*>) )
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad ( liftM, ap, when )
import qualified Data.ByteString.Lazy as BS
import Data.Functor ( (<$>) )
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import Data.List
import qualified Data.Maybe as Maybe (catMaybes)
import qualified Data.Text.Lazy.Encoding as Encoding ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as Arbitrary ( Arbitrary(..) )
import qualified Test.QuickCheck as QuickCheck ( elements )

import qualified Thrift
import qualified Thrift.Types as Types
import qualified Thrift.Serializable as Serializable
import qualified Thrift.Arbitraries as Arbitraries


import qualified Module_Types
import qualified TestService_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

-- | Definition of the Init_args struct
data Init_args = Init_args
  { init_args_int1 :: Int.Int64
    -- ^ int1 field of the Init_args struct
  } deriving (Show,Eq,Typeable.Typeable)
instance Serializable.ThriftSerializable Init_args where
  encode = encode_Init_args
  decode = decode_Init_args
instance Hashable.Hashable Init_args where
  hashWithSalt salt record = salt   `Hashable.hashWithSalt` init_args_int1 record  
instance DeepSeq.NFData Init_args where
  rnf _record7 =
    DeepSeq.rnf (init_args_int1 _record7) `seq`
    ()
instance Arbitrary.Arbitrary Init_args where 
  arbitrary = Monad.liftM Init_args (Arbitrary.arbitrary)
  shrink obj | obj == default_Init_args = []
             | otherwise = Maybe.catMaybes
    [ if obj == default_Init_args{init_args_int1 = init_args_int1 obj} then Nothing else Just $ default_Init_args{init_args_int1 = init_args_int1 obj}
    ]
-- | Translate a 'Init_args' to a 'Types.ThriftVal'
from_Init_args :: Init_args -> Types.ThriftVal
from_Init_args record = Types.TStruct $ Map.fromList $ Maybe.catMaybes
  [ (\_v10 -> Just (1, ("int1",Types.TI64 _v10))) $ init_args_int1 record
  ]
-- | Write a 'Init_args' with the given 'Thrift.Protocol'
write_Init_args :: (Thrift.Protocol p, Thrift.Transport t) => p t -> Init_args -> IO ()
write_Init_args oprot record = Thrift.writeVal oprot $ from_Init_args record
-- | Serialize a 'Init_args' in pure code
encode_Init_args :: (Thrift.Protocol p, Thrift.Transport t) => p t -> Init_args -> BS.ByteString
encode_Init_args oprot record = Thrift.serializeVal oprot $ from_Init_args record
-- | Translate a 'Types.ThriftVal' to a 'Init_args'
to_Init_args :: Types.ThriftVal -> Init_args
to_Init_args (Types.TStruct fields) = Init_args{
  init_args_int1 = maybe (init_args_int1 default_Init_args) (\(_,_val12) -> (case _val12 of {Types.TI64 _val13 -> _val13; _ -> error "wrong type"})) (Map.lookup (1) fields)
  }
to_Init_args _ = error "not a struct"
-- | Read a 'Init_args' struct with the given 'Thrift.Protocol'
read_Init_args :: (Thrift.Transport t, Thrift.Protocol p) => p t -> IO Init_args
read_Init_args iprot = to_Init_args <$> Thrift.readVal iprot (Types.T_STRUCT typemap_Init_args)
-- | Deserialize a 'Init_args' in pure code
decode_Init_args :: (Thrift.Protocol p, Thrift.Transport t) => p t -> BS.ByteString -> Init_args
decode_Init_args iprot bs = to_Init_args $ Thrift.deserializeVal iprot (Types.T_STRUCT typemap_Init_args) bs
-- | 'TypeMap' for the 'Init_args' struct
typemap_Init_args :: Types.TypeMap
typemap_Init_args = Map.fromList [("int1",(1,Types.T_I64))]
-- | Default values for the 'Init_args' struct
default_Init_args :: Init_args
default_Init_args = Init_args{
  init_args_int1 = 0}
-- | Definition of the Init_result struct
data Init_result = Init_result
  { init_result_success :: Int.Int64
    -- ^ success field of the Init_result struct
  } deriving (Show,Eq,Typeable.Typeable)
instance Serializable.ThriftSerializable Init_result where
  encode = encode_Init_result
  decode = decode_Init_result
instance Hashable.Hashable Init_result where
  hashWithSalt salt record = salt   `Hashable.hashWithSalt` init_result_success record  
instance DeepSeq.NFData Init_result where
  rnf _record14 =
    DeepSeq.rnf (init_result_success _record14) `seq`
    ()
instance Arbitrary.Arbitrary Init_result where 
  arbitrary = Monad.liftM Init_result (Arbitrary.arbitrary)
  shrink obj | obj == default_Init_result = []
             | otherwise = Maybe.catMaybes
    [ if obj == default_Init_result{init_result_success = init_result_success obj} then Nothing else Just $ default_Init_result{init_result_success = init_result_success obj}
    ]
-- | Translate a 'Init_result' to a 'Types.ThriftVal'
from_Init_result :: Init_result -> Types.ThriftVal
from_Init_result record = Types.TStruct $ Map.fromList $ Maybe.catMaybes
  [ (\_v17 -> Just (0, ("success",Types.TI64 _v17))) $ init_result_success record
  ]
-- | Write a 'Init_result' with the given 'Thrift.Protocol'
write_Init_result :: (Thrift.Protocol p, Thrift.Transport t) => p t -> Init_result -> IO ()
write_Init_result oprot record = Thrift.writeVal oprot $ from_Init_result record
-- | Serialize a 'Init_result' in pure code
encode_Init_result :: (Thrift.Protocol p, Thrift.Transport t) => p t -> Init_result -> BS.ByteString
encode_Init_result oprot record = Thrift.serializeVal oprot $ from_Init_result record
-- | Translate a 'Types.ThriftVal' to a 'Init_result'
to_Init_result :: Types.ThriftVal -> Init_result
to_Init_result (Types.TStruct fields) = Init_result{
  init_result_success = maybe (init_result_success default_Init_result) (\(_,_val19) -> (case _val19 of {Types.TI64 _val20 -> _val20; _ -> error "wrong type"})) (Map.lookup (0) fields)
  }
to_Init_result _ = error "not a struct"
-- | Read a 'Init_result' struct with the given 'Thrift.Protocol'
read_Init_result :: (Thrift.Transport t, Thrift.Protocol p) => p t -> IO Init_result
read_Init_result iprot = to_Init_result <$> Thrift.readVal iprot (Types.T_STRUCT typemap_Init_result)
-- | Deserialize a 'Init_result' in pure code
decode_Init_result :: (Thrift.Protocol p, Thrift.Transport t) => p t -> BS.ByteString -> Init_result
decode_Init_result iprot bs = to_Init_result $ Thrift.deserializeVal iprot (Types.T_STRUCT typemap_Init_result) bs
-- | 'TypeMap' for the 'Init_result' struct
typemap_Init_result :: Types.TypeMap
typemap_Init_result = Map.fromList [("success",(0,Types.T_I64))]
-- | Default values for the 'Init_result' struct
default_Init_result :: Init_result
default_Init_result = Init_result{
  init_result_success = 0}
process_init (seqid, iprot, oprot, handler) = do
  args <- TestService.read_Init_args iprot
  (Exception.catch
    (do
      val <- Iface.init handler (init_args_int1 args)
      let res = default_Init_result{init_result_success = val}
      Thrift.writeMessage oprot ("init", Types.M_REPLY, seqid) $
        write_Init_result oprot res
      Thrift.tFlush (Thrift.getTransport oprot))
    ((\_ -> do
      Thrift.writeMessage oprot ("init", Types.M_EXCEPTION, seqid) $
        Thrift.writeAppExn oprot (Thrift.AppExn Thrift.AE_UNKNOWN "")
      Thrift.tFlush (Thrift.getTransport oprot)) :: Exception.SomeException -> IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "init" -> process_init (seqid,iprot,oprot,handler)
  _ -> do
    _ <- Thrift.readVal iprot (Types.T_STRUCT Map.empty)
    Thrift.writeMessage oprot (name,Types.M_EXCEPTION,seqid) $
      Thrift.writeAppExn oprot (Thrift.AppExn Thrift.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    Thrift.tFlush (Thrift.getTransport oprot)
process handler (iprot, oprot) =
  Thrift.readMessage iprot (proc_ handler (iprot,oprot)) >> return True
