{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------

module My.Namespacing.Test.Hsmodule_Types where
import Prelude ( Bool(..), Enum, Float, IO, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 concat, error, fromIntegral, fromEnum, length, map,
                 maybe, not, null, otherwise, return, show, toEnum,
                 enumFromTo, Bounded, minBound, maxBound, seq, succ,
                 pred, enumFrom, enumFromThen, enumFromThenTo,
                 (.), (&&), (||), (==), (++), ($), (-), (>>=), (>>))

import qualified Control.Applicative as Applicative (ZipList(..))
import Control.Applicative ( (<*>) )
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad ( liftM, ap, when )
import qualified Data.ByteString.Lazy as BS
import Data.Functor ( (<$>) )
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import Data.List
import qualified Data.Maybe as Maybe (catMaybes)
import qualified Data.Text.Lazy.Encoding as Encoding ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified Data.Typeable as Typeable ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as Arbitrary ( Arbitrary(..) )
import qualified Test.QuickCheck as QuickCheck ( elements )

import qualified Thrift
import qualified Thrift.Types as Types
import qualified Thrift.Serializable as Serializable
import qualified Thrift.Arbitraries as Arbitraries


-- | Definition of the HsFoo struct
data HsFoo = HsFoo
  { hsFoo_MyInt :: Int.Int64
    -- ^ MyInt field of the HsFoo struct
  } deriving (Show,Eq,Typeable.Typeable)
instance Serializable.ThriftSerializable HsFoo where
  encode = encode_HsFoo
  decode = decode_HsFoo
instance Hashable.Hashable HsFoo where
  hashWithSalt salt record = salt   `Hashable.hashWithSalt` hsFoo_MyInt record  
instance DeepSeq.NFData HsFoo where
  rnf _record0 =
    DeepSeq.rnf (hsFoo_MyInt _record0) `seq`
    ()
instance Arbitrary.Arbitrary HsFoo where 
  arbitrary = Monad.liftM HsFoo (Arbitrary.arbitrary)
  shrink obj | obj == default_HsFoo = []
             | otherwise = Maybe.catMaybes
    [ if obj == default_HsFoo{hsFoo_MyInt = hsFoo_MyInt obj} then Nothing else Just $ default_HsFoo{hsFoo_MyInt = hsFoo_MyInt obj}
    ]
-- | Translate a 'HsFoo' to a 'Types.ThriftVal'
from_HsFoo :: HsFoo -> Types.ThriftVal
from_HsFoo record = Types.TStruct $ Map.fromList $ Maybe.catMaybes
  [ (\_v3 -> Just (1, ("MyInt",Types.TI64 _v3))) $ hsFoo_MyInt record
  ]
-- | Write a 'HsFoo' with the given 'Thrift.Protocol'
write_HsFoo :: (Thrift.Protocol p, Thrift.Transport t) => p t -> HsFoo -> IO ()
write_HsFoo oprot record = Thrift.writeVal oprot $ from_HsFoo record
-- | Serialize a 'HsFoo' in pure code
encode_HsFoo :: (Thrift.Protocol p, Thrift.Transport t) => p t -> HsFoo -> BS.ByteString
encode_HsFoo oprot record = Thrift.serializeVal oprot $ from_HsFoo record
-- | Translate a 'Types.ThriftVal' to a 'HsFoo'
to_HsFoo :: Types.ThriftVal -> HsFoo
to_HsFoo (Types.TStruct fields) = HsFoo{
  hsFoo_MyInt = maybe (hsFoo_MyInt default_HsFoo) (\(_,_val5) -> (case _val5 of {Types.TI64 _val6 -> _val6; _ -> error "wrong type"})) (Map.lookup (1) fields)
  }
to_HsFoo _ = error "not a struct"
-- | Read a 'HsFoo' struct with the given 'Thrift.Protocol'
read_HsFoo :: (Thrift.Transport t, Thrift.Protocol p) => p t -> IO HsFoo
read_HsFoo iprot = to_HsFoo <$> Thrift.readVal iprot (Types.T_STRUCT typemap_HsFoo)
-- | Deserialize a 'HsFoo' in pure code
decode_HsFoo :: (Thrift.Protocol p, Thrift.Transport t) => p t -> BS.ByteString -> HsFoo
decode_HsFoo iprot bs = to_HsFoo $ Thrift.deserializeVal iprot (Types.T_STRUCT typemap_HsFoo) bs
-- | 'TypeMap' for the 'HsFoo' struct
typemap_HsFoo :: Types.TypeMap
typemap_HsFoo = Map.fromList [("MyInt",(1,Types.T_I64))]
-- | Default values for the 'HsFoo' struct
default_HsFoo :: HsFoo
default_HsFoo = HsFoo{
  hsFoo_MyInt = 0}
