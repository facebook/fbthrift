/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.stream;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("PubSubStreamingService")
public interface PubSubStreamingService extends java.io.Closeable {
    @com.facebook.swift.service.ThriftService("PubSubStreamingService")
    public interface Async extends java.io.Closeable {
        @java.lang.Override void close();

    }
    @java.lang.Override void close();

    @com.facebook.swift.service.ThriftService("PubSubStreamingService")
    interface Reactive extends reactor.core.Disposable {
        reactor.core.publisher.Flux<Integer> returnstream(final int i32From, final int i32To);

        default reactor.core.publisher.Flux<Integer> returnstream(final int i32From, final int i32To, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Flux<ResponseWrapper<Integer>> returnstreamWrapper(final int i32From, final int i32To, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        reactor.core.publisher.Flux<Integer> streamthrows(final int foo);

        default reactor.core.publisher.Flux<Integer> streamthrows(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Flux<ResponseWrapper<Integer>> streamthrowsWrapper(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        reactor.core.publisher.Flux<Integer> boththrows(final int foo);

        default reactor.core.publisher.Flux<Integer> boththrows(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Flux<ResponseWrapper<Integer>> boththrowsWrapper(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        reactor.core.publisher.Flux<com.facebook.thrift.model.StreamResponse<Integer,Integer>> responseandstreamthrows(final int foo);

        default reactor.core.publisher.Flux<com.facebook.thrift.model.StreamResponse<Integer,Integer>> responseandstreamthrows(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Flux<ResponseWrapper<com.facebook.thrift.model.StreamResponse<Integer,Integer>>> responseandstreamthrowsWrapper(final int foo, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        reactor.core.publisher.Flux<Integer> returnstreamFast(final int i32From, final int i32To);

        default reactor.core.publisher.Flux<Integer> returnstreamFast(final int i32From, final int i32To, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Flux<ResponseWrapper<Integer>> returnstreamFastWrapper(final int i32From, final int i32To, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
