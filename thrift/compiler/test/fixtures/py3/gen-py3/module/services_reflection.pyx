#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from thrift.py3.reflection cimport (
  MethodSpec as __MethodSpec,
  ArgumentSpec as __ArgumentSpec,
  NumberType as __NumberType,
)

import folly.iobuf as _fbthrift_iobuf


cimport module.types as _module_types


cdef __InterfaceSpec get_reflection__SimpleService(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec.create(
        name="SimpleService",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_five",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="add_five",
            arguments=(
                __ArgumentSpec.create(
                    name="num",
                    type=int,
                    kind=__NumberType.I32,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="do_nothing",
            arguments=(
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="concat",
            arguments=(
                __ArgumentSpec.create(
                    name="first",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="second",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_value",
            arguments=(
                __ArgumentSpec.create(
                    name="simple_struct",
                    type=_module_types.SimpleStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="negate",
            arguments=(
                __ArgumentSpec.create(
                    name="input",
                    type=bool,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=bool,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="tiny",
            arguments=(
                __ArgumentSpec.create(
                    name="input",
                    type=int,
                    kind=__NumberType.BYTE,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.BYTE,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="small",
            arguments=(
                __ArgumentSpec.create(
                    name="input",
                    type=int,
                    kind=__NumberType.I16,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I16,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="big",
            arguments=(
                __ArgumentSpec.create(
                    name="input",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I64,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="two",
            arguments=(
                __ArgumentSpec.create(
                    name="input",
                    type=float,
                    kind=__NumberType.DOUBLE,
                    annotations={
                    },
                ),
            ),
            result=float,
            result_kind=__NumberType.DOUBLE,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="expected_exception",
            arguments=(
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
                _module_types.SimpleException,
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="unexpected_exception",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="sum_i16_list",
            arguments=(
                __ArgumentSpec.create(
                    name="numbers",
                    type=_module_types.List__i16,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="sum_i32_list",
            arguments=(
                __ArgumentSpec.create(
                    name="numbers",
                    type=_module_types.List__i32,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="sum_i64_list",
            arguments=(
                __ArgumentSpec.create(
                    name="numbers",
                    type=_module_types.List__i64,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="concat_many",
            arguments=(
                __ArgumentSpec.create(
                    name="words",
                    type=_module_types.List__string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="count_structs",
            arguments=(
                __ArgumentSpec.create(
                    name="items",
                    type=_module_types.List__SimpleStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="sum_set",
            arguments=(
                __ArgumentSpec.create(
                    name="numbers",
                    type=_module_types.Set__i32,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="contains_word",
            arguments=(
                __ArgumentSpec.create(
                    name="words",
                    type=_module_types.Set__string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="word",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=bool,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_map_value",
            arguments=(
                __ArgumentSpec.create(
                    name="words",
                    type=_module_types.Map__string_string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="key",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="map_length",
            arguments=(
                __ArgumentSpec.create(
                    name="items",
                    type=_module_types.Map__string_SimpleStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I16,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="sum_map_values",
            arguments=(
                __ArgumentSpec.create(
                    name="items",
                    type=_module_types.Map__string_i16,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I16,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="complex_sum_i32",
            arguments=(
                __ArgumentSpec.create(
                    name="counter",
                    type=_module_types.ComplexStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="repeat_name",
            arguments=(
                __ArgumentSpec.create(
                    name="counter",
                    type=_module_types.ComplexStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_struct",
            arguments=(
            ),
            result=_module_types.SimpleStruct,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="fib",
            arguments=(
                __ArgumentSpec.create(
                    name="n",
                    type=int,
                    kind=__NumberType.I16,
                    annotations={
                    },
                ),
            ),
            result=_module_types.List__i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="unique_words",
            arguments=(
                __ArgumentSpec.create(
                    name="words",
                    type=_module_types.List__string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Set__string,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="words_count",
            arguments=(
                __ArgumentSpec.create(
                    name="words",
                    type=_module_types.List__string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Map__string_i16,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="set_enum",
            arguments=(
                __ArgumentSpec.create(
                    name="in_enum",
                    type=_module_types.AnEnum,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.AnEnum,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="list_of_lists",
            arguments=(
                __ArgumentSpec.create(
                    name="num_lists",
                    type=int,
                    kind=__NumberType.I16,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="num_items",
                    type=int,
                    kind=__NumberType.I16,
                    annotations={
                    },
                ),
            ),
            result=_module_types.List__List__i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="word_character_frequency",
            arguments=(
                __ArgumentSpec.create(
                    name="sentence",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Map__string_Map__string_i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="list_of_sets",
            arguments=(
                __ArgumentSpec.create(
                    name="some_words",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.List__Set__string,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="nested_map_argument",
            arguments=(
                __ArgumentSpec.create(
                    name="struct_map",
                    type=_module_types.Map__string_List__SimpleStruct,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="make_sentence",
            arguments=(
                __ArgumentSpec.create(
                    name="word_chars",
                    type=_module_types.List__List__string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=str,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_union",
            arguments=(
                __ArgumentSpec.create(
                    name="sets",
                    type=_module_types.List__Set__i32,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Set__i32,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_keys",
            arguments=(
                __ArgumentSpec.create(
                    name="string_map",
                    type=_module_types.List__Map__string_string,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Set__string,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="lookup_double",
            arguments=(
                __ArgumentSpec.create(
                    name="key",
                    type=int,
                    kind=__NumberType.I32,
                    annotations={
                    },
                ),
            ),
            result=float,
            result_kind=__NumberType.DOUBLE,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="retrieve_binary",
            arguments=(
                __ArgumentSpec.create(
                    name="something",
                    type=bytes,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=bytes,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="contain_binary",
            arguments=(
                __ArgumentSpec.create(
                    name="binaries",
                    type=_module_types.List__binary,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.Set__binary,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="contain_enum",
            arguments=(
                __ArgumentSpec.create(
                    name="the_enum",
                    type=_module_types.List__AnEnum,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.List__AnEnum,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_binary_union_struct",
            arguments=(
                __ArgumentSpec.create(
                    name="u",
                    type=_module_types.BinaryUnion,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_module_types.BinaryUnionStruct,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


cdef __InterfaceSpec get_reflection__DerivedService(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec.create(
        name="DerivedService",
        annotations={
            """bar""": """1""",            """foo""": """\"\"\"""",        },
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_six",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec


cdef __InterfaceSpec get_reflection__RederivedService(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec.create(
        name="RederivedService",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.create(
            name="get_seven",
            arguments=(
            ),
            result=int,
            result_kind=__NumberType.I32,
            exceptions=(
            ),
            annotations={
            },
        )
    )
    return spec
