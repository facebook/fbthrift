/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include <thrift/lib/cpp2/gen/module_metadata_cpp.h>
#include "thrift/compiler/test/fixtures/py3/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {
namespace md {
using ThriftMetadata = ::apache::thrift::metadata::ThriftMetadata;
using ThriftPrimitiveType = ::apache::thrift::metadata::ThriftPrimitiveType;
using ThriftType = ::apache::thrift::metadata::ThriftType;
using ThriftService = ::apache::thrift::metadata::ThriftService;
using ThriftServiceContext = ::apache::thrift::metadata::ThriftServiceContext;
using ThriftFunctionGenerator = void (*)(ThriftMetadata&, ThriftService&);

void EnumMetadata<::py3::simple::AnEnum>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.AnEnum", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.AnEnum";
  using EnumTraits = TEnumTraits<::py3::simple::AnEnum>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}
void EnumMetadata<::py3::simple::Flags>::gen(ThriftMetadata& metadata) {
  auto res = metadata.enums_ref()->emplace("module.Flags", ::apache::thrift::metadata::ThriftEnum{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftEnum& enum_metadata = res.first->second;
  enum_metadata.name_ref() = "module.Flags";
  using EnumTraits = TEnumTraits<::py3::simple::Flags>;
  for (std::size_t i = 0; i < EnumTraits::size; ++i) {
    enum_metadata.elements_ref()->emplace(static_cast<int32_t>(EnumTraits::values[i]), EnumTraits::names[i].str());
  }
}

const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::SimpleException>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.SimpleException", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_SimpleException = res.first->second;
  module_SimpleException.name_ref() = "module.SimpleException";
  module_SimpleException.is_union_ref() = false;
  static const EncodedThriftField
  module_SimpleException_fields[] = {
    std::make_tuple(1, "err_code", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_SimpleException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_SimpleException.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::OptionalRefStruct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.OptionalRefStruct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_OptionalRefStruct = res.first->second;
  module_OptionalRefStruct.name_ref() = "module.OptionalRefStruct";
  module_OptionalRefStruct.is_union_ref() = false;
  static const EncodedThriftField
  module_OptionalRefStruct_fields[] = {
    std::make_tuple(1, "optional_blob", true, std::make_unique<Typedef>("module.IOBufPtr", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_OptionalRefStruct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_OptionalRefStruct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::SimpleStruct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.SimpleStruct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_SimpleStruct = res.first->second;
  module_SimpleStruct.name_ref() = "module.SimpleStruct";
  module_SimpleStruct.is_union_ref() = false;
  static const EncodedThriftField
  module_SimpleStruct_fields[] = {
    std::make_tuple(1, "is_on", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "tiny_int", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "small_int", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "nice_sized_int", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "big_int", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "real", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "smaller_real", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_FLOAT_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "hidden_field", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_SimpleStruct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_SimpleStruct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::ComplexStruct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.ComplexStruct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_ComplexStruct = res.first->second;
  module_ComplexStruct.name_ref() = "module.ComplexStruct";
  module_ComplexStruct.is_union_ref() = false;
  static const EncodedThriftField
  module_ComplexStruct_fields[] = {
    std::make_tuple(1, "structOne", false, std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(2, "structTwo", false, std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(3, "an_integer", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(4, "name", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(5, "an_enum", false, std::make_unique<Enum< ::py3::simple::AnEnum>>("module.AnEnum"), std::vector<ThriftConstStruct>{}),
    std::make_tuple(6, "some_bytes", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(7, "from", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(8, "cdef", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::vector<ThriftConstStruct>{}),
    std::make_tuple(9, "bytes_with_cpp_type", false, std::make_unique<Typedef>("module.foo_bar", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_ComplexStruct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_ComplexStruct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::BinaryUnion>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.BinaryUnion", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_BinaryUnion = res.first->second;
  module_BinaryUnion.name_ref() = "module.BinaryUnion";
  module_BinaryUnion.is_union_ref() = true;
  static const EncodedThriftField
  module_BinaryUnion_fields[] = {
    std::make_tuple(1, "iobuf_val", false, std::make_unique<Typedef>("module.IOBuf", std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE)), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_BinaryUnion_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_BinaryUnion.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}
const ::apache::thrift::metadata::ThriftStruct&
StructMetadata<::py3::simple::BinaryUnionStruct>::gen(ThriftMetadata& metadata) {
  auto res = metadata.structs_ref()->emplace("module.BinaryUnionStruct", ::apache::thrift::metadata::ThriftStruct{});
  if (!res.second) {
    return res.first->second;
  }
  ::apache::thrift::metadata::ThriftStruct& module_BinaryUnionStruct = res.first->second;
  module_BinaryUnionStruct.name_ref() = "module.BinaryUnionStruct";
  module_BinaryUnionStruct.is_union_ref() = false;
  static const EncodedThriftField
  module_BinaryUnionStruct_fields[] = {
    std::make_tuple(1, "u", false, std::make_unique<Union< ::py3::simple::BinaryUnion>>("module.BinaryUnion"), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_BinaryUnionStruct_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    field.structured_annotations_ref() = std::get<4>(f);
    module_BinaryUnionStruct.fields_ref()->push_back(std::move(field));
  }
  return res.first->second;
}

void ExceptionMetadata<::py3::simple::SimpleException>::gen(ThriftMetadata& metadata) {
  auto res = metadata.exceptions_ref()->emplace("module.SimpleException", ::apache::thrift::metadata::ThriftException{});
  if (!res.second) {
    return;
  }
  ::apache::thrift::metadata::ThriftException& module_SimpleException = res.first->second;
  module_SimpleException.name_ref() = "module.SimpleException";
  static const EncodedThriftField
  module_SimpleException_fields[] = {
    std::make_tuple(1, "err_code", false, std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE), std::vector<ThriftConstStruct>{}),
  };
  for (const auto& f : module_SimpleException_fields) {
    ::apache::thrift::metadata::ThriftField field;
    field.id_ref() = std::get<0>(f);
    field.name_ref() = std::get<1>(f);
    field.is_optional_ref() = std::get<2>(f);
    std::get<3>(f)->writeAndGenType(*field.type_ref(), metadata);
    module_SimpleException.fields_ref()->push_back(std::move(field));
  }
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_five(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_five";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_add_five(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "add_five";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_add_five_num_1;
  module_SimpleService_add_five_num_1.id_ref() = 1;
  module_SimpleService_add_five_num_1.name_ref() = "num";
  module_SimpleService_add_five_num_1.is_optional_ref() = false;
  auto module_SimpleService_add_five_num_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_SimpleService_add_five_num_1_type->writeAndGenType(*module_SimpleService_add_five_num_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_add_five_num_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_do_nothing(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "do_nothing";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_concat(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "concat";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_concat_first_1;
  module_SimpleService_concat_first_1.id_ref() = 1;
  module_SimpleService_concat_first_1.name_ref() = "first";
  module_SimpleService_concat_first_1.is_optional_ref() = false;
  auto module_SimpleService_concat_first_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_concat_first_1_type->writeAndGenType(*module_SimpleService_concat_first_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_concat_first_1));
  ::apache::thrift::metadata::ThriftField module_SimpleService_concat_second_2;
  module_SimpleService_concat_second_2.id_ref() = 2;
  module_SimpleService_concat_second_2.name_ref() = "second";
  module_SimpleService_concat_second_2.is_optional_ref() = false;
  auto module_SimpleService_concat_second_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_concat_second_2_type->writeAndGenType(*module_SimpleService_concat_second_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_concat_second_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_value(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_value";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_value_simple_struct_1;
  module_SimpleService_get_value_simple_struct_1.id_ref() = 1;
  module_SimpleService_get_value_simple_struct_1.name_ref() = "simple_struct";
  module_SimpleService_get_value_simple_struct_1.is_optional_ref() = false;
  auto module_SimpleService_get_value_simple_struct_1_type = std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct");
  module_SimpleService_get_value_simple_struct_1_type->writeAndGenType(*module_SimpleService_get_value_simple_struct_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_value_simple_struct_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_negate(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "negate";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_negate_input_1;
  module_SimpleService_negate_input_1.id_ref() = 1;
  module_SimpleService_negate_input_1.name_ref() = "input";
  module_SimpleService_negate_input_1.is_optional_ref() = false;
  auto module_SimpleService_negate_input_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE);
  module_SimpleService_negate_input_1_type->writeAndGenType(*module_SimpleService_negate_input_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_negate_input_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_tiny(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "tiny";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_tiny_input_1;
  module_SimpleService_tiny_input_1.id_ref() = 1;
  module_SimpleService_tiny_input_1.name_ref() = "input";
  module_SimpleService_tiny_input_1.is_optional_ref() = false;
  auto module_SimpleService_tiny_input_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BYTE_TYPE);
  module_SimpleService_tiny_input_1_type->writeAndGenType(*module_SimpleService_tiny_input_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_tiny_input_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_small(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "small";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_small_input_1;
  module_SimpleService_small_input_1.id_ref() = 1;
  module_SimpleService_small_input_1.name_ref() = "input";
  module_SimpleService_small_input_1.is_optional_ref() = false;
  auto module_SimpleService_small_input_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  module_SimpleService_small_input_1_type->writeAndGenType(*module_SimpleService_small_input_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_small_input_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_big(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "big";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_big_input_1;
  module_SimpleService_big_input_1.id_ref() = 1;
  module_SimpleService_big_input_1.name_ref() = "input";
  module_SimpleService_big_input_1.is_optional_ref() = false;
  auto module_SimpleService_big_input_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE);
  module_SimpleService_big_input_1_type->writeAndGenType(*module_SimpleService_big_input_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_big_input_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_two(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "two";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_two_input_1;
  module_SimpleService_two_input_1.id_ref() = 1;
  module_SimpleService_two_input_1.name_ref() = "input";
  module_SimpleService_two_input_1.is_optional_ref() = false;
  auto module_SimpleService_two_input_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  module_SimpleService_two_input_1_type->writeAndGenType(*module_SimpleService_two_input_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_two_input_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_expected_exception(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "expected_exception";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_VOID_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_expected_exception_se_1;
  module_SimpleService_expected_exception_se_1.id_ref() = 1;
  module_SimpleService_expected_exception_se_1.name_ref() = "se";
  module_SimpleService_expected_exception_se_1.is_optional_ref() = false;
  auto module_SimpleService_expected_exception_se_1_type = std::make_unique<Struct< ::py3::simple::SimpleException>>("module.SimpleException");
  module_SimpleService_expected_exception_se_1_type->writeAndGenType(*module_SimpleService_expected_exception_se_1.type_ref(), metadata);
  func.exceptions_ref()->push_back(std::move(module_SimpleService_expected_exception_se_1));
  ExceptionMetadata< ::py3::simple::SimpleException>::gen(metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_unexpected_exception(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "unexpected_exception";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i16_list(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sum_i16_list";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_sum_i16_list_numbers_1;
  module_SimpleService_sum_i16_list_numbers_1.id_ref() = 1;
  module_SimpleService_sum_i16_list_numbers_1.name_ref() = "numbers";
  module_SimpleService_sum_i16_list_numbers_1.is_optional_ref() = false;
  auto module_SimpleService_sum_i16_list_numbers_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE));
  module_SimpleService_sum_i16_list_numbers_1_type->writeAndGenType(*module_SimpleService_sum_i16_list_numbers_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_sum_i16_list_numbers_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i32_list(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sum_i32_list";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_sum_i32_list_numbers_1;
  module_SimpleService_sum_i32_list_numbers_1.id_ref() = 1;
  module_SimpleService_sum_i32_list_numbers_1.name_ref() = "numbers";
  module_SimpleService_sum_i32_list_numbers_1.is_optional_ref() = false;
  auto module_SimpleService_sum_i32_list_numbers_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE));
  module_SimpleService_sum_i32_list_numbers_1_type->writeAndGenType(*module_SimpleService_sum_i32_list_numbers_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_sum_i32_list_numbers_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i64_list(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sum_i64_list";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_sum_i64_list_numbers_1;
  module_SimpleService_sum_i64_list_numbers_1.id_ref() = 1;
  module_SimpleService_sum_i64_list_numbers_1.name_ref() = "numbers";
  module_SimpleService_sum_i64_list_numbers_1.is_optional_ref() = false;
  auto module_SimpleService_sum_i64_list_numbers_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I64_TYPE));
  module_SimpleService_sum_i64_list_numbers_1_type->writeAndGenType(*module_SimpleService_sum_i64_list_numbers_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_sum_i64_list_numbers_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_concat_many(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "concat_many";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_concat_many_words_1;
  module_SimpleService_concat_many_words_1.id_ref() = 1;
  module_SimpleService_concat_many_words_1.name_ref() = "words";
  module_SimpleService_concat_many_words_1.is_optional_ref() = false;
  auto module_SimpleService_concat_many_words_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  module_SimpleService_concat_many_words_1_type->writeAndGenType(*module_SimpleService_concat_many_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_concat_many_words_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_count_structs(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "count_structs";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_count_structs_items_1;
  module_SimpleService_count_structs_items_1.id_ref() = 1;
  module_SimpleService_count_structs_items_1.name_ref() = "items";
  module_SimpleService_count_structs_items_1.is_optional_ref() = false;
  auto module_SimpleService_count_structs_items_1_type = std::make_unique<List>(std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct"));
  module_SimpleService_count_structs_items_1_type->writeAndGenType(*module_SimpleService_count_structs_items_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_count_structs_items_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_set(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sum_set";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_sum_set_numbers_1;
  module_SimpleService_sum_set_numbers_1.id_ref() = 1;
  module_SimpleService_sum_set_numbers_1.name_ref() = "numbers";
  module_SimpleService_sum_set_numbers_1.is_optional_ref() = false;
  auto module_SimpleService_sum_set_numbers_1_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE));
  module_SimpleService_sum_set_numbers_1_type->writeAndGenType(*module_SimpleService_sum_set_numbers_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_sum_set_numbers_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contains_word(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "contains_word";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BOOL_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_contains_word_words_1;
  module_SimpleService_contains_word_words_1.id_ref() = 1;
  module_SimpleService_contains_word_words_1.name_ref() = "words";
  module_SimpleService_contains_word_words_1.is_optional_ref() = false;
  auto module_SimpleService_contains_word_words_1_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  module_SimpleService_contains_word_words_1_type->writeAndGenType(*module_SimpleService_contains_word_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_contains_word_words_1));
  ::apache::thrift::metadata::ThriftField module_SimpleService_contains_word_word_2;
  module_SimpleService_contains_word_word_2.id_ref() = 2;
  module_SimpleService_contains_word_word_2.name_ref() = "word";
  module_SimpleService_contains_word_word_2.is_optional_ref() = false;
  auto module_SimpleService_contains_word_word_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_contains_word_word_2_type->writeAndGenType(*module_SimpleService_contains_word_word_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_contains_word_word_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_map_value(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_map_value";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_map_value_words_1;
  module_SimpleService_get_map_value_words_1.id_ref() = 1;
  module_SimpleService_get_map_value_words_1.name_ref() = "words";
  module_SimpleService_get_map_value_words_1.is_optional_ref() = false;
  auto module_SimpleService_get_map_value_words_1_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  module_SimpleService_get_map_value_words_1_type->writeAndGenType(*module_SimpleService_get_map_value_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_map_value_words_1));
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_map_value_key_2;
  module_SimpleService_get_map_value_key_2.id_ref() = 2;
  module_SimpleService_get_map_value_key_2.name_ref() = "key";
  module_SimpleService_get_map_value_key_2.is_optional_ref() = false;
  auto module_SimpleService_get_map_value_key_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_get_map_value_key_2_type->writeAndGenType(*module_SimpleService_get_map_value_key_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_map_value_key_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_map_length(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "map_length";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_map_length_items_1;
  module_SimpleService_map_length_items_1.id_ref() = 1;
  module_SimpleService_map_length_items_1.name_ref() = "items";
  module_SimpleService_map_length_items_1.is_optional_ref() = false;
  auto module_SimpleService_map_length_items_1_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct"));
  module_SimpleService_map_length_items_1_type->writeAndGenType(*module_SimpleService_map_length_items_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_map_length_items_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_map_values(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "sum_map_values";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_sum_map_values_items_1;
  module_SimpleService_sum_map_values_items_1.id_ref() = 1;
  module_SimpleService_sum_map_values_items_1.name_ref() = "items";
  module_SimpleService_sum_map_values_items_1.is_optional_ref() = false;
  auto module_SimpleService_sum_map_values_items_1_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE));
  module_SimpleService_sum_map_values_items_1_type->writeAndGenType(*module_SimpleService_sum_map_values_items_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_sum_map_values_items_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_complex_sum_i32(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "complex_sum_i32";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_complex_sum_i32_counter_1;
  module_SimpleService_complex_sum_i32_counter_1.id_ref() = 1;
  module_SimpleService_complex_sum_i32_counter_1.name_ref() = "counter";
  module_SimpleService_complex_sum_i32_counter_1.is_optional_ref() = false;
  auto module_SimpleService_complex_sum_i32_counter_1_type = std::make_unique<Struct< ::py3::simple::ComplexStruct>>("module.ComplexStruct");
  module_SimpleService_complex_sum_i32_counter_1_type->writeAndGenType(*module_SimpleService_complex_sum_i32_counter_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_complex_sum_i32_counter_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_repeat_name(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "repeat_name";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_repeat_name_counter_1;
  module_SimpleService_repeat_name_counter_1.id_ref() = 1;
  module_SimpleService_repeat_name_counter_1.name_ref() = "counter";
  module_SimpleService_repeat_name_counter_1.is_optional_ref() = false;
  auto module_SimpleService_repeat_name_counter_1_type = std::make_unique<Struct< ::py3::simple::ComplexStruct>>("module.ComplexStruct");
  module_SimpleService_repeat_name_counter_1_type->writeAndGenType(*module_SimpleService_repeat_name_counter_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_repeat_name_counter_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_struct(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_struct";
  auto func_ret_type = std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_fib(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "fib";
  auto func_ret_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_fib_n_1;
  module_SimpleService_fib_n_1.id_ref() = 1;
  module_SimpleService_fib_n_1.name_ref() = "n";
  module_SimpleService_fib_n_1.is_optional_ref() = false;
  auto module_SimpleService_fib_n_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  module_SimpleService_fib_n_1_type->writeAndGenType(*module_SimpleService_fib_n_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_fib_n_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_unique_words(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "unique_words";
  auto func_ret_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_unique_words_words_1;
  module_SimpleService_unique_words_words_1.id_ref() = 1;
  module_SimpleService_unique_words_words_1.name_ref() = "words";
  module_SimpleService_unique_words_words_1.is_optional_ref() = false;
  auto module_SimpleService_unique_words_words_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  module_SimpleService_unique_words_words_1_type->writeAndGenType(*module_SimpleService_unique_words_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_unique_words_words_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_words_count(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "words_count";
  auto func_ret_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_words_count_words_1;
  module_SimpleService_words_count_words_1.id_ref() = 1;
  module_SimpleService_words_count_words_1.name_ref() = "words";
  module_SimpleService_words_count_words_1.is_optional_ref() = false;
  auto module_SimpleService_words_count_words_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  module_SimpleService_words_count_words_1_type->writeAndGenType(*module_SimpleService_words_count_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_words_count_words_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_set_enum(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "set_enum";
  auto func_ret_type = std::make_unique<Enum< ::py3::simple::AnEnum>>("module.AnEnum");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_set_enum_in_enum_1;
  module_SimpleService_set_enum_in_enum_1.id_ref() = 1;
  module_SimpleService_set_enum_in_enum_1.name_ref() = "in_enum";
  module_SimpleService_set_enum_in_enum_1.is_optional_ref() = false;
  auto module_SimpleService_set_enum_in_enum_1_type = std::make_unique<Enum< ::py3::simple::AnEnum>>("module.AnEnum");
  module_SimpleService_set_enum_in_enum_1_type->writeAndGenType(*module_SimpleService_set_enum_in_enum_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_set_enum_in_enum_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_list_of_lists(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "list_of_lists";
  auto func_ret_type = std::make_unique<List>(std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_list_of_lists_num_lists_1;
  module_SimpleService_list_of_lists_num_lists_1.id_ref() = 1;
  module_SimpleService_list_of_lists_num_lists_1.name_ref() = "num_lists";
  module_SimpleService_list_of_lists_num_lists_1.is_optional_ref() = false;
  auto module_SimpleService_list_of_lists_num_lists_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  module_SimpleService_list_of_lists_num_lists_1_type->writeAndGenType(*module_SimpleService_list_of_lists_num_lists_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_list_of_lists_num_lists_1));
  ::apache::thrift::metadata::ThriftField module_SimpleService_list_of_lists_num_items_2;
  module_SimpleService_list_of_lists_num_items_2.id_ref() = 2;
  module_SimpleService_list_of_lists_num_items_2.name_ref() = "num_items";
  module_SimpleService_list_of_lists_num_items_2.is_optional_ref() = false;
  auto module_SimpleService_list_of_lists_num_items_2_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I16_TYPE);
  module_SimpleService_list_of_lists_num_items_2_type->writeAndGenType(*module_SimpleService_list_of_lists_num_items_2.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_list_of_lists_num_items_2));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_word_character_frequency(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "word_character_frequency";
  auto func_ret_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_word_character_frequency_sentence_1;
  module_SimpleService_word_character_frequency_sentence_1.id_ref() = 1;
  module_SimpleService_word_character_frequency_sentence_1.name_ref() = "sentence";
  module_SimpleService_word_character_frequency_sentence_1.is_optional_ref() = false;
  auto module_SimpleService_word_character_frequency_sentence_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_word_character_frequency_sentence_1_type->writeAndGenType(*module_SimpleService_word_character_frequency_sentence_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_word_character_frequency_sentence_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_list_of_sets(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "list_of_sets";
  auto func_ret_type = std::make_unique<List>(std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_list_of_sets_some_words_1;
  module_SimpleService_list_of_sets_some_words_1.id_ref() = 1;
  module_SimpleService_list_of_sets_some_words_1.name_ref() = "some_words";
  module_SimpleService_list_of_sets_some_words_1.is_optional_ref() = false;
  auto module_SimpleService_list_of_sets_some_words_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  module_SimpleService_list_of_sets_some_words_1_type->writeAndGenType(*module_SimpleService_list_of_sets_some_words_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_list_of_sets_some_words_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_nested_map_argument(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "nested_map_argument";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_nested_map_argument_struct_map_1;
  module_SimpleService_nested_map_argument_struct_map_1.id_ref() = 1;
  module_SimpleService_nested_map_argument_struct_map_1.name_ref() = "struct_map";
  module_SimpleService_nested_map_argument_struct_map_1.is_optional_ref() = false;
  auto module_SimpleService_nested_map_argument_struct_map_1_type = std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<List>(std::make_unique<Struct< ::py3::simple::SimpleStruct>>("module.SimpleStruct")));
  module_SimpleService_nested_map_argument_struct_map_1_type->writeAndGenType(*module_SimpleService_nested_map_argument_struct_map_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_nested_map_argument_struct_map_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_make_sentence(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "make_sentence";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_make_sentence_word_chars_1;
  module_SimpleService_make_sentence_word_chars_1.id_ref() = 1;
  module_SimpleService_make_sentence_word_chars_1.name_ref() = "word_chars";
  module_SimpleService_make_sentence_word_chars_1.is_optional_ref() = false;
  auto module_SimpleService_make_sentence_word_chars_1_type = std::make_unique<List>(std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)));
  module_SimpleService_make_sentence_word_chars_1_type->writeAndGenType(*module_SimpleService_make_sentence_word_chars_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_make_sentence_word_chars_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_union(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_union";
  auto func_ret_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_union_sets_1;
  module_SimpleService_get_union_sets_1.id_ref() = 1;
  module_SimpleService_get_union_sets_1.name_ref() = "sets";
  module_SimpleService_get_union_sets_1.is_optional_ref() = false;
  auto module_SimpleService_get_union_sets_1_type = std::make_unique<List>(std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE)));
  module_SimpleService_get_union_sets_1_type->writeAndGenType(*module_SimpleService_get_union_sets_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_union_sets_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_keys(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_keys";
  auto func_ret_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_keys_string_map_1;
  module_SimpleService_get_keys_string_map_1.id_ref() = 1;
  module_SimpleService_get_keys_string_map_1.name_ref() = "string_map";
  module_SimpleService_get_keys_string_map_1.is_optional_ref() = false;
  auto module_SimpleService_get_keys_string_map_1_type = std::make_unique<List>(std::make_unique<Map>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE), std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_STRING_TYPE)));
  module_SimpleService_get_keys_string_map_1_type->writeAndGenType(*module_SimpleService_get_keys_string_map_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_keys_string_map_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_lookup_double(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "lookup_double";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_DOUBLE_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_lookup_double_key_1;
  module_SimpleService_lookup_double_key_1.id_ref() = 1;
  module_SimpleService_lookup_double_key_1.name_ref() = "key";
  module_SimpleService_lookup_double_key_1.is_optional_ref() = false;
  auto module_SimpleService_lookup_double_key_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  module_SimpleService_lookup_double_key_1_type->writeAndGenType(*module_SimpleService_lookup_double_key_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_lookup_double_key_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_retrieve_binary(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "retrieve_binary";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_retrieve_binary_something_1;
  module_SimpleService_retrieve_binary_something_1.id_ref() = 1;
  module_SimpleService_retrieve_binary_something_1.name_ref() = "something";
  module_SimpleService_retrieve_binary_something_1.is_optional_ref() = false;
  auto module_SimpleService_retrieve_binary_something_1_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE);
  module_SimpleService_retrieve_binary_something_1_type->writeAndGenType(*module_SimpleService_retrieve_binary_something_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_retrieve_binary_something_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contain_binary(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "contain_binary";
  auto func_ret_type = std::make_unique<Set>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_contain_binary_binaries_1;
  module_SimpleService_contain_binary_binaries_1.id_ref() = 1;
  module_SimpleService_contain_binary_binaries_1.name_ref() = "binaries";
  module_SimpleService_contain_binary_binaries_1.is_optional_ref() = false;
  auto module_SimpleService_contain_binary_binaries_1_type = std::make_unique<List>(std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_BINARY_TYPE));
  module_SimpleService_contain_binary_binaries_1_type->writeAndGenType(*module_SimpleService_contain_binary_binaries_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_contain_binary_binaries_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contain_enum(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "contain_enum";
  auto func_ret_type = std::make_unique<List>(std::make_unique<Enum< ::py3::simple::AnEnum>>("module.AnEnum"));
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_contain_enum_the_enum_1;
  module_SimpleService_contain_enum_the_enum_1.id_ref() = 1;
  module_SimpleService_contain_enum_the_enum_1.name_ref() = "the_enum";
  module_SimpleService_contain_enum_the_enum_1.is_optional_ref() = false;
  auto module_SimpleService_contain_enum_the_enum_1_type = std::make_unique<List>(std::make_unique<Enum< ::py3::simple::AnEnum>>("module.AnEnum"));
  module_SimpleService_contain_enum_the_enum_1_type->writeAndGenType(*module_SimpleService_contain_enum_the_enum_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_contain_enum_the_enum_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}
void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_binary_union_struct(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_binary_union_struct";
  auto func_ret_type = std::make_unique<Struct< ::py3::simple::BinaryUnionStruct>>("module.BinaryUnionStruct");
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  ::apache::thrift::metadata::ThriftField module_SimpleService_get_binary_union_struct_u_1;
  module_SimpleService_get_binary_union_struct_u_1.id_ref() = 1;
  module_SimpleService_get_binary_union_struct_u_1.name_ref() = "u";
  module_SimpleService_get_binary_union_struct_u_1.is_optional_ref() = false;
  auto module_SimpleService_get_binary_union_struct_u_1_type = std::make_unique<Union< ::py3::simple::BinaryUnion>>("module.BinaryUnion");
  module_SimpleService_get_binary_union_struct_u_1_type->writeAndGenType(*module_SimpleService_get_binary_union_struct_u_1.type_ref(), metadata);
  func.arguments_ref()->push_back(std::move(module_SimpleService_get_binary_union_struct_u_1));
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_SimpleService;
  module_SimpleService.name_ref() = "module.SimpleService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_five,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_add_five,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_do_nothing,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_concat,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_value,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_negate,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_tiny,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_small,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_big,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_two,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_expected_exception,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_unexpected_exception,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i16_list,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i32_list,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_i64_list,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_concat_many,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_count_structs,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_set,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contains_word,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_map_value,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_map_length,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_sum_map_values,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_complex_sum_i32,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_repeat_name,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_struct,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_fib,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_unique_words,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_words_count,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_set_enum,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_list_of_lists,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_word_character_frequency,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_list_of_sets,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_nested_map_argument,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_make_sentence,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_union,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_keys,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_lookup_double,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_retrieve_binary,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contain_binary,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_contain_enum,
    ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen_get_binary_union_struct,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_SimpleService);
  }
  context.service_info_ref() = std::move(module_SimpleService);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
void ServiceMetadata<::py3::simple::DerivedServiceSvIf>::gen_get_six(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_six";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::py3::simple::DerivedServiceSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_DerivedService;
  module_DerivedService.name_ref() = "module.DerivedService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::py3::simple::DerivedServiceSvIf>::gen_get_six,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_DerivedService);
  }
  module_DerivedService.parent_ref() = "module.SimpleService";
  ThriftServiceContext module_SimpleService_parent_context;
  ServiceMetadata<::py3::simple::SimpleServiceSvIf>::gen(metadata, module_SimpleService_parent_context);
  auto module_SimpleService_parent_name = module_SimpleService_parent_context.get_service_info().get_name();
  metadata.services_ref()->emplace(std::move(module_SimpleService_parent_name), std::move(*module_SimpleService_parent_context.service_info_ref()));
  context.service_info_ref() = std::move(module_DerivedService);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
void ServiceMetadata<::py3::simple::RederivedServiceSvIf>::gen_get_seven(ThriftMetadata& metadata, ThriftService& service) {
  ::apache::thrift::metadata::ThriftFunction func;
  (void)metadata;
  func.name_ref() = "get_seven";
  auto func_ret_type = std::make_unique<Primitive>(ThriftPrimitiveType::THRIFT_I32_TYPE);
  func_ret_type->writeAndGenType(*func.return_type_ref(), metadata);
  func.is_oneway_ref() = false;
  service.functions_ref()->push_back(std::move(func));
}

void ServiceMetadata<::py3::simple::RederivedServiceSvIf>::gen(ThriftMetadata& metadata, ThriftServiceContext& context) {
  (void) metadata;
  ::apache::thrift::metadata::ThriftService module_RederivedService;
  module_RederivedService.name_ref() = "module.RederivedService";
  static const ThriftFunctionGenerator functions[] = {
    ServiceMetadata<::py3::simple::RederivedServiceSvIf>::gen_get_seven,
  };
  for (auto& function_gen : functions) {
    function_gen(metadata, module_RederivedService);
  }
  module_RederivedService.parent_ref() = "module.DerivedService";
  ThriftServiceContext module_DerivedService_parent_context;
  ServiceMetadata<::py3::simple::DerivedServiceSvIf>::gen(metadata, module_DerivedService_parent_context);
  auto module_DerivedService_parent_name = module_DerivedService_parent_context.get_service_info().get_name();
  metadata.services_ref()->emplace(std::move(module_DerivedService_parent_name), std::move(*module_DerivedService_parent_context.service_info_ref()));
  context.service_info_ref() = std::move(module_RederivedService);
  ::apache::thrift::metadata::ThriftModuleContext module;
  module.name_ref() = "module";
  context.module_ref() = std::move(module);
}
} // namespace md
} // namespace detail
} // namespace thrift
} // namespace apache
