# This file was generated by `thrift/test/testset/generator.py`
# @generated

namespace cpp2 apache.thrift.test.testset

struct struct_empty {
} (thrift.uri="facebook.com/thrift/test/testset/struct_empty")
struct struct_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool")
struct struct_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte")
struct struct_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16")
struct struct_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32")
struct struct_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64")
struct struct_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float")
struct struct_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double")
struct struct_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary")
struct struct_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string")
struct struct_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string")
struct struct_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64")
struct struct_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool")
struct struct_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte")
struct struct_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16")
struct struct_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32")
struct struct_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64")
struct struct_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float")
struct struct_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double")
struct struct_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary")
struct struct_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string")
struct struct_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool")
struct struct_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte")
struct struct_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16")
struct struct_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32")
struct struct_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64")
struct struct_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float")
struct struct_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double")
struct struct_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary")
struct struct_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string")
struct struct_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string")
struct struct_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64")
struct struct_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string")
struct struct_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64")
struct struct_list_bool_cpp_ref {
  1: list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_cpp_ref")
struct struct_list_byte_cpp_ref {
  1: list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_cpp_ref")
struct struct_list_i16_cpp_ref {
  1: list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_cpp_ref")
struct struct_list_i32_cpp_ref {
  1: list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_cpp_ref")
struct struct_list_i64_cpp_ref {
  1: list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_cpp_ref")
struct struct_list_float_cpp_ref {
  1: list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_cpp_ref")
struct struct_list_double_cpp_ref {
  1: list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_cpp_ref")
struct struct_list_binary_cpp_ref {
  1: list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_cpp_ref")
struct struct_list_string_cpp_ref {
  1: list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_cpp_ref")
struct struct_set_string_cpp_ref {
  1: set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_cpp_ref")
struct struct_set_i64_cpp_ref {
  1: set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_cpp_ref")
struct struct_map_string_bool_cpp_ref {
  1: map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_cpp_ref")
struct struct_map_string_byte_cpp_ref {
  1: map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_cpp_ref")
struct struct_map_string_i16_cpp_ref {
  1: map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_cpp_ref")
struct struct_map_string_i32_cpp_ref {
  1: map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_cpp_ref")
struct struct_map_string_i64_cpp_ref {
  1: map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_cpp_ref")
struct struct_map_string_float_cpp_ref {
  1: map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_cpp_ref")
struct struct_map_string_double_cpp_ref {
  1: map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_cpp_ref")
struct struct_map_string_binary_cpp_ref {
  1: map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_cpp_ref")
struct struct_map_string_string_cpp_ref {
  1: map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_cpp_ref")
struct struct_map_i64_bool_cpp_ref {
  1: map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_cpp_ref")
struct struct_map_i64_byte_cpp_ref {
  1: map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_cpp_ref")
struct struct_map_i64_i16_cpp_ref {
  1: map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_cpp_ref")
struct struct_map_i64_i32_cpp_ref {
  1: map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_cpp_ref")
struct struct_map_i64_i64_cpp_ref {
  1: map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_cpp_ref")
struct struct_map_i64_float_cpp_ref {
  1: map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_cpp_ref")
struct struct_map_i64_double_cpp_ref {
  1: map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_cpp_ref")
struct struct_map_i64_binary_cpp_ref {
  1: map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_cpp_ref")
struct struct_map_i64_string_cpp_ref {
  1: map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_cpp_ref")
struct struct_map_string_set_string_cpp_ref {
  1: map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_cpp_ref")
struct struct_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_cpp_ref")
struct struct_map_i64_set_string_cpp_ref {
  1: map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_cpp_ref")
struct struct_map_i64_set_i64_cpp_ref {
  1: map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_cpp_ref")
struct struct_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_bool")
struct struct_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_byte")
struct struct_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i16")
struct struct_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i32")
struct struct_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_i64")
struct struct_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_float")
struct struct_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_double")
struct struct_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_binary")
struct struct_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_string")
struct struct_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool")
struct struct_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte")
struct struct_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16")
struct struct_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32")
struct struct_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64")
struct struct_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float")
struct struct_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double")
struct struct_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary")
struct struct_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string")
struct struct_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string")
struct struct_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64")
struct struct_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool")
struct struct_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte")
struct struct_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16")
struct struct_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32")
struct struct_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64")
struct struct_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float")
struct struct_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double")
struct struct_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary")
struct struct_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string")
struct struct_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool")
struct struct_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte")
struct struct_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16")
struct struct_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32")
struct struct_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64")
struct struct_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float")
struct struct_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double")
struct struct_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary")
struct struct_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string")
struct struct_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string")
struct struct_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64")
struct struct_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string")
struct struct_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64")
struct struct_optional_list_bool_cpp_ref {
  1: optional list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_bool_cpp_ref")
struct struct_optional_list_byte_cpp_ref {
  1: optional list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_byte_cpp_ref")
struct struct_optional_list_i16_cpp_ref {
  1: optional list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i16_cpp_ref")
struct struct_optional_list_i32_cpp_ref {
  1: optional list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i32_cpp_ref")
struct struct_optional_list_i64_cpp_ref {
  1: optional list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_i64_cpp_ref")
struct struct_optional_list_float_cpp_ref {
  1: optional list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_float_cpp_ref")
struct struct_optional_list_double_cpp_ref {
  1: optional list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_double_cpp_ref")
struct struct_optional_list_binary_cpp_ref {
  1: optional list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_binary_cpp_ref")
struct struct_optional_list_string_cpp_ref {
  1: optional list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_list_string_cpp_ref")
struct struct_optional_set_string_cpp_ref {
  1: optional set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_string_cpp_ref")
struct struct_optional_set_i64_cpp_ref {
  1: optional set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_set_i64_cpp_ref")
struct struct_optional_map_string_bool_cpp_ref {
  1: optional map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_bool_cpp_ref")
struct struct_optional_map_string_byte_cpp_ref {
  1: optional map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_byte_cpp_ref")
struct struct_optional_map_string_i16_cpp_ref {
  1: optional map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i16_cpp_ref")
struct struct_optional_map_string_i32_cpp_ref {
  1: optional map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i32_cpp_ref")
struct struct_optional_map_string_i64_cpp_ref {
  1: optional map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_i64_cpp_ref")
struct struct_optional_map_string_float_cpp_ref {
  1: optional map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_float_cpp_ref")
struct struct_optional_map_string_double_cpp_ref {
  1: optional map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_double_cpp_ref")
struct struct_optional_map_string_binary_cpp_ref {
  1: optional map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_binary_cpp_ref")
struct struct_optional_map_string_string_cpp_ref {
  1: optional map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_string_cpp_ref")
struct struct_optional_map_i64_bool_cpp_ref {
  1: optional map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_bool_cpp_ref")
struct struct_optional_map_i64_byte_cpp_ref {
  1: optional map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_byte_cpp_ref")
struct struct_optional_map_i64_i16_cpp_ref {
  1: optional map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i16_cpp_ref")
struct struct_optional_map_i64_i32_cpp_ref {
  1: optional map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i32_cpp_ref")
struct struct_optional_map_i64_i64_cpp_ref {
  1: optional map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_i64_cpp_ref")
struct struct_optional_map_i64_float_cpp_ref {
  1: optional map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_float_cpp_ref")
struct struct_optional_map_i64_double_cpp_ref {
  1: optional map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_double_cpp_ref")
struct struct_optional_map_i64_binary_cpp_ref {
  1: optional map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_binary_cpp_ref")
struct struct_optional_map_i64_string_cpp_ref {
  1: optional map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_string_cpp_ref")
struct struct_optional_map_string_set_string_cpp_ref {
  1: optional map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_string_cpp_ref")
struct struct_optional_map_string_set_i64_cpp_ref {
  1: optional map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_string_set_i64_cpp_ref")
struct struct_optional_map_i64_set_string_cpp_ref {
  1: optional map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_string_cpp_ref")
struct struct_optional_map_i64_set_i64_cpp_ref {
  1: optional map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_map_i64_set_i64_cpp_ref")
struct struct_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_bool")
struct struct_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_byte")
struct struct_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i16")
struct struct_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i32")
struct struct_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_i64")
struct struct_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_float")
struct struct_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_double")
struct struct_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_binary")
struct struct_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_optional_string")
struct struct_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool")
struct struct_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte")
struct struct_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16")
struct struct_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32")
struct struct_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64")
struct struct_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float")
struct struct_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double")
struct struct_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary")
struct struct_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string")
struct struct_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string")
struct struct_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64")
struct struct_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool")
struct struct_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte")
struct struct_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16")
struct struct_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32")
struct struct_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64")
struct struct_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float")
struct struct_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double")
struct struct_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary")
struct struct_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string")
struct struct_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool")
struct struct_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte")
struct struct_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16")
struct struct_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32")
struct struct_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64")
struct struct_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float")
struct struct_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double")
struct struct_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary")
struct struct_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string")
struct struct_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string")
struct struct_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64")
struct struct_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string")
struct struct_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64")
struct struct_required_list_bool_cpp_ref {
  1: required list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_bool_cpp_ref")
struct struct_required_list_byte_cpp_ref {
  1: required list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_byte_cpp_ref")
struct struct_required_list_i16_cpp_ref {
  1: required list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i16_cpp_ref")
struct struct_required_list_i32_cpp_ref {
  1: required list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i32_cpp_ref")
struct struct_required_list_i64_cpp_ref {
  1: required list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_i64_cpp_ref")
struct struct_required_list_float_cpp_ref {
  1: required list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_float_cpp_ref")
struct struct_required_list_double_cpp_ref {
  1: required list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_double_cpp_ref")
struct struct_required_list_binary_cpp_ref {
  1: required list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_binary_cpp_ref")
struct struct_required_list_string_cpp_ref {
  1: required list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_list_string_cpp_ref")
struct struct_required_set_string_cpp_ref {
  1: required set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_string_cpp_ref")
struct struct_required_set_i64_cpp_ref {
  1: required set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_set_i64_cpp_ref")
struct struct_required_map_string_bool_cpp_ref {
  1: required map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_bool_cpp_ref")
struct struct_required_map_string_byte_cpp_ref {
  1: required map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_byte_cpp_ref")
struct struct_required_map_string_i16_cpp_ref {
  1: required map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i16_cpp_ref")
struct struct_required_map_string_i32_cpp_ref {
  1: required map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i32_cpp_ref")
struct struct_required_map_string_i64_cpp_ref {
  1: required map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_i64_cpp_ref")
struct struct_required_map_string_float_cpp_ref {
  1: required map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_float_cpp_ref")
struct struct_required_map_string_double_cpp_ref {
  1: required map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_double_cpp_ref")
struct struct_required_map_string_binary_cpp_ref {
  1: required map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_binary_cpp_ref")
struct struct_required_map_string_string_cpp_ref {
  1: required map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_string_cpp_ref")
struct struct_required_map_i64_bool_cpp_ref {
  1: required map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_bool_cpp_ref")
struct struct_required_map_i64_byte_cpp_ref {
  1: required map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_byte_cpp_ref")
struct struct_required_map_i64_i16_cpp_ref {
  1: required map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i16_cpp_ref")
struct struct_required_map_i64_i32_cpp_ref {
  1: required map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i32_cpp_ref")
struct struct_required_map_i64_i64_cpp_ref {
  1: required map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_i64_cpp_ref")
struct struct_required_map_i64_float_cpp_ref {
  1: required map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_float_cpp_ref")
struct struct_required_map_i64_double_cpp_ref {
  1: required map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_double_cpp_ref")
struct struct_required_map_i64_binary_cpp_ref {
  1: required map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_binary_cpp_ref")
struct struct_required_map_i64_string_cpp_ref {
  1: required map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_string_cpp_ref")
struct struct_required_map_string_set_string_cpp_ref {
  1: required map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_string_cpp_ref")
struct struct_required_map_string_set_i64_cpp_ref {
  1: required map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_string_set_i64_cpp_ref")
struct struct_required_map_i64_set_string_cpp_ref {
  1: required map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_string_cpp_ref")
struct struct_required_map_i64_set_i64_cpp_ref {
  1: required map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_map_i64_set_i64_cpp_ref")
struct struct_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_bool")
struct struct_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_byte")
struct struct_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i16")
struct struct_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i32")
struct struct_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_i64")
struct struct_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_float")
struct struct_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_double")
struct struct_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_binary")
struct struct_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/struct_required_string")
struct struct_list_bool_lazy {
  1: list<bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_bool_lazy")
struct struct_list_byte_lazy {
  1: list<byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_byte_lazy")
struct struct_list_i16_lazy {
  1: list<i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i16_lazy")
struct struct_list_i32_lazy {
  1: list<i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i32_lazy")
struct struct_list_i64_lazy {
  1: list<i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_i64_lazy")
struct struct_list_float_lazy {
  1: list<float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_float_lazy")
struct struct_list_double_lazy {
  1: list<double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_double_lazy")
struct struct_list_binary_lazy {
  1: list<binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_binary_lazy")
struct struct_list_string_lazy {
  1: list<string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_list_string_lazy")
struct struct_set_string_lazy {
  1: set<string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_string_lazy")
struct struct_set_i64_lazy {
  1: set<i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_set_i64_lazy")
struct struct_map_string_bool_lazy {
  1: map<string, bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_bool_lazy")
struct struct_map_string_byte_lazy {
  1: map<string, byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_byte_lazy")
struct struct_map_string_i16_lazy {
  1: map<string, i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i16_lazy")
struct struct_map_string_i32_lazy {
  1: map<string, i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i32_lazy")
struct struct_map_string_i64_lazy {
  1: map<string, i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_i64_lazy")
struct struct_map_string_float_lazy {
  1: map<string, float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_float_lazy")
struct struct_map_string_double_lazy {
  1: map<string, double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_double_lazy")
struct struct_map_string_binary_lazy {
  1: map<string, binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_binary_lazy")
struct struct_map_string_string_lazy {
  1: map<string, string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_string_lazy")
struct struct_map_i64_bool_lazy {
  1: map<i64, bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_bool_lazy")
struct struct_map_i64_byte_lazy {
  1: map<i64, byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_byte_lazy")
struct struct_map_i64_i16_lazy {
  1: map<i64, i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i16_lazy")
struct struct_map_i64_i32_lazy {
  1: map<i64, i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i32_lazy")
struct struct_map_i64_i64_lazy {
  1: map<i64, i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_i64_lazy")
struct struct_map_i64_float_lazy {
  1: map<i64, float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_float_lazy")
struct struct_map_i64_double_lazy {
  1: map<i64, double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_double_lazy")
struct struct_map_i64_binary_lazy {
  1: map<i64, binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_binary_lazy")
struct struct_map_i64_string_lazy {
  1: map<i64, string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_string_lazy")
struct struct_map_string_set_string_lazy {
  1: map<string, set<string>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_string_lazy")
struct struct_map_string_set_i64_lazy {
  1: map<string, set<i64>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_string_set_i64_lazy")
struct struct_map_i64_set_string_lazy {
  1: map<i64, set<string>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_string_lazy")
struct struct_map_i64_set_i64_lazy {
  1: map<i64, set<i64>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_map_i64_set_i64_lazy")
struct struct_string_lazy {
  1: string field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/struct_string_lazy")
exception exception_empty {
} (thrift.uri="facebook.com/thrift/test/testset/exception_empty")
exception exception_list_bool {
  1: list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool")
exception exception_list_byte {
  1: list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte")
exception exception_list_i16 {
  1: list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16")
exception exception_list_i32 {
  1: list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32")
exception exception_list_i64 {
  1: list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64")
exception exception_list_float {
  1: list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float")
exception exception_list_double {
  1: list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double")
exception exception_list_binary {
  1: list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary")
exception exception_list_string {
  1: list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string")
exception exception_set_string {
  1: set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string")
exception exception_set_i64 {
  1: set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64")
exception exception_map_string_bool {
  1: map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool")
exception exception_map_string_byte {
  1: map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte")
exception exception_map_string_i16 {
  1: map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16")
exception exception_map_string_i32 {
  1: map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32")
exception exception_map_string_i64 {
  1: map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64")
exception exception_map_string_float {
  1: map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float")
exception exception_map_string_double {
  1: map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double")
exception exception_map_string_binary {
  1: map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary")
exception exception_map_string_string {
  1: map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string")
exception exception_map_i64_bool {
  1: map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool")
exception exception_map_i64_byte {
  1: map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte")
exception exception_map_i64_i16 {
  1: map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16")
exception exception_map_i64_i32 {
  1: map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32")
exception exception_map_i64_i64 {
  1: map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64")
exception exception_map_i64_float {
  1: map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float")
exception exception_map_i64_double {
  1: map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double")
exception exception_map_i64_binary {
  1: map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary")
exception exception_map_i64_string {
  1: map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string")
exception exception_map_string_set_string {
  1: map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string")
exception exception_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64")
exception exception_map_i64_set_string {
  1: map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string")
exception exception_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64")
exception exception_list_bool_cpp_ref {
  1: list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_cpp_ref")
exception exception_list_byte_cpp_ref {
  1: list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_cpp_ref")
exception exception_list_i16_cpp_ref {
  1: list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_cpp_ref")
exception exception_list_i32_cpp_ref {
  1: list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_cpp_ref")
exception exception_list_i64_cpp_ref {
  1: list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_cpp_ref")
exception exception_list_float_cpp_ref {
  1: list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_cpp_ref")
exception exception_list_double_cpp_ref {
  1: list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_cpp_ref")
exception exception_list_binary_cpp_ref {
  1: list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_cpp_ref")
exception exception_list_string_cpp_ref {
  1: list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_cpp_ref")
exception exception_set_string_cpp_ref {
  1: set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_cpp_ref")
exception exception_set_i64_cpp_ref {
  1: set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_cpp_ref")
exception exception_map_string_bool_cpp_ref {
  1: map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_cpp_ref")
exception exception_map_string_byte_cpp_ref {
  1: map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_cpp_ref")
exception exception_map_string_i16_cpp_ref {
  1: map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_cpp_ref")
exception exception_map_string_i32_cpp_ref {
  1: map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_cpp_ref")
exception exception_map_string_i64_cpp_ref {
  1: map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_cpp_ref")
exception exception_map_string_float_cpp_ref {
  1: map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_cpp_ref")
exception exception_map_string_double_cpp_ref {
  1: map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_cpp_ref")
exception exception_map_string_binary_cpp_ref {
  1: map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_cpp_ref")
exception exception_map_string_string_cpp_ref {
  1: map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_cpp_ref")
exception exception_map_i64_bool_cpp_ref {
  1: map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_cpp_ref")
exception exception_map_i64_byte_cpp_ref {
  1: map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_cpp_ref")
exception exception_map_i64_i16_cpp_ref {
  1: map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_cpp_ref")
exception exception_map_i64_i32_cpp_ref {
  1: map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_cpp_ref")
exception exception_map_i64_i64_cpp_ref {
  1: map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_cpp_ref")
exception exception_map_i64_float_cpp_ref {
  1: map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_cpp_ref")
exception exception_map_i64_double_cpp_ref {
  1: map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_cpp_ref")
exception exception_map_i64_binary_cpp_ref {
  1: map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_cpp_ref")
exception exception_map_i64_string_cpp_ref {
  1: map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_cpp_ref")
exception exception_map_string_set_string_cpp_ref {
  1: map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_cpp_ref")
exception exception_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_cpp_ref")
exception exception_map_i64_set_string_cpp_ref {
  1: map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_cpp_ref")
exception exception_map_i64_set_i64_cpp_ref {
  1: map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_cpp_ref")
exception exception_bool {
  1: bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_bool")
exception exception_byte {
  1: byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_byte")
exception exception_i16 {
  1: i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i16")
exception exception_i32 {
  1: i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i32")
exception exception_i64 {
  1: i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_i64")
exception exception_float {
  1: float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_float")
exception exception_double {
  1: double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_double")
exception exception_binary {
  1: binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_binary")
exception exception_string {
  1: string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_string")
exception exception_optional_list_bool {
  1: optional list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool")
exception exception_optional_list_byte {
  1: optional list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte")
exception exception_optional_list_i16 {
  1: optional list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16")
exception exception_optional_list_i32 {
  1: optional list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32")
exception exception_optional_list_i64 {
  1: optional list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64")
exception exception_optional_list_float {
  1: optional list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float")
exception exception_optional_list_double {
  1: optional list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double")
exception exception_optional_list_binary {
  1: optional list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary")
exception exception_optional_list_string {
  1: optional list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string")
exception exception_optional_set_string {
  1: optional set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string")
exception exception_optional_set_i64 {
  1: optional set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64")
exception exception_optional_map_string_bool {
  1: optional map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool")
exception exception_optional_map_string_byte {
  1: optional map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte")
exception exception_optional_map_string_i16 {
  1: optional map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16")
exception exception_optional_map_string_i32 {
  1: optional map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32")
exception exception_optional_map_string_i64 {
  1: optional map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64")
exception exception_optional_map_string_float {
  1: optional map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float")
exception exception_optional_map_string_double {
  1: optional map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double")
exception exception_optional_map_string_binary {
  1: optional map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary")
exception exception_optional_map_string_string {
  1: optional map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string")
exception exception_optional_map_i64_bool {
  1: optional map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool")
exception exception_optional_map_i64_byte {
  1: optional map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte")
exception exception_optional_map_i64_i16 {
  1: optional map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16")
exception exception_optional_map_i64_i32 {
  1: optional map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32")
exception exception_optional_map_i64_i64 {
  1: optional map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64")
exception exception_optional_map_i64_float {
  1: optional map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float")
exception exception_optional_map_i64_double {
  1: optional map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double")
exception exception_optional_map_i64_binary {
  1: optional map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary")
exception exception_optional_map_i64_string {
  1: optional map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string")
exception exception_optional_map_string_set_string {
  1: optional map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string")
exception exception_optional_map_string_set_i64 {
  1: optional map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64")
exception exception_optional_map_i64_set_string {
  1: optional map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string")
exception exception_optional_map_i64_set_i64 {
  1: optional map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64")
exception exception_optional_list_bool_cpp_ref {
  1: optional list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_bool_cpp_ref")
exception exception_optional_list_byte_cpp_ref {
  1: optional list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_byte_cpp_ref")
exception exception_optional_list_i16_cpp_ref {
  1: optional list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i16_cpp_ref")
exception exception_optional_list_i32_cpp_ref {
  1: optional list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i32_cpp_ref")
exception exception_optional_list_i64_cpp_ref {
  1: optional list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_i64_cpp_ref")
exception exception_optional_list_float_cpp_ref {
  1: optional list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_float_cpp_ref")
exception exception_optional_list_double_cpp_ref {
  1: optional list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_double_cpp_ref")
exception exception_optional_list_binary_cpp_ref {
  1: optional list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_binary_cpp_ref")
exception exception_optional_list_string_cpp_ref {
  1: optional list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_list_string_cpp_ref")
exception exception_optional_set_string_cpp_ref {
  1: optional set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_string_cpp_ref")
exception exception_optional_set_i64_cpp_ref {
  1: optional set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_set_i64_cpp_ref")
exception exception_optional_map_string_bool_cpp_ref {
  1: optional map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_bool_cpp_ref")
exception exception_optional_map_string_byte_cpp_ref {
  1: optional map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_byte_cpp_ref")
exception exception_optional_map_string_i16_cpp_ref {
  1: optional map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i16_cpp_ref")
exception exception_optional_map_string_i32_cpp_ref {
  1: optional map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i32_cpp_ref")
exception exception_optional_map_string_i64_cpp_ref {
  1: optional map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_i64_cpp_ref")
exception exception_optional_map_string_float_cpp_ref {
  1: optional map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_float_cpp_ref")
exception exception_optional_map_string_double_cpp_ref {
  1: optional map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_double_cpp_ref")
exception exception_optional_map_string_binary_cpp_ref {
  1: optional map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_binary_cpp_ref")
exception exception_optional_map_string_string_cpp_ref {
  1: optional map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_string_cpp_ref")
exception exception_optional_map_i64_bool_cpp_ref {
  1: optional map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_bool_cpp_ref")
exception exception_optional_map_i64_byte_cpp_ref {
  1: optional map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_byte_cpp_ref")
exception exception_optional_map_i64_i16_cpp_ref {
  1: optional map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i16_cpp_ref")
exception exception_optional_map_i64_i32_cpp_ref {
  1: optional map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i32_cpp_ref")
exception exception_optional_map_i64_i64_cpp_ref {
  1: optional map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_i64_cpp_ref")
exception exception_optional_map_i64_float_cpp_ref {
  1: optional map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_float_cpp_ref")
exception exception_optional_map_i64_double_cpp_ref {
  1: optional map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_double_cpp_ref")
exception exception_optional_map_i64_binary_cpp_ref {
  1: optional map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_binary_cpp_ref")
exception exception_optional_map_i64_string_cpp_ref {
  1: optional map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_string_cpp_ref")
exception exception_optional_map_string_set_string_cpp_ref {
  1: optional map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_string_cpp_ref")
exception exception_optional_map_string_set_i64_cpp_ref {
  1: optional map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_string_set_i64_cpp_ref")
exception exception_optional_map_i64_set_string_cpp_ref {
  1: optional map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_string_cpp_ref")
exception exception_optional_map_i64_set_i64_cpp_ref {
  1: optional map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_map_i64_set_i64_cpp_ref")
exception exception_optional_bool {
  1: optional bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_bool")
exception exception_optional_byte {
  1: optional byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_byte")
exception exception_optional_i16 {
  1: optional i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i16")
exception exception_optional_i32 {
  1: optional i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i32")
exception exception_optional_i64 {
  1: optional i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_i64")
exception exception_optional_float {
  1: optional float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_float")
exception exception_optional_double {
  1: optional double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_double")
exception exception_optional_binary {
  1: optional binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_binary")
exception exception_optional_string {
  1: optional string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_optional_string")
exception exception_required_list_bool {
  1: required list<bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool")
exception exception_required_list_byte {
  1: required list<byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte")
exception exception_required_list_i16 {
  1: required list<i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16")
exception exception_required_list_i32 {
  1: required list<i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32")
exception exception_required_list_i64 {
  1: required list<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64")
exception exception_required_list_float {
  1: required list<float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float")
exception exception_required_list_double {
  1: required list<double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double")
exception exception_required_list_binary {
  1: required list<binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary")
exception exception_required_list_string {
  1: required list<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string")
exception exception_required_set_string {
  1: required set<string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string")
exception exception_required_set_i64 {
  1: required set<i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64")
exception exception_required_map_string_bool {
  1: required map<string, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool")
exception exception_required_map_string_byte {
  1: required map<string, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte")
exception exception_required_map_string_i16 {
  1: required map<string, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16")
exception exception_required_map_string_i32 {
  1: required map<string, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32")
exception exception_required_map_string_i64 {
  1: required map<string, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64")
exception exception_required_map_string_float {
  1: required map<string, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float")
exception exception_required_map_string_double {
  1: required map<string, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double")
exception exception_required_map_string_binary {
  1: required map<string, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary")
exception exception_required_map_string_string {
  1: required map<string, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string")
exception exception_required_map_i64_bool {
  1: required map<i64, bool> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool")
exception exception_required_map_i64_byte {
  1: required map<i64, byte> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte")
exception exception_required_map_i64_i16 {
  1: required map<i64, i16> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16")
exception exception_required_map_i64_i32 {
  1: required map<i64, i32> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32")
exception exception_required_map_i64_i64 {
  1: required map<i64, i64> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64")
exception exception_required_map_i64_float {
  1: required map<i64, float> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float")
exception exception_required_map_i64_double {
  1: required map<i64, double> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double")
exception exception_required_map_i64_binary {
  1: required map<i64, binary> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary")
exception exception_required_map_i64_string {
  1: required map<i64, string> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string")
exception exception_required_map_string_set_string {
  1: required map<string, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string")
exception exception_required_map_string_set_i64 {
  1: required map<string, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64")
exception exception_required_map_i64_set_string {
  1: required map<i64, set<string>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string")
exception exception_required_map_i64_set_i64 {
  1: required map<i64, set<i64>> field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64")
exception exception_required_list_bool_cpp_ref {
  1: required list<bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_bool_cpp_ref")
exception exception_required_list_byte_cpp_ref {
  1: required list<byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_byte_cpp_ref")
exception exception_required_list_i16_cpp_ref {
  1: required list<i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i16_cpp_ref")
exception exception_required_list_i32_cpp_ref {
  1: required list<i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i32_cpp_ref")
exception exception_required_list_i64_cpp_ref {
  1: required list<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_i64_cpp_ref")
exception exception_required_list_float_cpp_ref {
  1: required list<float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_float_cpp_ref")
exception exception_required_list_double_cpp_ref {
  1: required list<double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_double_cpp_ref")
exception exception_required_list_binary_cpp_ref {
  1: required list<binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_binary_cpp_ref")
exception exception_required_list_string_cpp_ref {
  1: required list<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_list_string_cpp_ref")
exception exception_required_set_string_cpp_ref {
  1: required set<string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_string_cpp_ref")
exception exception_required_set_i64_cpp_ref {
  1: required set<i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_set_i64_cpp_ref")
exception exception_required_map_string_bool_cpp_ref {
  1: required map<string, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_bool_cpp_ref")
exception exception_required_map_string_byte_cpp_ref {
  1: required map<string, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_byte_cpp_ref")
exception exception_required_map_string_i16_cpp_ref {
  1: required map<string, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i16_cpp_ref")
exception exception_required_map_string_i32_cpp_ref {
  1: required map<string, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i32_cpp_ref")
exception exception_required_map_string_i64_cpp_ref {
  1: required map<string, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_i64_cpp_ref")
exception exception_required_map_string_float_cpp_ref {
  1: required map<string, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_float_cpp_ref")
exception exception_required_map_string_double_cpp_ref {
  1: required map<string, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_double_cpp_ref")
exception exception_required_map_string_binary_cpp_ref {
  1: required map<string, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_binary_cpp_ref")
exception exception_required_map_string_string_cpp_ref {
  1: required map<string, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_string_cpp_ref")
exception exception_required_map_i64_bool_cpp_ref {
  1: required map<i64, bool> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_bool_cpp_ref")
exception exception_required_map_i64_byte_cpp_ref {
  1: required map<i64, byte> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_byte_cpp_ref")
exception exception_required_map_i64_i16_cpp_ref {
  1: required map<i64, i16> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i16_cpp_ref")
exception exception_required_map_i64_i32_cpp_ref {
  1: required map<i64, i32> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i32_cpp_ref")
exception exception_required_map_i64_i64_cpp_ref {
  1: required map<i64, i64> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_i64_cpp_ref")
exception exception_required_map_i64_float_cpp_ref {
  1: required map<i64, float> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_float_cpp_ref")
exception exception_required_map_i64_double_cpp_ref {
  1: required map<i64, double> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_double_cpp_ref")
exception exception_required_map_i64_binary_cpp_ref {
  1: required map<i64, binary> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_binary_cpp_ref")
exception exception_required_map_i64_string_cpp_ref {
  1: required map<i64, string> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_string_cpp_ref")
exception exception_required_map_string_set_string_cpp_ref {
  1: required map<string, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_string_cpp_ref")
exception exception_required_map_string_set_i64_cpp_ref {
  1: required map<string, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_string_set_i64_cpp_ref")
exception exception_required_map_i64_set_string_cpp_ref {
  1: required map<i64, set<string>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_string_cpp_ref")
exception exception_required_map_i64_set_i64_cpp_ref {
  1: required map<i64, set<i64>> field_1 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_map_i64_set_i64_cpp_ref")
exception exception_required_bool {
  1: required bool field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_bool")
exception exception_required_byte {
  1: required byte field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_byte")
exception exception_required_i16 {
  1: required i16 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i16")
exception exception_required_i32 {
  1: required i32 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i32")
exception exception_required_i64 {
  1: required i64 field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_i64")
exception exception_required_float {
  1: required float field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_float")
exception exception_required_double {
  1: required double field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_double")
exception exception_required_binary {
  1: required binary field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_binary")
exception exception_required_string {
  1: required string field_1;
} (thrift.uri="facebook.com/thrift/test/testset/exception_required_string")
exception exception_list_bool_lazy {
  1: list<bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_bool_lazy")
exception exception_list_byte_lazy {
  1: list<byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_byte_lazy")
exception exception_list_i16_lazy {
  1: list<i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i16_lazy")
exception exception_list_i32_lazy {
  1: list<i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i32_lazy")
exception exception_list_i64_lazy {
  1: list<i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_i64_lazy")
exception exception_list_float_lazy {
  1: list<float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_float_lazy")
exception exception_list_double_lazy {
  1: list<double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_double_lazy")
exception exception_list_binary_lazy {
  1: list<binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_binary_lazy")
exception exception_list_string_lazy {
  1: list<string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_list_string_lazy")
exception exception_set_string_lazy {
  1: set<string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_string_lazy")
exception exception_set_i64_lazy {
  1: set<i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_set_i64_lazy")
exception exception_map_string_bool_lazy {
  1: map<string, bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_bool_lazy")
exception exception_map_string_byte_lazy {
  1: map<string, byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_byte_lazy")
exception exception_map_string_i16_lazy {
  1: map<string, i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i16_lazy")
exception exception_map_string_i32_lazy {
  1: map<string, i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i32_lazy")
exception exception_map_string_i64_lazy {
  1: map<string, i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_i64_lazy")
exception exception_map_string_float_lazy {
  1: map<string, float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_float_lazy")
exception exception_map_string_double_lazy {
  1: map<string, double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_double_lazy")
exception exception_map_string_binary_lazy {
  1: map<string, binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_binary_lazy")
exception exception_map_string_string_lazy {
  1: map<string, string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_string_lazy")
exception exception_map_i64_bool_lazy {
  1: map<i64, bool> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_bool_lazy")
exception exception_map_i64_byte_lazy {
  1: map<i64, byte> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_byte_lazy")
exception exception_map_i64_i16_lazy {
  1: map<i64, i16> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i16_lazy")
exception exception_map_i64_i32_lazy {
  1: map<i64, i32> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i32_lazy")
exception exception_map_i64_i64_lazy {
  1: map<i64, i64> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_i64_lazy")
exception exception_map_i64_float_lazy {
  1: map<i64, float> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_float_lazy")
exception exception_map_i64_double_lazy {
  1: map<i64, double> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_double_lazy")
exception exception_map_i64_binary_lazy {
  1: map<i64, binary> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_binary_lazy")
exception exception_map_i64_string_lazy {
  1: map<i64, string> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_string_lazy")
exception exception_map_string_set_string_lazy {
  1: map<string, set<string>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_string_lazy")
exception exception_map_string_set_i64_lazy {
  1: map<string, set<i64>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_string_set_i64_lazy")
exception exception_map_i64_set_string_lazy {
  1: map<i64, set<string>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_string_lazy")
exception exception_map_i64_set_i64_lazy {
  1: map<i64, set<i64>> field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_map_i64_set_i64_lazy")
exception exception_string_lazy {
  1: string field_1 (cpp.experimental.lazy);
} (thrift.uri="facebook.com/thrift/test/testset/exception_string_lazy")
union union_empty {
} (thrift.uri="facebook.com/thrift/test/testset/union_empty")
union union_list_bool {
  1: list<bool> field_1;
  2: list<bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool")
union union_list_byte {
  1: list<byte> field_1;
  2: list<byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte")
union union_list_i16 {
  1: list<i16> field_1;
  2: list<i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16")
union union_list_i32 {
  1: list<i32> field_1;
  2: list<i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32")
union union_list_i64 {
  1: list<i64> field_1;
  2: list<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64")
union union_list_float {
  1: list<float> field_1;
  2: list<float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float")
union union_list_double {
  1: list<double> field_1;
  2: list<double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double")
union union_list_binary {
  1: list<binary> field_1;
  2: list<binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary")
union union_list_string {
  1: list<string> field_1;
  2: list<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string")
union union_set_string {
  1: set<string> field_1;
  2: set<string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string")
union union_set_i64 {
  1: set<i64> field_1;
  2: set<i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64")
union union_map_string_bool {
  1: map<string, bool> field_1;
  2: map<string, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool")
union union_map_string_byte {
  1: map<string, byte> field_1;
  2: map<string, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte")
union union_map_string_i16 {
  1: map<string, i16> field_1;
  2: map<string, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16")
union union_map_string_i32 {
  1: map<string, i32> field_1;
  2: map<string, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32")
union union_map_string_i64 {
  1: map<string, i64> field_1;
  2: map<string, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64")
union union_map_string_float {
  1: map<string, float> field_1;
  2: map<string, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float")
union union_map_string_double {
  1: map<string, double> field_1;
  2: map<string, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double")
union union_map_string_binary {
  1: map<string, binary> field_1;
  2: map<string, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary")
union union_map_string_string {
  1: map<string, string> field_1;
  2: map<string, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string")
union union_map_i64_bool {
  1: map<i64, bool> field_1;
  2: map<i64, bool> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool")
union union_map_i64_byte {
  1: map<i64, byte> field_1;
  2: map<i64, byte> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte")
union union_map_i64_i16 {
  1: map<i64, i16> field_1;
  2: map<i64, i16> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16")
union union_map_i64_i32 {
  1: map<i64, i32> field_1;
  2: map<i64, i32> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32")
union union_map_i64_i64 {
  1: map<i64, i64> field_1;
  2: map<i64, i64> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64")
union union_map_i64_float {
  1: map<i64, float> field_1;
  2: map<i64, float> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float")
union union_map_i64_double {
  1: map<i64, double> field_1;
  2: map<i64, double> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double")
union union_map_i64_binary {
  1: map<i64, binary> field_1;
  2: map<i64, binary> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary")
union union_map_i64_string {
  1: map<i64, string> field_1;
  2: map<i64, string> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string")
union union_map_string_set_string {
  1: map<string, set<string>> field_1;
  2: map<string, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string")
union union_map_string_set_i64 {
  1: map<string, set<i64>> field_1;
  2: map<string, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64")
union union_map_i64_set_string {
  1: map<i64, set<string>> field_1;
  2: map<i64, set<string>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string")
union union_map_i64_set_i64 {
  1: map<i64, set<i64>> field_1;
  2: map<i64, set<i64>> field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64")
union union_list_bool_cpp_ref {
  1: list<bool> field_1 (cpp.ref);
  2: list<bool> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_bool_cpp_ref")
union union_list_byte_cpp_ref {
  1: list<byte> field_1 (cpp.ref);
  2: list<byte> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_byte_cpp_ref")
union union_list_i16_cpp_ref {
  1: list<i16> field_1 (cpp.ref);
  2: list<i16> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i16_cpp_ref")
union union_list_i32_cpp_ref {
  1: list<i32> field_1 (cpp.ref);
  2: list<i32> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i32_cpp_ref")
union union_list_i64_cpp_ref {
  1: list<i64> field_1 (cpp.ref);
  2: list<i64> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_i64_cpp_ref")
union union_list_float_cpp_ref {
  1: list<float> field_1 (cpp.ref);
  2: list<float> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_float_cpp_ref")
union union_list_double_cpp_ref {
  1: list<double> field_1 (cpp.ref);
  2: list<double> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_double_cpp_ref")
union union_list_binary_cpp_ref {
  1: list<binary> field_1 (cpp.ref);
  2: list<binary> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_binary_cpp_ref")
union union_list_string_cpp_ref {
  1: list<string> field_1 (cpp.ref);
  2: list<string> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_list_string_cpp_ref")
union union_set_string_cpp_ref {
  1: set<string> field_1 (cpp.ref);
  2: set<string> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_set_string_cpp_ref")
union union_set_i64_cpp_ref {
  1: set<i64> field_1 (cpp.ref);
  2: set<i64> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_set_i64_cpp_ref")
union union_map_string_bool_cpp_ref {
  1: map<string, bool> field_1 (cpp.ref);
  2: map<string, bool> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_bool_cpp_ref")
union union_map_string_byte_cpp_ref {
  1: map<string, byte> field_1 (cpp.ref);
  2: map<string, byte> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_byte_cpp_ref")
union union_map_string_i16_cpp_ref {
  1: map<string, i16> field_1 (cpp.ref);
  2: map<string, i16> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i16_cpp_ref")
union union_map_string_i32_cpp_ref {
  1: map<string, i32> field_1 (cpp.ref);
  2: map<string, i32> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i32_cpp_ref")
union union_map_string_i64_cpp_ref {
  1: map<string, i64> field_1 (cpp.ref);
  2: map<string, i64> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_i64_cpp_ref")
union union_map_string_float_cpp_ref {
  1: map<string, float> field_1 (cpp.ref);
  2: map<string, float> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_float_cpp_ref")
union union_map_string_double_cpp_ref {
  1: map<string, double> field_1 (cpp.ref);
  2: map<string, double> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_double_cpp_ref")
union union_map_string_binary_cpp_ref {
  1: map<string, binary> field_1 (cpp.ref);
  2: map<string, binary> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_binary_cpp_ref")
union union_map_string_string_cpp_ref {
  1: map<string, string> field_1 (cpp.ref);
  2: map<string, string> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_string_cpp_ref")
union union_map_i64_bool_cpp_ref {
  1: map<i64, bool> field_1 (cpp.ref);
  2: map<i64, bool> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_bool_cpp_ref")
union union_map_i64_byte_cpp_ref {
  1: map<i64, byte> field_1 (cpp.ref);
  2: map<i64, byte> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_byte_cpp_ref")
union union_map_i64_i16_cpp_ref {
  1: map<i64, i16> field_1 (cpp.ref);
  2: map<i64, i16> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i16_cpp_ref")
union union_map_i64_i32_cpp_ref {
  1: map<i64, i32> field_1 (cpp.ref);
  2: map<i64, i32> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i32_cpp_ref")
union union_map_i64_i64_cpp_ref {
  1: map<i64, i64> field_1 (cpp.ref);
  2: map<i64, i64> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_i64_cpp_ref")
union union_map_i64_float_cpp_ref {
  1: map<i64, float> field_1 (cpp.ref);
  2: map<i64, float> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_float_cpp_ref")
union union_map_i64_double_cpp_ref {
  1: map<i64, double> field_1 (cpp.ref);
  2: map<i64, double> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_double_cpp_ref")
union union_map_i64_binary_cpp_ref {
  1: map<i64, binary> field_1 (cpp.ref);
  2: map<i64, binary> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_binary_cpp_ref")
union union_map_i64_string_cpp_ref {
  1: map<i64, string> field_1 (cpp.ref);
  2: map<i64, string> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_string_cpp_ref")
union union_map_string_set_string_cpp_ref {
  1: map<string, set<string>> field_1 (cpp.ref);
  2: map<string, set<string>> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_string_cpp_ref")
union union_map_string_set_i64_cpp_ref {
  1: map<string, set<i64>> field_1 (cpp.ref);
  2: map<string, set<i64>> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_string_set_i64_cpp_ref")
union union_map_i64_set_string_cpp_ref {
  1: map<i64, set<string>> field_1 (cpp.ref);
  2: map<i64, set<string>> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_string_cpp_ref")
union union_map_i64_set_i64_cpp_ref {
  1: map<i64, set<i64>> field_1 (cpp.ref);
  2: map<i64, set<i64>> field_2 (cpp.ref);
} (thrift.uri="facebook.com/thrift/test/testset/union_map_i64_set_i64_cpp_ref")
union union_bool {
  1: bool field_1;
  2: bool field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_bool")
union union_byte {
  1: byte field_1;
  2: byte field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_byte")
union union_i16 {
  1: i16 field_1;
  2: i16 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i16")
union union_i32 {
  1: i32 field_1;
  2: i32 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i32")
union union_i64 {
  1: i64 field_1;
  2: i64 field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_i64")
union union_float {
  1: float field_1;
  2: float field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_float")
union union_double {
  1: double field_1;
  2: double field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_double")
union union_binary {
  1: binary field_1;
  2: binary field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_binary")
union union_string {
  1: string field_1;
  2: string field_2;
} (thrift.uri="facebook.com/thrift/test/testset/union_string")
struct struct_all {
  1: struct_empty field_1;
  2: struct_list_bool field_2;
  3: struct_list_byte field_3;
  4: struct_list_i16 field_4;
  5: struct_list_i32 field_5;
  6: struct_list_i64 field_6;
  7: struct_list_float field_7;
  8: struct_list_double field_8;
  9: struct_list_binary field_9;
  10: struct_list_string field_10;
  11: struct_set_string field_11;
  12: struct_set_i64 field_12;
  13: struct_map_string_bool field_13;
  14: struct_map_string_byte field_14;
  15: struct_map_string_i16 field_15;
  16: struct_map_string_i32 field_16;
  17: struct_map_string_i64 field_17;
  18: struct_map_string_float field_18;
  19: struct_map_string_double field_19;
  20: struct_map_string_binary field_20;
  21: struct_map_string_string field_21;
  22: struct_map_i64_bool field_22;
  23: struct_map_i64_byte field_23;
  24: struct_map_i64_i16 field_24;
  25: struct_map_i64_i32 field_25;
  26: struct_map_i64_i64 field_26;
  27: struct_map_i64_float field_27;
  28: struct_map_i64_double field_28;
  29: struct_map_i64_binary field_29;
  30: struct_map_i64_string field_30;
  31: struct_map_string_set_string field_31;
  32: struct_map_string_set_i64 field_32;
  33: struct_map_i64_set_string field_33;
  34: struct_map_i64_set_i64 field_34;
  35: struct_list_bool_cpp_ref field_35;
  36: struct_list_byte_cpp_ref field_36;
  37: struct_list_i16_cpp_ref field_37;
  38: struct_list_i32_cpp_ref field_38;
  39: struct_list_i64_cpp_ref field_39;
  40: struct_list_float_cpp_ref field_40;
  41: struct_list_double_cpp_ref field_41;
  42: struct_list_binary_cpp_ref field_42;
  43: struct_list_string_cpp_ref field_43;
  44: struct_set_string_cpp_ref field_44;
  45: struct_set_i64_cpp_ref field_45;
  46: struct_map_string_bool_cpp_ref field_46;
  47: struct_map_string_byte_cpp_ref field_47;
  48: struct_map_string_i16_cpp_ref field_48;
  49: struct_map_string_i32_cpp_ref field_49;
  50: struct_map_string_i64_cpp_ref field_50;
  51: struct_map_string_float_cpp_ref field_51;
  52: struct_map_string_double_cpp_ref field_52;
  53: struct_map_string_binary_cpp_ref field_53;
  54: struct_map_string_string_cpp_ref field_54;
  55: struct_map_i64_bool_cpp_ref field_55;
  56: struct_map_i64_byte_cpp_ref field_56;
  57: struct_map_i64_i16_cpp_ref field_57;
  58: struct_map_i64_i32_cpp_ref field_58;
  59: struct_map_i64_i64_cpp_ref field_59;
  60: struct_map_i64_float_cpp_ref field_60;
  61: struct_map_i64_double_cpp_ref field_61;
  62: struct_map_i64_binary_cpp_ref field_62;
  63: struct_map_i64_string_cpp_ref field_63;
  64: struct_map_string_set_string_cpp_ref field_64;
  65: struct_map_string_set_i64_cpp_ref field_65;
  66: struct_map_i64_set_string_cpp_ref field_66;
  67: struct_map_i64_set_i64_cpp_ref field_67;
  68: struct_bool field_68;
  69: struct_byte field_69;
  70: struct_i16 field_70;
  71: struct_i32 field_71;
  72: struct_i64 field_72;
  73: struct_float field_73;
  74: struct_double field_74;
  75: struct_binary field_75;
  76: struct_string field_76;
  77: struct_optional_list_bool field_77;
  78: struct_optional_list_byte field_78;
  79: struct_optional_list_i16 field_79;
  80: struct_optional_list_i32 field_80;
  81: struct_optional_list_i64 field_81;
  82: struct_optional_list_float field_82;
  83: struct_optional_list_double field_83;
  84: struct_optional_list_binary field_84;
  85: struct_optional_list_string field_85;
  86: struct_optional_set_string field_86;
  87: struct_optional_set_i64 field_87;
  88: struct_optional_map_string_bool field_88;
  89: struct_optional_map_string_byte field_89;
  90: struct_optional_map_string_i16 field_90;
  91: struct_optional_map_string_i32 field_91;
  92: struct_optional_map_string_i64 field_92;
  93: struct_optional_map_string_float field_93;
  94: struct_optional_map_string_double field_94;
  95: struct_optional_map_string_binary field_95;
  96: struct_optional_map_string_string field_96;
  97: struct_optional_map_i64_bool field_97;
  98: struct_optional_map_i64_byte field_98;
  99: struct_optional_map_i64_i16 field_99;
  100: struct_optional_map_i64_i32 field_100;
  101: struct_optional_map_i64_i64 field_101;
  102: struct_optional_map_i64_float field_102;
  103: struct_optional_map_i64_double field_103;
  104: struct_optional_map_i64_binary field_104;
  105: struct_optional_map_i64_string field_105;
  106: struct_optional_map_string_set_string field_106;
  107: struct_optional_map_string_set_i64 field_107;
  108: struct_optional_map_i64_set_string field_108;
  109: struct_optional_map_i64_set_i64 field_109;
  110: struct_optional_list_bool_cpp_ref field_110;
  111: struct_optional_list_byte_cpp_ref field_111;
  112: struct_optional_list_i16_cpp_ref field_112;
  113: struct_optional_list_i32_cpp_ref field_113;
  114: struct_optional_list_i64_cpp_ref field_114;
  115: struct_optional_list_float_cpp_ref field_115;
  116: struct_optional_list_double_cpp_ref field_116;
  117: struct_optional_list_binary_cpp_ref field_117;
  118: struct_optional_list_string_cpp_ref field_118;
  119: struct_optional_set_string_cpp_ref field_119;
  120: struct_optional_set_i64_cpp_ref field_120;
  121: struct_optional_map_string_bool_cpp_ref field_121;
  122: struct_optional_map_string_byte_cpp_ref field_122;
  123: struct_optional_map_string_i16_cpp_ref field_123;
  124: struct_optional_map_string_i32_cpp_ref field_124;
  125: struct_optional_map_string_i64_cpp_ref field_125;
  126: struct_optional_map_string_float_cpp_ref field_126;
  127: struct_optional_map_string_double_cpp_ref field_127;
  128: struct_optional_map_string_binary_cpp_ref field_128;
  129: struct_optional_map_string_string_cpp_ref field_129;
  130: struct_optional_map_i64_bool_cpp_ref field_130;
  131: struct_optional_map_i64_byte_cpp_ref field_131;
  132: struct_optional_map_i64_i16_cpp_ref field_132;
  133: struct_optional_map_i64_i32_cpp_ref field_133;
  134: struct_optional_map_i64_i64_cpp_ref field_134;
  135: struct_optional_map_i64_float_cpp_ref field_135;
  136: struct_optional_map_i64_double_cpp_ref field_136;
  137: struct_optional_map_i64_binary_cpp_ref field_137;
  138: struct_optional_map_i64_string_cpp_ref field_138;
  139: struct_optional_map_string_set_string_cpp_ref field_139;
  140: struct_optional_map_string_set_i64_cpp_ref field_140;
  141: struct_optional_map_i64_set_string_cpp_ref field_141;
  142: struct_optional_map_i64_set_i64_cpp_ref field_142;
  143: struct_optional_bool field_143;
  144: struct_optional_byte field_144;
  145: struct_optional_i16 field_145;
  146: struct_optional_i32 field_146;
  147: struct_optional_i64 field_147;
  148: struct_optional_float field_148;
  149: struct_optional_double field_149;
  150: struct_optional_binary field_150;
  151: struct_optional_string field_151;
  152: struct_required_list_bool field_152;
  153: struct_required_list_byte field_153;
  154: struct_required_list_i16 field_154;
  155: struct_required_list_i32 field_155;
  156: struct_required_list_i64 field_156;
  157: struct_required_list_float field_157;
  158: struct_required_list_double field_158;
  159: struct_required_list_binary field_159;
  160: struct_required_list_string field_160;
  161: struct_required_set_string field_161;
  162: struct_required_set_i64 field_162;
  163: struct_required_map_string_bool field_163;
  164: struct_required_map_string_byte field_164;
  165: struct_required_map_string_i16 field_165;
  166: struct_required_map_string_i32 field_166;
  167: struct_required_map_string_i64 field_167;
  168: struct_required_map_string_float field_168;
  169: struct_required_map_string_double field_169;
  170: struct_required_map_string_binary field_170;
  171: struct_required_map_string_string field_171;
  172: struct_required_map_i64_bool field_172;
  173: struct_required_map_i64_byte field_173;
  174: struct_required_map_i64_i16 field_174;
  175: struct_required_map_i64_i32 field_175;
  176: struct_required_map_i64_i64 field_176;
  177: struct_required_map_i64_float field_177;
  178: struct_required_map_i64_double field_178;
  179: struct_required_map_i64_binary field_179;
  180: struct_required_map_i64_string field_180;
  181: struct_required_map_string_set_string field_181;
  182: struct_required_map_string_set_i64 field_182;
  183: struct_required_map_i64_set_string field_183;
  184: struct_required_map_i64_set_i64 field_184;
  185: struct_required_list_bool_cpp_ref field_185;
  186: struct_required_list_byte_cpp_ref field_186;
  187: struct_required_list_i16_cpp_ref field_187;
  188: struct_required_list_i32_cpp_ref field_188;
  189: struct_required_list_i64_cpp_ref field_189;
  190: struct_required_list_float_cpp_ref field_190;
  191: struct_required_list_double_cpp_ref field_191;
  192: struct_required_list_binary_cpp_ref field_192;
  193: struct_required_list_string_cpp_ref field_193;
  194: struct_required_set_string_cpp_ref field_194;
  195: struct_required_set_i64_cpp_ref field_195;
  196: struct_required_map_string_bool_cpp_ref field_196;
  197: struct_required_map_string_byte_cpp_ref field_197;
  198: struct_required_map_string_i16_cpp_ref field_198;
  199: struct_required_map_string_i32_cpp_ref field_199;
  200: struct_required_map_string_i64_cpp_ref field_200;
  201: struct_required_map_string_float_cpp_ref field_201;
  202: struct_required_map_string_double_cpp_ref field_202;
  203: struct_required_map_string_binary_cpp_ref field_203;
  204: struct_required_map_string_string_cpp_ref field_204;
  205: struct_required_map_i64_bool_cpp_ref field_205;
  206: struct_required_map_i64_byte_cpp_ref field_206;
  207: struct_required_map_i64_i16_cpp_ref field_207;
  208: struct_required_map_i64_i32_cpp_ref field_208;
  209: struct_required_map_i64_i64_cpp_ref field_209;
  210: struct_required_map_i64_float_cpp_ref field_210;
  211: struct_required_map_i64_double_cpp_ref field_211;
  212: struct_required_map_i64_binary_cpp_ref field_212;
  213: struct_required_map_i64_string_cpp_ref field_213;
  214: struct_required_map_string_set_string_cpp_ref field_214;
  215: struct_required_map_string_set_i64_cpp_ref field_215;
  216: struct_required_map_i64_set_string_cpp_ref field_216;
  217: struct_required_map_i64_set_i64_cpp_ref field_217;
  218: struct_required_bool field_218;
  219: struct_required_byte field_219;
  220: struct_required_i16 field_220;
  221: struct_required_i32 field_221;
  222: struct_required_i64 field_222;
  223: struct_required_float field_223;
  224: struct_required_double field_224;
  225: struct_required_binary field_225;
  226: struct_required_string field_226;
  227: struct_list_bool_lazy field_227;
  228: struct_list_byte_lazy field_228;
  229: struct_list_i16_lazy field_229;
  230: struct_list_i32_lazy field_230;
  231: struct_list_i64_lazy field_231;
  232: struct_list_float_lazy field_232;
  233: struct_list_double_lazy field_233;
  234: struct_list_binary_lazy field_234;
  235: struct_list_string_lazy field_235;
  236: struct_set_string_lazy field_236;
  237: struct_set_i64_lazy field_237;
  238: struct_map_string_bool_lazy field_238;
  239: struct_map_string_byte_lazy field_239;
  240: struct_map_string_i16_lazy field_240;
  241: struct_map_string_i32_lazy field_241;
  242: struct_map_string_i64_lazy field_242;
  243: struct_map_string_float_lazy field_243;
  244: struct_map_string_double_lazy field_244;
  245: struct_map_string_binary_lazy field_245;
  246: struct_map_string_string_lazy field_246;
  247: struct_map_i64_bool_lazy field_247;
  248: struct_map_i64_byte_lazy field_248;
  249: struct_map_i64_i16_lazy field_249;
  250: struct_map_i64_i32_lazy field_250;
  251: struct_map_i64_i64_lazy field_251;
  252: struct_map_i64_float_lazy field_252;
  253: struct_map_i64_double_lazy field_253;
  254: struct_map_i64_binary_lazy field_254;
  255: struct_map_i64_string_lazy field_255;
  256: struct_map_string_set_string_lazy field_256;
  257: struct_map_string_set_i64_lazy field_257;
  258: struct_map_i64_set_string_lazy field_258;
  259: struct_map_i64_set_i64_lazy field_259;
  260: struct_string_lazy field_260;
  261: union_empty field_261;
  262: union_list_bool field_262;
  263: union_list_byte field_263;
  264: union_list_i16 field_264;
  265: union_list_i32 field_265;
  266: union_list_i64 field_266;
  267: union_list_float field_267;
  268: union_list_double field_268;
  269: union_list_binary field_269;
  270: union_list_string field_270;
  271: union_set_string field_271;
  272: union_set_i64 field_272;
  273: union_map_string_bool field_273;
  274: union_map_string_byte field_274;
  275: union_map_string_i16 field_275;
  276: union_map_string_i32 field_276;
  277: union_map_string_i64 field_277;
  278: union_map_string_float field_278;
  279: union_map_string_double field_279;
  280: union_map_string_binary field_280;
  281: union_map_string_string field_281;
  282: union_map_i64_bool field_282;
  283: union_map_i64_byte field_283;
  284: union_map_i64_i16 field_284;
  285: union_map_i64_i32 field_285;
  286: union_map_i64_i64 field_286;
  287: union_map_i64_float field_287;
  288: union_map_i64_double field_288;
  289: union_map_i64_binary field_289;
  290: union_map_i64_string field_290;
  291: union_map_string_set_string field_291;
  292: union_map_string_set_i64 field_292;
  293: union_map_i64_set_string field_293;
  294: union_map_i64_set_i64 field_294;
  295: union_list_bool_cpp_ref field_295;
  296: union_list_byte_cpp_ref field_296;
  297: union_list_i16_cpp_ref field_297;
  298: union_list_i32_cpp_ref field_298;
  299: union_list_i64_cpp_ref field_299;
  300: union_list_float_cpp_ref field_300;
  301: union_list_double_cpp_ref field_301;
  302: union_list_binary_cpp_ref field_302;
  303: union_list_string_cpp_ref field_303;
  304: union_set_string_cpp_ref field_304;
  305: union_set_i64_cpp_ref field_305;
  306: union_map_string_bool_cpp_ref field_306;
  307: union_map_string_byte_cpp_ref field_307;
  308: union_map_string_i16_cpp_ref field_308;
  309: union_map_string_i32_cpp_ref field_309;
  310: union_map_string_i64_cpp_ref field_310;
  311: union_map_string_float_cpp_ref field_311;
  312: union_map_string_double_cpp_ref field_312;
  313: union_map_string_binary_cpp_ref field_313;
  314: union_map_string_string_cpp_ref field_314;
  315: union_map_i64_bool_cpp_ref field_315;
  316: union_map_i64_byte_cpp_ref field_316;
  317: union_map_i64_i16_cpp_ref field_317;
  318: union_map_i64_i32_cpp_ref field_318;
  319: union_map_i64_i64_cpp_ref field_319;
  320: union_map_i64_float_cpp_ref field_320;
  321: union_map_i64_double_cpp_ref field_321;
  322: union_map_i64_binary_cpp_ref field_322;
  323: union_map_i64_string_cpp_ref field_323;
  324: union_map_string_set_string_cpp_ref field_324;
  325: union_map_string_set_i64_cpp_ref field_325;
  326: union_map_i64_set_string_cpp_ref field_326;
  327: union_map_i64_set_i64_cpp_ref field_327;
  328: union_bool field_328;
  329: union_byte field_329;
  330: union_i16 field_330;
  331: union_i32 field_331;
  332: union_i64 field_332;
  333: union_float field_333;
  334: union_double field_334;
  335: union_binary field_335;
  336: union_string field_336;
} (thrift.uri="facebook.com/thrift/test/testset/struct_all")
